{"version":3,"file":"atui-tree.js","sourceRoot":"","sources":["../../../src/components/atui-tree/atui-tree.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { ButtonSize } from '../atui-button/atui-button';\nimport { TreeNode } from '../../types/tree';\n\n/**\n * @category Navigation\n * @description A tree component for displaying hierarchical data.\n */\n\n/**\n * ### ```interface ItemNode```\n * ```\n *  id: string;\n *  displayName: string;\n *  children: ItemNode[];\n *  isSelected?: boolean;\n *  tooltip?: string;\n * ```\n */\n@Component({\n    tag: 'atui-tree',\n    shadow: false,\n})\nexport class AtuiTreeComponent {\n    /**\n     * List of items to be displayed in the tree\n     */\n    @Prop({ mutable: true })\n    item_list: TreeNode[];\n\n    /**\n     * Set the size of the tree button, default sm\n     */\n    @Prop()\n    size: ButtonSize = 'sm';\n\n    /**\n     * Emits when the button is clicked\n     */\n    @Event()\n    atuiClick: EventEmitter<TreeNode>;\n\n    @State() flattenedItemList: Array<TreeNode> = [];\n    @State() flattenedItemStyles = [];\n\n    handleClick = (id: string) => {\n        let clickedItem: TreeNode | null = null;\n\n        const updateIsSelected = (items: TreeNode[]): TreeNode[] => {\n            const tempItems: TreeNode[] = [];\n\n            items.forEach((item) => {\n                const tempItem = { ...item };\n\n                if (item.id === id) {\n                    tempItem.selected = !tempItem.selected;\n                    clickedItem = tempItem;\n                }\n\n                if (item.children) {\n                    tempItem.children = updateIsSelected(item.children);\n                }\n\n                tempItems.push(tempItem);\n            });\n\n            return tempItems;\n        };\n\n        this.item_list = updateIsSelected(this.item_list);\n        this.flattenItemList(this.item_list);\n\n        if (clickedItem) {\n            this.atuiClick.emit(clickedItem);\n        }\n    };\n\n    flattenItemList = (itemList: TreeNode[]) => {\n        const tempItemList: TreeNode[] = [];\n\n        const addToFlattenedAndCheckChildren = (\n            items: TreeNode[],\n            layer: number,\n        ) => {\n            items.forEach((item) => {\n                const itemWithDepth = { ...item, depth: layer };\n                tempItemList.push(itemWithDepth);\n\n                if (item.selected && item.children && item.children.length) {\n                    addToFlattenedAndCheckChildren(item.children, layer + 1);\n                }\n            });\n        };\n\n        addToFlattenedAndCheckChildren(itemList, 0);\n        this.flattenedItemList = tempItemList;\n    };\n\n    componentWillRender() {\n        if (this.item_list && this.item_list.length) {\n            this.flattenItemList(this.item_list);\n        }\n    }\n\n    render() {\n        return (\n            <div class=\"w-full\">\n                <slot />\n                {this.flattenedItemList &&\n                    this.flattenedItemList.map((item, index) => (\n                        <div\n                            key={index}\n                            class={`flex w-full`}\n                        >\n                            {item.tooltip !== undefined ? (\n                                <atui-tooltip\n                                    position=\"right\"\n                                    class=\"flex flex-grow items-start\"\n                                >\n                                    <atui-tree-item\n                                        class=\"flex-grow\"\n                                        depth={item.depth}\n                                        slot=\"tooltip-trigger\"\n                                        onAtuiClick={() =>\n                                            this.handleClick(item.id)\n                                        }\n                                        key={item.id}\n                                        label={item.displayName}\n                                        size={this.size}\n                                        has_children={\n                                            item.children &&\n                                            item.children.length > 0\n                                        }\n                                        selected={item.selected}\n                                    >\n                                        <slot name=\"item-content\"></slot>\n                                    </atui-tree-item>\n\n                                    <span slot=\"tooltip-content\">\n                                        {item.tooltip}\n                                    </span>\n                                </atui-tooltip>\n                            ) : (\n                                <atui-tree-item\n                                    depth={item.depth}\n                                    style={{\n                                        paddingLeft:\n                                            this.flattenedItemStyles[index] +\n                                            'px',\n                                    }}\n                                    onAtuiClick={() =>\n                                        this.handleClick(item.id)\n                                    }\n                                    has_children={\n                                        item.children &&\n                                        item.children.length > 0\n                                    }\n                                    key={item.id}\n                                    label={item.displayName}\n                                    size={this.size}\n                                >\n                                    <slot name=\"item-content\"></slot>\n                                </atui-tree-item>\n                            )}\n                        </div>\n                    ))}\n            </div>\n        );\n    }\n}\n"]}