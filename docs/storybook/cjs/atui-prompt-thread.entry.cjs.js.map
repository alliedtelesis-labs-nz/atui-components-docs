{"version":3,"file":"atui-prompt-thread.entry.cjs.js","sources":["src/components/prompt/atui-prompt-thread/atui-prompt-thread.tsx"],"sourcesContent":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Listen,\n} from '@stencil/core';\nimport { PromptMessage } from '../../../types/prompt';\n\n/**\n * @category Prompt\n * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.\n */\n@Component({\n    tag: 'atui-prompt-thread',\n    shadow: false,\n})\nexport class AtuiPromptThread {\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop() messages: PromptMessage[] = [];\n\n    /**\n     * Shows a loading indicator for incoming messages\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Title text displayed when no messages are present\n     */\n    @Prop() empty_state_title: string = 'No messages yet';\n\n    /**\n     * Description text displayed when no messages are present\n     */\n    @Prop() empty_state_description: string =\n        'Start a conversation by sending a message';\n\n    /**\n     * Automatically scroll to the bottom when new messages are added\n     */\n    @Prop() auto_scroll: boolean = true;\n\n    /**\n     * Display name for chatbot/assistant messages\n     */\n    @Prop() chatbot_title: string = 'Assistant';\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atuiMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atuiMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atuiMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * @slot messages - Custom message content (alternative to using the messages prop)\n     */\n\n    private threadContainer: HTMLElement;\n\n    componentDidUpdate() {\n        if (this.auto_scroll && this.threadContainer) {\n            this.scrollToBottom();\n        }\n    }\n\n    private scrollToBottom(): void {\n        if (this.threadContainer) {\n            this.threadContainer.scrollTop = this.threadContainer.scrollHeight;\n        }\n    }\n\n    @Listen('atuiCopy')\n    handleMessageCopy(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageCopy.emit({\n                messageId: `msg-${messageIndex}`,\n                content: event.detail,\n            });\n        }\n    }\n\n    @Listen('atuiRetry')\n    handleMessageRetry(event: CustomEvent<void>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageRetry.emit({\n                messageId: `msg-${messageIndex}`,\n            });\n        }\n    }\n\n    @Listen('atuiEdit')\n    handleMessageEdit(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageEdit.emit({\n                messageId: `msg-${messageIndex}`,\n                content: event.detail,\n            });\n        }\n    }\n\n    private getMessageIndexFromEvent(event: CustomEvent): number {\n        const target = event.target as HTMLElement;\n        const messageContainer = target.closest(\n            '[data-message-index]',\n        ) as HTMLElement;\n        return messageContainer\n            ? parseInt(messageContainer.dataset.messageIndex || '-1', 10)\n            : -1;\n    }\n\n    private renderLoadingIndicator() {\n        if (!this.loading) return null;\n\n        return (\n            <div\n                class=\"flex flex-col gap-16\"\n                data-name=\"loading-container\"\n            >\n                <atui-prompt-message\n                    role=\"assistant\"\n                    content=\"Typing...\"\n                    name={this.chatbot_title}\n                    loading={true}\n                    data-name=\"loading-message\"\n                />\n            </div>\n        );\n    }\n\n    private renderEmptyState() {\n        return (\n            <div\n                class=\"flex h-full flex-col items-center justify-center p-8 text-center\"\n                data-name=\"empty-state\"\n            >\n                <div class=\"text-muted-foreground text-4xl mb-4\">ðŸ’¬</div>\n                <h3\n                    class=\"text-lg mb-2 font-semibold\"\n                    data-name=\"empty-state-title\"\n                >\n                    {this.empty_state_title}\n                </h3>\n                <p\n                    class=\"text-muted-foreground text-sm\"\n                    data-name=\"empty-state-description\"\n                >\n                    {this.empty_state_description}\n                </p>\n            </div>\n        );\n    }\n\n    private renderMessage(message: PromptMessage, index: number) {\n        const role = message.role === 'system' ? 'assistant' : message.role;\n        const name =\n            message.role === 'user'\n                ? message.name\n                : message.name || this.chatbot_title;\n\n        return (\n            <div data-message-index={index}>\n                <atui-prompt-message\n                    role={role}\n                    content={message.content}\n                    name={name}\n                    avatar={message.avatar}\n                    loading={message.loading}\n                    error={message.error}\n                    error_message={message.error_message}\n                    data-name={`message-${index}`}\n                />\n            </div>\n        );\n    }\n\n    private renderMessages() {\n        return this.messages.map((message, index) => (\n            <div\n                key={index}\n                class=\"flex flex-col gap-16 p-16 pb-0\"\n                data-name=\"message-container\"\n            >\n                {this.renderMessage(message, index)}\n            </div>\n        ));\n    }\n\n    render() {\n        const hasMessages = this.messages && this.messages.length > 0;\n\n        return (\n            <Host\n                class=\"block h-full overflow-y-auto scroll-smooth pb-32\"\n                ref={(el) => (this.threadContainer = el)}\n                data-name=\"thread-container\"\n            >\n                {!hasMessages ? (\n                    this.renderEmptyState()\n                ) : (\n                    <div data-name=\"messages-container\">\n                        {this.renderMessages()}\n                        {this.renderLoadingIndicator()}\n                    </div>\n                )}\n                <slot name=\"messages\" />\n            </Host>\n        );\n    }\n}\n"],"names":["h","index","Host"],"mappings":"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"}