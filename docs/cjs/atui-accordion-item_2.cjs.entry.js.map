{"file":"atui-accordion-item.atui-accordion-trigger.entry.cjs.js","mappings":"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","names":["h","Host"],"sources":["src/components/atui-accordion/atui-accordion-item/atui-accordion-item.tsx","src/components/atui-accordion/atui-accordion-item/atui-accordion-trigger/atui-accordion-trigger.tsx"],"sourcesContent":["import {\n    Component,\n    Prop,\n    Element,\n    Method,\n    h,\n    Host,\n    EventEmitter,\n    Event,\n} from '@stencil/core';\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot accordion-trigger - Used for placing the atui-accordion-trigger for this accordion item. Only use if not using the 'label' prop on this element.\n * @slot accordion-content - Used for placing the content for this accordion item.\n */\n@Component({\n    tag: 'atui-accordion-item',\n    shadow: false,\n})\nexport class AtuiAccordionItemComponent {\n    @Element() el: HTMLElement;\n    /**\n     * Used to identify the accordion item among the other accordion items\n     */\n    @Prop() item_id!: string;\n\n    /**\n     * Provides an atui-accordion-trigger with this label if set\n     */\n    @Prop() label: string;\n\n    /**\n     * Puts a light gray separator below the accordion item\n     */\n    @Prop() border: boolean = true;\n\n    /**\n     * String content to display when the accordion is open\n     */\n    @Prop() content: string;\n\n    /**\n     * Used for setting if the accordion is open.\n     */\n    @Prop({ mutable: true }) open: boolean = false;\n\n    @Event() atuiAccordionChange: EventEmitter<boolean>;\n\n    private accordionElement: HTMLDetailsElement;\n\n    componentDidLoad() {\n        this.accordionElement = this.el.querySelector('details');\n    }\n\n    private async handleSummaryInteraction(event: Event) {\n        if (event.type === 'click' || event.type === 'touchend') {\n            event.preventDefault();\n            if (this.open) {\n                await this.closeAccordion();\n            } else {\n                await this.openAccordion();\n            }\n        }\n    }\n\n    /**\n     * Opens this accordion item\n     */\n    @Method()\n    async openAccordion(): Promise<void> {\n        if (this.open) return;\n        this.accordionElement.open = true;\n        this.open = true;\n        this.atuiAccordionChange.emit(this.open);\n    }\n\n    /**\n     * Closes this accordion item\n     */\n    @Method()\n    async closeAccordion(): Promise<void> {\n        if (!this.open) return;\n        this.accordionElement.open = false;\n        this.open = false;\n        this.atuiAccordionChange.emit(this.open);\n    }\n\n    /**\n     * Return the accordion items open state\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.open;\n    }\n\n    render() {\n        return (\n            <Host\n                data-name={this.item_id}\n                data-state={this.open ? 'expanded' : 'collapsed'}\n            >\n                <details\n                    class={`group/accordion-item'}`}\n                    ref={(el) =>\n                        (this.accordionElement = el as HTMLDetailsElement)\n                    }\n                    role=\"group\"\n                    open={this.open}\n                >\n                    <summary\n                        id={`trigger-${this.item_id}`}\n                        role=\"button\"\n                        aria-expanded={this.open}\n                        data-state={this.open ? 'expanded' : 'collapsed'}\n                        class=\"group/accordion-item flex rounded-sm outline-0 focus-within:ring-2 focus-within:ring-active-foreground/30\"\n                        onClick={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        onTouchEnd={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        aria-controls={`content-${this.item_id}`}\n                    >\n                        {this.label && (\n                            <atui-accordion-trigger\n                                label={this.label}\n                            ></atui-accordion-trigger>\n                        )}\n                        <slot name=\"accordion-trigger\" />\n                    </summary>\n                    <div\n                        id={`content-${this.item_id}`}\n                        aria-labelledby={`trigger-${this.item_id}`}\n                        hidden={!this.open}\n                        data-name=\"accordion-item-content\"\n                    >\n                        {this.content && (\n                            <div class=\"flex flex-col p-16 leading-normal\">\n                                {this.content}\n                            </div>\n                        )}\n                        <slot name=\"accordion-content\" />\n                    </div>\n                </details>\n            </Host>\n        );\n    }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\n\n/**\n * @slot - Content placed inside of the trigger, after the 'label' prop if one is provided\n */\n@Component({\n    tag: 'atui-accordion-trigger',\n})\nexport class AtuiAccordionTriggerComponent {\n    /**\n     * Text to display on the trigger for the accordion item.\n     */\n    @Prop() label: string;\n\n    render() {\n        return (\n            <Host\n                class=\"group flex flex-1 items-center justify-between p-8\"\n                data-name=\"accordion-trigger\"\n            >\n                {this.label && (\n                    <span class=\"flex flex-grow truncate text-sm font-medium group-hover:underline\">\n                        {this.label}\n                    </span>\n                )}\n                <slot />\n                <i\n                    role=\"presentation\"\n                    aria-hidden=\"true\"\n                    class=\"material-icons text-md text-light group-data-[state=expanded]/accordion-item:rotate-180\"\n                >\n                    keyboard_arrow_down\n                </i>\n            </Host>\n        );\n    }\n}\n"],"version":3}