{"version":3,"file":"atui-badge.js","sourceRoot":"","sources":["../../../src/components/atui-badge/atui-badge.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAazD,MAAM,aAAa,GAAG;IAClB,IAAI,EAAE,8EAA8E;IACpF,OAAO,EAAE,cAAc;IACvB,QAAQ,EAAE;QACN,GAAG,EAAE;YACD,OAAO,EAAE,yBAAyB;YAClC,OAAO,EAAE,oCAAoC;YAC7C,OAAO,EAAE,oCAAoC;YAC7C,KAAK,EAAE,4CAA4C;YACnD,IAAI,EAAE,8BAA8B;YACpC,QAAQ,EAAE,2BAA2B;SACxC;QACD,IAAI,EAAE;YACF,OAAO,EAAE,yBAAyB;YAClC,OAAO,EAAE,mCAAmC;YAC5C,OAAO,EAAE,mCAAmC;YAC5C,KAAK,EAAE,uCAAuC;YAC9C,IAAI,EAAE,gCAAgC;YACtC,QAAQ,EAAE,2BAA2B;SACxC;KACJ;IACD,IAAI,EAAE;QACF,EAAE,EAAE,uBAAuB;QAC3B,EAAE,EAAE,mBAAmB;KAC1B;CACJ,CAAC;AAEF;;;;;GAKG;AAMH,MAAM,OAAO,kBAAkB;IAJ/B;QAiBI;;WAEG;QAEH,SAAI,GAAc,SAAS,CAAC;QAE5B;;WAEG;QAEH,SAAI,GAAc,IAAI,CAAC;QAEvB;;WAEG;QAEH,WAAM,GAAkB,KAAK,CAAC;QAE9B;;WAEG;QAEH,YAAO,GAAG,KAAK,CAAC;KAgCnB;IA9BG,IAAI,WAAW;QACX,OAAO,GAAG,aAAa,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAChF,CAAC;IAED,IAAI,cAAc;QACd,OAAO,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,WAAW;QACX,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDACD,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,EAAE;YAEtE,IAAI,CAAC,IAAI,IAAI,CACV,0DACI,KAAK,EAAC,gEAAgE,eAC5D,YAAY,IAErB,IAAI,CAAC,IAAI,CACV,CACP;YACD,0EAAgB,aAAa,IAAE,IAAI,CAAC,KAAK,CAAQ;YACjD,8DAAQ,CACL,CACV,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\n\nexport type BadgeType =\n    | 'default'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'disabled';\nexport type BadgeContrast = 'high' | 'low';\n\nexport type BadgeSize = 'lg' | 'sm';\n\nconst badgeVariants = {\n    base: 'inline-block rounded-[4px] font-normal whitespace-nowrap leading-[0.9286rem]',\n    rounded: 'rounded-full',\n    contrast: {\n        low: {\n            default: 'text-light bg-surface-2',\n            success: 'text-success-foreground bg-success',\n            warning: 'text-warning-foreground bg-warning',\n            error: 'text-destructive-foreground bg-destructive',\n            info: 'text-info-foreground bg-info',\n            disabled: 'text-disabled bg-disabled',\n        },\n        high: {\n            default: 'text-impact bg-gray-600',\n            success: 'text-impact bg-success-foreground',\n            warning: 'text-impact bg-warning-foreground',\n            error: 'text-impact bg-destructive-foreground',\n            info: 'text-impact bg-info-foreground',\n            disabled: 'text-disabled bg-disabled',\n        },\n    },\n    size: {\n        lg: 'py-4 px-[6px] text-sm',\n        sm: 'py-2 px-4 text-xs',\n    },\n};\n\n/**\n * @category Feedback\n * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.\n *\n * @slot - Content placed after the label\n */\n\n@Component({\n    tag: 'atui-badge',\n    shadow: false,\n})\nexport class AtuiBadgeComponent {\n    /**\n     * Icon appearing to the left of the badge title. MUST use mat-icon name.\n     */\n    @Prop()\n    icon?: string;\n\n    /**\n     * Title shown on the badge.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Type of the badge. Determines colour theming.\n     */\n    @Prop()\n    type: BadgeType = 'default';\n\n    /**\n     * Size of the badge. Determines padding and font-size. For use in input chip lists.\n     */\n    @Prop()\n    size: BadgeSize = 'lg';\n\n    /**\n     * Impact of the badge, changes the colours.\n     */\n    @Prop()\n    impact: BadgeContrast = 'low';\n\n    /**\n     * Boolean value to round the edges of the badge.\n     */\n    @Prop()\n    rounded = false;\n\n    get baseClasses(): string {\n        return `${badgeVariants.base} ${this.rounded ? badgeVariants.rounded : ''}`;\n    }\n\n    get variantClasses(): string {\n        return badgeVariants.contrast[this.impact][this.type];\n    }\n\n    get sizeClasses(): string {\n        return badgeVariants.size[this.size];\n    }\n\n    render() {\n        return (\n            <Host\n                class={`${this.baseClasses} ${this.variantClasses} ${this.sizeClasses}`}\n            >\n                {this.icon && (\n                    <i\n                        class=\"material-icons icon-sm relative my-2 h-[14px] w-[14px] text-sm\"\n                        data-name=\"badge-icon\"\n                    >\n                        {this.icon}\n                    </i>\n                )}\n                <span data-name=\"badge-label\">{this.label}</span>\n                <slot />\n            </Host>\n        );\n    }\n}\n"]}