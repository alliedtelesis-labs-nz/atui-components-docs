{"version":3,"file":"atui-tooltip.js","sourceRoot":"","sources":["../../../src/components/atui-tooltip/atui-tooltip.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Host, Prop, Element } from '@stencil/core';\nimport { cva } from 'class-variance-authority';\n\nexport type TooltipPosition = 'top' | 'bottom' | 'left' | 'right';\n\nconst variants = cva(\n    'z-50box-border pointer-events-none absolute z-modal flex scale-75 whitespace-nowrap rounded bg-disabled-dark px-4 py-2 text-sm text-white opacity-0 transition-[transform,opacity] peer-hover:scale-100 peer-hover:opacity-100',\n    {\n        variants: {\n            open: {\n                true: null,\n                false: 'hidden',\n            },\n        },\n    },\n);\n\n/**\n * @category Overlays\n * @description A tooltip component that displays contextual information when hovering over or focusing on an element. Provides accessible hover/focus behavior with customizable positioning and content.\n *\n * @slot tooltip-trigger - Shows the tooltip when hovered\n * @slot tooltip-content - Content to go inside of the tooltip\n */\n@Component({\n    tag: 'atui-tooltip',\n    shadow: false,\n})\nexport class AtuiTooltipComponent {\n    /**\n     * Position of the tooltip content relative to the atui-tooltip\n     */\n    @Prop()\n    position: TooltipPosition = 'bottom';\n\n    /**\n     * If false, forces the tooltip to hide.\n     * If true, tooltip will show when trigger is hovered\n     */\n    @Prop()\n    is_visible?: boolean = true;\n\n    /**\n     * String representing the 'max-width' style of the tooltip element (e.g., 'auto', '200px', '50%')\n     */\n    @Prop() width?: string = 'auto';\n\n    /**\n     * Offset in pixels from the edge of the trigger element\n     */\n    @Prop() offset?: number = 8;\n\n    @Element() el: HTMLElement;\n    triggerEl: HTMLElement;\n    tooltipEl: HTMLElement;\n\n    componentDidLoad() {\n        window.addEventListener('resize', this.updateTooltipWidth);\n    }\n\n    disconnectedCallback() {\n        window.removeEventListener('resize', this.updateTooltipWidth);\n    }\n\n    updateTooltipWidth = () => {\n        if (!this.tooltipEl) return;\n\n        requestAnimationFrame(() => {\n            if (this.width !== 'auto') {\n                this.tooltipEl.style.maxWidth = `${this.width}px`;\n            }\n        });\n    };\n\n    get positionStyle(): { [key: string]: string } {\n        const offset = this.offset ?? 8;\n        const width = this.width?.trim() || 'auto';\n\n        const baseStyles = {\n            width: width,\n        };\n\n        const positionStyles = {\n            top: {\n                ...baseStyles,\n                bottom: '100%',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                marginBottom: `${offset}px`,\n            },\n            bottom: {\n                ...baseStyles,\n                top: '100%',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                marginTop: `${offset}px`,\n            },\n            left: {\n                ...baseStyles,\n                right: '100%',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                marginRight: `${offset}px`,\n            },\n            right: {\n                ...baseStyles,\n                left: '100%',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                marginLeft: `${offset}px`,\n            },\n        };\n\n        return positionStyles[this.position] || {};\n    }\n\n    render() {\n        const classname = variants({\n            open: this.is_visible,\n        });\n\n        return (\n            <Host class=\"relative inline-block\">\n                <div\n                    class=\"peer contents\"\n                    ref={(el) => (this.triggerEl = el)}\n                >\n                    <slot name=\"tooltip-trigger\" />\n                </div>\n                <div\n                    ref={(el) => (this.tooltipEl = el)}\n                    style={this.positionStyle}\n                    class={classname}\n                >\n                    <slot name=\"tooltip-content\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"]}