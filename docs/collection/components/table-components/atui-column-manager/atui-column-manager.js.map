{"version":3,"file":"atui-column-manager.js","sourceRoot":"","sources":["../../../../src/components/table-components/atui-column-manager/atui-column-manager.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    h,\n    Element,\n    State,\n    Prop,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { ColDef } from 'ag-grid-community';\n\nexport interface ColumnManagerChangeEvent {\n    id: string;\n    checked: boolean;\n}\n\n@Component({\n    tag: 'atui-column-manager',\n    shadow: false,\n})\nexport class AtuiColumnManagerComponent {\n    /**\n     * Column definitions used in your atui-table\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    @Element() el: HTMLElement;\n    @State() translations: any;\n    @State() checkedColumns: string[] = [];\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n        this.initializeCheckedColumns();\n    }\n\n    @Watch('col_defs')\n    colDefsChanged() {\n        this.initializeCheckedColumns();\n    }\n\n    private initializeCheckedColumns() {\n        if (this.col_defs) {\n            this.checkedColumns = this.col_defs\n                .filter((colDef) => colDef.hide !== true)\n                .map((colDef) => colDef.field);\n        }\n    }\n\n    /**\n     * Custom event used by atui-table-actions to perform ag-grid logic\n     *\n     * Emitted when checkbox is clicked\n     */\n    @Event({ eventName: 'atuiChange' })\n    atuiChange: EventEmitter<ColumnManagerChangeEvent>;\n\n    changeHandler(event: CustomEvent<string[]>) {\n        const selectedColumns = event.detail || [];\n\n        const previousColumns = new Set(this.checkedColumns);\n        const currentColumns = new Set(selectedColumns);\n\n        selectedColumns.forEach((columnId) => {\n            if (!previousColumns.has(columnId)) {\n                this.atuiChange.emit({\n                    id: columnId,\n                    checked: true,\n                });\n            }\n        });\n\n        Array.from(previousColumns).forEach((columnId) => {\n            if (!currentColumns.has(columnId)) {\n                this.atuiChange.emit({\n                    id: columnId,\n                    checked: false,\n                });\n            }\n        });\n\n        this.checkedColumns = selectedColumns;\n    }\n\n    render() {\n        return (\n            <atui-menu\n                autoclose={false}\n                width=\"auto\"\n                align=\"end\"\n                portal={true}\n            >\n                <div slot=\"menu-trigger\">\n                    <atui-tooltip position=\"top\">\n                        <atui-button\n                            slot=\"tooltip-trigger\"\n                            type=\"secondaryText\"\n                            icon=\"graphic_eq\"\n                        />\n                        <span slot=\"tooltip-content\">\n                            {this.translations.ATUI.TABLE.MANAGE_COLUMNS}\n                        </span>\n                    </atui-tooltip>\n                </div>\n                <atui-checkbox-group\n                    slot=\"menu-content\"\n                    options={\n                        this.col_defs\n                            ? this.col_defs.map((colDef) => {\n                                  return {\n                                      option_id: colDef.field,\n                                      label: colDef.field,\n                                  };\n                              })\n                            : []\n                    }\n                    value={this.checkedColumns}\n                    onAtuiChange={(event) => this.changeHandler(event)}\n                />\n            </atui-menu>\n        );\n    }\n}\n"]}