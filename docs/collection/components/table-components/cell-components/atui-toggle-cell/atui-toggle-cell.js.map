{"version":3,"file":"atui-toggle-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-toggle-cell/atui-toggle-cell.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAU3E;;;GAGG;AAMH,MAAM,OAAO,cAAc;IAKvB,IAAI,CAAC,MAAkB;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAAkB;QACtB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAGD,aAAa,CAAC,MAAmB;QAC7B,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE,GAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAEO,UAAU,CAAC,QAAa;QAC5B,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE,GAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,yCAAyC;YACjD,2EACI,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EACxC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAClD,cAAc,EAAC,OAAO,EACtB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GACN,CACnB,CACV,CAAC;IACN,CAAC;;;;;;;;;;;;;CACJ","sourcesContent":["import { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { Component, h, Element, State, Host, Listen } from '@stencil/core';\n\nexport interface IToggleCellParams {\n    getLabel: (params: ICellRendererParams) => string;\n    onTrigger: (params: ICellRendererParams) => void;\n    getDisabled?: (data: any) => boolean;\n}\n\ninterface InitParams extends IToggleCellParams, ICellRendererParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a toggle.\n */\n\n@Component({\n    tag: 'atui-toggle-cell',\n    shadow: false,\n})\nexport class AtuiToggleCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n    timer: any;\n\n    init(params: InitParams): void {\n        this.params = params;\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    @Listen('toggleFunction')\n    toggleHandler(change: CustomEvent) {\n        clearTimeout(this.timer);\n        this.params.value = change.detail;\n        this.timer = setTimeout(() => {}, 2000);\n    }\n\n    private updateCell(newValue: any) {\n        clearTimeout(this.timer);\n        this.params.value = newValue;\n        this.timer = setTimeout(() => {}, 2000);\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center leading-[100%]\">\n                <atui-toggle-switch\n                    label={this.params.getLabel(this.params)}\n                    onChange={() => this.params.onTrigger(this.params)}\n                    label_position=\"after\"\n                    value={this.params.value}\n                ></atui-toggle-switch>\n            </Host>\n        );\n    }\n}\n"]}