{"version":3,"file":"atui-search-table.js","sourceRoot":"","sources":["../../../../src/components/table-components/atui-search-table/atui-search-table.tsx"],"names":[],"mappings":"AAAA,OAAO,EACH,SAAS,EACT,CAAC,EACD,IAAI,EACJ,KAAK,EACL,OAAO,EACP,KAAK,EACL,IAAI,EACJ,MAAM,GACT,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAK/D;;;;;GAKG;AAKH,MAAM,OAAO,eAAe;IAJ5B;QA4CI;;WAEG;QAEH,cAAS,GAAY,EAAE,CAAC;QAoBxB;;;WAGG;QAEH,0BAAqB,GAAa,KAAK,CAAC;QAExC;;;WAGG;QAEH,sBAAiB,GAAY,IAAI,CAAC;QAYlC,iBAAY,GAAY,KAAK,CAAC;QAG9B,kBAAa,GAA8B,EAAE,CAAC;QAG9C,oBAAe,GAAoC,EAAE,CAAC;QAGtD,oBAAe,GAAa,EAAE,CAAC;QAG/B,gBAAW,GAAW,EAAE,CAAC;KA2W5B;IAtWG,2BAA2B,CAAC,QAAyC;QACjE,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,iBAAiB;QACnB,IAAI,CAAC,YAAY,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,gBAAgB;QAClB,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,kBAAkB;QACpB,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IAEH,KAAK,CAAC,gBAAgB,CAClB,UAA0B,EAC1B,OAA0B;QAE1B,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACrD,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;YACrC,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CACnC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAClC,CAAC;YACF,IAAI,YAAY,EAAE,CAAC;gBACf,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,EAAE,CAAC;oBACjB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gBACzD,CAAC;gBACD,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;oBACrB,QAAQ,EAAE,CAAC,YAAY,CAAC;oBACxB,KAAK,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,KAAI,KAAK;iBACxC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IAEH,KAAK,CAAC,gBAAgB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC;IAEO,KAAK,CAAC,QAAQ;;QAClB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACtD,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE5B,IAAI,MAAA,IAAI,CAAC,UAAU,0CAAE,KAAK,EAAE,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAChE,CAAC;QACL,CAAC;IACL,CAAC;IAEO,oBAAoB;QACxB,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,OAAO;QAEzB,IAAI,CAAC,MAAM,CAAC,aAAa,CACrB,yBAAyB,EACzB,GAAG,EAAE;YACD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CACP,6CAA6C,EAC7C,UAAU,CACb,CAAC;YACF,OAAO,UAAU,CAAC;QACtB,CAAC,CACJ,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,aAAa,CACrB,wBAAwB,EACxB,CAAC,IAAI,EAAE,EAAE;YACL,IAAI,CAAC,IAAI,CAAC,IAAI;gBAAE,OAAO,IAAI,CAAC;YAE5B,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YACrD,IAAI,WAAW,EAAE,CAAC;gBACd,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;gBAE9C,sEAAsE;gBACtE,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;oBAChD,IAAI,SAAS,CAAC;oBAEd,IACI,MAAM,CAAC,WAAW;wBAClB,OAAO,MAAM,CAAC,WAAW,KAAK,UAAU,EAC1C,CAAC;wBACC,sDAAsD;wBACtD,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;4BAC3B,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,IAAI;4BACJ,MAAM;4BACN,GAAG,EAAE,IAAI,CAAC,MAAM;4BAChB,OAAO,EAAE,IAAI;4BACb,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;4BAC7C,MAAM,EAAE,IAAI,EAAE,2CAA2C;yBAC5D,CAAC,CAAC;oBACP,CAAC;yBAAM,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;wBACtB,uCAAuC;wBACvC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACxC,CAAC;oBAED,OAAO,CACH,SAAS;wBACT,MAAM,CAAC,SAAS,CAAC;6BACZ,WAAW,EAAE;6BACb,QAAQ,CAAC,WAAW,CAAC,CAC7B,CAAC;gBACN,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,aAAa;oBAAE,OAAO,KAAK,CAAC;YACrC,CAAC;YAED,MAAM,kBAAkB,GAAG,MAAM,CAAC,OAAO,CACrC,IAAI,CAAC,aAAa,CACrB,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE,EAAE;gBAC7B,IAAI,KAAK,KAAK,YAAY,IAAI,CAAC,WAAW;oBAAE,OAAO,IAAI,CAAC;gBAExD,4CAA4C;gBAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC7B,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,KAAK,KAAK,CAC/B,CAAC;gBACF,IAAI,KAAK,CAAC;gBAEV,IACI,MAAM;oBACN,MAAM,CAAC,WAAW;oBAClB,OAAO,MAAM,CAAC,WAAW,KAAK,UAAU,EAC1C,CAAC;oBACC,sDAAsD;oBACtD,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC;wBACvB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,IAAI;wBACJ,MAAM;wBACN,GAAG,EAAE,IAAI,CAAC,MAAM;wBAChB,OAAO,EAAE,IAAI;wBACb,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;wBAC7C,MAAM,EAAE,IAAI,EAAE,2CAA2C;qBAC5D,CAAC,CAAC;gBACP,CAAC;qBAAM,CAAC;oBACJ,uCAAuC;oBACvC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,CAAC;gBAED,MAAM,OAAO,GACT,KAAK;oBACL,MAAM,CAAC,KAAK,CAAC;yBACR,WAAW,EAAE;yBACb,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;gBACrD,OAAO,OAAO,CAAC;YACnB,CAAC,CAAC,CAAC;YAEH,OAAO,kBAAkB,CAAC;QAC9B,CAAC,CACJ,CAAC;IACN,CAAC;IAED,kBAAkB,CAAC,KAAkB;QACjC,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QACrC,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAChD,IAAI,MAAM,CAAC,KAAK,KAAK,EAAE,EAAE,CAAC;gBACtB,uCAAY,MAAM,KAAE,IAAI,EAAE,CAAC,OAAO,IAAG;YACzC,CAAC;YACD,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;IACnC,CAAC;IAED,kBAAkB,CAAC,KAAkB;QACjC,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YACf,IACI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC3B,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EACrC,CAAC;gBACC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9C,CAAC;iBAAM,IACH,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC3B,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EACrC,CAAC;gBACC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC9C,CAAC;QACL,CAAC;QAED,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAEO,sBAAsB,CAAC,WAAqB;QAChD,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YAC5C,EAAE;YACF,KAAK,EAAE,EAAE;SACZ,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC;IACvC,CAAC;IAEO,sBAAsB,CAAC,OAAwC;QACnE,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;YAC/C,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC9B,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;YAC/B,IAAI,CAAC,eAAe,GAAG,OAAO;iBACzB,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC;iBAC/C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC;IACL,CAAC;IAEO,mBAAmB;QACvB,mFAAmF;QACnF,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAExB,8BAA8B;QAC9B,IAAI,aAAa,EAAE,CAAC;YAChB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC;QACrD,CAAC;QAED,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACpC,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;YACjD,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC;QAClC,CAAC;aAAM,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;QAC7D,CAAC;IACL,CAAC;IAED,kBAAkB,CAAC,KAAkB;QACjC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC;QAEtC,+DAA+D;QAC/D,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;QACxD,CAAC;aAAM,CAAC;YACJ,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI;YACD,2EAAoB,OAAO,EAAE,IAAI,CAAC,MAAM;gBACpC,4DACI,KAAK,EAAC,yBAAyB,EAC/B,IAAI,EAAC,QAAQ;oBAEZ,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAC7C,+EACI,IAAI,EAAC,aAAa,EAClB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,eAAe,EAC9B,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CACpB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAEZ,CAC7B;oBAED,oEACI,KAAK,EAAC,YAAY,EAClB,KAAK,EAAE,IAAI,CAAC,YAAY,EACxB,SAAS,EAAE,IAAI,CAAC,WAAW,EAC3B,SAAS,EAAE,IAAI,CAAC,mBAAmB,EACnC,WAAW,EACP,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAElD,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CACpB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAEvB,CACb;gBAEL,CAAC,IAAI,CAAC,qBAAqB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAC7C,2EACI,IAAI,EAAC,SAAS,EACd,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,eAAe,EAC9B,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CACpB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAEhB,CACzB;gBAEA,CAAC,IAAI,CAAC,gBAAgB,IAAI,CACvB,+EAAwB,IAAI,EAAC,aAAa,GAAG,CAChD;gBAEA,CAAC,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAC3C,4EACI,IAAI,EAAC,gBAAgB,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,CACpB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAEpC,CACL;gBAED,4DAAK,IAAI,EAAC,SAAS;oBACf,6DAAM,IAAI,EAAC,SAAS,GAAG,CACrB,CACW;YAErB,6DAAM,IAAI,EAAC,sBAAsB,GAAG;YAEpC,mEACI,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAChC,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,EACjD,iBAAiB,EAAE,IAAI,EACvB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,GAC3C,CACC,CACV,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Watch,\n    Host,\n    Method,\n} from '@stencil/core';\nimport { ColDef, GridApi, IRowNode } from 'ag-grid-community';\nimport { fetchTranslations } from '../../../utils/translation';\n\ntype RowUpdateOptions = { flash: boolean; forceRefresh: boolean };\ntype RowUpdate<T> = { index: number; update: T };\n\n/**\n * @category Data Tables\n * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.\n * @slot actions - Used to place actions related to table content\n * @slot multi-select-actions - Used to place actions related to row selection\n */\n@Component({\n    tag: 'atui-search-table',\n    shadow: false,\n})\nexport class AtuiSearchTable {\n    /**\n     * Table data passed to atui-table component.\n     */\n    @Prop()\n    table_data: {\n        items: any[];\n        total: number;\n    };\n\n    /**\n     * Label for the table, appears above the search input.\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * Label for the search input.\n     */\n    @Prop()\n    search_label: string;\n\n    /**\n     * Hint text displayed below the search label.\n     */\n    @Prop()\n    search_hint: string;\n\n    /**\n     * Info text displayed in the search info tooltip.\n     */\n    @Prop()\n    search_info_tooltip: string;\n\n    /**\n     * Column definitions passed to atui-table component.\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    /**\n     * Default page size of the table\n     */\n    @Prop()\n    page_size?: number = 10;\n\n    /**\n     * If true the table dropdown filters will not be added\n     */\n    @Prop()\n    hide_dropdown_filters?: boolean;\n\n    /**\n     * If true the column manager will not be added\n     */\n    @Prop()\n    hide_column_manager?: boolean;\n\n    /**\n     * If true the table export menu will not be added\n     */\n    @Prop()\n    hide_export_menu?: boolean;\n\n    /**\n     * If true, disables pagination on the table and shows all data at once.\n     * Useful for server-side pagination where you want to control pagination externally.\n     */\n    @Prop()\n    use_custom_pagination?: boolean = false;\n\n    /**\n     * If true, enables automatic column resizing to fit available space.\n     * Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.\n     */\n    @Prop()\n    auto_size_columns: boolean = true;\n\n    @Element()\n    el: HTMLElement;\n\n    @State()\n    translations: any;\n\n    @State()\n    agGrid: GridApi;\n\n    @State()\n    tableCreated: boolean = false;\n\n    @State()\n    activeFilters: { [key: string]: string } = {};\n\n    @State()\n    selectedFilters: { id: string; value: string }[] = [];\n\n    @State()\n    menuSelectedIds: string[] = [];\n\n    @State()\n    searchValue: string = '';\n\n    tableEl: HTMLAtuiTableElement;\n\n    @Watch('selectedFilters')\n    handleSelectedFiltersChange(newValue: { id: string; value: string }[]) {\n        this.menuSelectedIds = newValue.map((f) => f.id);\n        this.updateActiveFilters();\n    }\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    async componentDidLoad() {\n        await this.initGrid();\n    }\n\n    async componentDidUpdate() {\n        await this.initGrid();\n    }\n\n    /**\n     * Updates the data of rows in the AG Grid based on their displayed row index.\n     *\n     * Use this method when you need to programmatically update one or more specific rows in the grid,\n     * identified by their current displayed index. This is particularly useful when you want to perform\n     * partial updates (such as in-place cell editing, real-time updates, or upon receiving new data from a\n     * server), and want to reflect these changes immediately in the UI with optional visual feedback.\n     *\n     * @template T - The data type of the row's underlying data structure.\n     * @param {RowUpdate<T>[]} rowUpdates - An array of objects specifying the row indices and the data updates to apply.\n     *   - `index`: The displayed index of the row to update.\n     *   - `update`: An object containing the updated data for the row.\n     * @param {RowUpdateOptions} [options] - Optional settings for the update operation.\n     *   - `flash`: Whether to visually flash the updated rows after the data change (improves user visibility).\n     *   - `forceRefresh`: Whether to force refresh the row cells after updating (useful for advanced rendering scenarios).\n     *\n     * @example\n     * // Update row at displayed index 2 with new values and flash the change\n     * updateRowByIndex([{ index: 2, update: { status: 'Processed' }}], { flash: true });\n     *\n     * @remarks\n     * - This function works with currently rendered rows; if rows are virtualized or paged out, ensure\n     *   the specified indices match the grid's current rendering context.\n     * - Recommended for cases where quick, UI-driven row data mutations are required (such as action buttons,\n     *   websocket pushes, or UI triggers).\n     */\n    @Method()\n    async updateRowByIndex<T>(\n        rowUpdates: RowUpdate<T>[],\n        options?: RowUpdateOptions,\n    ): Promise<void> {\n        const displayedRows = this.agGrid.getRenderedNodes();\n        rowUpdates.forEach(({ index, update }) => {\n            const displayedRow = displayedRows.find(\n                (row) => row.rowIndex === index,\n            );\n            if (displayedRow) {\n                displayedRow.updateData(update);\n                if (options?.flash) {\n                    this.agGrid.flashCells({ rowNodes: [displayedRow] });\n                }\n                this.agGrid.refreshCells({\n                    rowNodes: [displayedRow],\n                    force: options?.forceRefresh || false,\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the **currently displayed row nodes** from the ag-Grid instance.\n     *\n     * This asynchronous method retrieves an array of row nodes representing the rows currently visible\n     * (rendered) in the grid, after filtering, sorting, and other view-based operations.\n     *\n     * @template T The data type contained in each row node.\n     * @returns {Promise<IRowNode<T>[]>} Promise resolving to an array of displayed row nodes.\n     */\n    @Method()\n    async getDisplayedRows<T>(): Promise<IRowNode<T>[]> {\n        return this.agGrid.getRenderedNodes();\n    }\n\n    private async initGrid() {\n        if (this.col_defs && !this.tableCreated && this.tableEl) {\n            this.agGrid = await this.tableEl.createGrid();\n            this.tableCreated = true;\n            this.setupExternalFilters();\n\n            if (this.table_data?.items) {\n                this.agGrid.setGridOption('rowData', this.table_data.items);\n            }\n        }\n    }\n\n    private setupExternalFilters() {\n        if (!this.agGrid) return;\n\n        this.agGrid.setGridOption<'isExternalFilterPresent'>(\n            'isExternalFilterPresent',\n            () => {\n                const hasFilters = Object.keys(this.activeFilters).length > 0;\n                console.log(\n                    'isExternalFilterPresent called, hasFilters:',\n                    hasFilters,\n                );\n                return hasFilters;\n            },\n        );\n\n        this.agGrid.setGridOption<'doesExternalFilterPass'>(\n            'doesExternalFilterPass',\n            (node) => {\n                if (!node.data) return true;\n\n                const searchValue = this.activeFilters['__search__'];\n                if (searchValue) {\n                    const searchLower = searchValue.toLowerCase();\n\n                    // Check all column definitions and use their valueGetter if available\n                    const matchesSearch = this.col_defs.some((colDef) => {\n                        let cellValue;\n\n                        if (\n                            colDef.valueGetter &&\n                            typeof colDef.valueGetter === 'function'\n                        ) {\n                            // Use valueGetter for processed values (custom cells)\n                            cellValue = colDef.valueGetter({\n                                data: node.data,\n                                node,\n                                colDef,\n                                api: this.agGrid,\n                                context: null,\n                                getValue: (field: string) => node.data[field],\n                                column: null, // Not available in external filter context\n                            });\n                        } else if (colDef.field) {\n                            // Use raw field value for simple cells\n                            cellValue = node.data[colDef.field];\n                        }\n\n                        return (\n                            cellValue &&\n                            String(cellValue)\n                                .toLowerCase()\n                                .includes(searchLower)\n                        );\n                    });\n\n                    if (!matchesSearch) return false;\n                }\n\n                const columnFilterResult = Object.entries(\n                    this.activeFilters,\n                ).every(([colId, filterValue]) => {\n                    if (colId === '__search__' || !filterValue) return true;\n\n                    // Find the column definition for this field\n                    const colDef = this.col_defs.find(\n                        (def) => def.field === colId,\n                    );\n                    let value;\n\n                    if (\n                        colDef &&\n                        colDef.valueGetter &&\n                        typeof colDef.valueGetter === 'function'\n                    ) {\n                        // Use valueGetter for processed values (custom cells)\n                        value = colDef.valueGetter({\n                            data: node.data,\n                            node,\n                            colDef,\n                            api: this.agGrid,\n                            context: null,\n                            getValue: (field: string) => node.data[field],\n                            column: null, // Not available in external filter context\n                        });\n                    } else {\n                        // Use raw field value for simple cells\n                        value = node.data[colId];\n                    }\n\n                    const matches =\n                        value &&\n                        String(value)\n                            .toLowerCase()\n                            .includes(String(filterValue).toLowerCase());\n                    return matches;\n                });\n\n                return columnFilterResult;\n            },\n        );\n    }\n\n    handleColumnChange(event: CustomEvent) {\n        const { id, checked } = event.detail;\n        const updatedColDefs = this.col_defs.map((colDef) => {\n            if (colDef.field === id) {\n                return { ...colDef, hide: !checked };\n            }\n            return colDef;\n        });\n\n        this.col_defs = updatedColDefs;\n    }\n\n    handleFilterChange(event: CustomEvent) {\n        if (event.detail) {\n            if (\n                Array.isArray(event.detail) &&\n                typeof event.detail[0] === 'string'\n            ) {\n                this.handleMenuFilterChange(event.detail);\n            } else if (\n                Array.isArray(event.detail) &&\n                typeof event.detail[0] === 'object'\n            ) {\n                this.handleFilterListChange(event.detail);\n            }\n        }\n\n        this.updateActiveFilters();\n    }\n\n    private handleMenuFilterChange(selectedIds: string[]) {\n        this.selectedFilters = selectedIds.map((id) => ({\n            id,\n            value: '',\n        }));\n        this.menuSelectedIds = selectedIds;\n    }\n\n    private handleFilterListChange(filters: { id: string; value: string }[]) {\n        if (filters.length === 1 && filters[0].id === '') {\n            this.selectedFilters = [];\n            this.menuSelectedIds = [];\n        } else {\n            this.selectedFilters = filters;\n            this.menuSelectedIds = filters\n                .filter((f) => f.value && f.value.trim() !== '')\n                .map((f) => f.id);\n        }\n    }\n\n    private updateActiveFilters() {\n        // Keep existing search value in activeFilters - it's managed by handleSearchChange\n        const currentSearch = this.activeFilters['__search__'];\n        this.activeFilters = {};\n\n        // Restore search if it exists\n        if (currentSearch) {\n            this.activeFilters['__search__'] = currentSearch;\n        }\n\n        this.selectedFilters.forEach((filter) => {\n            if (filter.value) {\n                this.activeFilters[filter.id] = filter.value;\n            }\n        });\n\n        if (this.agGrid) {\n            this.setupExternalFilters();\n            this.agGrid.onFilterChanged();\n        } else {\n            console.log('agGrid not available, cannot apply filter');\n        }\n    }\n\n    handleSearchChange(event: CustomEvent) {\n        this.searchValue = event.detail || '';\n\n        // Add search to activeFilters for custom external filter logic\n        if (this.searchValue) {\n            this.activeFilters['__search__'] = this.searchValue;\n        } else {\n            delete this.activeFilters['__search__'];\n        }\n\n        this.updateActiveFilters();\n    }\n\n    render() {\n        return (\n            <Host>\n                <atui-table-actions ag_grid={this.agGrid}>\n                    <div\n                        class=\"flex items-center gap-8\"\n                        slot=\"search\"\n                    >\n                        {!this.hide_dropdown_filters && this.col_defs && (\n                            <atui-table-filter-menu\n                                slot=\"filter-menu\"\n                                col_defs={this.col_defs}\n                                selected={this.menuSelectedIds}\n                                onAtuiChange={(event) =>\n                                    this.handleFilterChange(event)\n                                }\n                            ></atui-table-filter-menu>\n                        )}\n\n                        <atui-search\n                            class=\"w-input-md\"\n                            label={this.search_label}\n                            hint_text={this.search_hint}\n                            info_text={this.search_info_tooltip}\n                            placeholder={\n                                this.translations.ATUI.TABLE.SEARCH_BY_KEYWORD\n                            }\n                            onAtuiChange={(event) =>\n                                this.handleSearchChange(event)\n                            }\n                        ></atui-search>\n                    </div>\n\n                    {!this.hide_dropdown_filters && this.col_defs && (\n                        <atui-table-filters\n                            slot=\"filters\"\n                            col_defs={this.col_defs}\n                            selected={this.selectedFilters}\n                            onAtuiChange={(event) =>\n                                this.handleFilterChange(event)\n                            }\n                        ></atui-table-filters>\n                    )}\n\n                    {!this.hide_export_menu && (\n                        <atui-table-export-menu slot=\"export-menu\" />\n                    )}\n\n                    {!this.hide_column_manager && this.col_defs && (\n                        <atui-column-manager\n                            slot=\"column-manager\"\n                            col_defs={this.col_defs}\n                            onAtuiChange={(event) =>\n                                this.handleColumnChange(event)\n                            }\n                        />\n                    )}\n\n                    <div slot=\"actions\">\n                        <slot name=\"actions\" />\n                    </div>\n                </atui-table-actions>\n\n                <slot name=\"multi-select-actions\" />\n\n                <atui-table\n                    ref={(el) => (this.tableEl = el)}\n                    table_data={this.table_data}\n                    col_defs={this.col_defs}\n                    page_size={this.page_size}\n                    use_custom_pagination={this.use_custom_pagination}\n                    disable_auto_init={true}\n                    auto_size_columns={this.auto_size_columns}\n                />\n            </Host>\n        );\n    }\n}\n"]}