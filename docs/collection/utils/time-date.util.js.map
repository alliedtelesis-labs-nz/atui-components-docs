{"version":3,"file":"time-date.util.js","sourceRoot":"","sources":["../../src/utils/time-date.util.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport { clone, floor, isEmpty, round } from 'lodash';\nimport {\n    Duration,\n    ITimeDateFilter,\n    TimeExtraOptions,\n    TimeUnit,\n    TimeWithUnit,\n} from '../types/time';\nimport { DateRange, DateRangeStrings } from '../types/date';\n\nexport class TimeDateUtil {\n    /**\n     * convertSecondsToUnit: Convert time value from seconds to the specified unit.\n     *\n     * @param seconds: original number of seconds\n     * @param unit: unit to convert seconds to (e.g. days, weeks, etc.)\n     * @param roundUp: if true, rounds up. if false, rounds down.\n     * @param decimalPlaces: if specified, rounds to these, otherwise rounds to the nearest whole number/integer\n     **/\n    static convertSecondsToUnit(\n        seconds: number,\n        unit: TimeUnit | TimeExtraOptions,\n        decimalPlaces?: number,\n        roundUp = true,\n    ): number {\n        const momentSeconds = moment.duration(\n            seconds,\n            Duration[TimeUnit.SECONDS],\n        );\n        let secondsInUnit: number = seconds;\n        switch (unit) {\n            case TimeUnit.SECONDS:\n                return secondsInUnit;\n            case TimeUnit.MINUTES:\n                secondsInUnit = momentSeconds.asMinutes();\n                break;\n            case TimeUnit.HOURS:\n                secondsInUnit = momentSeconds.asHours();\n                break;\n            case TimeUnit.DAYS:\n                secondsInUnit = momentSeconds.asDays();\n                break;\n            case TimeUnit.WEEKS:\n                secondsInUnit = momentSeconds.asWeeks();\n                break;\n            case TimeUnit.MONTHS:\n                secondsInUnit = momentSeconds.asMonths();\n                break;\n            case TimeUnit.YEARS:\n                secondsInUnit = momentSeconds.asYears();\n                break;\n        }\n        return roundUp\n            ? round(secondsInUnit, decimalPlaces) // Round up\n            : floor(secondsInUnit, decimalPlaces); // Round down\n    }\n\n    // convertToSeconds: Convert time value to seconds if it isn't already in this form\n    static convertToSeconds(time: TimeWithUnit): number {\n        const valueInUnit = moment.duration(time.value, Duration[time.unit]);\n        return valueInUnit.asSeconds();\n    }\n\n    static getSecondsAgoFromDate(date: Date): number {\n        return moment(new Date()).diff(date, Duration.SECONDS);\n    }\n\n    static getDateFromRelativeTime(time: TimeWithUnit): Date {\n        // Return current date minus the specified unit and value (e.g. if value 1 and unit hour, returns date an hour ago)\n        return moment().subtract(time.value, Duration[time.unit]).toDate();\n    }\n\n    /**\n     * getRelativeDateRange: convert relative date (e.g. 1 year ago) into absolute dates.\n     * Round the these to the nearest minute because we don't care about the seconds\n     *    startDate depends on what the user has chosen\n     *    endDate is not set as technically there is no absolute end date - this will be set\n     *    to the current date on the back-end (in time-date util -  getDateRangeWithEndDate)\n     */\n    static getRelativeDateRange(time: TimeWithUnit): DateRange {\n        const fullStartDate = TimeDateUtil.getDateFromRelativeTime(time);\n        const startDate = TimeDateUtil.floorDateByTimeUnit(\n            fullStartDate,\n            Duration.MINUTES,\n        );\n        return { startDate, endDate: new Date() };\n    }\n\n    static getAbsoluteDateRange(time: DateRangeStrings): DateRange {\n        return {\n            startDate: moment(time.from).toDate(),\n            endDate: moment(time.to).toDate(),\n        };\n    }\n\n    static getDateRange(\n        customDateRange: DateRange,\n        relativeTime: TimeWithUnit,\n        defaultDates: DateRange,\n    ): DateRange {\n        if (customDateRange) {\n            return customDateRange;\n        } else if (relativeTime) {\n            return TimeDateUtil.getRelativeDateRange(relativeTime);\n        } else {\n            return defaultDates;\n        }\n    }\n\n    static getCurrentDatePlusHours(hours: number): Date {\n        return new Date(\n            new Date().setHours(new Date().getHours() + hours, 0, 0),\n        );\n    }\n\n    static getDateYearsAgo(years: number, originalDate: Date): Date {\n        return new Date(\n            clone(originalDate).setFullYear(new Date().getFullYear() - years),\n        );\n    }\n\n    static getDateMonthsAgo(months: number, originalDate: Date): Date {\n        return new Date(\n            clone(originalDate).setMonth(new Date().getMonth() - months),\n        );\n    }\n\n    static getCurrentOrDefaultUnit(\n        currentUnit: TimeUnit | TimeExtraOptions,\n        units: (TimeUnit | TimeExtraOptions)[],\n    ): TimeUnit | TimeExtraOptions | undefined {\n        // Return the first of an array of units if a current unit isn't specified\n        if (currentUnit) {\n            return currentUnit;\n        } else if (!isEmpty(units)) {\n            return units[0];\n        }\n    }\n\n    /**\n     * getDataPointIntervalFor30SecPoller: return an interval\n     * that provides up to 120 data points between the start and end date.\n     * Ensure that this is at least one minute and goes up in one minute intervals,\n     * which avoids creating empty buckets, except if the device or Vista is down.\n     */\n    static getDataPointIntervalFor30SecPoller(\n        startDate: Date,\n        endDate: Date,\n    ): number {\n        const diffSeconds: number = moment(endDate).diff(\n            startDate,\n            Duration.SECONDS,\n        );\n        const interval: number = diffSeconds / 120; // in seconds\n        // Ceiling interval to nearest one minute to avoid empty buckets\n        const intervalToNearestMinute = Math.ceil(interval / 60) * 60;\n        return intervalToNearestMinute;\n    }\n\n    /**\n     * shiftDateByUnit: returns a new date with units added or subtracted\n     *\n     * @param date: original date\n     * @param amount integer amount to shift date by .// can be negative for subtraction\n     * @param unit: unit to shift by seconds to (e.g. days, weeks, etc.)\n     **/\n    static shiftDateByUnit(\n        date: Date | string,\n        amount: number,\n        unit: Duration,\n    ): Date {\n        return moment(date).add(amount, unit).toDate();\n    }\n\n    /**\n     * floorDateByTimeUnit: returns a new date with units added or subtracted\n     *\n     * @param date: original date\n     * @param unit: unit to round to (e.g. days, weeks, etc.)\n     **/\n    static floorDateByTimeUnit(date: Date, unit: Duration): Date {\n        return moment(date).startOf(unit).toDate();\n    }\n\n    /**\n     * ceilingDateByTimeUnit: returns a new date with units added or subtracted\n     *\n     * @param date: original date\n     * @param unit: unit to round to (e.g. days, weeks, etc.)\n     **/\n    static ceilingDateByTimeUnit(date: Date, unit: Duration): Date {\n        return moment(date)\n            .subtract(1, Duration.SECONDS) // remove one second so square numbers are not rounded up\n            .add(1, unit)\n            .startOf(unit)\n            .toDate();\n    }\n\n    /**\n     * isSameDateByUnit: returns true if the dates are the same to the specified unit granularity\n     *\n     * @param date1: original date 1\n     * @param date2: original date 2\n     * @param unit: granularity of check in by unit (e.g. days, weeks, etc.)\n     **/\n    static isSameDateByUnit(\n        date1: Date | string,\n        date2: Date | string,\n        unit: Duration,\n    ): boolean {\n        return moment(date1).isSame(date2, unit);\n    }\n\n    static getCurrentDateFilterInDateRangeFormat(\n        timeDateFilters: ITimeDateFilter,\n    ): DateRange | undefined {\n        // This returns absolute start and end dates, even if a user chose 'Last 5 years' as their filter\n        if (timeDateFilters) {\n            if (timeDateFilters.relativeTimeFilter) {\n                return TimeDateUtil.getRelativeDateRange(\n                    timeDateFilters.relativeTimeFilter,\n                );\n            } else if (timeDateFilters.dateFilter) {\n                return timeDateFilters.dateFilter;\n            }\n        }\n    }\n}\n"]}