{"version":3,"file":"time-date-presentation.util.js","sourceRoot":"","sources":["../../src/utils/time-date-presentation.util.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport { TimeDateUtil } from './time-date.util';\nimport { isEmpty, replace } from 'lodash';\nimport {\n    DateFormat,\n    DateRange,\n    DateRangeStrings,\n    Duration,\n    ISelectedTimeRange,\n    TimeRangeDisplay,\n    TimeRangesInHours,\n} from '../types';\nimport { SelectOption } from '../types/select';\n\nmomentDurationFormatSetup(moment);\n\nexport class TimeDatePresentationUtil {\n    private static times = [\n        '12:00',\n        '01:00',\n        '02:00',\n        '03:00',\n        '04:00',\n        '05:00',\n        '06:00',\n        '07:00',\n        '08:00',\n        '09:00',\n        '10:00',\n        '11:00',\n    ];\n    private static timeMode = ['am', 'pm'];\n\n    static buildDateFromStrings(fromDate: string, fromTime: string): Date {\n        const formattedDate: string = this.dateBuilder(fromDate);\n        return moment(\n            `${formattedDate} ${fromTime}`,\n            'M/D/YYYY hh:mm a',\n        ).toDate();\n    }\n\n    private static dateBuilder(dateString: string): string {\n        const date = new Date(dateString);\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const year = date.getFullYear();\n\n        return `${month}/${day}/${year}`;\n    }\n\n    static getDateLabelMessage(\n        selectedTime: ISelectedTimeRange,\n        format: DateFormat,\n    ): string {\n        if (!selectedTime) {\n            return;\n        } else if (TimeDatePresentationUtil.isCustomRange(selectedTime)) {\n            const { from, to } = selectedTime.custom;\n            return `${TimeDatePresentationUtil.getFormattedDate(from, format)} - ${TimeDatePresentationUtil.getFormattedDate(to, format)}`;\n        } else {\n            const time = TimeRangesInHours[selectedTime.selected];\n            const todayDate = moment().format(format);\n            const previousDate = moment()\n                .subtract(time, Duration.HOURS)\n                .format(format);\n            return `${previousDate} - ${todayDate}`;\n        }\n    }\n\n    static getCustomFromAndToDate(timeRange: ISelectedTimeRange):\n        | {\n              fromDate: Date;\n              toDate: Date;\n          }\n        | undefined {\n        if (!timeRange) {\n            return;\n        }\n\n        if (TimeDatePresentationUtil.isCustomRange(timeRange)) {\n            const { from, to } = timeRange.custom;\n            const fromDate = moment(from).toDate();\n            const toDate = moment(to).toDate();\n            return { fromDate, toDate };\n        }\n    }\n\n    static getTimeOptions(\n        startTime = '12:00 am',\n        endTime = '11:00 pm',\n    ): SelectOption[] {\n        const timeList: string[] = this.createTimeList();\n        const startTimeIndex = this.getTimeIndex(startTime);\n        const endTimeIndex = this.getTimeIndex(endTime) + 2;\n\n        return timeList.slice(startTimeIndex, endTimeIndex).map((time) => ({\n            value: time,\n        }));\n    }\n\n    private static createTimeList() {\n        const list: string[] = [];\n        for (const mode of this.timeMode) {\n            for (const time of this.times) {\n                list.push(`${time} ${mode}`);\n            }\n        }\n        return list;\n    }\n\n    private static createTimeIndex() {\n        const timeList = this.createTimeList();\n        return timeList.reduce((acc, cur, index) => {\n            acc[cur] = index;\n            return acc;\n        }, {});\n    }\n\n    private static getTimeIndex(time: string) {\n        const index = this.createTimeIndex();\n        return index[time];\n    }\n\n    static convertTimeRange(timeRange: ISelectedTimeRange): {\n        start: Date;\n        end: Date;\n    } {\n        if (TimeDatePresentationUtil.isCustomRange(timeRange)) {\n            return {\n                start: moment(timeRange.custom.from).toDate(),\n                end: moment(timeRange.custom.to).toDate(),\n            };\n        } else if (timeRange.selected) {\n            return {\n                start: moment()\n                    .subtract(TimeRangesInHours[timeRange.selected], 'hour')\n                    .toDate(),\n                end: moment().toDate(),\n            };\n        }\n    }\n\n    static convertTimeRangeInNumber(timeRange: ISelectedTimeRange): {\n        start: number;\n        end: number;\n    } {\n        const { start, end } = this.convertTimeRange(timeRange);\n        return { start: start.getTime(), end: end.getTime() };\n    }\n\n    static getIntervalFor30sPollerFromTimeRange(\n        timeRange: ISelectedTimeRange,\n    ): number {\n        const { start, end } =\n            TimeDatePresentationUtil.convertTimeRange(timeRange);\n        return TimeDateUtil.getDataPointIntervalFor30SecPoller(start, end);\n    }\n\n    static getFormattedDate(\n        date: Date | string,\n        dateFormat: DateFormat = DateFormat.STANDARD,\n    ): string {\n        return date ? moment(date).format(dateFormat) : '';\n    }\n\n    private static getDurationTranslations(\n        translations: any,\n    ): { unit: string; translation: string }[] {\n        const dayString = translations.ATUI.TIME.DURATION_SHORT.DAY;\n        const daysString = translations.ATUI.TIME.DURATION_SHORT.DAYS;\n\n        const hourString = translations.ATUI.TIME.DURATION_SHORT.HOUR;\n        const hoursString = translations.ATUI.TIME.DURATION_SHORT.HOURS;\n\n        const minuteString = translations.ATUI.TIME.DURATION_SHORT.MIN;\n        const minutesString = translations.ATUI.TIME.DURATION_SHORT.MINS;\n\n        return [\n            { unit: 'day', translation: dayString },\n            { unit: 'days', translation: daysString },\n            {\n                unit: 'hr',\n                translation: hourString,\n            },\n            { unit: 'hrs', translation: hoursString },\n            { unit: 'min', translation: minuteString },\n            {\n                unit: 'mins',\n                translation: minutesString,\n            },\n        ];\n    }\n\n    static translateDurationString(\n        duration: string,\n        translations: any,\n    ): string {\n        const translation =\n            TimeDatePresentationUtil.getDurationTranslations(translations);\n        const splitDuration = duration.split(',');\n\n        const translatedDurations = splitDuration.map((duration) => {\n            let translatedDuration = duration;\n            translation.forEach((trans) => {\n                if (duration.includes(' ' + trans.unit)) {\n                    const unit = new RegExp(' ' + trans.unit);\n                    translatedDuration = replace(\n                        duration,\n                        unit,\n                        ' ' + trans.translation,\n                    );\n                }\n            });\n            return translatedDuration;\n        });\n\n        return translatedDurations.join(',');\n    }\n\n    static getIntervalString(\n        start: Date,\n        end: Date,\n        translations: any,\n    ): string {\n        const msDifference = moment(end).diff(moment(start));\n\n        const durationString = (<any>(\n            moment.duration(msDifference, 'milliseconds')\n        )).format('d [days], h [hrs], m [min]');\n\n        return TimeDatePresentationUtil.translateDurationString(\n            durationString,\n            translations,\n        );\n    }\n\n    static getDayCountFromDateFilter(dateFilter: DateRange): number {\n        const timeRangeFromDateFilter =\n            dateFilter.endDate.getTime() - dateFilter.startDate.getTime();\n        const timeDiff = moment.duration(timeRangeFromDateFilter);\n        return timeDiff.asDays();\n    }\n\n    static getHourCountFromTimeRange(\n        timeRange: ISelectedTimeRange,\n    ): number | undefined {\n        if (timeRange.selected == TimeRangeDisplay.CUSTOM) {\n            if (timeRange.custom) {\n                const to = new Date(timeRange.custom.to);\n                const from = new Date(timeRange.custom.from);\n                return (to.getTime() - from.getTime()) / (1000 * 3600);\n            }\n        } else {\n            return TimeRangesInHours[timeRange.selected];\n        }\n    }\n\n    // Return true if time range is custom (i.e. custom start and end\n    // time selected, rather than predefined ranges e.g. 1hr, 24h)\n    static isCustomRange(timeRange: ISelectedTimeRange): boolean {\n        if (timeRange.selected === TimeRangeDisplay.CUSTOM) {\n            const customRange: DateRangeStrings = timeRange.custom;\n            return (\n                !isEmpty(customRange) && !!customRange.from && !!customRange.to\n            );\n        }\n    }\n}\nexport class FlooredDateRange implements DateRange {\n    constructor(\n        readonly startDate: Date,\n        readonly endDate: Date,\n        private unit: Duration,\n    ) {\n        this.startDate = this.floorByMinutes(this.startDate);\n        this.endDate = this.floorByMinutes(this.endDate);\n    }\n\n    static create(\n        timeRange: { start: Date; end: Date },\n        unit: Duration,\n    ): FlooredDateRange {\n        return new FlooredDateRange(timeRange.start, timeRange.end, unit);\n    }\n\n    private floorByMinutes(time: Date): Date {\n        return TimeDateUtil.floorDateByTimeUnit(time, this.unit);\n    }\n}\n"]}