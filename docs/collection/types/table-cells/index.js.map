{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/types/table-cells/index.ts"],"names":[],"mappings":"AAIA;;;GAGG;AACH,MAAM,CAAN,IAAY,cAiBX;AAjBD,WAAY,cAAc;IACtB,oDAAkC,CAAA;IAClC,4CAA0B,CAAA;IAC1B,yDAAuC,CAAA;IACvC,4DAA0C,CAAA;IAC1C,0DAAwC,CAAA;IACxC,+DAA6C,CAAA;IAC7C,wEAAsD,CAAA;IACtD,qDAAmC,CAAA;IACnC,qDAAmC,CAAA;IACnC,4CAA0B,CAAA;IAC1B,gDAA8B,CAAA;IAC9B,qDAAmC,CAAA;IACnC,2DAAyC,CAAA;IACzC,8CAA4B,CAAA;IAC5B,4DAA0C,CAAA;IAC1C,4CAA0B,CAAA;AAC9B,CAAC,EAjBW,cAAc,KAAd,cAAc,QAiBzB;AAED,MAAM,CAAN,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IACxB,sDAAkC,CAAA;IAClC,8CAA0B,CAAA;AAC9B,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB,QAG3B","sourcesContent":["import { ICellRendererParams } from 'ag-grid-community';\nimport { TableColor } from '../table-styles';\nimport { CSSProperties } from '../styles';\n\n/**\n * NEW AvailableCells also need to be added to getFrameworkComponents()\n * so that ag-grid can import and render the cell components\n */\nexport enum AvailableCells {\n    CHECKBOX_CELL = 'AtuiCheckboxCell',\n    TEXT_CELL = 'AtuiTextCell',\n    TEXT_STATUS_CELL = 'AtuiTextStatusCell',\n    TEXT_WITH_BADGE_CELL = 'AtuiTextBadgeCell',\n    TEXT_WITH_ICON_CELL = 'AtuiTextIconCell',\n    TITLE_SUBTITLE_CELL = 'AtuiTitleSubtitleCell',\n    TITLE_SUBTITLE_DATE_CELL = 'AtuiTitleSubtitleDateCell',\n    EDIT_TEXT_CELL = 'AtuiEditTextCell',\n    CHIP_LIST_CELL = 'AtuiChipListCell',\n    ICON_CELL = 'AtuiIconCell',\n    TOGGLE_CELL = 'AtuiToggleCell',\n    MULTI_BTN_CELL = 'AtuiMultiBtnCell',\n    COLOR_STATUS_CELL = 'AtuiColorStatusCell',\n    IMAGE_CELL = 'AtuiImageCell',\n    TEXT_WITH_IMAGE_CELL = 'AtuiTextImageCell',\n    MENU_CELL = 'AtuiMenuCell',\n}\n\nexport enum AvailableHeaders {\n    CHECKBOX_HEADER = 'checkboxHeader',\n    ICON_HEADER = 'iconHeader',\n}\n\nexport interface DefaultInitCellParams extends ICellRendererParams {\n    writePermission?: boolean;\n}\n\n/** Icon cell parameters */\nexport interface IIconCellParams extends DefaultInitCellParams {\n    value: IIconCell[];\n}\n\nexport interface IIconCell extends ITooltipCell, IClickCell {\n    // Can pass the icon name and styles in directly or use a function to retrieve these\n    iconName: string;\n    iconStyles?: CSSProperties;\n    iconClass?: string;\n    disabled?: boolean;\n    tooltipText?: string;\n}\n\n/** Icon cell with text parameters */\nexport interface IconTextCellParams extends DefaultInitCellParams {\n    value: ITextWithIconCell;\n    containerStyles?: CSSProperties;\n}\n\nexport interface ITextWithIconCell extends IClickCell {\n    icons: IIconCell[];\n    text: ITextCell;\n    reverseLayout?: boolean;\n}\n\nexport interface ITextCell {\n    textValue: string;\n    textStyles?: CSSProperties;\n    shouldNotTranslate?: boolean;\n}\n\n/**\n * Cells that provide extra abilities.\n * Useful to extend to provide standard cells with extra functionality,\n * e.g. the ability to be clicked or show a tooltip\n */\nexport interface ITooltipCell {\n    tooltipClass?: string;\n    generateTooltip?: (params: ICellRendererParams) => HTMLElement | string;\n}\n\nexport interface IClickCell {\n    click?: (params: ICellRendererParams) => any;\n    iconClick?: (params: ICellRendererParams) => any;\n}\n\nexport interface ColorCell {\n    mapValueToColor: (value: any) => {\n        backgroundColor: TableColor;\n        fontColor: TableColor;\n    };\n}\n\nexport interface ITitleSubtitle {\n    title: string;\n    subtitle: string;\n}\n\nexport interface ITextCellParams extends IClickCell {\n    size?: string;\n    color?: string;\n    textStyles?:\n        | CSSProperties\n        | ((params: ICellRendererParams) => CSSProperties);\n    containerStyles?: CSSProperties;\n    click?: (params: ICellRendererParams) => void;\n    textClass?: string;\n    rowIndex: any;\n\n    // Transform value into something\n    // e.g. value: 50, my value is a number and i need\n    // this value to match something to do something\n    // but i want it to display as \"50ms\", so use this function\n    textTransform?: (data: any, value: any) => string;\n\n    useIconHeaderTooltip?: boolean;\n    shouldNotTranslate?: boolean;\n}\n\nexport interface StateInfo {\n    text: string;\n    status: string;\n}\n\nexport interface UIStates {\n    uiState: StateInfo;\n    engineUiState: StateInfo;\n    role: string;\n}\nexport interface AppFullWidthCellData {\n    type: string;\n    counters: number;\n    fullWidth: boolean;\n    description: string;\n    provider?: string;\n    warning?: string;\n    uiStates?: UIStates;\n}\n\nexport interface InitTextCellParams\n    extends ITooltipCell,\n        ITextCellParams,\n        ICellRendererParams {}\n\nexport type GetImageSourceFunction = (data: any) => string;\nexport type PopoverClickedFunction = (allData: any, itemClicked: any) => any;\n"]}