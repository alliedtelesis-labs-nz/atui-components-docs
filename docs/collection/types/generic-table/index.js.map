{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/types/generic-table/index.ts"],"names":[],"mappings":"AAmFA,MAAM,CAAC,MAAM,cAAc,GAA0B;IACjD,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,MAAM;IACZ,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;CACX,CAAC","sourcesContent":["import { SortDirection } from '../sort';\nimport { TimeWithUnit } from '../time';\nimport { ColumnState } from 'ag-grid-community';\n\ninterface DateRange {\n    startDate: Date;\n    endDate: Date;\n}\n\nexport interface ISearchData<T> {\n    items: T[];\n    total: number;\n}\n\nexport type TableFilterContent =\n    | string\n    | string[]\n    | number\n    | { [key: string]: any };\n\nexport interface IFieldFilters {\n    [key: string]: TableFilterContent;\n}\n\n// Sent from generic table to component using it\n// Allows that component to search on the back-end\nexport interface ISearchTableParams {\n    sort?: string; // The column to sort\n    startRow?: number; // Where to start looking for the data (e.g. 20 means skip first 20 results)\n    endRow?: number; // Where to stop looking for the data (e.g. 40 is get up to 40 results)\n    direction?: SortDirection.ASC | SortDirection.DESC; // Whether to sort in ascending or descending order\n    globalFilter?: string; // The filter that checks all columns\n    fieldFilters?: IFieldFilters; // The collection of all individual filters\n    columns?: string[]; // The columns to search with - these should match the column/header names in the column definitions\n    customDateFilter?: DateRange;\n    relativeTime?: TimeWithUnit; // Used if relative time selected\n}\n\nexport interface IPaging {\n    num?: number;\n    page?: number;\n}\n\nexport interface IMultiSelectFieldFilters {\n    [key: string]: TableFilterContent[];\n}\n\nexport interface ISortParams {\n    type?: string;\n    direction?: SortDirection;\n}\n\nexport interface IPaginationParams {\n    start?: number;\n    end?: number;\n}\n\nexport interface AgGridSortModel {\n    colId: string;\n    sort: 'asc' | 'desc';\n}\n\nexport interface DropdownKey {\n    translationKey: string;\n    content: IFilter['content'];\n}\n\nexport interface IFilter {\n    columnName: string; // column to filter on\n    columnField: string; // field/key of column to filter on\n    content: TableFilterContent; // actual filter\n    isVisible: boolean; // whether filter tag is displayed\n    dropdownKeys?: DropdownKey[]; // restricts filters for this column to this list, which will selected from a dropdown\n    type?: 'number'; // define input type. defaults to text if not provided\n}\n\nexport interface TablePaginationValues {\n    page: string;\n    more: string;\n    to: string;\n    of: string;\n}\n\nexport const paginationText: TablePaginationValues = {\n    page: 'PAGE',\n    more: 'MORE',\n    to: 'TO',\n    of: 'OF',\n};\n\nexport interface ITableState {\n    stateDict: ITableDict;\n}\n\nexport interface ITableDict {\n    [tableType: string]: ITableData;\n}\n\nexport interface ITableData extends ITableUserSettings {\n    searchData: ISearchData<any>;\n}\n\nexport interface ITableUserSettings {\n    searchParams: ISearchTableParams;\n    columnState: ColumnState[];\n}\n\nexport type TableId = string;\n\nexport interface ColumnDetails {\n    actualWidth?: number;\n    field: string;\n    displayName: string;\n}\n"]}