{"file":"atui-static-table.js","mappings":";;;;;;;;;;;;MAYaA,iBAAe,iBAAAC,kBAAA,CAAA,MAAA,eAAA,SAAAC,CAAA,CAAA;AAJ5B,IAAA,WAAA,GAAA;;;AAoBI;;AAEG;AAEH,QAAA,IAAS,CAAA,SAAA,GAAW,EAAE;AAQtB;;;AAGG;AAEH,QAAA,IAAqB,CAAA,qBAAA,GAAa,KAAK;AAQvC,QAAA,IAAY,CAAA,YAAA,GAAY,KAAK;AAsChC;AApCG,IAAA,MAAM,gBAAgB,GAAA;QAClB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;AAC7C,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI;;;AAGhC,IAAA,MAAM,kBAAkB,GAAA;QACpB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;AAC7C,YAAA,IAAI,CAAC,YAAY,GAAG,IAAI;;;IAIhC,MAAM,GAAA;QACF,QACI,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACA,CAAC,IAAI,CAAC,mBAAmB,KACtB,2EAAoB,OAAO,EAAE,IAAI,CAAC,MAAM,EAAA,EACpC,CACI,CAAA,qBAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,gBAAgB,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACzB,CAAA,CACe,CACxB,EACD,CACI,CAAA,YAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,GAAG,EAAE,CAAC,EAAE,MAAM,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAChC,OAAO,EAAE,IAAI,CAAC,MAAM,EACpB,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,EACjD,iBAAiB,EAAE,IAAI,EAAA,CACzB,CACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["AtuiStaticTable","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/atui-static-table/atui-static-table.tsx"],"sourcesContent":["import { Component, h, Prop, State, Host } from '@stencil/core';\nimport { ColDef, GridApi } from 'ag-grid-community';\n\n/**\n * @category Data Tables\n * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.\n */\n\n@Component({\n    tag: 'atui-static-table',\n    shadow: false,\n})\nexport class AtuiStaticTable {\n    /**\n     * Data to go into the table\n     */\n    @Prop()\n    table_data: {\n        items: any[];\n        total: number;\n    };\n\n    /**\n     * Column definitions for the table\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    /**\n     * Max number of items per page\n     */\n    @Prop()\n    page_size: number = 10;\n\n    /**\n     * If true the column manager will not be added\n     */\n    @Prop()\n    hide_column_manager: boolean;\n\n    /**\n     * If true, disables pagination on the table and shows all data at once.\n     * Useful for server-side pagination where you want to control pagination externally.\n     */\n    @Prop()\n    use_custom_pagination?: boolean = false;\n\n    @State()\n    agGrid: GridApi;\n\n    tableEl: HTMLAtuiTableElement;\n\n    @State()\n    tableCreated: boolean = false;\n\n    async componentDidLoad() {\n        if (this.col_defs && !this.tableCreated) {\n            this.agGrid = await this.tableEl.createGrid();\n            this.tableCreated = true;\n        }\n    }\n    async componentDidUpdate() {\n        if (this.col_defs && !this.tableCreated) {\n            this.agGrid = await this.tableEl.createGrid();\n            this.tableCreated = true;\n        }\n    }\n\n    render() {\n        return (\n            <Host>\n                {!this.hide_column_manager && (\n                    <atui-table-actions ag_grid={this.agGrid}>\n                        <atui-column-manager\n                            slot=\"column-manager\"\n                            col_defs={this.col_defs}\n                        />\n                    </atui-table-actions>\n                )}\n                <atui-table\n                    ref={(el) => (this.tableEl = el)}\n                    ag_grid={this.agGrid}\n                    table_data={this.table_data}\n                    col_defs={this.col_defs}\n                    page_size={this.page_size}\n                    use_custom_pagination={this.use_custom_pagination}\n                    disable_auto_init={true}\n                />\n            </Host>\n        );\n    }\n}\n"],"version":3}