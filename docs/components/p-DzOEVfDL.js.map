{"file":"p-DzOEVfDL.js","mappings":";;;MAuBa,aAAa,iBAAAA,kBAAA,CAAA,MAAA,aAAA,SAAAC,CAAA,CAAA;;;;;AAMtB,IAAA,IAAI,CAAC,MAAkB,EAAA;AACnB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;AACpB,QAAA,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW;AACrC,QAAA,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc;AAE3C,QAAA,IAAI,MAAM,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC;;;IAI7D,MAAM,GAAA;QACF,OAAO,IAAI,CAAC,EAAE;;AAGlB,IAAA,OAAO,CAAC,MAAkB,EAAA;AACtB,QAAA,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;AAC5B,QAAA,OAAO,IAAI;;AAGL,IAAA,UAAU,CAAC,QAAa,EAAA;AAC9B,QAAA,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ;;IAG/B,MAAM,GAAA;QACF,QACI,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAC,KAAK,EAAC,yDAAyD,EAChE,EAAA,IAAI,CAAC,WAAW,KACb,CAAA,CAAA,cAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAc,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EAAA,EACnD,CAAK,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,mBAAmB,EAAA,EAC1B,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACI,GAAG,EAAE,IAAI,CAAC,WAAW,EACrB,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,GAC3B,CACA,EAEN,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,IAAI,EAAC,iBAAiB,IACvB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CACtC,CACI,CAClB,CACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/cell-components/atui-image-cell/atui-image-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport {\n    GetImageSourceFunction,\n    ITooltipCell,\n} from '../../../../types/table-cells';\n\nexport interface ImageCell extends ITooltipCell {\n    imageSource?: string;\n    getImageSource?: GetImageSourceFunction;\n}\n\ninterface InitParams extends ImageCell, ICellRendererParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying an image.\n */\n\n@Component({\n    tag: 'atui-image-cell',\n    shadow: false,\n})\nexport class AtuiImageCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n    @State() imageSource: string;\n    @State() getImageSource: GetImageSourceFunction;\n\n    init(params: InitParams): void {\n        this.params = params;\n        this.imageSource = params.imageSource;\n        this.getImageSource = params.getImageSource;\n\n        if (params.getImageSource) {\n            this.imageSource = params.getImageSource(params.data);\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.updateCell(params.data);\n        return true;\n    }\n\n    protected updateCell(newValue: any) {\n        this.params.data = newValue;\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center overflow-hidden leading-[100%]\">\n                {this.imageSource && (\n                    <atui-tooltip is_visible={!!this.params.generateTooltip}>\n                        <div class=\"flex items-center\">\n                            <img\n                                src={this.imageSource}\n                                style={{ height: '30px' }}\n                            />\n                        </div>\n\n                        <span slot=\"tooltip-content\">\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    </atui-tooltip>\n                )}\n            </Host>\n        );\n    }\n}\n"],"version":3}