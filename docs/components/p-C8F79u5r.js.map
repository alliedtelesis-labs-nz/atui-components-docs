{"file":"p-C8F79u5r.js","mappings":";;;;;;;;;;MAiBa,0BAA0B,iBAAAA,kBAAA,CAAA,MAAA,0BAAA,SAAAC,CAAA,CAAA;AAJvC,IAAA,WAAA,GAAA;;;;AAaa,QAAA,IAAc,CAAA,cAAA,GAAa,EAAE;AAqFzC;AAnFG,IAAA,MAAM,iBAAiB,GAAA;QACnB,IAAI,CAAC,YAAY,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;QACpD,IAAI,CAAC,wBAAwB,EAAE;;IAInC,cAAc,GAAA;QACV,IAAI,CAAC,wBAAwB,EAAE;;IAG3B,wBAAwB,GAAA;AAC5B,QAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACf,YAAA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;iBACtB,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,IAAI;iBACvC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC;;;AAY1C,IAAA,aAAa,CAAC,KAAY,EAAA;AACtB,QAAA,MAAM,UAAU,GAAG,KAAK,CAAC,MAA0B;AACnD,QAAA,MAAM,QAAQ,GAAG,UAAU,CAAC,EAAE;AAC9B,QAAA,MAAM,SAAS,GAAG,UAAU,CAAC,OAAO;QAEpC,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC;;aACrD;AACH,YAAA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAC5C,CAAC,EAAE,KAAK,EAAE,KAAK,QAAQ,CAC1B;;AAGL,QAAA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;AACjB,YAAA,EAAE,EAAE,QAAQ;AACZ,YAAA,OAAO,EAAE,SAAS;AACrB,SAAA,CAAC;;IAGN,MAAM,GAAA;QACF,QACI,CAAA,CAAA,WAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACI,SAAS,EAAE,KAAK,EAChB,KAAK,EAAC,MAAM,EACZ,KAAK,EAAC,KAAK,EAAA,EAEX,CAAA,CAAA,cAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACI,IAAI,EAAC,cAAc,EACnB,QAAQ,EAAC,KAAK,EAAA,EAEd,CACI,CAAA,aAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,iBAAiB,EACtB,IAAI,EAAC,eAAe,EACpB,IAAI,EAAC,YAAY,EACnB,CAAA,EACF,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,IAAI,EAAC,iBAAiB,EAAA,EACvB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CACzC,CACI,EACf,CACI,CAAA,qBAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,cAAc,EACnB,OAAO,EACH,IAAI,CAAC;kBACC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,KAAI;oBACzB,OAAO;wBACH,SAAS,EAAE,MAAM,CAAC,KAAK;wBACvB,KAAK,EAAE,MAAM,CAAC,KAAK;qBACtB;AACL,iBAAC;kBACD,EAAE,EAEZ,KAAK,EAAE,IAAI,CAAC,cAAc,EAC1B,QAAQ,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAA,CAChD,CACM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/atui-column-manager/atui-column-manager.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Element,\n    State,\n    Prop,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { ColDef } from 'ag-grid-community';\n\n@Component({\n    tag: 'atui-column-manager',\n    shadow: false,\n})\nexport class AtuiColumnManagerComponent {\n    /**\n     * Column definitions used in your atui-table\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    @Element() el;\n    @State() translations: any;\n    @State() checkedColumns: string[] = [];\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n        this.initializeCheckedColumns();\n    }\n\n    @Watch('col_defs')\n    colDefsChanged() {\n        this.initializeCheckedColumns();\n    }\n\n    private initializeCheckedColumns() {\n        if (this.col_defs) {\n            this.checkedColumns = this.col_defs\n                .filter((colDef) => colDef.hide !== true)\n                .map((colDef) => colDef.field);\n        }\n    }\n\n    /**\n     * Custom event used by atui-table-actions to perform ag-grid logic\n     *\n     * Emitted when checkbox is clicked\n     */\n    @Event({ eventName: 'atuiChange' })\n    atuiChange: EventEmitter;\n\n    changeHandler(event: Event) {\n        const checkboxEl = event.target as HTMLInputElement;\n        const columnId = checkboxEl.id;\n        const isChecked = checkboxEl.checked;\n\n        if (isChecked) {\n            this.checkedColumns = [...this.checkedColumns, columnId];\n        } else {\n            this.checkedColumns = this.checkedColumns.filter(\n                (id) => id !== columnId,\n            );\n        }\n\n        this.atuiChange.emit({\n            id: columnId,\n            checked: isChecked,\n        });\n    }\n\n    render() {\n        return (\n            <atui-menu\n                autoclose={false}\n                width=\"auto\"\n                align=\"end\"\n            >\n                <atui-tooltip\n                    slot=\"menu-trigger\"\n                    position=\"top\"\n                >\n                    <atui-button\n                        slot=\"tooltip-trigger\"\n                        type=\"secondaryText\"\n                        icon=\"graphic_eq\"\n                    />\n                    <span slot=\"tooltip-content\">\n                        {this.translations.ATUI.TABLE.MANAGE_COLUMNS}\n                    </span>\n                </atui-tooltip>\n                <atui-checkbox-group\n                    slot=\"menu-content\"\n                    options={\n                        this.col_defs\n                            ? this.col_defs.map((colDef) => {\n                                  return {\n                                      option_id: colDef.field,\n                                      label: colDef.field,\n                                  };\n                              })\n                            : []\n                    }\n                    value={this.checkedColumns}\n                    onChange={(event) => this.changeHandler(event)}\n                />\n            </atui-menu>\n        );\n    }\n}\n"],"version":3}