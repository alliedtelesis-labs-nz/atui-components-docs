{"file":"p-BpFeTOls.js","mappings":";;;;;;;MAqBa,gBAAgB,iBAAAA,kBAAA,CAAA,MAAA,gBAAA,SAAAC,CAAA,CAAA;;;;;AAIzB,IAAA,IAAI,CAAC,MAAkB,EAAA;AACnB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;;IAGxB,MAAM,GAAA;QACF,OAAO,IAAI,CAAC,EAAE;;AAGlB,IAAA,OAAO,CAAC,MAAkB,EAAA;AACtB,QAAA,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;AAC7B,QAAA,OAAO,IAAI;;AAGL,IAAA,UAAU,CAAC,QAAa,EAAA;AAC9B,QAAA,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ;AAC5B,QAAA,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;;;IAI9C,MAAM,GAAA;AACF,QAAA,QACI,CAAC,CAAA,IAAI,EAAC,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,yCAAyC,EAAA,EACjD,CACI,CAAA,YAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EACtC,SAAS,EAAE,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EACxB,OAAO,EAAE,CAAC,KAAK,KACX,IAAI,CAAC,UAAU,CACV,KAAK,CAAC,MAA2B,CAAC,KAAK,CAC3C,EAEL,WAAW,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,eAAe,EAAE,EAAA,CACrC,CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/cell-components/atui-edit-text-cell/atui-edit-text-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport interface IEditTextCellParams {\n    writePermission?: boolean;\n    validator?: (value: string) => boolean;\n    maxLength?: string;\n    onValueChange: (params: ICellRendererParams) => void;\n}\n\ninterface InitParams extends IEditTextCellParams, ICellRendererParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying and editing text.\n */\n\n@Component({\n    tag: 'atui-edit-text-cell',\n    shadow: false,\n})\nexport class AtuiEditTextCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n\n    init(params: InitParams): void {\n        this.params = params;\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    protected updateCell(newValue: any) {\n        this.params.value = newValue;\n        if (this.params.onValueChange) {\n            this.params.onValueChange(this.params);\n        }\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center leading-[100%]\">\n                <atui-input\n                    readonly={!this.params.writePermission}\n                    clearable={true}\n                    value={this.params.value}\n                    onInput={(event) =>\n                        this.updateCell(\n                            (event.target as HTMLInputElement).value,\n                        )\n                    }\n                    onMouseDown={(event) => event.stopPropagation()}\n                ></atui-input>\n            </Host>\n        );\n    }\n}\n"],"version":3}