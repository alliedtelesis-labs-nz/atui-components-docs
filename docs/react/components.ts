'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type AtuiButtonCustomEvent, type AtuiButtonGroupOptionCustomEvent, type AtuiColumnManagerCustomEvent, type AtuiCustomTimeRangeCustomEvent, type AtuiEvent, type AtuiListSelectorCustomEvent, type AtuiTableFiltersCustomEvent, type AtuiTimeRangeCustomEvent, type AtuiTimeWithUnitCustomEvent, type AtuiTreeCustomEvent, type AtuiTreeItemCustomEvent, type ColumnManagerChangeEvent, type DateRangeStrings, type FilterEvent, type ListSelectorItem, type SelectedTimeRangeExtended, type TimeRangeDisplay, type TimeWithUnit, type TreeNode } from "@alliedtelesis-labs-nz/atui-components-stencil";
import { AtuiAccordionItem as AtuiAccordionItemElement, defineCustomElement as defineAtuiAccordionItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-accordion-item.js";
import { AtuiAccordionTrigger as AtuiAccordionTriggerElement, defineCustomElement as defineAtuiAccordionTrigger } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-accordion-trigger.js";
import { AtuiAccordion as AtuiAccordionElement, defineCustomElement as defineAtuiAccordion } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-accordion.js";
import { AtuiAvatar as AtuiAvatarElement, defineCustomElement as defineAtuiAvatar } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-avatar.js";
import { AtuiBadge as AtuiBadgeElement, defineCustomElement as defineAtuiBadge } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-badge.js";
import { AtuiBreadcrumbItem as AtuiBreadcrumbItemElement, defineCustomElement as defineAtuiBreadcrumbItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-breadcrumb-item.js";
import { AtuiBreadcrumb as AtuiBreadcrumbElement, defineCustomElement as defineAtuiBreadcrumb } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-breadcrumb.js";
import { AtuiButtonGroupOption as AtuiButtonGroupOptionElement, defineCustomElement as defineAtuiButtonGroupOption } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-button-group-option.js";
import { AtuiButtonGroup as AtuiButtonGroupElement, defineCustomElement as defineAtuiButtonGroup } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-button-group.js";
import { AtuiButton as AtuiButtonElement, defineCustomElement as defineAtuiButton } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-button.js";
import { AtuiCard as AtuiCardElement, defineCustomElement as defineAtuiCard } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-card.js";
import { AtuiChartBarLine as AtuiChartBarLineElement, defineCustomElement as defineAtuiChartBarLine } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-chart-bar-line.js";
import { AtuiChartDonut as AtuiChartDonutElement, defineCustomElement as defineAtuiChartDonut } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-chart-donut.js";
import { AtuiCheckboxCell as AtuiCheckboxCellElement, defineCustomElement as defineAtuiCheckboxCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-checkbox-cell.js";
import { AtuiCheckboxGroup as AtuiCheckboxGroupElement, defineCustomElement as defineAtuiCheckboxGroup } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-checkbox-group.js";
import { AtuiCheckboxHeader as AtuiCheckboxHeaderElement, defineCustomElement as defineAtuiCheckboxHeader } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-checkbox-header.js";
import { AtuiCheckbox as AtuiCheckboxElement, defineCustomElement as defineAtuiCheckbox } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-checkbox.js";
import { AtuiChipListCell as AtuiChipListCellElement, defineCustomElement as defineAtuiChipListCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-chip-list-cell.js";
import { AtuiChipList as AtuiChipListElement, defineCustomElement as defineAtuiChipList } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-chip-list.js";
import { AtuiColorStatusCell as AtuiColorStatusCellElement, defineCustomElement as defineAtuiColorStatusCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-color-status-cell.js";
import { AtuiColumnManager as AtuiColumnManagerElement, defineCustomElement as defineAtuiColumnManager } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-column-manager.js";
import { AtuiCustomTimeRange as AtuiCustomTimeRangeElement, defineCustomElement as defineAtuiCustomTimeRange } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-custom-time-range.js";
import { AtuiDialog as AtuiDialogElement, defineCustomElement as defineAtuiDialog } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-dialog.js";
import { AtuiEditTextCell as AtuiEditTextCellElement, defineCustomElement as defineAtuiEditTextCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-edit-text-cell.js";
import { AtuiFormLabel as AtuiFormLabelElement, defineCustomElement as defineAtuiFormLabel } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-form-label.js";
import { AtuiHeader as AtuiHeaderElement, defineCustomElement as defineAtuiHeader } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-header.js";
import { AtuiIconCell as AtuiIconCellElement, defineCustomElement as defineAtuiIconCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-icon-cell.js";
import { AtuiImageCell as AtuiImageCellElement, defineCustomElement as defineAtuiImageCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-image-cell.js";
import { AtuiInputNumeric as AtuiInputNumericElement, defineCustomElement as defineAtuiInputNumeric } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-input-numeric.js";
import { AtuiInputRange as AtuiInputRangeElement, defineCustomElement as defineAtuiInputRange } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-input-range.js";
import { AtuiInput as AtuiInputElement, defineCustomElement as defineAtuiInput } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-input.js";
import { AtuiLayout as AtuiLayoutElement, defineCustomElement as defineAtuiLayout } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-layout.js";
import { AtuiListItem as AtuiListItemElement, defineCustomElement as defineAtuiListItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-list-item.js";
import { AtuiListSelector as AtuiListSelectorElement, defineCustomElement as defineAtuiListSelector } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-list-selector.js";
import { AtuiLoading as AtuiLoadingElement, defineCustomElement as defineAtuiLoading } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-loading.js";
import { AtuiMenuCell as AtuiMenuCellElement, defineCustomElement as defineAtuiMenuCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-menu-cell.js";
import { AtuiMenuItem as AtuiMenuItemElement, defineCustomElement as defineAtuiMenuItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-menu-item.js";
import { AtuiMenu as AtuiMenuElement, defineCustomElement as defineAtuiMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-menu.js";
import { AtuiMessage as AtuiMessageElement, defineCustomElement as defineAtuiMessage } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-message.js";
import { AtuiMultiBtnCell as AtuiMultiBtnCellElement, defineCustomElement as defineAtuiMultiBtnCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-multi-btn-cell.js";
import { AtuiMultiSelect as AtuiMultiSelectElement, defineCustomElement as defineAtuiMultiSelect } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-multi-select.js";
import { AtuiPlaceholder as AtuiPlaceholderElement, defineCustomElement as defineAtuiPlaceholder } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-placeholder.js";
import { AtuiPromptInput as AtuiPromptInputElement, defineCustomElement as defineAtuiPromptInput } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-prompt-input.js";
import { AtuiPromptMessage as AtuiPromptMessageElement, defineCustomElement as defineAtuiPromptMessage } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-prompt-message.js";
import { AtuiPromptThread as AtuiPromptThreadElement, defineCustomElement as defineAtuiPromptThread } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-prompt-thread.js";
import { AtuiRadioGroup as AtuiRadioGroupElement, defineCustomElement as defineAtuiRadioGroup } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-radio-group.js";
import { AtuiRadio as AtuiRadioElement, defineCustomElement as defineAtuiRadio } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-radio.js";
import { AtuiSearchTable as AtuiSearchTableElement, defineCustomElement as defineAtuiSearchTable } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-search-table.js";
import { AtuiSearch as AtuiSearchElement, defineCustomElement as defineAtuiSearch } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-search.js";
import { AtuiSelect as AtuiSelectElement, defineCustomElement as defineAtuiSelect } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-select.js";
import { AtuiSidePanel as AtuiSidePanelElement, defineCustomElement as defineAtuiSidePanel } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-side-panel.js";
import { AtuiSidebarMenu as AtuiSidebarMenuElement, defineCustomElement as defineAtuiSidebarMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-sidebar-menu.js";
import { AtuiSidebarMenuitem as AtuiSidebarMenuitemElement, defineCustomElement as defineAtuiSidebarMenuitem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-sidebar-menuitem.js";
import { AtuiSidebarSubmenu as AtuiSidebarSubmenuElement, defineCustomElement as defineAtuiSidebarSubmenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-sidebar-submenu.js";
import { AtuiSidebarTrigger as AtuiSidebarTriggerElement, defineCustomElement as defineAtuiSidebarTrigger } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-sidebar-trigger.js";
import { AtuiSidebar as AtuiSidebarElement, defineCustomElement as defineAtuiSidebar } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-sidebar.js";
import { AtuiSrcDest as AtuiSrcDestElement, defineCustomElement as defineAtuiSrcDest } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-src-dest.js";
import { AtuiStaticTable as AtuiStaticTableElement, defineCustomElement as defineAtuiStaticTable } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-static-table.js";
import { AtuiStatusBar as AtuiStatusBarElement, defineCustomElement as defineAtuiStatusBar } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-status-bar.js";
import { AtuiTabContent as AtuiTabContentElement, defineCustomElement as defineAtuiTabContent } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-tab-content.js";
import { AtuiTabSelector as AtuiTabSelectorElement, defineCustomElement as defineAtuiTabSelector } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-tab-selector.js";
import { AtuiTab as AtuiTabElement, defineCustomElement as defineAtuiTab } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-tab.js";
import { AtuiTableActions as AtuiTableActionsElement, defineCustomElement as defineAtuiTableActions } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-table-actions.js";
import { AtuiTableExportMenu as AtuiTableExportMenuElement, defineCustomElement as defineAtuiTableExportMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-table-export-menu.js";
import { AtuiTableFilterMenu as AtuiTableFilterMenuElement, defineCustomElement as defineAtuiTableFilterMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-table-filter-menu.js";
import { AtuiTableFilters as AtuiTableFiltersElement, defineCustomElement as defineAtuiTableFilters } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-table-filters.js";
import { AtuiTablePagination as AtuiTablePaginationElement, defineCustomElement as defineAtuiTablePagination } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-table-pagination.js";
import { AtuiTable as AtuiTableElement, defineCustomElement as defineAtuiTable } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-table.js";
import { AtuiTextBadgeCell as AtuiTextBadgeCellElement, defineCustomElement as defineAtuiTextBadgeCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-text-badge-cell.js";
import { AtuiTextCell as AtuiTextCellElement, defineCustomElement as defineAtuiTextCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-text-cell.js";
import { AtuiTextIconCell as AtuiTextIconCellElement, defineCustomElement as defineAtuiTextIconCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-text-icon-cell.js";
import { AtuiTextImageCell as AtuiTextImageCellElement, defineCustomElement as defineAtuiTextImageCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-text-image-cell.js";
import { AtuiTextStatusCell as AtuiTextStatusCellElement, defineCustomElement as defineAtuiTextStatusCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-text-status-cell.js";
import { AtuiTextarea as AtuiTextareaElement, defineCustomElement as defineAtuiTextarea } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-textarea.js";
import { AtuiTimeRange as AtuiTimeRangeElement, defineCustomElement as defineAtuiTimeRange } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-time-range.js";
import { AtuiTimeWithUnit as AtuiTimeWithUnitElement, defineCustomElement as defineAtuiTimeWithUnit } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-time-with-unit.js";
import { AtuiTitleSubtitleCell as AtuiTitleSubtitleCellElement, defineCustomElement as defineAtuiTitleSubtitleCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-title-subtitle-cell.js";
import { AtuiTitleSubtitleDateCell as AtuiTitleSubtitleDateCellElement, defineCustomElement as defineAtuiTitleSubtitleDateCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-title-subtitle-date-cell.js";
import { AtuiToggleCell as AtuiToggleCellElement, defineCustomElement as defineAtuiToggleCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-toggle-cell.js";
import { AtuiToggleSwitch as AtuiToggleSwitchElement, defineCustomElement as defineAtuiToggleSwitch } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-toggle-switch.js";
import { AtuiTooltip as AtuiTooltipElement, defineCustomElement as defineAtuiTooltip } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-tooltip.js";
import { AtuiTreeItem as AtuiTreeItemElement, defineCustomElement as defineAtuiTreeItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-tree-item.js";
import { AtuiTree as AtuiTreeElement, defineCustomElement as defineAtuiTree } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/atui-tree.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type AtuiAccordionEvents = NonNullable<unknown>;

export const AtuiAccordion: StencilReactComponent<AtuiAccordionElement, AtuiAccordionEvents> = /*@__PURE__*/ createComponent<AtuiAccordionElement, AtuiAccordionEvents>({
    tagName: 'atui-accordion',
    elementClass: AtuiAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiAccordionEvents,
    defineCustomElement: defineAtuiAccordion
});

type AtuiAccordionItemEvents = { onAtuiAccordionChange: EventName<CustomEvent<boolean>> };

export const AtuiAccordionItem: StencilReactComponent<AtuiAccordionItemElement, AtuiAccordionItemEvents> = /*@__PURE__*/ createComponent<AtuiAccordionItemElement, AtuiAccordionItemEvents>({
    tagName: 'atui-accordion-item',
    elementClass: AtuiAccordionItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiAccordionChange: 'atuiAccordionChange' } as AtuiAccordionItemEvents,
    defineCustomElement: defineAtuiAccordionItem
});

type AtuiAccordionTriggerEvents = NonNullable<unknown>;

export const AtuiAccordionTrigger: StencilReactComponent<AtuiAccordionTriggerElement, AtuiAccordionTriggerEvents> = /*@__PURE__*/ createComponent<AtuiAccordionTriggerElement, AtuiAccordionTriggerEvents>({
    tagName: 'atui-accordion-trigger',
    elementClass: AtuiAccordionTriggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiAccordionTriggerEvents,
    defineCustomElement: defineAtuiAccordionTrigger
});

type AtuiAvatarEvents = NonNullable<unknown>;

export const AtuiAvatar: StencilReactComponent<AtuiAvatarElement, AtuiAvatarEvents> = /*@__PURE__*/ createComponent<AtuiAvatarElement, AtuiAvatarEvents>({
    tagName: 'atui-avatar',
    elementClass: AtuiAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiAvatarEvents,
    defineCustomElement: defineAtuiAvatar
});

type AtuiBadgeEvents = NonNullable<unknown>;

export const AtuiBadge: StencilReactComponent<AtuiBadgeElement, AtuiBadgeEvents> = /*@__PURE__*/ createComponent<AtuiBadgeElement, AtuiBadgeEvents>({
    tagName: 'atui-badge',
    elementClass: AtuiBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiBadgeEvents,
    defineCustomElement: defineAtuiBadge
});

type AtuiBreadcrumbEvents = { onAtuiClick: EventName<CustomEvent<number>> };

export const AtuiBreadcrumb: StencilReactComponent<AtuiBreadcrumbElement, AtuiBreadcrumbEvents> = /*@__PURE__*/ createComponent<AtuiBreadcrumbElement, AtuiBreadcrumbEvents>({
    tagName: 'atui-breadcrumb',
    elementClass: AtuiBreadcrumbElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtuiBreadcrumbEvents,
    defineCustomElement: defineAtuiBreadcrumb
});

type AtuiBreadcrumbItemEvents = NonNullable<unknown>;

export const AtuiBreadcrumbItem: StencilReactComponent<AtuiBreadcrumbItemElement, AtuiBreadcrumbItemEvents> = /*@__PURE__*/ createComponent<AtuiBreadcrumbItemElement, AtuiBreadcrumbItemEvents>({
    tagName: 'atui-breadcrumb-item',
    elementClass: AtuiBreadcrumbItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiBreadcrumbItemEvents,
    defineCustomElement: defineAtuiBreadcrumbItem
});

type AtuiButtonEvents = { onAtuiClick: EventName<AtuiButtonCustomEvent<AtuiEvent>> };

export const AtuiButton: StencilReactComponent<AtuiButtonElement, AtuiButtonEvents> = /*@__PURE__*/ createComponent<AtuiButtonElement, AtuiButtonEvents>({
    tagName: 'atui-button',
    elementClass: AtuiButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtuiButtonEvents,
    defineCustomElement: defineAtuiButton
});

type AtuiButtonGroupEvents = {
    onAtuiIndexChange: EventName<CustomEvent<number>>,
    onAtuiChange: EventName<CustomEvent<string>>
};

export const AtuiButtonGroup: StencilReactComponent<AtuiButtonGroupElement, AtuiButtonGroupEvents> = /*@__PURE__*/ createComponent<AtuiButtonGroupElement, AtuiButtonGroupEvents>({
    tagName: 'atui-button-group',
    elementClass: AtuiButtonGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiIndexChange: 'atuiIndexChange',
        onAtuiChange: 'atuiChange'
    } as AtuiButtonGroupEvents,
    defineCustomElement: defineAtuiButtonGroup
});

type AtuiButtonGroupOptionEvents = { onAtuiClick: EventName<AtuiButtonGroupOptionCustomEvent<AtuiEvent>> };

export const AtuiButtonGroupOption: StencilReactComponent<AtuiButtonGroupOptionElement, AtuiButtonGroupOptionEvents> = /*@__PURE__*/ createComponent<AtuiButtonGroupOptionElement, AtuiButtonGroupOptionEvents>({
    tagName: 'atui-button-group-option',
    elementClass: AtuiButtonGroupOptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtuiButtonGroupOptionEvents,
    defineCustomElement: defineAtuiButtonGroupOption
});

type AtuiCardEvents = NonNullable<unknown>;

export const AtuiCard: StencilReactComponent<AtuiCardElement, AtuiCardEvents> = /*@__PURE__*/ createComponent<AtuiCardElement, AtuiCardEvents>({
    tagName: 'atui-card',
    elementClass: AtuiCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiCardEvents,
    defineCustomElement: defineAtuiCard
});

type AtuiChartBarLineEvents = NonNullable<unknown>;

export const AtuiChartBarLine: StencilReactComponent<AtuiChartBarLineElement, AtuiChartBarLineEvents> = /*@__PURE__*/ createComponent<AtuiChartBarLineElement, AtuiChartBarLineEvents>({
    tagName: 'atui-chart-bar-line',
    elementClass: AtuiChartBarLineElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiChartBarLineEvents,
    defineCustomElement: defineAtuiChartBarLine
});

type AtuiChartDonutEvents = NonNullable<unknown>;

export const AtuiChartDonut: StencilReactComponent<AtuiChartDonutElement, AtuiChartDonutEvents> = /*@__PURE__*/ createComponent<AtuiChartDonutElement, AtuiChartDonutEvents>({
    tagName: 'atui-chart-donut',
    elementClass: AtuiChartDonutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiChartDonutEvents,
    defineCustomElement: defineAtuiChartDonut
});

type AtuiCheckboxEvents = { onAtuiChange: EventName<CustomEvent<boolean>> };

export const AtuiCheckbox: StencilReactComponent<AtuiCheckboxElement, AtuiCheckboxEvents> = /*@__PURE__*/ createComponent<AtuiCheckboxElement, AtuiCheckboxEvents>({
    tagName: 'atui-checkbox',
    elementClass: AtuiCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiCheckboxEvents,
    defineCustomElement: defineAtuiCheckbox
});

type AtuiCheckboxCellEvents = NonNullable<unknown>;

export const AtuiCheckboxCell: StencilReactComponent<AtuiCheckboxCellElement, AtuiCheckboxCellEvents> = /*@__PURE__*/ createComponent<AtuiCheckboxCellElement, AtuiCheckboxCellEvents>({
    tagName: 'atui-checkbox-cell',
    elementClass: AtuiCheckboxCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiCheckboxCellEvents,
    defineCustomElement: defineAtuiCheckboxCell
});

type AtuiCheckboxGroupEvents = { onAtuiChange: EventName<CustomEvent<string[]>> };

export const AtuiCheckboxGroup: StencilReactComponent<AtuiCheckboxGroupElement, AtuiCheckboxGroupEvents> = /*@__PURE__*/ createComponent<AtuiCheckboxGroupElement, AtuiCheckboxGroupEvents>({
    tagName: 'atui-checkbox-group',
    elementClass: AtuiCheckboxGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiCheckboxGroupEvents,
    defineCustomElement: defineAtuiCheckboxGroup
});

type AtuiCheckboxHeaderEvents = NonNullable<unknown>;

export const AtuiCheckboxHeader: StencilReactComponent<AtuiCheckboxHeaderElement, AtuiCheckboxHeaderEvents> = /*@__PURE__*/ createComponent<AtuiCheckboxHeaderElement, AtuiCheckboxHeaderEvents>({
    tagName: 'atui-checkbox-header',
    elementClass: AtuiCheckboxHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiCheckboxHeaderEvents,
    defineCustomElement: defineAtuiCheckboxHeader
});

type AtuiChipListEvents = { onAtuiRemoveChip: EventName<CustomEvent<string[]>> };

export const AtuiChipList: StencilReactComponent<AtuiChipListElement, AtuiChipListEvents> = /*@__PURE__*/ createComponent<AtuiChipListElement, AtuiChipListEvents>({
    tagName: 'atui-chip-list',
    elementClass: AtuiChipListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiRemoveChip: 'atuiRemoveChip' } as AtuiChipListEvents,
    defineCustomElement: defineAtuiChipList
});

type AtuiChipListCellEvents = NonNullable<unknown>;

export const AtuiChipListCell: StencilReactComponent<AtuiChipListCellElement, AtuiChipListCellEvents> = /*@__PURE__*/ createComponent<AtuiChipListCellElement, AtuiChipListCellEvents>({
    tagName: 'atui-chip-list-cell',
    elementClass: AtuiChipListCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiChipListCellEvents,
    defineCustomElement: defineAtuiChipListCell
});

type AtuiColorStatusCellEvents = NonNullable<unknown>;

export const AtuiColorStatusCell: StencilReactComponent<AtuiColorStatusCellElement, AtuiColorStatusCellEvents> = /*@__PURE__*/ createComponent<AtuiColorStatusCellElement, AtuiColorStatusCellEvents>({
    tagName: 'atui-color-status-cell',
    elementClass: AtuiColorStatusCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiColorStatusCellEvents,
    defineCustomElement: defineAtuiColorStatusCell
});

type AtuiColumnManagerEvents = { onAtuiChange: EventName<AtuiColumnManagerCustomEvent<ColumnManagerChangeEvent>> };

export const AtuiColumnManager: StencilReactComponent<AtuiColumnManagerElement, AtuiColumnManagerEvents> = /*@__PURE__*/ createComponent<AtuiColumnManagerElement, AtuiColumnManagerEvents>({
    tagName: 'atui-column-manager',
    elementClass: AtuiColumnManagerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiColumnManagerEvents,
    defineCustomElement: defineAtuiColumnManager
});

type AtuiCustomTimeRangeEvents = {
    onAtuiCancel: EventName<CustomEvent<null>>,
    onAtuiSubmit: EventName<AtuiCustomTimeRangeCustomEvent<DateRangeStrings>>
};

export const AtuiCustomTimeRange: StencilReactComponent<AtuiCustomTimeRangeElement, AtuiCustomTimeRangeEvents> = /*@__PURE__*/ createComponent<AtuiCustomTimeRangeElement, AtuiCustomTimeRangeEvents>({
    tagName: 'atui-custom-time-range',
    elementClass: AtuiCustomTimeRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiCancel: 'atuiCancel',
        onAtuiSubmit: 'atuiSubmit'
    } as AtuiCustomTimeRangeEvents,
    defineCustomElement: defineAtuiCustomTimeRange
});

type AtuiDialogEvents = NonNullable<unknown>;

export const AtuiDialog: StencilReactComponent<AtuiDialogElement, AtuiDialogEvents> = /*@__PURE__*/ createComponent<AtuiDialogElement, AtuiDialogEvents>({
    tagName: 'atui-dialog',
    elementClass: AtuiDialogElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiDialogEvents,
    defineCustomElement: defineAtuiDialog
});

type AtuiEditTextCellEvents = NonNullable<unknown>;

export const AtuiEditTextCell: StencilReactComponent<AtuiEditTextCellElement, AtuiEditTextCellEvents> = /*@__PURE__*/ createComponent<AtuiEditTextCellElement, AtuiEditTextCellEvents>({
    tagName: 'atui-edit-text-cell',
    elementClass: AtuiEditTextCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiEditTextCellEvents,
    defineCustomElement: defineAtuiEditTextCell
});

type AtuiFormLabelEvents = NonNullable<unknown>;

export const AtuiFormLabel: StencilReactComponent<AtuiFormLabelElement, AtuiFormLabelEvents> = /*@__PURE__*/ createComponent<AtuiFormLabelElement, AtuiFormLabelEvents>({
    tagName: 'atui-form-label',
    elementClass: AtuiFormLabelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiFormLabelEvents,
    defineCustomElement: defineAtuiFormLabel
});

type AtuiHeaderEvents = NonNullable<unknown>;

export const AtuiHeader: StencilReactComponent<AtuiHeaderElement, AtuiHeaderEvents> = /*@__PURE__*/ createComponent<AtuiHeaderElement, AtuiHeaderEvents>({
    tagName: 'atui-header',
    elementClass: AtuiHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiHeaderEvents,
    defineCustomElement: defineAtuiHeader
});

type AtuiIconCellEvents = NonNullable<unknown>;

export const AtuiIconCell: StencilReactComponent<AtuiIconCellElement, AtuiIconCellEvents> = /*@__PURE__*/ createComponent<AtuiIconCellElement, AtuiIconCellEvents>({
    tagName: 'atui-icon-cell',
    elementClass: AtuiIconCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiIconCellEvents,
    defineCustomElement: defineAtuiIconCell
});

type AtuiImageCellEvents = NonNullable<unknown>;

export const AtuiImageCell: StencilReactComponent<AtuiImageCellElement, AtuiImageCellEvents> = /*@__PURE__*/ createComponent<AtuiImageCellElement, AtuiImageCellEvents>({
    tagName: 'atui-image-cell',
    elementClass: AtuiImageCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiImageCellEvents,
    defineCustomElement: defineAtuiImageCell
});

type AtuiInputEvents = { onAtuiChange: EventName<CustomEvent<string | number>> };

export const AtuiInput: StencilReactComponent<AtuiInputElement, AtuiInputEvents> = /*@__PURE__*/ createComponent<AtuiInputElement, AtuiInputEvents>({
    tagName: 'atui-input',
    elementClass: AtuiInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiInputEvents,
    defineCustomElement: defineAtuiInput
});

type AtuiInputNumericEvents = { onAtuiChange: EventName<CustomEvent<string | number>> };

export const AtuiInputNumeric: StencilReactComponent<AtuiInputNumericElement, AtuiInputNumericEvents> = /*@__PURE__*/ createComponent<AtuiInputNumericElement, AtuiInputNumericEvents>({
    tagName: 'atui-input-numeric',
    elementClass: AtuiInputNumericElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiInputNumericEvents,
    defineCustomElement: defineAtuiInputNumeric
});

type AtuiInputRangeEvents = { onAtuiChange: EventName<CustomEvent<number>> };

export const AtuiInputRange: StencilReactComponent<AtuiInputRangeElement, AtuiInputRangeEvents> = /*@__PURE__*/ createComponent<AtuiInputRangeElement, AtuiInputRangeEvents>({
    tagName: 'atui-input-range',
    elementClass: AtuiInputRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiInputRangeEvents,
    defineCustomElement: defineAtuiInputRange
});

type AtuiLayoutEvents = NonNullable<unknown>;

export const AtuiLayout: StencilReactComponent<AtuiLayoutElement, AtuiLayoutEvents> = /*@__PURE__*/ createComponent<AtuiLayoutElement, AtuiLayoutEvents>({
    tagName: 'atui-layout',
    elementClass: AtuiLayoutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiLayoutEvents,
    defineCustomElement: defineAtuiLayout
});

type AtuiListItemEvents = NonNullable<unknown>;

export const AtuiListItem: StencilReactComponent<AtuiListItemElement, AtuiListItemEvents> = /*@__PURE__*/ createComponent<AtuiListItemElement, AtuiListItemEvents>({
    tagName: 'atui-list-item',
    elementClass: AtuiListItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiListItemEvents,
    defineCustomElement: defineAtuiListItem
});

type AtuiListSelectorEvents = {
    onAtuiChange: EventName<AtuiListSelectorCustomEvent<ListSelectorItem>>,
    onAtuiInfoButtonClick: EventName<AtuiListSelectorCustomEvent<AtuiEvent>>
};

export const AtuiListSelector: StencilReactComponent<AtuiListSelectorElement, AtuiListSelectorEvents> = /*@__PURE__*/ createComponent<AtuiListSelectorElement, AtuiListSelectorEvents>({
    tagName: 'atui-list-selector',
    elementClass: AtuiListSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiChange: 'atuiChange',
        onAtuiInfoButtonClick: 'atuiInfoButtonClick'
    } as AtuiListSelectorEvents,
    defineCustomElement: defineAtuiListSelector
});

type AtuiLoadingEvents = NonNullable<unknown>;

export const AtuiLoading: StencilReactComponent<AtuiLoadingElement, AtuiLoadingEvents> = /*@__PURE__*/ createComponent<AtuiLoadingElement, AtuiLoadingEvents>({
    tagName: 'atui-loading',
    elementClass: AtuiLoadingElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiLoadingEvents,
    defineCustomElement: defineAtuiLoading
});

type AtuiMenuEvents = { onAtuiMenuStateChange: EventName<CustomEvent<boolean>> };

export const AtuiMenu: StencilReactComponent<AtuiMenuElement, AtuiMenuEvents> = /*@__PURE__*/ createComponent<AtuiMenuElement, AtuiMenuEvents>({
    tagName: 'atui-menu',
    elementClass: AtuiMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiMenuStateChange: 'atuiMenuStateChange' } as AtuiMenuEvents,
    defineCustomElement: defineAtuiMenu
});

type AtuiMenuCellEvents = NonNullable<unknown>;

export const AtuiMenuCell: StencilReactComponent<AtuiMenuCellElement, AtuiMenuCellEvents> = /*@__PURE__*/ createComponent<AtuiMenuCellElement, AtuiMenuCellEvents>({
    tagName: 'atui-menu-cell',
    elementClass: AtuiMenuCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiMenuCellEvents,
    defineCustomElement: defineAtuiMenuCell
});

type AtuiMenuItemEvents = NonNullable<unknown>;

export const AtuiMenuItem: StencilReactComponent<AtuiMenuItemElement, AtuiMenuItemEvents> = /*@__PURE__*/ createComponent<AtuiMenuItemElement, AtuiMenuItemEvents>({
    tagName: 'atui-menu-item',
    elementClass: AtuiMenuItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiMenuItemEvents,
    defineCustomElement: defineAtuiMenuItem
});

type AtuiMessageEvents = NonNullable<unknown>;

export const AtuiMessage: StencilReactComponent<AtuiMessageElement, AtuiMessageEvents> = /*@__PURE__*/ createComponent<AtuiMessageElement, AtuiMessageEvents>({
    tagName: 'atui-message',
    elementClass: AtuiMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiMessageEvents,
    defineCustomElement: defineAtuiMessage
});

type AtuiMultiBtnCellEvents = NonNullable<unknown>;

export const AtuiMultiBtnCell: StencilReactComponent<AtuiMultiBtnCellElement, AtuiMultiBtnCellEvents> = /*@__PURE__*/ createComponent<AtuiMultiBtnCellElement, AtuiMultiBtnCellEvents>({
    tagName: 'atui-multi-btn-cell',
    elementClass: AtuiMultiBtnCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiMultiBtnCellEvents,
    defineCustomElement: defineAtuiMultiBtnCell
});

type AtuiMultiSelectEvents = { onAtuiChange: EventName<CustomEvent<string[]>> };

export const AtuiMultiSelect: StencilReactComponent<AtuiMultiSelectElement, AtuiMultiSelectEvents> = /*@__PURE__*/ createComponent<AtuiMultiSelectElement, AtuiMultiSelectEvents>({
    tagName: 'atui-multi-select',
    elementClass: AtuiMultiSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiMultiSelectEvents,
    defineCustomElement: defineAtuiMultiSelect
});

type AtuiPlaceholderEvents = NonNullable<unknown>;

export const AtuiPlaceholder: StencilReactComponent<AtuiPlaceholderElement, AtuiPlaceholderEvents> = /*@__PURE__*/ createComponent<AtuiPlaceholderElement, AtuiPlaceholderEvents>({
    tagName: 'atui-placeholder',
    elementClass: AtuiPlaceholderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiPlaceholderEvents,
    defineCustomElement: defineAtuiPlaceholder
});

type AtuiPromptInputEvents = {
    onAtuiChange: EventName<CustomEvent<string>>,
    onAtuiSubmit: EventName<CustomEvent<string>>,
    onAtuiStop: EventName<CustomEvent<void>>
};

export const AtuiPromptInput: StencilReactComponent<AtuiPromptInputElement, AtuiPromptInputEvents> = /*@__PURE__*/ createComponent<AtuiPromptInputElement, AtuiPromptInputEvents>({
    tagName: 'atui-prompt-input',
    elementClass: AtuiPromptInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiChange: 'atuiChange',
        onAtuiSubmit: 'atuiSubmit',
        onAtuiStop: 'atuiStop'
    } as AtuiPromptInputEvents,
    defineCustomElement: defineAtuiPromptInput
});

type AtuiPromptMessageEvents = {
    onAtuiCopy: EventName<CustomEvent<string>>,
    onAtuiPositiveFeedback: EventName<CustomEvent<void>>,
    onAtuiNegativeFeedback: EventName<CustomEvent<void>>,
    onAtuiRetry: EventName<CustomEvent<void>>,
    onAtuiEdit: EventName<CustomEvent<string>>
};

export const AtuiPromptMessage: StencilReactComponent<AtuiPromptMessageElement, AtuiPromptMessageEvents> = /*@__PURE__*/ createComponent<AtuiPromptMessageElement, AtuiPromptMessageEvents>({
    tagName: 'atui-prompt-message',
    elementClass: AtuiPromptMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiCopy: 'atuiCopy',
        onAtuiPositiveFeedback: 'atuiPositiveFeedback',
        onAtuiNegativeFeedback: 'atuiNegativeFeedback',
        onAtuiRetry: 'atuiRetry',
        onAtuiEdit: 'atuiEdit'
    } as AtuiPromptMessageEvents,
    defineCustomElement: defineAtuiPromptMessage
});

type AtuiPromptThreadEvents = {
    onAtuiMessageCopy: EventName<CustomEvent<{
        messageId: string;
        content: string;
    }>>,
    onAtuiMessageRetry: EventName<CustomEvent<{ messageId: string }>>,
    onAtuiMessageEdit: EventName<CustomEvent<{
        messageId: string;
        content: string;
    }>>
};

export const AtuiPromptThread: StencilReactComponent<AtuiPromptThreadElement, AtuiPromptThreadEvents> = /*@__PURE__*/ createComponent<AtuiPromptThreadElement, AtuiPromptThreadEvents>({
    tagName: 'atui-prompt-thread',
    elementClass: AtuiPromptThreadElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiMessageCopy: 'atuiMessageCopy',
        onAtuiMessageRetry: 'atuiMessageRetry',
        onAtuiMessageEdit: 'atuiMessageEdit'
    } as AtuiPromptThreadEvents,
    defineCustomElement: defineAtuiPromptThread
});

type AtuiRadioEvents = { onAtuiChange: EventName<CustomEvent<boolean>> };

export const AtuiRadio: StencilReactComponent<AtuiRadioElement, AtuiRadioEvents> = /*@__PURE__*/ createComponent<AtuiRadioElement, AtuiRadioEvents>({
    tagName: 'atui-radio',
    elementClass: AtuiRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiRadioEvents,
    defineCustomElement: defineAtuiRadio
});

type AtuiRadioGroupEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtuiRadioGroup: StencilReactComponent<AtuiRadioGroupElement, AtuiRadioGroupEvents> = /*@__PURE__*/ createComponent<AtuiRadioGroupElement, AtuiRadioGroupEvents>({
    tagName: 'atui-radio-group',
    elementClass: AtuiRadioGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiRadioGroupEvents,
    defineCustomElement: defineAtuiRadioGroup
});

type AtuiSearchEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtuiSearch: StencilReactComponent<AtuiSearchElement, AtuiSearchEvents> = /*@__PURE__*/ createComponent<AtuiSearchElement, AtuiSearchEvents>({
    tagName: 'atui-search',
    elementClass: AtuiSearchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiSearchEvents,
    defineCustomElement: defineAtuiSearch
});

type AtuiSearchTableEvents = NonNullable<unknown>;

export const AtuiSearchTable: StencilReactComponent<AtuiSearchTableElement, AtuiSearchTableEvents> = /*@__PURE__*/ createComponent<AtuiSearchTableElement, AtuiSearchTableEvents>({
    tagName: 'atui-search-table',
    elementClass: AtuiSearchTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSearchTableEvents,
    defineCustomElement: defineAtuiSearchTable
});

type AtuiSelectEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtuiSelect: StencilReactComponent<AtuiSelectElement, AtuiSelectEvents> = /*@__PURE__*/ createComponent<AtuiSelectElement, AtuiSelectEvents>({
    tagName: 'atui-select',
    elementClass: AtuiSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiSelectEvents,
    defineCustomElement: defineAtuiSelect
});

type AtuiSidePanelEvents = NonNullable<unknown>;

export const AtuiSidePanel: StencilReactComponent<AtuiSidePanelElement, AtuiSidePanelEvents> = /*@__PURE__*/ createComponent<AtuiSidePanelElement, AtuiSidePanelEvents>({
    tagName: 'atui-side-panel',
    elementClass: AtuiSidePanelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSidePanelEvents,
    defineCustomElement: defineAtuiSidePanel
});

type AtuiSidebarEvents = { onAtuiSidebarChange: EventName<CustomEvent<any>> };

export const AtuiSidebar: StencilReactComponent<AtuiSidebarElement, AtuiSidebarEvents> = /*@__PURE__*/ createComponent<AtuiSidebarElement, AtuiSidebarEvents>({
    tagName: 'atui-sidebar',
    elementClass: AtuiSidebarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiSidebarChange: 'atuiSidebarChange' } as AtuiSidebarEvents,
    defineCustomElement: defineAtuiSidebar
});

type AtuiSidebarMenuEvents = NonNullable<unknown>;

export const AtuiSidebarMenu: StencilReactComponent<AtuiSidebarMenuElement, AtuiSidebarMenuEvents> = /*@__PURE__*/ createComponent<AtuiSidebarMenuElement, AtuiSidebarMenuEvents>({
    tagName: 'atui-sidebar-menu',
    elementClass: AtuiSidebarMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSidebarMenuEvents,
    defineCustomElement: defineAtuiSidebarMenu
});

type AtuiSidebarMenuitemEvents = NonNullable<unknown>;

export const AtuiSidebarMenuitem: StencilReactComponent<AtuiSidebarMenuitemElement, AtuiSidebarMenuitemEvents> = /*@__PURE__*/ createComponent<AtuiSidebarMenuitemElement, AtuiSidebarMenuitemEvents>({
    tagName: 'atui-sidebar-menuitem',
    elementClass: AtuiSidebarMenuitemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSidebarMenuitemEvents,
    defineCustomElement: defineAtuiSidebarMenuitem
});

type AtuiSidebarSubmenuEvents = NonNullable<unknown>;

export const AtuiSidebarSubmenu: StencilReactComponent<AtuiSidebarSubmenuElement, AtuiSidebarSubmenuEvents> = /*@__PURE__*/ createComponent<AtuiSidebarSubmenuElement, AtuiSidebarSubmenuEvents>({
    tagName: 'atui-sidebar-submenu',
    elementClass: AtuiSidebarSubmenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSidebarSubmenuEvents,
    defineCustomElement: defineAtuiSidebarSubmenu
});

type AtuiSidebarTriggerEvents = NonNullable<unknown>;

export const AtuiSidebarTrigger: StencilReactComponent<AtuiSidebarTriggerElement, AtuiSidebarTriggerEvents> = /*@__PURE__*/ createComponent<AtuiSidebarTriggerElement, AtuiSidebarTriggerEvents>({
    tagName: 'atui-sidebar-trigger',
    elementClass: AtuiSidebarTriggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSidebarTriggerEvents,
    defineCustomElement: defineAtuiSidebarTrigger
});

type AtuiSrcDestEvents = NonNullable<unknown>;

export const AtuiSrcDest: StencilReactComponent<AtuiSrcDestElement, AtuiSrcDestEvents> = /*@__PURE__*/ createComponent<AtuiSrcDestElement, AtuiSrcDestEvents>({
    tagName: 'atui-src-dest',
    elementClass: AtuiSrcDestElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiSrcDestEvents,
    defineCustomElement: defineAtuiSrcDest
});

type AtuiStaticTableEvents = NonNullable<unknown>;

export const AtuiStaticTable: StencilReactComponent<AtuiStaticTableElement, AtuiStaticTableEvents> = /*@__PURE__*/ createComponent<AtuiStaticTableElement, AtuiStaticTableEvents>({
    tagName: 'atui-static-table',
    elementClass: AtuiStaticTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiStaticTableEvents,
    defineCustomElement: defineAtuiStaticTable
});

type AtuiStatusBarEvents = NonNullable<unknown>;

export const AtuiStatusBar: StencilReactComponent<AtuiStatusBarElement, AtuiStatusBarEvents> = /*@__PURE__*/ createComponent<AtuiStatusBarElement, AtuiStatusBarEvents>({
    tagName: 'atui-status-bar',
    elementClass: AtuiStatusBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiStatusBarEvents,
    defineCustomElement: defineAtuiStatusBar
});

type AtuiTabEvents = NonNullable<unknown>;

export const AtuiTab: StencilReactComponent<AtuiTabElement, AtuiTabEvents> = /*@__PURE__*/ createComponent<AtuiTabElement, AtuiTabEvents>({
    tagName: 'atui-tab',
    elementClass: AtuiTabElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTabEvents,
    defineCustomElement: defineAtuiTab
});

type AtuiTabContentEvents = NonNullable<unknown>;

export const AtuiTabContent: StencilReactComponent<AtuiTabContentElement, AtuiTabContentEvents> = /*@__PURE__*/ createComponent<AtuiTabContentElement, AtuiTabContentEvents>({
    tagName: 'atui-tab-content',
    elementClass: AtuiTabContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTabContentEvents,
    defineCustomElement: defineAtuiTabContent
});

type AtuiTabSelectorEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtuiTabSelector: StencilReactComponent<AtuiTabSelectorElement, AtuiTabSelectorEvents> = /*@__PURE__*/ createComponent<AtuiTabSelectorElement, AtuiTabSelectorEvents>({
    tagName: 'atui-tab-selector',
    elementClass: AtuiTabSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiTabSelectorEvents,
    defineCustomElement: defineAtuiTabSelector
});

type AtuiTableEvents = {
    onAtuiSortChange: EventName<CustomEvent<{
        colId: string;
        sortDirection: 'asc' | 'desc' | null;
    }>>
};

export const AtuiTable: StencilReactComponent<AtuiTableElement, AtuiTableEvents> = /*@__PURE__*/ createComponent<AtuiTableElement, AtuiTableEvents>({
    tagName: 'atui-table',
    elementClass: AtuiTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiSortChange: 'atuiSortChange' } as AtuiTableEvents,
    defineCustomElement: defineAtuiTable
});

type AtuiTableActionsEvents = {
    onAtuiExportCsv: EventName<CustomEvent<any>>,
    onAtuiExportPdf: EventName<CustomEvent<any>>,
    onAtuiChange: EventName<CustomEvent<any>>
};

export const AtuiTableActions: StencilReactComponent<AtuiTableActionsElement, AtuiTableActionsEvents> = /*@__PURE__*/ createComponent<AtuiTableActionsElement, AtuiTableActionsEvents>({
    tagName: 'atui-table-actions',
    elementClass: AtuiTableActionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiExportCsv: 'atuiExportCsv',
        onAtuiExportPdf: 'atuiExportPdf',
        onAtuiChange: 'atuiChange'
    } as AtuiTableActionsEvents,
    defineCustomElement: defineAtuiTableActions
});

type AtuiTableExportMenuEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtuiTableExportMenu: StencilReactComponent<AtuiTableExportMenuElement, AtuiTableExportMenuEvents> = /*@__PURE__*/ createComponent<AtuiTableExportMenuElement, AtuiTableExportMenuEvents>({
    tagName: 'atui-table-export-menu',
    elementClass: AtuiTableExportMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiTableExportMenuEvents,
    defineCustomElement: defineAtuiTableExportMenu
});

type AtuiTableFilterMenuEvents = { onAtuiChange: EventName<CustomEvent<string[]>> };

export const AtuiTableFilterMenu: StencilReactComponent<AtuiTableFilterMenuElement, AtuiTableFilterMenuEvents> = /*@__PURE__*/ createComponent<AtuiTableFilterMenuElement, AtuiTableFilterMenuEvents>({
    tagName: 'atui-table-filter-menu',
    elementClass: AtuiTableFilterMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiTableFilterMenuEvents,
    defineCustomElement: defineAtuiTableFilterMenu
});

type AtuiTableFiltersEvents = { onAtuiChange: EventName<AtuiTableFiltersCustomEvent<FilterEvent[]>> };

export const AtuiTableFilters: StencilReactComponent<AtuiTableFiltersElement, AtuiTableFiltersEvents> = /*@__PURE__*/ createComponent<AtuiTableFiltersElement, AtuiTableFiltersEvents>({
    tagName: 'atui-table-filters',
    elementClass: AtuiTableFiltersElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiTableFiltersEvents,
    defineCustomElement: defineAtuiTableFilters
});

type AtuiTablePaginationEvents = {
    onAtuiChange: EventName<CustomEvent<number>>,
    onAtuiPageSizeChange: EventName<CustomEvent<number>>
};

export const AtuiTablePagination: StencilReactComponent<AtuiTablePaginationElement, AtuiTablePaginationEvents> = /*@__PURE__*/ createComponent<AtuiTablePaginationElement, AtuiTablePaginationEvents>({
    tagName: 'atui-table-pagination',
    elementClass: AtuiTablePaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiChange: 'atuiChange',
        onAtuiPageSizeChange: 'atuiPageSizeChange'
    } as AtuiTablePaginationEvents,
    defineCustomElement: defineAtuiTablePagination
});

type AtuiTextBadgeCellEvents = NonNullable<unknown>;

export const AtuiTextBadgeCell: StencilReactComponent<AtuiTextBadgeCellElement, AtuiTextBadgeCellEvents> = /*@__PURE__*/ createComponent<AtuiTextBadgeCellElement, AtuiTextBadgeCellEvents>({
    tagName: 'atui-text-badge-cell',
    elementClass: AtuiTextBadgeCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTextBadgeCellEvents,
    defineCustomElement: defineAtuiTextBadgeCell
});

type AtuiTextCellEvents = NonNullable<unknown>;

export const AtuiTextCell: StencilReactComponent<AtuiTextCellElement, AtuiTextCellEvents> = /*@__PURE__*/ createComponent<AtuiTextCellElement, AtuiTextCellEvents>({
    tagName: 'atui-text-cell',
    elementClass: AtuiTextCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTextCellEvents,
    defineCustomElement: defineAtuiTextCell
});

type AtuiTextIconCellEvents = NonNullable<unknown>;

export const AtuiTextIconCell: StencilReactComponent<AtuiTextIconCellElement, AtuiTextIconCellEvents> = /*@__PURE__*/ createComponent<AtuiTextIconCellElement, AtuiTextIconCellEvents>({
    tagName: 'atui-text-icon-cell',
    elementClass: AtuiTextIconCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTextIconCellEvents,
    defineCustomElement: defineAtuiTextIconCell
});

type AtuiTextImageCellEvents = NonNullable<unknown>;

export const AtuiTextImageCell: StencilReactComponent<AtuiTextImageCellElement, AtuiTextImageCellEvents> = /*@__PURE__*/ createComponent<AtuiTextImageCellElement, AtuiTextImageCellEvents>({
    tagName: 'atui-text-image-cell',
    elementClass: AtuiTextImageCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTextImageCellEvents,
    defineCustomElement: defineAtuiTextImageCell
});

type AtuiTextStatusCellEvents = NonNullable<unknown>;

export const AtuiTextStatusCell: StencilReactComponent<AtuiTextStatusCellElement, AtuiTextStatusCellEvents> = /*@__PURE__*/ createComponent<AtuiTextStatusCellElement, AtuiTextStatusCellEvents>({
    tagName: 'atui-text-status-cell',
    elementClass: AtuiTextStatusCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTextStatusCellEvents,
    defineCustomElement: defineAtuiTextStatusCell
});

type AtuiTextareaEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtuiTextarea: StencilReactComponent<AtuiTextareaElement, AtuiTextareaEvents> = /*@__PURE__*/ createComponent<AtuiTextareaElement, AtuiTextareaEvents>({
    tagName: 'atui-textarea',
    elementClass: AtuiTextareaElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiTextareaEvents,
    defineCustomElement: defineAtuiTextarea
});

type AtuiTimeRangeEvents = { onAtuiChange: EventName<AtuiTimeRangeCustomEvent<SelectedTimeRangeExtended>> };

export const AtuiTimeRange: StencilReactComponent<AtuiTimeRangeElement, AtuiTimeRangeEvents> = /*@__PURE__*/ createComponent<AtuiTimeRangeElement, AtuiTimeRangeEvents>({
    tagName: 'atui-time-range',
    elementClass: AtuiTimeRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiTimeRangeEvents,
    defineCustomElement: defineAtuiTimeRange
});

type AtuiTimeWithUnitEvents = {
    onAtuiCancel: EventName<CustomEvent<null>>,
    onAtuiSubmit: EventName<AtuiTimeWithUnitCustomEvent<TimeWithUnit | TimeRangeDisplay.ALL>>
};

export const AtuiTimeWithUnit: StencilReactComponent<AtuiTimeWithUnitElement, AtuiTimeWithUnitEvents> = /*@__PURE__*/ createComponent<AtuiTimeWithUnitElement, AtuiTimeWithUnitEvents>({
    tagName: 'atui-time-with-unit',
    elementClass: AtuiTimeWithUnitElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiCancel: 'atuiCancel',
        onAtuiSubmit: 'atuiSubmit'
    } as AtuiTimeWithUnitEvents,
    defineCustomElement: defineAtuiTimeWithUnit
});

type AtuiTitleSubtitleCellEvents = NonNullable<unknown>;

export const AtuiTitleSubtitleCell: StencilReactComponent<AtuiTitleSubtitleCellElement, AtuiTitleSubtitleCellEvents> = /*@__PURE__*/ createComponent<AtuiTitleSubtitleCellElement, AtuiTitleSubtitleCellEvents>({
    tagName: 'atui-title-subtitle-cell',
    elementClass: AtuiTitleSubtitleCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTitleSubtitleCellEvents,
    defineCustomElement: defineAtuiTitleSubtitleCell
});

type AtuiTitleSubtitleDateCellEvents = NonNullable<unknown>;

export const AtuiTitleSubtitleDateCell: StencilReactComponent<AtuiTitleSubtitleDateCellElement, AtuiTitleSubtitleDateCellEvents> = /*@__PURE__*/ createComponent<AtuiTitleSubtitleDateCellElement, AtuiTitleSubtitleDateCellEvents>({
    tagName: 'atui-title-subtitle-date-cell',
    elementClass: AtuiTitleSubtitleDateCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTitleSubtitleDateCellEvents,
    defineCustomElement: defineAtuiTitleSubtitleDateCell
});

type AtuiToggleCellEvents = NonNullable<unknown>;

export const AtuiToggleCell: StencilReactComponent<AtuiToggleCellElement, AtuiToggleCellEvents> = /*@__PURE__*/ createComponent<AtuiToggleCellElement, AtuiToggleCellEvents>({
    tagName: 'atui-toggle-cell',
    elementClass: AtuiToggleCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiToggleCellEvents,
    defineCustomElement: defineAtuiToggleCell
});

type AtuiToggleSwitchEvents = { onAtuiChange: EventName<CustomEvent<boolean>> };

export const AtuiToggleSwitch: StencilReactComponent<AtuiToggleSwitchElement, AtuiToggleSwitchEvents> = /*@__PURE__*/ createComponent<AtuiToggleSwitchElement, AtuiToggleSwitchEvents>({
    tagName: 'atui-toggle-switch',
    elementClass: AtuiToggleSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtuiToggleSwitchEvents,
    defineCustomElement: defineAtuiToggleSwitch
});

type AtuiTooltipEvents = NonNullable<unknown>;

export const AtuiTooltip: StencilReactComponent<AtuiTooltipElement, AtuiTooltipEvents> = /*@__PURE__*/ createComponent<AtuiTooltipElement, AtuiTooltipEvents>({
    tagName: 'atui-tooltip',
    elementClass: AtuiTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtuiTooltipEvents,
    defineCustomElement: defineAtuiTooltip
});

type AtuiTreeEvents = { onAtuiClick: EventName<AtuiTreeCustomEvent<TreeNode>> };

export const AtuiTree: StencilReactComponent<AtuiTreeElement, AtuiTreeEvents> = /*@__PURE__*/ createComponent<AtuiTreeElement, AtuiTreeEvents>({
    tagName: 'atui-tree',
    elementClass: AtuiTreeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtuiTreeEvents,
    defineCustomElement: defineAtuiTree
});

type AtuiTreeItemEvents = { onAtuiClick: EventName<AtuiTreeItemCustomEvent<AtuiEvent>> };

export const AtuiTreeItem: StencilReactComponent<AtuiTreeItemElement, AtuiTreeItemEvents> = /*@__PURE__*/ createComponent<AtuiTreeItemElement, AtuiTreeItemEvents>({
    tagName: 'atui-tree-item',
    elementClass: AtuiTreeItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtuiTreeItemEvents,
    defineCustomElement: defineAtuiTreeItem
});
