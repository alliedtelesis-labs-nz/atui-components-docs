{"version":3,"names":["AtuiIconCell","init","params","this","icons","value","getGui","el","refresh","updateCell","newValue","getIcons","map","icon","h","position","is_visible","generateTooltip","class","slot","iconClass","iconName","tooltipText","render","Host","key"],"sources":["src/components/table-components/cell-components/atui-icon-cell/atui-icon-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp } from 'ag-grid-community';\nimport { IIconCell, IIconCellParams } from '../../../../types/table-cells';\n\ninterface InitParams extends IIconCellParams {\n    generateTooltip?: (params: string) => HTMLElement | string;\n}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying an icon.\n */\n\n@Component({\n    tag: 'atui-icon-cell',\n    shadow: false,\n})\nexport class AtuiIconCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n    @State() icons: IIconCell[];\n\n    init(params: InitParams): void {\n        this.params = params;\n        this.icons = params.value;\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    protected updateCell(newValue: any) {\n        this.params.value = newValue;\n        this.icons = this.params.value;\n    }\n\n    get getIcons(): any {\n        return this.params.value.map((icon: IIconCell) => (\n            <atui-tooltip\n                position=\"right\"\n                is_visible={!!this.params.generateTooltip}\n            >\n                <div\n                    class=\"flex items-center\"\n                    slot=\"tooltip-trigger\"\n                >\n                    <span\n                        class={`material-icons text-icon-md ${icon.iconClass}`}\n                    >\n                        {icon.iconName}\n                    </span>\n                </div>\n\n                {this.params.generateTooltip && (\n                    <span\n                        slot=\"tooltip-content\"\n                        class={`leading-normal`}\n                    >\n                        {this.params.generateTooltip(icon.tooltipText)}\n                    </span>\n                )}\n            </atui-tooltip>\n        ));\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center overflow-hidden leading-[100%]\">\n                {this.getIcons}\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DAiBaA,EAAY,M,yBAKrB,IAAAC,CAAKC,GACDC,KAAKD,OAASA,EACdC,KAAKC,MAAQF,EAAOG,K,CAGxB,MAAAC,GACI,OAAOH,KAAKI,E,CAGhB,OAAAC,CAAQN,GACJC,KAAKM,WAAWP,EAAOG,OACvB,OAAO,I,CAGD,UAAAI,CAAWC,GACjBP,KAAKD,OAAOG,MAAQK,EACpBP,KAAKC,MAAQD,KAAKD,OAAOG,K,CAG7B,YAAIM,GACA,OAAOR,KAAKD,OAAOG,MAAMO,KAAKC,GAC1BC,EAAA,gBACIC,SAAS,QACTC,aAAcb,KAAKD,OAAOe,iBAE1BH,EAAA,OACII,MAAM,oBACNC,KAAK,mBAELL,EAAA,QACII,MAAO,+BAA+BL,EAAKO,aAE1CP,EAAKQ,WAIblB,KAAKD,OAAOe,iBACTH,EACI,QAAAK,KAAK,kBACLD,MAAO,kBAENf,KAAKD,OAAOe,gBAAgBJ,EAAKS,gB,CAOtD,MAAAC,GACI,OACIT,EAACU,EAAI,CAAAC,IAAA,2CAACP,MAAM,2DACPf,KAAKQ,S","ignoreList":[]}