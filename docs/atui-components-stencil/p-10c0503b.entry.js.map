{"version":3,"names":["AtuiPromptThread","constructor","hostRef","this","messages","loading","empty_state_title","empty_state_description","auto_scroll","chatbot_title","componentDidUpdate","threadContainer","scrollToBottom","scrollTop","scrollHeight","handleMessageCopy","event","messageIndex","getMessageIndexFromEvent","atuiMessageCopy","emit","messageId","content","detail","handleMessageRetry","atuiMessageRetry","handleMessageEdit","atuiMessageEdit","target","messageContainer","closest","parseInt","dataset","renderLoadingIndicator","h","class","role","name","renderEmptyState","renderMessage","message","index","avatar","error","error_message","renderMessages","map","key","render","hasMessages","length","Host","ref","el"],"sources":["src/components/prompt/atui-prompt-thread/atui-prompt-thread.tsx"],"sourcesContent":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Listen,\n} from '@stencil/core';\nimport { PromptMessage } from '../../../types/prompt';\n\n/**\n * @category Prompt\n * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.\n */\n@Component({\n    tag: 'atui-prompt-thread',\n    shadow: false,\n})\nexport class AtuiPromptThread {\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop() messages: PromptMessage[] = [];\n\n    /**\n     * Shows a loading indicator for incoming messages\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Title text displayed when no messages are present\n     */\n    @Prop() empty_state_title: string = 'No messages yet';\n\n    /**\n     * Description text displayed when no messages are present\n     */\n    @Prop() empty_state_description: string =\n        'Start a conversation by sending a message';\n\n    /**\n     * Automatically scroll to the bottom when new messages are added\n     */\n    @Prop() auto_scroll: boolean = true;\n\n    /**\n     * Display name for chatbot/assistant messages\n     */\n    @Prop() chatbot_title: string = 'Assistant';\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atuiMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atuiMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atuiMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * @slot messages - Custom message content (alternative to using the messages prop)\n     */\n\n    private threadContainer: HTMLElement;\n\n    componentDidUpdate() {\n        if (this.auto_scroll && this.threadContainer) {\n            this.scrollToBottom();\n        }\n    }\n\n    private scrollToBottom(): void {\n        if (this.threadContainer) {\n            this.threadContainer.scrollTop = this.threadContainer.scrollHeight;\n        }\n    }\n\n    @Listen('atuiCopy')\n    handleMessageCopy(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageCopy.emit({\n                messageId: `msg-${messageIndex}`,\n                content: event.detail,\n            });\n        }\n    }\n\n    @Listen('atuiRetry')\n    handleMessageRetry(event: CustomEvent<void>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageRetry.emit({\n                messageId: `msg-${messageIndex}`,\n            });\n        }\n    }\n\n    @Listen('atuiEdit')\n    handleMessageEdit(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageEdit.emit({\n                messageId: `msg-${messageIndex}`,\n                content: event.detail,\n            });\n        }\n    }\n\n    private getMessageIndexFromEvent(event: CustomEvent): number {\n        const target = event.target as HTMLElement;\n        const messageContainer = target.closest(\n            '[data-message-index]',\n        ) as HTMLElement;\n        return messageContainer\n            ? parseInt(messageContainer.dataset.messageIndex || '-1', 10)\n            : -1;\n    }\n\n    private renderLoadingIndicator() {\n        if (!this.loading) return null;\n\n        return (\n            <div\n                class=\"flex flex-col gap-16\"\n                data-name=\"loading-container\"\n            >\n                <atui-prompt-message\n                    role=\"assistant\"\n                    content=\"Typing...\"\n                    name={this.chatbot_title}\n                    loading={true}\n                    data-name=\"loading-message\"\n                />\n            </div>\n        );\n    }\n\n    private renderEmptyState() {\n        return (\n            <div\n                class=\"flex h-full flex-col items-center justify-center p-8 text-center\"\n                data-name=\"empty-state\"\n            >\n                <div class=\"text-muted-foreground text-4xl mb-4\">ðŸ’¬</div>\n                <h3\n                    class=\"text-lg mb-2 font-semibold\"\n                    data-name=\"empty-state-title\"\n                >\n                    {this.empty_state_title}\n                </h3>\n                <p\n                    class=\"text-muted-foreground text-sm\"\n                    data-name=\"empty-state-description\"\n                >\n                    {this.empty_state_description}\n                </p>\n            </div>\n        );\n    }\n\n    private renderMessage(message: PromptMessage, index: number) {\n        const role = message.role === 'system' ? 'assistant' : message.role;\n        const name =\n            message.role === 'user'\n                ? message.name\n                : message.name || this.chatbot_title;\n\n        return (\n            <div data-message-index={index}>\n                <atui-prompt-message\n                    role={role}\n                    content={message.content}\n                    name={name}\n                    avatar={message.avatar}\n                    loading={message.loading}\n                    error={message.error}\n                    error_message={message.error_message}\n                    data-name={`message-${index}`}\n                />\n            </div>\n        );\n    }\n\n    private renderMessages() {\n        return this.messages.map((message, index) => (\n            <div\n                key={index}\n                class=\"flex flex-col gap-16 p-16 pb-0\"\n                data-name=\"message-container\"\n            >\n                {this.renderMessage(message, index)}\n            </div>\n        ));\n    }\n\n    render() {\n        const hasMessages = this.messages && this.messages.length > 0;\n\n        return (\n            <Host\n                class=\"block h-full overflow-y-auto scroll-smooth pb-32\"\n                ref={(el) => (this.threadContainer = el)}\n                data-name=\"thread-container\"\n            >\n                {!hasMessages ? (\n                    this.renderEmptyState()\n                ) : (\n                    <div data-name=\"messages-container\">\n                        {this.renderMessages()}\n                        {this.renderLoadingIndicator()}\n                    </div>\n                )}\n                <slot name=\"messages\" />\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DAmBaA,EAAgB,MAJ7B,WAAAC,CAAAC,G,+JAQYC,KAAQC,SAAoB,GAK5BD,KAAOE,QAAY,MAKnBF,KAAiBG,kBAAW,kBAK5BH,KAAuBI,wBAC3B,4CAKIJ,KAAWK,YAAY,KAKvBL,KAAaM,cAAW,WAqLnC,CAxJG,kBAAAC,GACI,GAAIP,KAAKK,aAAeL,KAAKQ,gBAAiB,CAC1CR,KAAKS,gB,EAIL,cAAAA,GACJ,GAAIT,KAAKQ,gBAAiB,CACtBR,KAAKQ,gBAAgBE,UAAYV,KAAKQ,gBAAgBG,Y,EAK9D,iBAAAC,CAAkBC,GACd,MAAMC,EAAed,KAAKe,yBAAyBF,GACnD,GAAIC,KAAiB,EAAI,CACrBd,KAAKgB,gBAAgBC,KAAK,CACtBC,UAAW,OAAOJ,IAClBK,QAASN,EAAMO,Q,EAM3B,kBAAAC,CAAmBR,GACf,MAAMC,EAAed,KAAKe,yBAAyBF,GACnD,GAAIC,KAAiB,EAAI,CACrBd,KAAKsB,iBAAiBL,KAAK,CACvBC,UAAW,OAAOJ,K,EAM9B,iBAAAS,CAAkBV,GACd,MAAMC,EAAed,KAAKe,yBAAyBF,GACnD,GAAIC,KAAiB,EAAI,CACrBd,KAAKwB,gBAAgBP,KAAK,CACtBC,UAAW,OAAOJ,IAClBK,QAASN,EAAMO,Q,EAKnB,wBAAAL,CAAyBF,GAC7B,MAAMY,EAASZ,EAAMY,OACrB,MAAMC,EAAmBD,EAAOE,QAC5B,wBAEJ,OAAOD,EACDE,SAASF,EAAiBG,QAAQf,cAAgB,KAAM,KACxD,C,CAGF,sBAAAgB,GACJ,IAAK9B,KAAKE,QAAS,OAAO,KAE1B,OACI6B,EACI,OAAAC,MAAM,uBAAsB,YAClB,qBAEVD,EACI,uBAAAE,KAAK,YACLd,QAAQ,YACRe,KAAMlC,KAAKM,cACXJ,QAAS,KAAI,YACH,oB,CAMlB,gBAAAiC,GACJ,OACIJ,EACI,OAAAC,MAAM,mEAAkE,YAC9D,eAEVD,EAAK,OAAAC,MAAM,uCAA8C,MACzDD,EACI,MAAAC,MAAM,6BAA4B,YACxB,qBAEThC,KAAKG,mBAEV4B,EAAA,KACIC,MAAM,gCAA+B,YAC3B,2BAEThC,KAAKI,yB,CAMd,aAAAgC,CAAcC,EAAwBC,GAC1C,MAAML,EAAOI,EAAQJ,OAAS,SAAW,YAAcI,EAAQJ,KAC/D,MAAMC,EACFG,EAAQJ,OAAS,OACXI,EAAQH,KACRG,EAAQH,MAAQlC,KAAKM,cAE/B,OACIyB,EAAA,4BAAyBO,GACrBP,EACI,uBAAAE,KAAMA,EACNd,QAASkB,EAAQlB,QACjBe,KAAMA,EACNK,OAAQF,EAAQE,OAChBrC,QAASmC,EAAQnC,QACjBsC,MAAOH,EAAQG,MACfC,cAAeJ,EAAQI,cAAa,YACzB,WAAWH,M,CAM9B,cAAAI,GACJ,OAAO1C,KAAKC,SAAS0C,KAAI,CAACN,EAASC,IAC/BP,EAAA,OACIa,IAAKN,EACLN,MAAM,iCAAgC,YAC5B,qBAEThC,KAAKoC,cAAcC,EAASC,K,CAKzC,MAAAO,GACI,MAAMC,EAAc9C,KAAKC,UAAYD,KAAKC,SAAS8C,OAAS,EAE5D,OACIhB,EAACiB,EAAI,CAAAJ,IAAA,2CACDZ,MAAM,mDACNiB,IAAMC,GAAQlD,KAAKQ,gBAAkB0C,EAAG,YAC9B,qBAERJ,EACE9C,KAAKmC,mBAELJ,EAAA,mBAAe,sBACV/B,KAAK0C,iBACL1C,KAAK8B,0BAGdC,EAAA,QAAAa,IAAA,2CAAMV,KAAK,a","ignoreList":[]}