{"version":3,"names":["AtuiListSelector","constructor","hostRef","this","options","listItemEls","onSelect","item","selected_item_id","id","atuiChange","emit","onClickInfoButton","atuiClickInfoButton","focusAndClickRelativeItem","relativePosition","indexOfActiveItem","indexOf","el","ownerDocument","activeElement","nextActiveItem","length","click","focus","handleKeyDown","event","key","preventDefault","getListItems","map","h","position","is_visible","tooltip","undefined","slot","item_id","item_title","title","subtitle","icon","item_prefix","prefix","has_border","is_selected","onClick","tabindex","ref","push","badgeText","badgeTooltip","class","impact","type","label","hasInfoButton","color","render","Host","onKeyDown","name","role"],"sources":["src/components/atui-list-selector/atui-list-selector.tsx"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Prop,\n    h,\n    Host,\n    Element,\n    Event,\n} from '@stencil/core';\n\nexport interface ListSelectorItem {\n    id: string;\n    title: string;\n    subtitle?: string;\n    icon?: string;\n    tooltip?: string;\n    prefix?: string;\n    badgeText?: string;\n    badgeTooltip?: string;\n    hasInfoButton?: boolean;\n}\n\n/**\n * @category Navigation\n * @description A list selector component for selecting an item from a list.\n *\n * @slot - Placed after the list items\n */\n@Component({\n    tag: 'atui-list-selector',\n    shadow: false,\n})\nexport class AtuiListSelector {\n    /**\n     * List of items.\n     */\n    @Prop()\n    options: ListSelectorItem[] = [];\n\n    /**\n     * The selected item.\n     */\n    @Prop({ mutable: true })\n    selected_item_id: string;\n\n    /**\n     * Whether each item has a bottom border.\n     */\n    @Prop()\n    has_border: boolean;\n\n    /**\n     * Emits an event when the selected item is changed, the `event.detail` is the ListSelectorItem\n     */\n    @Event()\n    atuiChange: EventEmitter<ListSelectorItem>;\n\n    /**\n     * Emits when event the when info button of an item is clicked\n     */\n    @Event()\n    atuiClickInfoButton: EventEmitter<any>;\n\n    @Element() el: HTMLAtuiListSelectorElement;\n    listItemEls: HTMLAtuiListSelectorItemElement[] = [];\n\n    onSelect(item: ListSelectorItem): void {\n        this.selected_item_id = item.id;\n        this.atuiChange.emit(item);\n    }\n\n    onClickInfoButton(): void {\n        this.atuiClickInfoButton.emit();\n    }\n\n    focusAndClickRelativeItem(relativePosition: number) {\n        const indexOfActiveItem = this.listItemEls.indexOf(\n            this.el.ownerDocument\n                .activeElement as HTMLAtuiListSelectorItemElement,\n        );\n        const nextActiveItem =\n            this.listItemEls[\n                (indexOfActiveItem +\n                    relativePosition +\n                    this.listItemEls.length) %\n                    this.listItemEls.length\n            ];\n        nextActiveItem.click();\n        nextActiveItem.focus();\n    }\n\n    handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {\n            event.preventDefault();\n            this.focusAndClickRelativeItem(1);\n        } else if (event.key === 'ArrowUp' || event.key === 'ArrowLeft') {\n            event.preventDefault();\n            this.focusAndClickRelativeItem(-1);\n        }\n    }\n\n    get getListItems(): any {\n        return this.options.map((item) => (\n            <atui-tooltip\n                position=\"right\"\n                is_visible={item.tooltip !== undefined}\n            >\n                <div slot=\"tooltip-trigger\">\n                    <atui-list-selector-item\n                        item_id={item.id}\n                        item_title={item.title}\n                        subtitle={item.subtitle}\n                        icon={item.icon}\n                        item_prefix={item.prefix}\n                        has_border={this.has_border}\n                        is_selected={\n                            this.selected_item_id &&\n                            item.id === this.selected_item_id\n                        }\n                        onClick={() => this.onSelect(item)}\n                        tabindex=\"0\"\n                        ref={(el) => this.listItemEls.push(el)}\n                    >\n                        {item.badgeText && item.badgeTooltip && (\n                            <atui-tooltip\n                                slot=\"badge\"\n                                position=\"right\"\n                            >\n                                <atui-badge\n                                    class=\"ml-4\"\n                                    slot=\"tooltip-trigger\"\n                                    impact=\"high\"\n                                    type=\"info\"\n                                    label={item.badgeText}\n                                />\n                                <span slot=\"tooltip-content\">\n                                    {item.badgeTooltip}\n                                </span>\n                            </atui-tooltip>\n                        )}\n\n                        {item.hasInfoButton && (\n                            <button\n                                slot=\"info\"\n                                class=\"sm\"\n                                color=\"primary\"\n                                onClick={() => this.onClickInfoButton()}\n                            >\n                                <i class=\"material-icons\">help_outline</i>\n                            </button>\n                        )}\n                    </atui-list-selector-item>\n                </div>\n                <span slot=\"tooltip-content\">{item.tooltip}</span>\n            </atui-tooltip>\n        ));\n    }\n\n    render() {\n        return (\n            <Host onKeyDown={(event) => this.handleKeyDown(event)}>\n                <slot name=\"header\"></slot>\n\n                {!!this.options.length && (\n                    <nav class=\"flex-fill overflow-visible pb-16\">\n                        <div\n                            class=\"flex flex-col\"\n                            role=\"menu\"\n                        >\n                            {this.getListItems}\n                        </div>\n                    </nav>\n                )}\n                <slot />\n            </Host>\n        );\n    }\n}\n"],"mappings":"sEAgCaA,EAAgB,MAJ7B,WAAAC,CAAAC,G,0GASIC,KAAOC,QAAuB,GA2B9BD,KAAWE,YAAsC,EAiHpD,CA/GG,QAAAC,CAASC,GACLJ,KAAKK,iBAAmBD,EAAKE,GAC7BN,KAAKO,WAAWC,KAAKJ,E,CAGzB,iBAAAK,GACIT,KAAKU,oBAAoBF,M,CAG7B,yBAAAG,CAA0BC,GACtB,MAAMC,EAAoBb,KAAKE,YAAYY,QACvCd,KAAKe,GAAGC,cACHC,eAET,MAAMC,EACFlB,KAAKE,aACAW,EACGD,EACAZ,KAAKE,YAAYiB,QACjBnB,KAAKE,YAAYiB,QAE7BD,EAAeE,QACfF,EAAeG,O,CAGnB,aAAAC,CAAcC,GACV,GAAIA,EAAMC,MAAQ,cAAgBD,EAAMC,MAAQ,YAAa,CACzDD,EAAME,iBACNzB,KAAKW,0BAA0B,E,MAC5B,GAAIY,EAAMC,MAAQ,WAAaD,EAAMC,MAAQ,YAAa,CAC7DD,EAAME,iBACNzB,KAAKW,2BAA0B,E,EAIvC,gBAAIe,GACA,OAAO1B,KAAKC,QAAQ0B,KAAKvB,GACrBwB,EACI,gBAAAC,SAAS,QACTC,WAAY1B,EAAK2B,UAAYC,WAE7BJ,EAAK,OAAAK,KAAK,mBACNL,EAAA,2BACIM,QAAS9B,EAAKE,GACd6B,WAAY/B,EAAKgC,MACjBC,SAAUjC,EAAKiC,SACfC,KAAMlC,EAAKkC,KACXC,YAAanC,EAAKoC,OAClBC,WAAYzC,KAAKyC,WACjBC,YACI1C,KAAKK,kBACLD,EAAKE,KAAON,KAAKK,iBAErBsC,QAAS,IAAM3C,KAAKG,SAASC,GAC7BwC,SAAS,IACTC,IAAM9B,GAAOf,KAAKE,YAAY4C,KAAK/B,IAElCX,EAAK2C,WAAa3C,EAAK4C,cACpBpB,EAAA,gBACIK,KAAK,QACLJ,SAAS,SAETD,EACI,cAAAqB,MAAM,OACNhB,KAAK,kBACLiB,OAAO,OACPC,KAAK,OACLC,MAAOhD,EAAK2C,YAEhBnB,EAAM,QAAAK,KAAK,mBACN7B,EAAK4C,eAKjB5C,EAAKiD,eACFzB,EAAA,UACIK,KAAK,OACLgB,MAAM,KACNK,MAAM,UACNX,QAAS,IAAM3C,KAAKS,qBAEpBmB,EAAA,KAAGqB,MAAM,kBAAgB,mBAKzCrB,EAAM,QAAAK,KAAK,mBAAmB7B,EAAK2B,W,CAK/C,MAAAwB,GACI,OACI3B,EAAC4B,EAAK,CAAAhC,IAAA,2CAAAiC,UAAYlC,GAAUvB,KAAKsB,cAAcC,IAC3CK,EAAM,QAAAJ,IAAA,2CAAAkC,KAAK,aAER1D,KAAKC,QAAQkB,QACZS,EAAA,OAAAJ,IAAA,2CAAKyB,MAAM,oCACPrB,EAAA,OAAAJ,IAAA,2CACIyB,MAAM,gBACNU,KAAK,QAEJ3D,KAAK0B,eAIlBE,EAAQ,QAAAJ,IAAA,6C","ignoreList":[]}