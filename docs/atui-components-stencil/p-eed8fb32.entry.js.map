{"version":3,"names":["AtuiTextBadgeCell","init","params","textTransform","badgeText","this","textValue","value","badgeTextValue","data","getGui","el","refresh","updateCell","String","newValue","render","h","Host","key","class","position","is_visible","generateTooltip","slot","rowIndex","onClick","click","_a","tooltipClass","generateBadgeTooltip","type","_b","badgeType","label","_c","badgeTooltipClass"],"sources":["src/components/table-components/cell-components/atui-text-badge-cell/atui-text-badge-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport {\n    InitTextCellParams,\n    ITooltipCell,\n} from '../../../../types/table-cells';\nimport { BadgeType } from '../../../atui-badge/atui-badge';\n\nexport interface ITextWithBadgeCellParams extends ITooltipCell {\n    badgeText: (params: ICellRendererParams) => string;\n    badgeType?: BadgeType;\n    badgeTooltipClass?: string;\n    generateBadgeTooltip?: (\n        params: ICellRendererParams,\n    ) => HTMLElement | string;\n}\n\ninterface InitParams extends ITextWithBadgeCellParams, InitTextCellParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with a badge.\n */\n\n@Component({\n    tag: 'atui-text-badge-cell',\n    shadow: false,\n})\nexport class AtuiTextBadgeCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() textValue: string;\n    @State() badgeTextValue: string;\n    @State() params: InitParams;\n\n    init(params: InitParams): void {\n        const { textTransform, badgeText } = params;\n\n        this.params = params;\n\n        this.textValue = params.value;\n        this.badgeTextValue = badgeText(params);\n\n        if (params.data) {\n            if (textTransform) {\n                this.textValue = textTransform(params.data, params.value);\n            }\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.updateCell(String(params.value));\n        return true;\n    }\n\n    private updateCell(newValue: string) {\n        this.params.value = newValue;\n        this.textValue = this.params.value;\n    }\n\n    render() {\n        return (\n            <Host class=\"align-center flex h-full\">\n                <atui-tooltip\n                    position=\"right\"\n                    is_visible={!!this.params.generateTooltip}\n                >\n                    <span\n                        slot=\"tooltip-trigger\"\n                        data-index={`column-${this.params.rowIndex}-data`}\n                        class=\"truncate\"\n                        onClick={() => {\n                            if (this.params.click)\n                                this.params.click(this.params);\n                        }}\n                    >\n                        {this.textValue}\n                    </span>\n\n                    {this.params.generateTooltip && (\n                        <span\n                            slot=\"tooltip-content\"\n                            class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                        >\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n\n                <atui-tooltip\n                    position=\"right\"\n                    is_visible={!!this.params.generateBadgeTooltip}\n                >\n                    <span\n                        slot=\"tooltip-trigger\"\n                        data-index={`column-${this.params.rowIndex}-data`}\n                        class=\"truncate\"\n                        onClick={() => {\n                            if (this.params.click)\n                                this.params.click(this.params);\n                        }}\n                    >\n                        <atui-badge\n                            type={this.params?.badgeType}\n                            class=\"ml-4\"\n                            label={this.badgeTextValue}\n                        ></atui-badge>\n                    </span>\n\n                    {this.params.generateBadgeTooltip && (\n                        <span\n                            slot=\"tooltip-content\"\n                            class={`${this.params.badgeTooltipClass ?? ''} leading-normal`}\n                        >\n                            {this.params.generateBadgeTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DA4BaA,EAAiB,M,yBAM1B,IAAAC,CAAKC,GACD,MAAMC,cAAEA,EAAaC,UAAEA,GAAcF,EAErCG,KAAKH,OAASA,EAEdG,KAAKC,UAAYJ,EAAOK,MACxBF,KAAKG,eAAiBJ,EAAUF,GAEhC,GAAIA,EAAOO,KAAM,CACb,GAAIN,EAAe,CACfE,KAAKC,UAAYH,EAAcD,EAAOO,KAAMP,EAAOK,M,GAK/D,MAAAG,GACI,OAAOL,KAAKM,E,CAGhB,OAAAC,CAAQV,GACJG,KAAKQ,WAAWC,OAAOZ,EAAOK,QAC9B,OAAO,I,CAGH,UAAAM,CAAWE,GACfV,KAAKH,OAAOK,MAAQQ,EACpBV,KAAKC,UAAYD,KAAKH,OAAOK,K,CAGjC,MAAAS,G,UACI,OACIC,EAACC,EAAK,CAAAC,IAAA,2CAAAC,MAAM,4BACRH,EAAA,gBAAAE,IAAA,2CACIE,SAAS,QACTC,aAAcjB,KAAKH,OAAOqB,iBAE1BN,EAAA,QAAAE,IAAA,2CACIK,KAAK,kBAAiB,aACV,UAAUnB,KAAKH,OAAOuB,gBAClCL,MAAM,WACNM,QAAS,KACL,GAAIrB,KAAKH,OAAOyB,MACZtB,KAAKH,OAAOyB,MAAMtB,KAAKH,OAAO,GAGrCG,KAAKC,WAGTD,KAAKH,OAAOqB,iBACTN,EACI,QAAAE,IAAA,2CAAAK,KAAK,kBACLJ,MAAO,IAAGQ,EAAAvB,KAAKH,OAAO2B,gBAAY,MAAAD,SAAA,EAAAA,EAAI,qBAErCvB,KAAKH,OAAOqB,gBAAgBlB,KAAKH,UAK9Ce,EAAA,gBAAAE,IAAA,2CACIE,SAAS,QACTC,aAAcjB,KAAKH,OAAO4B,sBAE1Bb,EAAA,QAAAE,IAAA,2CACIK,KAAK,kBAAiB,aACV,UAAUnB,KAAKH,OAAOuB,gBAClCL,MAAM,WACNM,QAAS,KACL,GAAIrB,KAAKH,OAAOyB,MACZtB,KAAKH,OAAOyB,MAAMtB,KAAKH,OAAO,GAGtCe,EAAA,cAAAE,IAAA,2CACIY,MAAMC,EAAA3B,KAAKH,UAAM,MAAA8B,SAAA,SAAAA,EAAEC,UACnBb,MAAM,OACNc,MAAO7B,KAAKG,kBAInBH,KAAKH,OAAO4B,sBACTb,EACI,QAAAE,IAAA,2CAAAK,KAAK,kBACLJ,MAAO,IAAGe,EAAA9B,KAAKH,OAAOkC,qBAAiB,MAAAD,SAAA,EAAAA,EAAI,qBAE1C9B,KAAKH,OAAO4B,qBAAqBzB,KAAKH,U","ignoreList":[]}