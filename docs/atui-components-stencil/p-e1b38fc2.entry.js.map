{"version":3,"names":["inputVariants","cva","variants","disabled","false","true","readonly","invalid","defaultVariants","AtuiInputComponent","constructor","hostRef","this","type","placeholder","autocomplete","inputId","Math","random","toString","substring","handleChange","event","stopPropagation","value","target","atuiChange","emit","handleClear","inputEl","render","classname","h","Host","key","class","name","label","required","info_text","for","hint_text","id","undefined","autocapitalize","onInput","onChange","ref","el","clearable","size","icon","onClick","error_text"],"sources":["src/components/atui-input/atui-input.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport { cva } from 'class-variance-authority';\n\nexport type InputType = 'text' | 'url' | 'email' | 'password';\n\nconst inputVariants = cva(\n    'min-h-36 placeholder-text-light pr -24 relative flex min-h-[36px] w-full flex-shrink flex-grow basis-0 gap-4 overflow-hidden overflow-ellipsis rounded-md border border-solid outline-none transition-colors duration-300 ease-in-out focus-within:outline-0 focus-within:ring-2',\n    {\n        variants: {\n            disabled: {\n                false: 'bg-white focus-within:ring-active-foreground/30',\n                true: 'pointer-events-none border-none bg-surface-1 !text-disabled',\n            },\n            readonly: {\n                false: 'focus-within:ring-active-foreground/30',\n                true: 'cursor-text border-none !bg-surface-1 !text-dark',\n            },\n            invalid: {\n                false: 'border-med focus-within:border-active-dark focus-within:ring-active-foreground/30',\n                true: 'border-error-base focus-within:border-error-base focus-within:ring-destructive-foreground/30',\n            },\n        },\n        defaultVariants: {\n            disabled: false,\n            readonly: false,\n            invalid: false,\n        },\n    },\n);\n\n/**\n * @category Form Controls\n * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.\n */\n@Component({\n    tag: 'atui-input',\n    shadow: false,\n})\nexport class AtuiInputComponent {\n    /**\n     * Label above the input container\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * Type of the input\n     */\n    @Prop()\n    type: InputType = 'text';\n\n    /**\n     * Short description or validation hint if required\n     */\n    @Prop()\n    hint_text: string;\n\n    /**\n     * Optional info icon with detailed tooltip description\n     */\n    @Prop()\n    info_text: string;\n\n    /**\n     * Error text displayed when invalid is set\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Placeholder text to be shown when no input is passed\n     */\n    @Prop()\n    placeholder: string | number = '';\n\n    /**\n     * Adds a required * to the element\n     */\n    @Prop()\n    required: boolean;\n\n    /**\n     * Shows the error text\n     */\n    @Prop()\n    invalid: boolean;\n\n    /**\n     * Sets the 'autocomplete' attribute on the input element\n     */\n    @Prop()\n    autocomplete: string = 'on';\n\n    /**\n     * Makes the input read only\n     */\n    @Prop()\n    readonly: boolean;\n\n    /**\n     * Disables interaction with the input\n     */\n    @Prop()\n    disabled: boolean = false;\n\n    /**\n     * Allows the input to be cleared with a 'x' at the end of the input element\n     */\n    @Prop()\n    clearable: boolean;\n\n    /**\n     * The value of the input\n     */\n    @Prop({ mutable: true })\n    value: string;\n\n    inputEl: HTMLInputElement;\n    @Element() el: HTMLAtuiInputElement;\n\n    /**\n     * Emits an event containing the text string or number when the input's content is changed\n     */\n    @Event()\n    atuiChange: EventEmitter<string | number>;\n\n    private inputId = `input-${Math.random().toString(36).substring(2, 11)}`;\n\n    handleChange(event: Event): void {\n        event.stopPropagation();\n        this.value = (event.target as HTMLInputElement).value;\n        this.atuiChange.emit(this.value);\n    }\n\n    handleClear(): void {\n        this.inputEl.value = '';\n        this.value = '';\n        this.atuiChange.emit('');\n    }\n\n    render() {\n        const classname = inputVariants({\n            invalid: this.invalid,\n            disabled: this.disabled,\n            readonly: this.readonly,\n        });\n\n        return (\n            <Host>\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.required || this.info_text) && (\n                        <atui-form-label\n                            label={this.label}\n                            for={this.inputId}\n                            required={this.required && !this.readonly}\n                            info_text={this.info_text}\n                        />\n                    )}\n\n                    {this.hint_text && (\n                        <span\n                            class=\"mb-8 inline-block text-xs leading-tight text-light\"\n                            data-name=\"input-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <div class={classname}>\n                    <input\n                        class=\"flex w-full py-8 pl-8 outline-0\"\n                        id={this.inputId}\n                        readonly={this.readonly ? true : undefined}\n                        disabled={this.disabled ? true : undefined}\n                        required={this.required}\n                        type={this.type}\n                        placeholder={`${this.placeholder}`}\n                        autocomplete={this.autocomplete}\n                        autocapitalize=\"none\"\n                        onInput={(event) => this.handleChange(event)}\n                        onChange={(event) => this.handleChange(event)}\n                        value={this.value}\n                        ref={(el) => (this.inputEl = el)}\n                        data-name=\"input\"\n                    />\n\n                    <div class=\"flex items-center py-4 pr-4\">\n                        <slot name=\"input-actions\" />\n\n                        {this.clearable &&\n                            !this.readonly &&\n                            !this.disabled &&\n                            this.value && (\n                                <atui-button\n                                    class={`transition-all duration-300 ease-in-out ${\n                                        this.clearable &&\n                                        !this.readonly &&\n                                        !this.disabled &&\n                                        this.value\n                                            ? 'pointer-events-auto scale-100 opacity-100'\n                                            : 'pointer-events-none scale-90 opacity-0'\n                                    }`}\n                                    size=\"sm\"\n                                    icon=\"cancel\"\n                                    type=\"secondaryText\"\n                                    onClick={(event) => {\n                                        event.stopPropagation();\n                                        this.handleClear();\n                                    }}\n                                    data-name=\"input-clear\"\n                                />\n                            )}\n                    </div>\n                </div>\n\n                {this.error_text && this.invalid && (\n                    <span\n                        class=\"text-sm text-error\"\n                        data-name=\"input-error\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n"],"mappings":"oGAaA,MAAMA,EAAgBC,EAClB,mRACA,CACIC,SAAU,CACNC,SAAU,CACNC,MAAO,kDACPC,KAAM,+DAEVC,SAAU,CACNF,MAAO,yCACPC,KAAM,oDAEVE,QAAS,CACLH,MAAO,oFACPC,KAAM,iGAGdG,gBAAiB,CACbL,SAAU,MACVG,SAAU,MACVC,QAAS,S,MAaRE,EAAkB,MAJ/B,WAAAC,CAAAC,G,iDAeIC,KAAIC,KAAc,OAwBlBD,KAAWE,YAAoB,GAkB/BF,KAAYG,aAAW,KAYvBH,KAAQT,SAAY,MAuBZS,KAAAI,QAAU,SAASC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,KAsGtE,CApGG,YAAAC,CAAaC,GACTA,EAAMC,kBACNX,KAAKY,MAASF,EAAMG,OAA4BD,MAChDZ,KAAKc,WAAWC,KAAKf,KAAKY,M,CAG9B,WAAAI,GACIhB,KAAKiB,QAAQL,MAAQ,GACrBZ,KAAKY,MAAQ,GACbZ,KAAKc,WAAWC,KAAK,G,CAGzB,MAAAG,GACI,MAAMC,EAAY/B,EAAc,CAC5BO,QAASK,KAAKL,QACdJ,SAAUS,KAAKT,SACfG,SAAUM,KAAKN,WAGnB,OACI0B,EAACC,EAAI,CAAAC,IAAA,4CACDF,EAAK,OAAAE,IAAA,2CAAAC,MAAM,iBACPH,EAAM,QAAAE,IAAA,2CAAAE,KAAK,WACTxB,KAAKyB,OAASzB,KAAK0B,UAAY1B,KAAK2B,YAClCP,EACI,mBAAAE,IAAA,2CAAAG,MAAOzB,KAAKyB,MACZG,IAAK5B,KAAKI,QACVsB,SAAU1B,KAAK0B,WAAa1B,KAAKN,SACjCiC,UAAW3B,KAAK2B,YAIvB3B,KAAK6B,WACFT,EAAA,QAAAE,IAAA,2CACIC,MAAM,qDACI,0BAETvB,KAAK6B,YAKlBT,EAAK,OAAAE,IAAA,2CAAAC,MAAOJ,GACRC,EACI,SAAAE,IAAA,2CAAAC,MAAM,kCACNO,GAAI9B,KAAKI,QACTV,SAAUM,KAAKN,SAAW,KAAOqC,UACjCxC,SAAUS,KAAKT,SAAW,KAAOwC,UACjCL,SAAU1B,KAAK0B,SACfzB,KAAMD,KAAKC,KACXC,YAAa,GAAGF,KAAKE,cACrBC,aAAcH,KAAKG,aACnB6B,eAAe,OACfC,QAAUvB,GAAUV,KAAKS,aAAaC,GACtCwB,SAAWxB,GAAUV,KAAKS,aAAaC,GACvCE,MAAOZ,KAAKY,MACZuB,IAAMC,GAAQpC,KAAKiB,QAAUmB,EACnB,sBAGdhB,EAAK,OAAAE,IAAA,2CAAAC,MAAM,+BACPH,EAAM,QAAAE,IAAA,2CAAAE,KAAK,kBAEVxB,KAAKqC,YACDrC,KAAKN,WACLM,KAAKT,UACNS,KAAKY,OACDQ,EAAA,eAAAE,IAAA,2CACIC,MAAO,2CACHvB,KAAKqC,YACJrC,KAAKN,WACLM,KAAKT,UACNS,KAAKY,MACC,4CACA,2CAEV0B,KAAK,KACLC,KAAK,SACLtC,KAAK,gBACLuC,QAAU9B,IACNA,EAAMC,kBACNX,KAAKgB,aAAa,EAEZ,8BAM7BhB,KAAKyC,YAAczC,KAAKL,SACrByB,EAAA,QAAAE,IAAA,2CACIC,MAAM,qBACI,2BAETvB,KAAKyC,Y","ignoreList":[]}