{"version":3,"names":["AtuiAccordionItemComponent","constructor","hostRef","this","border","open","componentDidLoad","accordionElement","el","querySelector","handleSummaryInteraction","event","type","preventDefault","closeAccordion","openAccordion","render","h","Host","key","item_id","class","ref","role","id","onClick","onTouchEnd","label","name","hidden","content"],"sources":["src/components/atui-accordion/atui-accordion-item/atui-accordion-item.tsx"],"sourcesContent":["import { Component, Prop, Element, Method, h, Host } from '@stencil/core';\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot trigger - Used for placing the atui-accordion-trigger for this accordion item. Only use if not using the 'label' prop on this element.\n * @slot content - Used for placing the content for this accordion item.\n */\n@Component({\n    tag: 'atui-accordion-item',\n    shadow: false,\n})\nexport class AtuiAccordionItemComponent {\n    @Element() el: HTMLElement;\n    /**\n     * Used to identify the accordion item among the other accordion items\n     */\n    @Prop() item_id!: string;\n\n    /**\n     * Provides an atui-accordion-trigger with this label if set\n     */\n    @Prop() label: string;\n\n    /**\n     * Puts a light gray separator below the accordion item\n     */\n    @Prop() border: boolean = true;\n\n    /**\n     * String content to display when the accordion is open\n     */\n    @Prop() content: string;\n\n    /**\n     * Used for setting if the accordion is open.\n     */\n    @Prop({ mutable: true }) open: boolean = false;\n\n    private accordionElement: HTMLDetailsElement;\n\n    componentDidLoad() {\n        this.accordionElement = this.el.querySelector('details');\n    }\n\n    private async handleSummaryInteraction(event: Event) {\n        if (event.type === 'click' || event.type === 'touchend') {\n            event.preventDefault();\n            if (this.open) {\n                await this.closeAccordion();\n            } else {\n                await this.openAccordion();\n            }\n        }\n    }\n\n    /**\n     * Opens this accordion item\n     */\n    @Method()\n    async openAccordion(): Promise<void> {\n        if (this.open) return;\n        this.accordionElement.open = true;\n        this.open = true;\n    }\n\n    /**\n     * Closes this accordion item\n     */\n    @Method()\n    async closeAccordion(): Promise<void> {\n        if (!this.open) return;\n        this.accordionElement.open = false;\n        this.open = false;\n    }\n\n    render() {\n        return (\n            <Host data-name={this.item_id}>\n                <details\n                    class={`group/accordion-item'}`}\n                    ref={(el) =>\n                        (this.accordionElement = el as HTMLDetailsElement)\n                    }\n                    role=\"group\"\n                >\n                    <summary\n                        id={`trigger-${this.item_id}`}\n                        role=\"button\"\n                        aria-expanded={this.open}\n                        data-state={this.open ? 'expanded' : 'collapsed'}\n                        class=\"group/accordion-item flex rounded-sm outline-0 focus-within:ring-2 focus-within:ring-active-foreground/30\"\n                        onClick={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        onTouchEnd={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        aria-controls={`content-${this.item_id}`}\n                    >\n                        {this.label && (\n                            <atui-accordion-trigger\n                                label={this.label}\n                            ></atui-accordion-trigger>\n                        )}\n                        <slot name={'trigger'} />\n                    </summary>\n                    <div\n                        id={`content-${this.item_id}`}\n                        aria-labelledby={`trigger-${this.item_id}`}\n                        hidden={!this.open}\n                        data-name=\"accordion-item-content\"\n                    >\n                        {this.content && (\n                            <div class=\"flex flex-col p-16 leading-normal\">\n                                {this.content}\n                            </div>\n                        )}\n                        <slot name={'content'} />\n                    </div>\n                </details>\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DAaaA,EAA0B,MAJvC,WAAAC,CAAAC,G,UAmBYC,KAAMC,OAAY,KAUDD,KAAIE,KAAY,KAuF5C,CAnFG,gBAAAC,GACIH,KAAKI,iBAAmBJ,KAAKK,GAAGC,cAAc,U,CAG1C,8BAAMC,CAAyBC,GACnC,GAAIA,EAAMC,OAAS,SAAWD,EAAMC,OAAS,WAAY,CACrDD,EAAME,iBACN,GAAIV,KAAKE,KAAM,OACLF,KAAKW,gB,KACR,OACGX,KAAKY,e,GASvB,mBAAMA,GACF,GAAIZ,KAAKE,KAAM,OACfF,KAAKI,iBAAiBF,KAAO,KAC7BF,KAAKE,KAAO,I,CAOhB,oBAAMS,GACF,IAAKX,KAAKE,KAAM,OAChBF,KAAKI,iBAAiBF,KAAO,MAC7BF,KAAKE,KAAO,K,CAGhB,MAAAW,GACI,OACIC,EAACC,EAAgB,CAAAC,IAAA,uDAAAhB,KAAKiB,SAClBH,EACI,WAAAE,IAAA,2CAAAE,MAAO,yBACPC,IAAMd,GACDL,KAAKI,iBAAmBC,EAE7Be,KAAK,SAELN,EAAA,WAAAE,IAAA,2CACIK,GAAI,WAAWrB,KAAKiB,UACpBG,KAAK,SAAQ,gBACEpB,KAAKE,KACR,aAAAF,KAAKE,KAAO,WAAa,YACrCgB,MAAM,4GACNI,QAAUd,GACNR,KAAKO,yBAAyBC,GAElCe,WAAaf,GACTR,KAAKO,yBAAyBC,GAEnB,2BAAWR,KAAKiB,WAE9BjB,KAAKwB,OACFV,EAAA,0BAAAE,IAAA,2CACIQ,MAAOxB,KAAKwB,QAGpBV,EAAA,QAAAE,IAAA,2CAAMS,KAAM,aAEhBX,EACI,OAAAE,IAAA,2CAAAK,GAAI,WAAWrB,KAAKiB,UAAS,kBACZ,WAAWjB,KAAKiB,UACjCS,QAAS1B,KAAKE,KAAI,YACR,0BAETF,KAAK2B,SACFb,EAAK,OAAAE,IAAA,2CAAAE,MAAM,qCACNlB,KAAK2B,SAGdb,EAAM,QAAAE,IAAA,2CAAAS,KAAM,c","ignoreList":[]}