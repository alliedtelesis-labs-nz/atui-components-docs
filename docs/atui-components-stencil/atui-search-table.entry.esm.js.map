{"version":3,"file":"atui-search-table.entry.esm.js","sources":["src/components/table-components/atui-search-table/atui-search-table.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Watch,\n    Host,\n    Method,\n} from '@stencil/core';\nimport { ColDef, GridApi, IRowNode } from 'ag-grid-community';\nimport { fetchTranslations } from '../../../utils/translation';\n\ntype RowUpdateOptions = { flash: boolean; forceRefresh: boolean };\ntype RowUpdate<T> = { index: number; update: T };\n\n/**\n * @category Data Tables\n * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.\n * @slot actions - Used to place actions related to table content\n * @slot multi-select-actions - Used to place actions related to row selection\n */\n@Component({\n    tag: 'atui-search-table',\n    shadow: false,\n})\nexport class AtuiSearchTable {\n    /**\n     * Table data passed to atui-table component.\n     */\n    @Prop()\n    table_data: {\n        items: any[];\n        total: number;\n    };\n\n    /**\n     * Label for the table, appears above the search input.\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * Label for the search input.\n     */\n    @Prop()\n    search_label: string;\n\n    /**\n     * Hint text displayed below the search label.\n     */\n    @Prop()\n    search_hint: string;\n\n    /**\n     * Info text displayed in the search info tooltip.\n     */\n    @Prop()\n    search_info_tooltip: string;\n\n    /**\n     * Column definitions passed to atui-table component.\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    /**\n     * Default page size of the table\n     */\n    @Prop()\n    page_size?: number = 10;\n\n    /**\n     * If true the table dropdown filters will not be added\n     */\n    @Prop()\n    hide_dropdown_filters?: boolean;\n\n    /**\n     * If true the column manager will not be added\n     */\n    @Prop()\n    hide_column_manager?: boolean;\n\n    /**\n     * If true the table export menu will not be added\n     */\n    @Prop()\n    hide_export_menu?: boolean;\n\n    /**\n     * If true, disables pagination on the table and shows all data at once.\n     * Useful for server-side pagination where you want to control pagination externally.\n     */\n    @Prop()\n    use_custom_pagination?: boolean = false;\n\n    /**\n     * If true, enables automatic column resizing to fit available space.\n     * Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.\n     */\n    @Prop()\n    auto_size_columns: boolean = true;\n\n    @Element()\n    el: HTMLElement;\n\n    @State()\n    translations: any;\n\n    @State()\n    agGrid: GridApi;\n\n    @State()\n    tableCreated: boolean = false;\n\n    @State()\n    activeFilters: { [key: string]: string } = {};\n\n    @State()\n    selectedFilters: { id: string; value: string }[] = [];\n\n    @State()\n    menuSelectedIds: string[] = [];\n\n    @State()\n    searchValue: string = '';\n\n    tableEl: HTMLAtuiTableElement;\n\n    @Watch('selectedFilters')\n    handleSelectedFiltersChange(newValue: { id: string; value: string }[]) {\n        this.menuSelectedIds = newValue.map((f) => f.id);\n        this.updateActiveFilters();\n    }\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    async componentDidLoad() {\n        await this.initGrid();\n    }\n\n    async componentDidUpdate() {\n        await this.initGrid();\n    }\n\n    /**\n     * Updates the data of rows in the AG Grid based on their displayed row index.\n     *\n     * Use this method when you need to programmatically update one or more specific rows in the grid,\n     * identified by their current displayed index. This is particularly useful when you want to perform\n     * partial updates (such as in-place cell editing, real-time updates, or upon receiving new data from a\n     * server), and want to reflect these changes immediately in the UI with optional visual feedback.\n     *\n     * @template T - The data type of the row's underlying data structure.\n     * @param {RowUpdate<T>[]} rowUpdates - An array of objects specifying the row indices and the data updates to apply.\n     *   - `index`: The displayed index of the row to update.\n     *   - `update`: An object containing the updated data for the row.\n     * @param {RowUpdateOptions} [options] - Optional settings for the update operation.\n     *   - `flash`: Whether to visually flash the updated rows after the data change (improves user visibility).\n     *   - `forceRefresh`: Whether to force refresh the row cells after updating (useful for advanced rendering scenarios).\n     *\n     * @example\n     * // Update row at displayed index 2 with new values and flash the change\n     * updateRowByIndex([{ index: 2, update: { status: 'Processed' }}], { flash: true });\n     *\n     * @remarks\n     * - This function works with currently rendered rows; if rows are virtualized or paged out, ensure\n     *   the specified indices match the grid's current rendering context.\n     * - Recommended for cases where quick, UI-driven row data mutations are required (such as action buttons,\n     *   websocket pushes, or UI triggers).\n     */\n    @Method()\n    async updateRowByIndex<T>(\n        rowUpdates: RowUpdate<T>[],\n        options?: RowUpdateOptions,\n    ): Promise<void> {\n        const displayedRows = this.agGrid.getRenderedNodes();\n        rowUpdates.forEach(({ index, update }) => {\n            const displayedRow = displayedRows.find(\n                (row) => row.rowIndex === index,\n            );\n            if (displayedRow) {\n                displayedRow.updateData(update);\n                if (options?.flash) {\n                    this.agGrid.flashCells({ rowNodes: [displayedRow] });\n                }\n                this.agGrid.refreshCells({\n                    rowNodes: [displayedRow],\n                    force: options?.forceRefresh || false,\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns the **currently displayed row nodes** from the ag-Grid instance.\n     *\n     * This asynchronous method retrieves an array of row nodes representing the rows currently visible\n     * (rendered) in the grid, after filtering, sorting, and other view-based operations.\n     *\n     * @template T The data type contained in each row node.\n     * @returns {Promise<IRowNode<T>[]>} Promise resolving to an array of displayed row nodes.\n     */\n    @Method()\n    async getDisplayedRows<T>(): Promise<IRowNode<T>[]> {\n        return this.agGrid.getRenderedNodes();\n    }\n\n    private async initGrid() {\n        if (this.col_defs && !this.tableCreated && this.tableEl) {\n            this.agGrid = await this.tableEl.createGrid();\n            this.tableCreated = true;\n            this.setupExternalFilters();\n\n            if (this.table_data?.items) {\n                this.agGrid.setGridOption('rowData', this.table_data.items);\n            }\n        }\n    }\n\n    private setupExternalFilters() {\n        if (!this.agGrid) return;\n\n        this.agGrid.setGridOption<'isExternalFilterPresent'>(\n            'isExternalFilterPresent',\n            () => {\n                const hasFilters = Object.keys(this.activeFilters).length > 0;\n                console.log(\n                    'isExternalFilterPresent called, hasFilters:',\n                    hasFilters,\n                );\n                return hasFilters;\n            },\n        );\n\n        this.agGrid.setGridOption<'doesExternalFilterPass'>(\n            'doesExternalFilterPass',\n            (node) => {\n                if (!node.data) return true;\n\n                const searchValue = this.activeFilters['__search__'];\n                if (searchValue) {\n                    const searchLower = searchValue.toLowerCase();\n\n                    // Check all column definitions and use their valueGetter if available\n                    const matchesSearch = this.col_defs.some((colDef) => {\n                        let cellValue;\n\n                        if (\n                            colDef.valueGetter &&\n                            typeof colDef.valueGetter === 'function'\n                        ) {\n                            // Use valueGetter for processed values (custom cells)\n                            cellValue = colDef.valueGetter({\n                                data: node.data,\n                                node,\n                                colDef,\n                                api: this.agGrid,\n                                context: null,\n                                getValue: (field: string) => node.data[field],\n                                column: null, // Not available in external filter context\n                            });\n                        } else if (colDef.field) {\n                            // Use raw field value for simple cells\n                            cellValue = node.data[colDef.field];\n                        }\n\n                        return (\n                            cellValue &&\n                            String(cellValue)\n                                .toLowerCase()\n                                .includes(searchLower)\n                        );\n                    });\n\n                    if (!matchesSearch) return false;\n                }\n\n                const columnFilterResult = Object.entries(\n                    this.activeFilters,\n                ).every(([colId, filterValue]) => {\n                    if (colId === '__search__' || !filterValue) return true;\n\n                    // Find the column definition for this field\n                    const colDef = this.col_defs.find(\n                        (def) => def.field === colId,\n                    );\n                    let value;\n\n                    if (\n                        colDef &&\n                        colDef.valueGetter &&\n                        typeof colDef.valueGetter === 'function'\n                    ) {\n                        // Use valueGetter for processed values (custom cells)\n                        value = colDef.valueGetter({\n                            data: node.data,\n                            node,\n                            colDef,\n                            api: this.agGrid,\n                            context: null,\n                            getValue: (field: string) => node.data[field],\n                            column: null, // Not available in external filter context\n                        });\n                    } else {\n                        // Use raw field value for simple cells\n                        value = node.data[colId];\n                    }\n\n                    const matches =\n                        value &&\n                        String(value)\n                            .toLowerCase()\n                            .includes(String(filterValue).toLowerCase());\n                    return matches;\n                });\n\n                return columnFilterResult;\n            },\n        );\n    }\n\n    handleColumnChange(event: CustomEvent) {\n        const { id, checked } = event.detail;\n        const updatedColDefs = this.col_defs.map((colDef) => {\n            if (colDef.field === id) {\n                return { ...colDef, hide: !checked };\n            }\n            return colDef;\n        });\n\n        this.col_defs = updatedColDefs;\n    }\n\n    handleFilterChange(event: CustomEvent) {\n        if (event.detail) {\n            if (\n                Array.isArray(event.detail) &&\n                typeof event.detail[0] === 'string'\n            ) {\n                this.handleMenuFilterChange(event.detail);\n            } else if (\n                Array.isArray(event.detail) &&\n                typeof event.detail[0] === 'object'\n            ) {\n                this.handleFilterListChange(event.detail);\n            }\n        }\n\n        this.updateActiveFilters();\n    }\n\n    private handleMenuFilterChange(selectedIds: string[]) {\n        this.selectedFilters = selectedIds.map((id) => ({\n            id,\n            value: '',\n        }));\n        this.menuSelectedIds = selectedIds;\n    }\n\n    private handleFilterListChange(filters: { id: string; value: string }[]) {\n        if (filters.length === 1 && filters[0].id === '') {\n            this.selectedFilters = [];\n            this.menuSelectedIds = [];\n        } else {\n            this.selectedFilters = filters;\n            this.menuSelectedIds = filters\n                .filter((f) => f.value && f.value.trim() !== '')\n                .map((f) => f.id);\n        }\n    }\n\n    private updateActiveFilters() {\n        // Keep existing search value in activeFilters - it's managed by handleSearchChange\n        const currentSearch = this.activeFilters['__search__'];\n        this.activeFilters = {};\n\n        // Restore search if it exists\n        if (currentSearch) {\n            this.activeFilters['__search__'] = currentSearch;\n        }\n\n        this.selectedFilters.forEach((filter) => {\n            if (filter.value) {\n                this.activeFilters[filter.id] = filter.value;\n            }\n        });\n\n        if (this.agGrid) {\n            this.setupExternalFilters();\n            this.agGrid.onFilterChanged();\n        } else {\n            console.log('agGrid not available, cannot apply filter');\n        }\n    }\n\n    handleSearchChange(event: CustomEvent) {\n        this.searchValue = event.detail || '';\n\n        // Add search to activeFilters for custom external filter logic\n        if (this.searchValue) {\n            this.activeFilters['__search__'] = this.searchValue;\n        } else {\n            delete this.activeFilters['__search__'];\n        }\n\n        this.updateActiveFilters();\n    }\n\n    render() {\n        return (\n            <Host>\n                <atui-table-actions ag_grid={this.agGrid}>\n                    <div\n                        class=\"flex items-center gap-8\"\n                        slot=\"search\"\n                    >\n                        {!this.hide_dropdown_filters && this.col_defs && (\n                            <atui-table-filter-menu\n                                slot=\"filter-menu\"\n                                col_defs={this.col_defs}\n                                selected={this.menuSelectedIds}\n                                onAtuiChange={(event) =>\n                                    this.handleFilterChange(event)\n                                }\n                            ></atui-table-filter-menu>\n                        )}\n\n                        <atui-search\n                            class=\"w-input-md\"\n                            label={this.search_label}\n                            hint_text={this.search_hint}\n                            info_text={this.search_info_tooltip}\n                            placeholder={\n                                this.translations.ATUI.TABLE.SEARCH_BY_KEYWORD\n                            }\n                            onAtuiChange={(event) =>\n                                this.handleSearchChange(event)\n                            }\n                        ></atui-search>\n                    </div>\n\n                    {!this.hide_dropdown_filters && this.col_defs && (\n                        <atui-table-filters\n                            slot=\"filters\"\n                            col_defs={this.col_defs}\n                            selected={this.selectedFilters}\n                            onAtuiChange={(event) =>\n                                this.handleFilterChange(event)\n                            }\n                        ></atui-table-filters>\n                    )}\n\n                    {!this.hide_export_menu && (\n                        <atui-table-export-menu slot=\"export-menu\" />\n                    )}\n\n                    {!this.hide_column_manager && this.col_defs && (\n                        <atui-column-manager\n                            slot=\"column-manager\"\n                            col_defs={this.col_defs}\n                            onAtuiChange={(event) =>\n                                this.handleColumnChange(event)\n                            }\n                        />\n                    )}\n\n                    <div slot=\"actions\">\n                        <slot name=\"actions\" />\n                    </div>\n                </atui-table-actions>\n\n                <slot name=\"multi-select-actions\" />\n\n                <atui-table\n                    ref={(el) => (this.tableEl = el)}\n                    table_data={this.table_data}\n                    col_defs={this.col_defs}\n                    page_size={this.page_size}\n                    use_custom_pagination={this.use_custom_pagination}\n                    disable_auto_init={true}\n                    auto_size_columns={this.auto_size_columns}\n                />\n            </Host>\n        );\n    }\n}\n"],"names":[],"mappings":"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"}