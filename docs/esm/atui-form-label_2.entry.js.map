{"file":"atui-form-label.atui-tooltip.entry.js","mappings":"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","names":[],"sources":["src/components/atui-form-label/atui-form-label.tsx","src/components/atui-tooltip/atui-tooltip.tsx"],"sourcesContent":["import { Component, h, Prop } from '@stencil/core';\n\n/**\n * @category Form Controls\n * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.\n */\n@Component({\n    tag: 'atui-form-label',\n    shadow: false,\n})\nexport class AtuiFormLabelComponent {\n    /**\n     * Label that appears before the info icon.\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * When true, there will be a red star on the label.\n     */\n    @Prop()\n    required: boolean;\n\n    /**\n     * The text to be contained in the tooltip.\n     */\n    @Prop()\n    info_text: string;\n\n    /**\n     * Placed in the 'for' attribute on the label element\n     */\n    @Prop()\n    for: string;\n\n    render() {\n        return (\n            <div class=\"flex items-center gap-8\">\n                {[\n                    (this.label || this.required) && (\n                        <label\n                            htmlFor={this.for ?? undefined}\n                            class=\"flex gap-4\"\n                        >\n                            {this.label}\n                            {this.required && <span class=\"text-error\">*</span>}\n                        </label>\n                    ),\n                    this.info_text && (\n                        <atui-tooltip position=\"right\">\n                            <span\n                                slot=\"tooltip-trigger\"\n                                class=\"material-icons cursor-pointer !text-icon-sm text-light\"\n                            >\n                                info_outline\n                            </span>\n                            <span slot=\"tooltip-content\">{this.info_text}</span>\n                        </atui-tooltip>\n                    ),\n                ]}\n            </div>\n        );\n    }\n}\n","import { Component, h, Host, Prop, Element } from '@stencil/core';\nimport { cva } from 'class-variance-authority';\n\nexport type TooltipPosition = 'top' | 'bottom' | 'left' | 'right';\n\nconst variants = cva(\n    'z-50box-border pointer-events-none absolute z-modal flex scale-75 whitespace-nowrap rounded bg-disabled-dark px-4 py-2 text-sm text-white opacity-0 transition-[transform,opacity] peer-hover:scale-100 peer-hover:opacity-100',\n    {\n        variants: {\n            open: {\n                true: null,\n                false: 'hidden',\n            },\n        },\n    },\n);\n\n/**\n * @category Overlays\n * @description A tooltip component that displays contextual information when hovering over or focusing on an element. Provides accessible hover/focus behavior with customizable positioning and content.\n *\n * @slot tooltip-trigger - Shows the tooltip when hovered\n * @slot tooltip-content - Content to go inside of the tooltip\n */\n@Component({\n    tag: 'atui-tooltip',\n    shadow: false,\n})\nexport class AtuiTooltipComponent {\n    /**\n     * Position of the tooltip content relative to the atui-tooltip\n     */\n    @Prop()\n    position: TooltipPosition = 'bottom';\n\n    /**\n     * If false, forces the tooltip to hide.\n     * If true, tooltip will show when trigger is hovered\n     */\n    @Prop()\n    is_visible?: boolean = true;\n\n    /**\n     * String representing the 'max-width' style of the tooltip element (e.g., 'auto', '200px', '50%')\n     */\n    @Prop() width?: string = 'auto';\n\n    /**\n     * Offset in pixels from the edge of the trigger element\n     */\n    @Prop() offset?: number = 8;\n\n    @Element() el: HTMLElement;\n    triggerEl: HTMLElement;\n    tooltipEl: HTMLElement;\n\n    componentDidLoad() {\n        window.addEventListener('resize', this.updateTooltipWidth);\n    }\n\n    disconnectedCallback() {\n        window.removeEventListener('resize', this.updateTooltipWidth);\n    }\n\n    updateTooltipWidth = () => {\n        if (!this.tooltipEl) return;\n\n        requestAnimationFrame(() => {\n            if (this.width !== 'auto') {\n                this.tooltipEl.style.maxWidth = `${this.width}px`;\n            }\n        });\n    };\n\n    get positionStyle(): { [key: string]: string } {\n        const offset = this.offset ?? 8;\n        const width = this.width?.trim() || 'auto';\n\n        const baseStyles = {\n            width: width,\n        };\n\n        const positionStyles = {\n            top: {\n                ...baseStyles,\n                bottom: '100%',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                marginBottom: `${offset}px`,\n            },\n            bottom: {\n                ...baseStyles,\n                top: '100%',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                marginTop: `${offset}px`,\n            },\n            left: {\n                ...baseStyles,\n                right: '100%',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                marginRight: `${offset}px`,\n            },\n            right: {\n                ...baseStyles,\n                left: '100%',\n                top: '50%',\n                transform: 'translateY(-50%)',\n                marginLeft: `${offset}px`,\n            },\n        };\n\n        return positionStyles[this.position] || {};\n    }\n\n    render() {\n        const classname = variants({\n            open: this.is_visible,\n        });\n\n        return (\n            <Host class=\"relative inline-block\">\n                <div\n                    class=\"peer contents\"\n                    ref={(el) => (this.triggerEl = el)}\n                >\n                    <slot name=\"tooltip-trigger\" />\n                </div>\n                <div\n                    ref={(el) => (this.tooltipEl = el)}\n                    style={this.positionStyle}\n                    class={classname}\n                >\n                    <slot name=\"tooltip-content\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"version":3}