{"version":3,"names":["atuiDialogCss","AtuiDialogComponent","constructor","hostRef","this","role","backdrop","isOpen","handleDialogClose","event","preventDefault","closeDialog","handleKeyDown","key","openDialog","dialog","el","querySelector","showModal","classList","add","close","removeAttribute","remove","render","h","class","id","dialog_id","onClose","onKeyDown"],"sources":["src/components/atui-dialog/atui-dialog.scss?tag=atui-dialog","src/components/atui-dialog/atui-dialog.tsx"],"sourcesContent":["@use '../../styles/shared/backdrop';\n\n.c-atui-dialog {\n    position: fixed;\n    inset: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    max-height: calc(100dvh - 48px);\n    overflow: hidden;\n    border: 0;\n    padding: 0;\n    background: transparent;\n    z-index: var(--token-z-index-modal);\n    transform-origin: center;\n    opacity: 0;\n    scale: 0.95;\n    box-shadow: var(--token-shadow-3);\n    transition:\n        translate 0.3s ease,\n        scale 0.3s ease,\n        opacity 0.3s ease,\n        visibility 0s linear 0.3s;\n    visibility: hidden;\n\n    &::backdrop {\n        background: none;\n    }\n\n    .backdrop-content {\n        display: flex;\n        max-height: calc(100dvh - 48px);\n    }\n\n    &[open] {\n        translate: 0 0;\n        scale: 1;\n        opacity: 1;\n        visibility: visible;\n        transition:\n            translate 0.3s ease,\n            scale 0.3s ease,\n            opacity 0.3s ease,\n            visibility 0s linear;\n\n        @starting-style {\n            opacity: 0;\n            scale: 1.15;\n        }\n    }\n\n    &:not([open]) {\n        scale: 0.95;\n        opacity: 0;\n        visibility: hidden;\n    }\n}\n","import { Component, Prop, h, Element, Method, State } from '@stencil/core';\n\n/**\n * @category Overlays\n * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.\n *\n * @slot - Content placed inside of the dialog box\n */\n@Component({\n    tag: 'atui-dialog',\n    styleUrl: 'atui-dialog.scss',\n    shadow: false,\n})\nexport class AtuiDialogComponent {\n    @Element() el!: HTMLAtuiDialogElement;\n\n    /**\n     * ID of the dialog element (used to open and close the modal)\n     */\n    @Prop()\n    dialog_id: string;\n\n    /**\n     * Role of the dialog element. Can be either 'dialog' or 'alertdialog'\n     */\n    @Prop()\n    role: 'dialog' | 'alertdialog' = 'dialog';\n\n    /**\n     * Whether to show a backdrop behind the dialog\n     */\n    @Prop()\n    backdrop: boolean = false;\n\n    /**\n     * Internal state to track if dialog is open\n     */\n    @State()\n    isOpen: boolean = false;\n\n    /**\n     * Opens the dialog modal\n     * @returns Promise that resolves when the dialog is opened\n     */\n    @Method()\n    async openDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && !this.isOpen) {\n            dialog.showModal();\n            this.isOpen = true;\n            if (this.backdrop) {\n                dialog.classList.add('backdrop');\n            }\n        }\n    }\n\n    /**\n     * Closes the dialog modal\n     * @returns Promise that resolves when the dialog is closed\n     */\n    @Method()\n    async closeDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && this.isOpen) {\n            dialog.close();\n            this.isOpen = false;\n            dialog.removeAttribute('open');\n            dialog.classList.remove('backdrop');\n        }\n    }\n\n    private handleDialogClose = (event: Event) => {\n        event.preventDefault();\n        if (this.isOpen) {\n            this.closeDialog();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isOpen) {\n            event.preventDefault();\n            this.closeDialog();\n        }\n    };\n\n    render() {\n        return (\n            <dialog\n                class={`c-atui-dialog ${this.backdrop ? 'backdrop' : ''}`}\n                id={this.dialog_id}\n                data-name=\"dialog\"\n                role={this.role}\n                aria-modal=\"true\"\n                onClose={this.handleDialogClose}\n                onKeyDown={this.handleKeyDown}\n            >\n                <div class=\"backdrop-content\">\n                    <slot />\n                </div>\n            </dialog>\n        );\n    }\n}\n"],"mappings":"kDAAA,MAAMA,EAAgB,m7C,MCaTC,EAAmB,MALhC,WAAAC,CAAAC,G,UAkBIC,KAAIC,KAA6B,SAMjCD,KAAQE,SAAY,MAMpBF,KAAMG,OAAY,MAiCVH,KAAAI,kBAAqBC,IACzBA,EAAMC,iBACN,GAAIN,KAAKG,OAAQ,CACbH,KAAKO,a,GAILP,KAAAQ,cAAiBH,IACrB,GAAIA,EAAMI,MAAQ,UAAYT,KAAKG,OAAQ,CACvCE,EAAMC,iBACNN,KAAKO,a,EAqBhB,CAzDG,gBAAMG,GACF,MAAMC,EAASX,KAAKY,GAAGC,cAAc,UACrC,GAAIF,IAAWX,KAAKG,OAAQ,CACxBQ,EAAOG,YACPd,KAAKG,OAAS,KACd,GAAIH,KAAKE,SAAU,CACfS,EAAOI,UAAUC,IAAI,W,GAUjC,iBAAMT,GACF,MAAMI,EAASX,KAAKY,GAAGC,cAAc,UACrC,GAAIF,GAAUX,KAAKG,OAAQ,CACvBQ,EAAOM,QACPjB,KAAKG,OAAS,MACdQ,EAAOO,gBAAgB,QACvBP,EAAOI,UAAUI,OAAO,W,EAkBhC,MAAAC,GACI,OACIC,EAAA,UAAAZ,IAAA,2CACIa,MAAO,iBAAiBtB,KAAKE,SAAW,WAAa,KACrDqB,GAAIvB,KAAKwB,UACC,qBACVvB,KAAMD,KAAKC,KAAI,aACJ,OACXwB,QAASzB,KAAKI,kBACdsB,UAAW1B,KAAKQ,eAEhBa,EAAK,OAAAZ,IAAA,2CAAAa,MAAM,oBACPD,EAAQ,QAAAZ,IAAA,8C","ignoreList":[]}