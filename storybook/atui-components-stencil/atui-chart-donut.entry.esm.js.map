{"version":3,"file":"atui-chart-donut.entry.esm.js","sources":["src/components/atui-chart-donut/atui-chart-donut.tsx"],"sourcesContent":["import { Component, h, Host, Method, Prop } from '@stencil/core';\nimport {\n    ArcElement,\n    Chart,\n    ChartConfiguration,\n    ChartDataset,\n    DoughnutController,\n    Filler,\n    Legend,\n    Tooltip,\n    Plugin,\n} from 'chart.js';\nimport 'chartjs-adapter-moment';\nimport { ChartColorPalette } from '../../types/chart-color';\nimport { getChartColors } from '../../utils/chart-color';\nconst TOKEN_TEXT_DARK = '#0f172a';\n\nexport type Height = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'auto';\nexport type LegendPosition = 'top' | 'bottom' | 'left' | 'right';\n\nconst heightVariants = {\n    xs: 'h-[70px]',\n    sm: 'h-[160px]',\n    md: 'h-[235px]',\n    lg: 'h-[330px]',\n    xl: 'h-[440px]',\n    auto: 'h-full',\n};\n\n/**\n * @category Data Visualization\n * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.\n */\n@Component({\n    tag: 'atui-chart-donut',\n    shadow: false,\n})\nexport class AtuiChartDonut {\n    /**\n     * Data to be shown in the chart. ChartDataset properties can be found\n     * [here](https://www.chartjs.org/docs/latest/charts/doughnut.html#dataset-properties)\n     */\n    @Prop()\n    data: {\n        labels: string[];\n        datasets: ChartDataset[];\n    };\n\n    /**\n     * Additional options to be added to the chart configuration\n     */\n    @Prop()\n    options?: object;\n\n    /**\n     * Height of the chart\n     */\n    @Prop()\n    height?: Height = 'md';\n\n    /**\n     * Additional options for formatting the legend\n     */\n    @Prop()\n    legend_format?: object = {\n        labels: {\n            boxWidth: 10,\n            boxHeight: 10,\n            fontSize: 11,\n        },\n        onHover: (event): void => {\n            if (event.native) {\n                (event.native.target as HTMLElement).style.cursor = 'pointer';\n            }\n        },\n        display: true,\n    };\n\n    /**\n     * Additional options for the tooltip\n     */\n    @Prop()\n    tooltip_options?: object = {\n        mode: 'index',\n        intersect: false,\n        position: 'nearest',\n    };\n\n    /**\n     * Additional plugin options\n     */\n    @Prop()\n    plugins?: Plugin[];\n\n    /**\n     * Animations added to the chart configuration\n     */\n    @Prop()\n    animations: object;\n\n    /**\n     * Colour palette to use for the chart. Preset options are provided ChartColourPalette:\n     * 'categorical' : For charts with data that have distinct labels and no natural order\n     * 'sequential' : For charts with data that is numeric or is naturally ordered.\n     * 'alert' : For charts that relate to health state. Note that data requires a specific order.\n     * 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.\n     */\n    @Prop()\n    color_palette: ChartColorPalette = ChartColorPalette.CATEGORICAL;\n\n    /**\n     * Optional value text to display in the center of the donut chart\n     */\n    @Prop()\n    center_value?: string;\n\n    /**\n     * Optional heading text to display in the center of the donut chart\n     */\n    @Prop()\n    center_text?: string;\n\n    /**\n     * Controls the thickness of the donut ring. Value between 0 and 100.\n     * 0 means no cutout (solid circle), 100 means maximum cutout (thin ring).\n     * Default is 70.\n     */\n    @Prop()\n    cutout?: number = 70;\n\n    canvasEl: HTMLCanvasElement;\n    config: ChartConfiguration;\n\n    /**\n     * Getter method for the chart's configuration object\n     * @returns Configuration of the chart\n     */\n    @Method()\n    async getConfig(): Promise<object> {\n        return this.config;\n    }\n\n    defaultPieTooltipOptions = {\n        mode: 'index',\n        intersect: true,\n        position: 'nearest',\n        animation: {\n            duration: 150,\n        },\n    };\n\n    private getDrawCenterTextPlugin(): Plugin {\n        return {\n            id: 'DrawCenterTextPlugin',\n            afterDatasetDraw: (chart): void => {\n                const centerX =\n                    (chart.chartArea.left + chart.chartArea.right) / 2;\n                const centerY =\n                    (chart.chartArea.top + chart.chartArea.bottom) / 2;\n                const ctx = chart.ctx;\n                if (!ctx) {\n                    return;\n                }\n\n                ctx.restore();\n\n                const height = chart.chartArea.bottom - chart.chartArea.top;\n                const textFontSize =\n                    (height / 250).toFixed(2) + 'em sans-serif';\n                const valueFontSize =\n                    (height / 180).toFixed(2) + 'em sans-serif';\n\n                ctx.fillStyle = TOKEN_TEXT_DARK;\n                ctx.textAlign = 'center';\n                ctx.textBaseline = 'middle';\n                ctx.font = '500 ' + valueFontSize;\n\n                const addText = (\n                    fontSize: string,\n                    text: string,\n                    x: number,\n                    y: number,\n                    position: 'top' | 'middle' | 'bottom',\n                ): void => {\n                    ctx.font = '500 ' + fontSize;\n                    const textMetrics = ctx.measureText(text);\n                    const textHeight =\n                        textMetrics.actualBoundingBoxAscent +\n                        textMetrics.actualBoundingBoxDescent;\n\n                    if (position != 'middle') {\n                        y =\n                            position === 'top'\n                                ? y - textHeight\n                                : y + textHeight;\n                    }\n                    ctx.fillText(text, x, y);\n                };\n\n                if (this.center_value) {\n                    addText(\n                        valueFontSize,\n                        this.center_value,\n                        centerX,\n                        centerY,\n                        'top',\n                    );\n                    addText(\n                        textFontSize,\n                        this.center_text,\n                        centerX,\n                        centerY,\n                        'bottom',\n                    );\n                } else if (this.center_text) {\n                    addText(\n                        textFontSize,\n                        this.center_text,\n                        centerX,\n                        centerY,\n                        'middle',\n                    );\n                }\n\n                ctx.save();\n            },\n        };\n    }\n\n    initChart() {\n        Chart.register(DoughnutController, ArcElement, Legend, Tooltip, Filler);\n\n        const colors = getChartColors(this.color_palette);\n\n        if (colors) {\n            this.applyPresetPalette(colors);\n        }\n\n        const plugins = this.plugins ? [...this.plugins] : [];\n\n        if (this.center_text || this.center_value) {\n            plugins.push(this.getDrawCenterTextPlugin());\n        }\n\n        this.config = {\n            type: 'doughnut',\n            data: {\n                ...this.data,\n                datasets: this.data.datasets.map((dataset) => ({\n                    ...dataset,\n                    cutout: `${this.cutout}%`,\n                })),\n            },\n            options: {\n                animation: this.animations,\n                ...this.options,\n                maintainAspectRatio: true,\n                aspectRatio: 1,\n                layout: {\n                    padding: 16,\n                },\n                plugins: {\n                    legend: this.legend_format,\n                    tooltip:\n                        this.tooltip_options || this.defaultPieTooltipOptions,\n                },\n            },\n            plugins: plugins,\n        };\n\n        new Chart(this.canvasEl, this.config as ChartConfiguration);\n        this.canvasEl.style.width = '100%';\n        this.canvasEl.style.height = '100%';\n    }\n\n    applyPresetPalette(colors: string[]): void {\n        if (this.color_palette === ChartColorPalette.CUSTOM) {\n            return;\n        }\n\n        this.data.datasets = this.data.datasets.map((dataset) => {\n            const color = dataset.data.map(\n                (_, index) => colors[index % colors.length],\n            );\n\n            return {\n                ...dataset,\n                backgroundColor: color,\n                hoverBackgroundColor: color,\n                borderColor: color,\n                hoverBorderColor: color,\n            };\n        });\n    }\n\n    componentDidUpdate() {\n        if (this.data && this.data.datasets.length) {\n            this.initChart();\n        }\n    }\n\n    /**\n     * componentDidLoad will be run, but if the props haven't been passed to it yet,\n     * it will throw an error. So we catch this, and wait for the props to be passed\n     * to the component where it will run componentDidUpdtae.\n     */\n    componentDidLoad() {\n        if (this.data && this.data.datasets.length) {\n            this.initChart();\n        }\n    }\n\n    render() {\n        return (\n            <Host\n                role=\"region\"\n                class={`relative flex w-full flex-col items-center justify-center ${heightVariants[this.height]}`}\n            >\n                <canvas\n                    ref={(el) => (this.canvasEl = el)}\n                    style={{\n                        position: 'absolute',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        maxWidth: '100%',\n                        maxHeight: '100%',\n                    }}\n                />\n            </Host>\n        );\n    }\n}\n"],"names":["Legend","Tooltip","Filler"],"mappings":"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"}