{"version":3,"names":["AtuiTextImageCell","constructor","hostRef","this","text","imageHeight","imagePosition","init","params","_a","imageWidth","imageClass","_b","updateTextAndImage","refresh","data","value","getGui","el","imageSource","render","h","Host","key","class","position","disabled","generateTooltip","slot","src","style","height","width","undefined","alt"],"sources":["src/components/table-components/cell-components/atui-text-image-cell/atui-text-image-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ITooltipCell } from '../../../../types';\n\nexport interface TextImageCellData {\n    text: string;\n    image: string;\n    tooltip?: string;\n}\n\nexport interface ITextImageCellParams\n    extends ICellRendererParams,\n        ITooltipCell {\n    text?: (data: any) => string;\n    imageSource: (data: any) => string;\n    imageHeight?: number;\n    imageWidth?: number;\n    imageClass?: string;\n    imagePosition?: 'before' | 'after';\n}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with an image.\n */\n@Component({\n    tag: 'atui-text-image-cell',\n    shadow: false,\n})\nexport class AtuiTextImageCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n\n    private params: ITextImageCellParams;\n\n    @State() text: string = '';\n\n    private imageHeight: number = 24;\n    private imageWidth?: number;\n    private imageClass?: string;\n    private imagePosition: 'before' | 'after' = 'before';\n\n    init(params: ICellRendererParams): void {\n        this.params = params as ITextImageCellParams;\n\n        this.imageHeight = this.params.imageHeight ?? this.imageHeight;\n        this.imageWidth = this.params.imageWidth;\n        this.imageClass = this.params.imageClass;\n        this.imagePosition = this.params.imagePosition ?? 'before';\n\n        this.updateTextAndImage();\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.params = params as ITextImageCellParams;\n        this.updateTextAndImage();\n        return true;\n    }\n\n    private updateTextAndImage() {\n        this.text = this.params.text\n            ? this.params.text(this.params.data)\n            : (this.params.value ?? '');\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    private get imageSource() {\n        return this.params.imageSource(this.params.data);\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                <atui-tooltip\n                    position=\"right\"\n                    disabled={!this.params?.generateTooltip}\n                >\n                    <div\n                        class=\"flex items-center gap-8\"\n                        slot=\"tooltip-trigger\"\n                    >\n                        {this.imagePosition === 'before' &&\n                            this.imageSource && (\n                                <img\n                                    src={this.imageSource}\n                                    style={{\n                                        height: `${this.imageHeight}px`,\n                                        width: this.imageWidth\n                                            ? `${this.imageWidth}px`\n                                            : undefined,\n                                    }}\n                                    class={this.imageClass && this.imageClass}\n                                    alt=\"\"\n                                />\n                            )}\n\n                        {this.text && <span class=\"truncate\">{this.text}</span>}\n\n                        {this.imagePosition === 'after' && this.imageSource && (\n                            <img\n                                src={this.imageSource}\n                                style={{\n                                    height: `${this.imageHeight}px`,\n                                    width: this.imageWidth\n                                        ? `${this.imageWidth}px`\n                                        : undefined,\n                                }}\n                                class={this.imageClass && this.imageClass}\n                                alt=\"\"\n                            />\n                        )}\n                    </div>\n\n                    {this.params?.generateTooltip && (\n                        <span slot=\"tooltip-content\">\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DA6BaA,EAAiB,MAJ9B,WAAAC,CAAAC,G,UASaC,KAAIC,KAAW,GAEhBD,KAAWE,YAAW,GAGtBF,KAAaG,cAAuB,QAqF/C,CAnFG,IAAAC,CAAKC,G,QACDL,KAAKK,OAASA,EAEdL,KAAKE,aAAcI,EAAAN,KAAKK,OAAOH,eAAW,MAAAI,SAAA,EAAAA,EAAIN,KAAKE,YACnDF,KAAKO,WAAaP,KAAKK,OAAOE,WAC9BP,KAAKQ,WAAaR,KAAKK,OAAOG,WAC9BR,KAAKG,eAAgBM,EAAAT,KAAKK,OAAOF,iBAAiB,MAAAM,SAAA,EAAAA,EAAA,SAElDT,KAAKU,oB,CAGT,OAAAC,CAAQN,GACJL,KAAKK,OAASA,EACdL,KAAKU,qBACL,OAAO,I,CAGH,kBAAAA,G,MACJV,KAAKC,KAAOD,KAAKK,OAAOJ,KAClBD,KAAKK,OAAOJ,KAAKD,KAAKK,OAAOO,OAC5BN,EAAAN,KAAKK,OAAOQ,SAAK,MAAAP,SAAA,EAAAA,EAAI,E,CAGhC,MAAAQ,GACI,OAAOd,KAAKe,E,CAGhB,eAAYC,GACR,OAAOhB,KAAKK,OAAOW,YAAYhB,KAAKK,OAAOO,K,CAG/C,MAAAK,G,QACI,OACIC,EAACC,EAAK,CAAAC,IAAA,2CAAAC,MAAM,4BACRH,EAAA,gBAAAE,IAAA,2CACIE,SAAS,QACTC,YAAWjB,EAAAN,KAAKK,UAAM,MAAAC,SAAA,SAAAA,EAAEkB,kBAExBN,EAAA,OAAAE,IAAA,2CACIC,MAAM,0BACNI,KAAK,mBAEJzB,KAAKG,gBAAkB,UACpBH,KAAKgB,aACDE,EACI,OAAAE,IAAA,2CAAAM,IAAK1B,KAAKgB,YACVW,MAAO,CACHC,OAAQ,GAAG5B,KAAKE,gBAChB2B,MAAO7B,KAAKO,WACN,GAAGP,KAAKO,eACRuB,WAEVT,MAAOrB,KAAKQ,YAAcR,KAAKQ,WAC/BuB,IAAI,KAIf/B,KAAKC,MAAQiB,EAAM,QAAAE,IAAA,2CAAAC,MAAM,YAAYrB,KAAKC,MAE1CD,KAAKG,gBAAkB,SAAWH,KAAKgB,aACpCE,EAAA,OAAAE,IAAA,2CACIM,IAAK1B,KAAKgB,YACVW,MAAO,CACHC,OAAQ,GAAG5B,KAAKE,gBAChB2B,MAAO7B,KAAKO,WACN,GAAGP,KAAKO,eACRuB,WAEVT,MAAOrB,KAAKQ,YAAcR,KAAKQ,WAC/BuB,IAAI,QAKftB,EAAAT,KAAKK,UAAQ,MAAAI,SAAA,SAAAA,EAAAe,kBACVN,EAAM,QAAAE,IAAA,2CAAAK,KAAK,mBACNzB,KAAKK,OAAOmB,gBAAgBxB,KAAKK,U","ignoreList":[]}