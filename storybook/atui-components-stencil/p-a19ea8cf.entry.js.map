{"version":3,"names":["AtTextBadgeCell","init","params","this","text","textValue","data","_a","value","badgeText","badgeTextValue","_b","getGui","el","refresh","updateCell","String","newValue","render","h","Host","key","class","position","disabled","generateTooltip","slot","type","label"],"sources":["src/components/table-components/cell-components/at-text-badge-cell/at-text-badge-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport type { ITooltipCell } from '../../../../types';\n\nexport interface TextBadgeCellData {\n    text: string;\n    badgeText: string;\n    tooltip?: string;\n}\n\nexport interface ITextBadgeCellParams\n    extends ICellRendererParams,\n        ITooltipCell {\n    text?: (data: any) => string;\n    badgeText?: (data: any) => string;\n    badgeType?: string;\n}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with a badge.\n */\n\n@Component({\n    tag: 'at-text-badge-cell',\n    shadow: false,\n})\nexport class AtTextBadgeCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() textValue: string;\n    @State() badgeTextValue: string;\n    @State() params: ITextBadgeCellParams;\n\n    init(params: ICellRendererParams): void {\n        this.params = params as ITextBadgeCellParams;\n\n        if (this.params.text) {\n            this.textValue = this.params.text(params.data);\n        } else {\n            this.textValue = params.value?.text || '';\n        }\n\n        if (this.params.badgeText) {\n            this.badgeTextValue = this.params.badgeText(params.data);\n        } else {\n            this.badgeTextValue = params.value?.badgeText || '';\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.updateCell(String(params.value));\n        return true;\n    }\n\n    private updateCell(newValue: string) {\n        this.params.value = newValue;\n        this.textValue = this.params.value;\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                <at-tooltip\n                    position=\"right\"\n                    disabled={!this.params.generateTooltip}\n                >\n                    <div slot=\"tooltip-trigger\">\n                        <span class=\"truncate\">{this.textValue}</span>\n                        <at-badge\n                            type=\"info\"\n                            class=\"ml-4\"\n                            label={this.badgeTextValue}\n                        />\n                    </div>\n                    {this.params?.generateTooltip && (\n                        <span class=\"leading-normal\">\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </at-tooltip>\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DA2BaA,EAAe,M,yBAMxB,IAAAC,CAAKC,G,QACDC,KAAKD,OAASA,EAEd,GAAIC,KAAKD,OAAOE,KAAM,CAClBD,KAAKE,UAAYF,KAAKD,OAAOE,KAAKF,EAAOI,K,KACtC,CACHH,KAAKE,YAAYE,EAAAL,EAAOM,SAAO,MAAAD,SAAA,SAAAA,EAAAH,OAAQ,E,CAG3C,GAAID,KAAKD,OAAOO,UAAW,CACvBN,KAAKO,eAAiBP,KAAKD,OAAOO,UAAUP,EAAOI,K,KAChD,CACHH,KAAKO,iBAAiBC,EAAAT,EAAOM,SAAO,MAAAG,SAAA,SAAAA,EAAAF,YAAa,E,EAIzD,MAAAG,GACI,OAAOT,KAAKU,E,CAGhB,OAAAC,CAAQZ,GACJC,KAAKY,WAAWC,OAAOd,EAAOM,QAC9B,OAAO,I,CAGH,UAAAO,CAAWE,GACfd,KAAKD,OAAOM,MAAQS,EACpBd,KAAKE,UAAYF,KAAKD,OAAOM,K,CAGjC,MAAAU,G,MACI,OACIC,EAACC,EAAK,CAAAC,IAAA,2CAAAC,MAAM,4BACRH,EACI,cAAAE,IAAA,2CAAAE,SAAS,QACTC,UAAWrB,KAAKD,OAAOuB,iBAEvBN,EAAK,OAAAE,IAAA,2CAAAK,KAAK,mBACNP,EAAA,QAAAE,IAAA,2CAAMC,MAAM,YAAYnB,KAAKE,WAC7Bc,EAAA,YAAAE,IAAA,2CACIM,KAAK,OACLL,MAAM,OACNM,MAAOzB,KAAKO,oBAGnBH,EAAAJ,KAAKD,UAAQ,MAAAK,SAAA,SAAAA,EAAAkB,kBACVN,EAAM,QAAAE,IAAA,2CAAAC,MAAM,kBACPnB,KAAKD,OAAOuB,gBAAgBtB,KAAKD,U","ignoreList":[]}