{"version":3,"names":["AtuiMenu","constructor","hostRef","this","offset_x","offset_y","position","align","autoclose","trigger","role","disabled","isOpen","updatePosition","async","triggerEl","menuEl","updateFloatingPosition","disabledChanged","newValue","closeMenu","toggleMenu","togglePopover","matches","atuiMenuStateChange","emit","openMenu","showPopover","hidePopover","getIsOpen","componentDidLoad","popoverId","Math","random","toString","substr","setupFloatingUI","setTimeout","setupPopoverEventListeners","addEventListener","event","customEvent","newState","requestAnimationFrame","disconnectedCallback","cleanupFloatingUI","mouseEnterHandler","timedOutCloser","clearTimeout","mouseLeaveHandler","cleanupAutoUpdate","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","autoUpdate","placement","getFloatingUIPlacement","strategy","computePosition","middleware","offset","flip","fallbackStrategy","padding","shift","mainAxis","crossAxis","size","apply","availableWidth","availableHeight","elements","Object","assign","floating","style","maxWidth","maxHeight","then","x","y","styles","left","top","margin","transform","width","ancestorScroll","ancestorResize","elementResize","layoutShift","animationFrame","originalCleanup","disconnect","undefined","positionMap","bottom","right","alignMap","start","end","render","h","Host","key","class","onBlur","ref","el","onMouseEnter","onKeyDown","preventDefault","onMouseLeave","onClick","stopPropagation","name","popover","id"],"sources":["src/components/atui-menu/atui-menu.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n    Method,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport {\n    computePosition,\n    flip,\n    shift,\n    offset,\n    size,\n    autoUpdate,\n    type Placement,\n} from '@floating-ui/dom';\n\n/**\n * @category Overlays\n * @description A popover menu component for displaying action lists when via click or hover on a trigger element.\n */\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right';\nexport type Align = 'start' | 'end';\nexport type OpenOn = 'hover' | 'click';\nexport type AriaRole = 'menu' | 'listbox';\n\n@Component({\n    tag: 'atui-menu',\n    shadow: false,\n})\nexport class AtuiMenu {\n    /**\n     * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'\n     */\n    @Prop() offset_x: number = 0;\n\n    /**\n     * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'\n     */\n    @Prop() offset_y: number = 0;\n\n    /**\n     * Position of opened menu element relative to the trigger element.\n     */\n    @Prop() position: Position = 'bottom';\n\n    /**\n     * Alignment of opened menu element relative to trigger element.\n     */\n    @Prop() align: Align = 'start';\n\n    /**\n     * String representing the 'width' style of the menu element ('auto' or 'NUMpx'). When not specified, defaults to trigger element width.\n     * To fit menu to content use width=\"fit-content\" - Avoid width='auto' as this will result in 100% width.\n     */\n    @Prop() width?: string;\n\n    /**\n     * Prevent closing of menu when options are selected. Used for multi-selection controls.\n     */\n    @Prop() autoclose: boolean = true;\n\n    /**\n     * Event type that triggers the menu open state. Click or Hover.\n     */\n    @Prop() trigger: OpenOn = 'click';\n\n    /**\n     * Close the menu when the user clicks within the menu panel. Default for single selection menus.\n     */\n    @Prop() role: AriaRole = 'menu';\n\n    /**\n     * Prevent opening menu\n     */\n    @Prop() disabled: boolean = false;\n\n    @Watch('disabled')\n    disabledChanged(newValue: boolean) {\n        if (newValue && this.isOpen) {\n            this.closeMenu();\n        }\n    }\n\n    @State() isOpen = false;\n    triggerEl: HTMLElement;\n    menuEl: HTMLElement;\n    private cleanupAutoUpdate?: () => void;\n    private popoverId: string;\n    private updatePosition = async () => {\n        if (this.triggerEl && this.menuEl && this.isOpen) {\n            await this.updateFloatingPosition();\n        }\n    };\n\n    @Element() el: HTMLElement;\n\n    /**\n     * Toggles the dropdown menu's open state.\n     */\n    @Method()\n    async toggleMenu(): Promise<void> {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.menuEl) {\n            this.menuEl.togglePopover();\n            this.isOpen = this.menuEl.matches(':popover-open');\n        }\n        this.atuiMenuStateChange.emit(this.isOpen);\n        await this.updatePosition();\n    }\n\n    /**\n     * Opens the dropdown menu.\n     */\n    @Method()\n    async openMenu(): Promise<void> {\n        if (this.disabled) {\n            return; // Don't open if disabled\n        }\n\n        if (this.menuEl) {\n            this.menuEl.showPopover();\n            this.isOpen = true;\n        }\n        this.atuiMenuStateChange.emit(true);\n        await this.updatePosition();\n    }\n\n    /**\n     * Closes the dropdown menu.\n     */\n    @Method()\n    async closeMenu(): Promise<void> {\n        if (this.menuEl) {\n            this.menuEl.hidePopover();\n            this.isOpen = false;\n        }\n        this.atuiMenuStateChange.emit(false);\n    }\n\n    /**\n     * Return the current menu open state\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.isOpen;\n    }\n\n    /**\n     * Emits an event containing the open menu state.\n     */\n    @Event() atuiMenuStateChange: EventEmitter<boolean>;\n\n    private timedOutCloser;\n\n    async componentDidLoad() {\n        this.popoverId = `atui-menu-${Math.random().toString(36).substr(2, 9)}`;\n        await this.setupFloatingUI();\n\n        setTimeout(() => this.setupPopoverEventListeners(), 0);\n    }\n\n    private setupPopoverEventListeners() {\n        if (this.menuEl) {\n            this.menuEl.addEventListener('toggle', (event: Event) => {\n                const customEvent = event as any;\n                this.isOpen = customEvent.newState === 'open';\n                this.atuiMenuStateChange.emit(this.isOpen);\n\n                if (this.isOpen) {\n                    requestAnimationFrame(() => this.updatePosition());\n                }\n            });\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupFloatingUI();\n    }\n\n    private async mouseEnterHandler(): Promise<void> {\n        if (this.timedOutCloser) clearTimeout(this.timedOutCloser);\n        if (!this.isOpen) {\n            await this.openMenu();\n        }\n    }\n\n    private async mouseLeaveHandler(): Promise<void> {\n        await this.closeMenu();\n    }\n\n    private async setupFloatingUI(): Promise<void> {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n        }\n\n        if (this.triggerEl && this.menuEl) {\n            const observer = new IntersectionObserver(\n                (entries) => {\n                    if (!entries[0].isIntersecting && this.isOpen) {\n                        this.mouseLeaveHandler();\n                    }\n                },\n                { threshold: 0 },\n            );\n            observer.observe(this.triggerEl);\n\n            this.cleanupAutoUpdate = autoUpdate(\n                this.triggerEl,\n                this.menuEl,\n                () => {\n                    if (this.isOpen) {\n                        const placement = this.getFloatingUIPlacement();\n                        const strategy = 'fixed';\n\n                        computePosition(this.triggerEl, this.menuEl, {\n                            placement,\n                            strategy,\n                            middleware: [\n                                offset(\n                                    this.position === 'bottom' ||\n                                        this.position === 'top'\n                                        ? this.offset_y\n                                        : this.offset_x,\n                                ),\n                                flip({\n                                    fallbackStrategy: 'bestFit',\n                                    padding: 8,\n                                }),\n                                shift({\n                                    padding: 8,\n                                    mainAxis: true,\n                                    crossAxis: true,\n                                }),\n                                size({\n                                    apply({\n                                        availableWidth,\n                                        availableHeight,\n                                        elements,\n                                    }) {\n                                        Object.assign(elements.floating.style, {\n                                            maxWidth: `${availableWidth}px`,\n                                            maxHeight: `${availableHeight}px`,\n                                        });\n                                    },\n                                }),\n                            ],\n                        }).then(({ x, y }) => {\n                            const styles: any = {\n                                position: strategy,\n                                left: `${x}px`,\n                                top: `${y}px`,\n                                margin: '0',\n                                transform: 'none',\n                            };\n\n                            if (this.width) {\n                                styles.width = this.width;\n                            }\n\n                            Object.assign(this.menuEl.style, styles);\n                        });\n                    }\n                },\n                {\n                    ancestorScroll: true,\n                    ancestorResize: true,\n                    elementResize: true,\n                    layoutShift: true,\n                    animationFrame: true,\n                },\n            );\n\n            const originalCleanup = this.cleanupAutoUpdate;\n            this.cleanupAutoUpdate = () => {\n                originalCleanup();\n                observer.disconnect();\n            };\n        }\n    }\n\n    private cleanupFloatingUI() {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n            this.cleanupAutoUpdate = undefined;\n        }\n    }\n\n    private async updateFloatingPosition(): Promise<void> {\n        if (!this.triggerEl || !this.menuEl) return;\n        await this.setupFloatingUI();\n    }\n\n    private getFloatingUIPlacement(): Placement {\n        const positionMap: Record<string, string> = {\n            top: 'top',\n            bottom: 'bottom',\n            left: 'left',\n            right: 'right',\n        };\n\n        const alignMap: Record<string, string> = {\n            start: 'start',\n            end: 'end',\n        };\n\n        const position = positionMap[this.position] || 'bottom';\n        const align = alignMap[this.align] || 'start';\n\n        return `${position}-${align}` as Placement;\n    }\n\n    render() {\n        return (\n            <Host class=\"relative z-modal\">\n                <div\n                    class=\"relative\"\n                    onBlur={() =>\n                        this.trigger === 'click' && !this.disabled\n                            ? this.mouseLeaveHandler()\n                            : null\n                    }\n                >\n                    <div\n                        aria-haspopup=\"true\"\n                        data-name=\"menu-trigger\"\n                        ref={(el) => (this.triggerEl = el)}\n                        aria-expanded={`${this.isOpen ? 'true' : 'false'}`}\n                        onMouseEnter={() =>\n                            this.trigger === 'hover' && !this.disabled\n                                ? this.mouseEnterHandler()\n                                : null\n                        }\n                        onKeyDown={async (event) => {\n                            switch (event.key) {\n                                case 'Escape':\n                                    await this.closeMenu();\n                                    break;\n                                case 'Enter':\n                                case ' ':\n                                    event.preventDefault();\n                                    await this.toggleMenu();\n                                    break;\n                            }\n                        }}\n                        onMouseLeave={() =>\n                            this.trigger === 'hover' && !this.disabled\n                                ? this.mouseLeaveHandler()\n                                : null\n                        }\n                        onClick={async (event) => {\n                            if (this.trigger === 'click' && !this.disabled) {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                if (this.isOpen) {\n                                    await this.closeMenu();\n                                } else {\n                                    await this.openMenu();\n                                }\n                            }\n                        }}\n                        class={this.disabled ? 'contents' : ''}\n                    >\n                        <slot name=\"menu-trigger\" />\n                    </div>\n\n                    <div\n                        role={this.role}\n                        data-position={this.position}\n                        data-align={this.align}\n                        ref={(el) => (this.menuEl = el)}\n                        aria-hidden={`${this.isOpen ? 'false' : 'true'}`}\n                        popover=\"auto\"\n                        id={this.popoverId}\n                        onMouseEnter={() =>\n                            this.trigger === 'hover' &&\n                            !this.disabled &&\n                            this.mouseEnterHandler()\n                        }\n                        onMouseLeave={() =>\n                            this.trigger === 'hover' &&\n                            !this.disabled &&\n                            this.mouseLeaveHandler()\n                        }\n                        onKeyDown={async (event) => {\n                            if (\n                                event.key === 'Enter' ||\n                                event.key === ' ' ||\n                                event.key === 'Escape'\n                            ) {\n                                if (this.autoclose) {\n                                    await this.mouseLeaveHandler();\n                                }\n                            }\n                        }}\n                        onClick={() =>\n                            this.autoclose && this.mouseLeaveHandler()\n                        }\n                        class=\"w-fit rounded-md bg-white p-4 shadow-md\"\n                        data-name=\"menu-content-wrapper\"\n                    >\n                        <slot name=\"menu-content\" />\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}