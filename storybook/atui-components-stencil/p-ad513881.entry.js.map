{"version":3,"names":["AtuiMenu","constructor","hostRef","this","offset_x","offset_y","position","align","autoclose","trigger","role","disabled","isOpen","triggerEls","updatePosition","async","triggerEl","menuEl","updateFloatingPosition","externalTriggerListeners","disabledChanged","newValue","closeMenu","toggleMenu","togglePopover","matches","atuiMenuStateChange","emit","updateAriaExpanded","openMenu","showPopover","hidePopover","trigger_id","setAttribute","getIsOpen","componentDidLoad","popoverId","Math","random","toString","substr","Array","from","document","querySelectorAll","length","console","warn","el","querySelector","setupFloatingUI","setTimeout","setupPopoverEventListeners","setupExternalTriggerListeners","addEventListener","event","customEvent","newState","requestAnimationFrame","forEach","listeners","mouseEnterHandler","mouseLeaveHandler","push","handler","clickHandler","preventDefault","stopPropagation","keydownHandler","key","element","disconnectedCallback","cleanupFloatingUI","cleanupExternalTriggerListeners","removeEventListener","timedOutCloser","clearTimeout","cleanupAutoUpdate","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","autoUpdate","placement","getFloatingUIPlacement","strategy","computePosition","middleware","offset","flip","fallbackStrategy","padding","shift","mainAxis","crossAxis","size","apply","availableWidth","availableHeight","elements","Object","assign","floating","style","maxWidth","maxHeight","then","x","y","styles","left","top","margin","transform","width","ancestorScroll","ancestorResize","elementResize","layoutShift","animationFrame","originalCleanup","disconnect","undefined","positionMap","bottom","right","alignMap","start","end","render","h","Host","class","onBlur","ref","onMouseEnter","onKeyDown","onMouseLeave","onClick","name","popover","id"],"sources":["src/components/atui-menu/atui-menu.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n    Method,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport {\n    computePosition,\n    flip,\n    shift,\n    offset,\n    size,\n    autoUpdate,\n    type Placement,\n} from '@floating-ui/dom';\n\n/**\n * @category Overlays\n * @description A popover menu component for displaying action lists when via click or hover on a trigger element.\n *\n * @slot menu-trigger - Trigger element for the menu (only used when trigger_id is not provided)\n * @slot default - Content to display inside the menu\n */\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right';\nexport type Align = 'start' | 'end';\nexport type OpenOn = 'hover' | 'click';\nexport type AriaRole = 'menu' | 'listbox';\n\n@Component({\n    tag: 'atui-menu',\n    shadow: false,\n})\nexport class AtuiMenu {\n    /**\n     * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'\n     */\n    @Prop() offset_x: number = 0;\n\n    /**\n     * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'\n     */\n    @Prop() offset_y: number = 0;\n\n    /**\n     * Position of opened menu element relative to the trigger element.\n     */\n    @Prop() position: Position = 'bottom';\n\n    /**\n     * Alignment of opened menu element relative to trigger element.\n     */\n    @Prop() align: Align = 'start';\n\n    /**\n     * String representing the 'width' style of the menu element ('auto' or 'NUMpx'). When not specified, defaults to trigger element width.\n     * To fit menu to content use width=\"fit-content\" - Avoid width='auto' as this will result in 100% width.\n     */\n    @Prop() width?: string;\n\n    /**\n     * Prevent closing of menu when options are selected. Used for multi-selection controls.\n     */\n    @Prop() autoclose: boolean = true;\n\n    /**\n     * Event type that triggers the menu open state. Click or Hover.\n     */\n    @Prop() trigger: OpenOn = 'click';\n\n    /**\n     * Close the menu when the user clicks within the menu panel. Default for single selection menus.\n     */\n    @Prop() role: AriaRole = 'menu';\n\n    /**\n     * Prevent opening menu\n     */\n    @Prop() disabled: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, the trigger slot is not needed.\n     */\n    @Prop() trigger_id?: string;\n\n    @Watch('disabled')\n    disabledChanged(newValue: boolean) {\n        if (newValue && this.isOpen) {\n            this.closeMenu();\n        }\n    }\n\n    @State() isOpen = false;\n    triggerEl: HTMLElement;\n    menuEl: HTMLElement;\n    private triggerEls: HTMLElement[] = [];\n    private popoverId: string;\n    private cleanupAutoUpdate?: () => void;\n    private updatePosition = async () => {\n        if (this.triggerEl && this.menuEl && this.isOpen) {\n            await this.updateFloatingPosition();\n        }\n    };\n\n    @Element() el: HTMLElement;\n\n    /**\n     * Toggles the dropdown menu's open state.\n     */\n    @Method()\n    async toggleMenu(): Promise<void> {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.menuEl) {\n            this.menuEl.togglePopover();\n            this.isOpen = this.menuEl.matches(':popover-open');\n        }\n        this.atuiMenuStateChange.emit(this.isOpen);\n        await this.updatePosition();\n        this.updateAriaExpanded();\n    }\n\n    /**\n     * Opens the dropdown menu.\n     */\n    @Method()\n    async openMenu(): Promise<void> {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.menuEl) {\n            this.menuEl.showPopover();\n            this.isOpen = true;\n        }\n        this.atuiMenuStateChange.emit(true);\n        await this.updatePosition();\n        this.updateAriaExpanded();\n    }\n\n    /**\n     * Closes the dropdown menu.\n     */\n    @Method()\n    async closeMenu(): Promise<void> {\n        if (this.menuEl) {\n            this.menuEl.hidePopover();\n            this.isOpen = false;\n        }\n        this.atuiMenuStateChange.emit(false);\n        this.updateAriaExpanded();\n    }\n\n    private updateAriaExpanded(): void {\n        if (this.trigger_id && this.triggerEl) {\n            this.triggerEl.setAttribute(\n                'aria-expanded',\n                this.isOpen ? 'true' : 'false',\n            );\n        }\n    }\n\n    /**\n     * Return the current menu open state\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.isOpen;\n    }\n\n    /**\n     * Emits an event containing the open menu state.\n     */\n    @Event() atuiMenuStateChange: EventEmitter<boolean>;\n\n    private timedOutCloser;\n\n    async componentDidLoad() {\n        this.popoverId = `atui-menu-${Math.random().toString(36).substr(2, 9)}`;\n\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-id=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-menu: No elements found with data-id=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n        } else {\n            this.triggerEl = this.el.querySelector(\n                '[data-name=\"menu-trigger\"]',\n            );\n        }\n\n        await this.setupFloatingUI();\n        setTimeout(() => this.setupPopoverEventListeners(), 0);\n\n        if (this.trigger_id && this.triggerEls.length) {\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    private setupPopoverEventListeners() {\n        if (this.menuEl) {\n            this.menuEl.addEventListener('toggle', (event: Event) => {\n                const customEvent = event as any;\n                this.isOpen = customEvent.newState === 'open';\n                this.atuiMenuStateChange.emit(this.isOpen);\n\n                if (this.isOpen) {\n                    requestAnimationFrame(() => this.updatePosition());\n                }\n            });\n        }\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        this.triggerEls.forEach((el) => {\n            const listeners: Array<{ event: string; handler: EventListener }> =\n                [];\n\n            if (this.trigger === 'hover') {\n                const mouseEnterHandler = () => {\n                    if (!this.disabled) {\n                        this.triggerEl = el;\n                        this.mouseEnterHandler();\n                    }\n                };\n\n                const mouseLeaveHandler = () => {\n                    if (!this.disabled) {\n                        this.triggerEl = el;\n                        this.mouseLeaveHandler();\n                    }\n                };\n\n                listeners.push(\n                    { event: 'mouseenter', handler: mouseEnterHandler },\n                    { event: 'mouseleave', handler: mouseLeaveHandler },\n                );\n            }\n\n            if (this.trigger === 'click') {\n                const clickHandler = async (event: Event) => {\n                    if (!this.disabled) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.triggerEl = el;\n                        if (this.isOpen) {\n                            await this.closeMenu();\n                        } else {\n                            await this.openMenu();\n                        }\n                    }\n                };\n\n                listeners.push({ event: 'click', handler: clickHandler });\n            }\n\n            const keydownHandler = async (event: KeyboardEvent) => {\n                if (!this.disabled) {\n                    this.triggerEl = el;\n                    switch (event.key) {\n                        case 'Escape':\n                            await this.closeMenu();\n                            break;\n                        case 'Enter':\n                        case ' ':\n                            event.preventDefault();\n                            await this.toggleMenu();\n                            break;\n                    }\n                }\n            };\n\n            listeners.push({ event: 'keydown', handler: keydownHandler });\n\n            listeners.forEach(({ event, handler }) => {\n                el.addEventListener(event, handler);\n                this.externalTriggerListeners.push({\n                    element: el,\n                    event,\n                    handler,\n                });\n            });\n\n            el.setAttribute('aria-haspopup', 'true');\n            el.setAttribute('aria-expanded', 'false');\n        });\n    }\n\n    disconnectedCallback() {\n        this.cleanupFloatingUI();\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private async mouseEnterHandler(): Promise<void> {\n        if (this.timedOutCloser) clearTimeout(this.timedOutCloser);\n        if (!this.isOpen) {\n            await this.openMenu();\n        }\n    }\n\n    private async mouseLeaveHandler(): Promise<void> {\n        await this.closeMenu();\n    }\n\n    private async setupFloatingUI(): Promise<void> {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n        }\n\n        if (this.triggerEl && this.menuEl) {\n            const observer = new IntersectionObserver(\n                (entries) => {\n                    if (!entries[0].isIntersecting && this.isOpen) {\n                        this.mouseLeaveHandler();\n                    }\n                },\n                { threshold: 0 },\n            );\n            observer.observe(this.triggerEl);\n\n            this.cleanupAutoUpdate = autoUpdate(\n                this.triggerEl,\n                this.menuEl,\n                () => {\n                    if (this.isOpen) {\n                        const placement = this.getFloatingUIPlacement();\n                        const strategy = 'fixed';\n\n                        computePosition(this.triggerEl, this.menuEl, {\n                            placement,\n                            strategy,\n                            middleware: [\n                                offset(\n                                    this.position === 'bottom' ||\n                                        this.position === 'top'\n                                        ? this.offset_y\n                                        : this.offset_x,\n                                ),\n                                flip({\n                                    fallbackStrategy: 'bestFit',\n                                    padding: 8,\n                                }),\n                                shift({\n                                    padding: 8,\n                                    mainAxis: true,\n                                    crossAxis: true,\n                                }),\n                                size({\n                                    apply({\n                                        availableWidth,\n                                        availableHeight,\n                                        elements,\n                                    }) {\n                                        Object.assign(elements.floating.style, {\n                                            maxWidth: `${availableWidth}px`,\n                                            maxHeight: `${availableHeight}px`,\n                                        });\n                                    },\n                                }),\n                            ],\n                        }).then(({ x, y }) => {\n                            const styles: any = {\n                                position: strategy,\n                                left: `${x}px`,\n                                top: `${y}px`,\n                                margin: '0',\n                                transform: 'none',\n                            };\n\n                            if (this.width) {\n                                styles.width = this.width;\n                            }\n\n                            Object.assign(this.menuEl.style, styles);\n                        });\n                    }\n                },\n                {\n                    ancestorScroll: true,\n                    ancestorResize: true,\n                    elementResize: true,\n                    layoutShift: true,\n                    animationFrame: true,\n                },\n            );\n\n            const originalCleanup = this.cleanupAutoUpdate;\n            this.cleanupAutoUpdate = () => {\n                originalCleanup();\n                observer.disconnect();\n            };\n        }\n    }\n\n    private cleanupFloatingUI() {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n            this.cleanupAutoUpdate = undefined;\n        }\n    }\n\n    private async updateFloatingPosition(): Promise<void> {\n        if (!this.triggerEl || !this.menuEl) return;\n        await this.setupFloatingUI();\n    }\n\n    private getFloatingUIPlacement(): Placement {\n        const positionMap: Record<string, string> = {\n            top: 'top',\n            bottom: 'bottom',\n            left: 'left',\n            right: 'right',\n        };\n\n        const alignMap: Record<string, string> = {\n            start: 'start',\n            end: 'end',\n        };\n\n        const position = positionMap[this.position] || 'bottom';\n        const align = alignMap[this.align] || 'start';\n\n        return `${position}-${align}` as Placement;\n    }\n\n    render() {\n        return (\n            <Host class=\"z-modal relative\">\n                <div\n                    class=\"relative\"\n                    onBlur={() =>\n                        this.trigger === 'click' && !this.disabled\n                            ? this.mouseLeaveHandler()\n                            : null\n                    }\n                >\n                    {!this.trigger_id && (\n                        <div\n                            aria-haspopup=\"true\"\n                            data-name=\"menu-trigger\"\n                            ref={(el) => (this.triggerEl = el)}\n                            aria-expanded={`${this.isOpen ? 'true' : 'false'}`}\n                            onMouseEnter={() =>\n                                this.trigger === 'hover' && !this.disabled\n                                    ? this.mouseEnterHandler()\n                                    : null\n                            }\n                            onKeyDown={async (event) => {\n                                switch (event.key) {\n                                    case 'Escape':\n                                        await this.closeMenu();\n                                        break;\n                                    case 'Enter':\n                                    case ' ':\n                                        event.preventDefault();\n                                        await this.toggleMenu();\n                                        break;\n                                }\n                            }}\n                            onMouseLeave={() =>\n                                this.trigger === 'hover' && !this.disabled\n                                    ? this.mouseLeaveHandler()\n                                    : null\n                            }\n                            onClick={async (event) => {\n                                if (\n                                    this.trigger === 'click' &&\n                                    !this.disabled\n                                ) {\n                                    event.preventDefault();\n                                    event.stopPropagation();\n                                    if (this.isOpen) {\n                                        await this.closeMenu();\n                                    } else {\n                                        await this.openMenu();\n                                    }\n                                }\n                            }}\n                            class={this.disabled ? 'contents' : ''}\n                        >\n                            <slot name=\"menu-trigger\" />\n                        </div>\n                    )}\n\n                    <div\n                        role={this.role}\n                        data-position={this.position}\n                        data-align={this.align}\n                        ref={(el) => (this.menuEl = el)}\n                        aria-hidden={`${this.isOpen ? 'false' : 'true'}`}\n                        popover=\"auto\"\n                        id={this.popoverId}\n                        onMouseEnter={() =>\n                            this.trigger === 'hover' &&\n                            !this.disabled &&\n                            this.mouseEnterHandler()\n                        }\n                        onMouseLeave={() =>\n                            this.trigger === 'hover' &&\n                            !this.disabled &&\n                            this.mouseLeaveHandler()\n                        }\n                        onKeyDown={async (event) => {\n                            if (\n                                event.key === 'Enter' ||\n                                event.key === ' ' ||\n                                event.key === 'Escape'\n                            ) {\n                                if (this.autoclose) {\n                                    await this.mouseLeaveHandler();\n                                }\n                            }\n                        }}\n                        onClick={() =>\n                            this.autoclose && this.mouseLeaveHandler()\n                        }\n                        class=\"w-fit rounded-md bg-white p-4 shadow-md\"\n                        data-name=\"menu-content-wrapper\"\n                    >\n                        <slot />\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}