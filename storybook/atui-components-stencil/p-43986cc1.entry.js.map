{"version":3,"names":["AtuiAccordionComponent","constructor","hostRef","this","items","default_open","accordionItems","accordionId","Math","random","toString","substring","componentDidLoad","Promise","resolve","setTimeout","Array","from","el","querySelectorAll","openAll","toggleById","value","refreshAccordionItems","forEach","item","item_id","open","closeAccordion","openAccordion","closeAll","toggleAll","render","h","Host","key","class","map","label","content"],"sources":["src/components/atui-accordion/atui-accordion.tsx"],"sourcesContent":["import { Prop, Element, Method, h, Host, Component } from '@stencil/core';\n\nexport interface AccordionItem {\n    item_id: string;\n    label?: string;\n    content?: string;\n}\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot - Content is placed within the accordion wrapper. Used for placing atui-accordion-items if not using items prop.\n */\n\n/**\n * ### ```interface AccordionItem```\n * ```\n * item_id: string;\n * label: string;\n * content: string;\n * ```\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot - Content is placed within the accordion wrapper. Used for placing atui-accordion-items if not using items prop.\n */\n@Component({\n    tag: 'atui-accordion',\n    shadow: false,\n})\nexport class AtuiAccordionComponent {\n    @Element() el: HTMLElement;\n\n    /**\n     * Used to create accordion items.\n     */\n    @Prop() items: AccordionItem[] = [];\n\n    /**\n     * If set, all child accordions will be open by default.\n     */\n    @Prop() default_open: boolean = false;\n\n    accordionItems: HTMLAtuiAccordionItemElement[] = [];\n\n    async componentDidLoad() {\n        // Wait for child components to be ready\n        await new Promise((resolve) => setTimeout(resolve, 0));\n        this.accordionItems = Array.from(\n            this.el.querySelectorAll('atui-accordion-item'),\n        );\n        if (this.default_open) {\n            await this.openAll();\n        }\n    }\n\n    /**\n     * Toggles the open state of a specific accordion item\n     * @param value Id of element to be toggled\n     */\n    @Method()\n    async toggleById(value: string): Promise<void> {\n        this.refreshAccordionItems();\n        this.accordionItems.forEach((item) => {\n            if (item.item_id === value) {\n                if (item.open) {\n                    item.closeAccordion();\n                } else {\n                    item.openAccordion();\n                }\n            }\n        });\n    }\n\n    /**\n     * Opens all accordion items\n     */\n    @Method()\n    async openAll(): Promise<void> {\n        this.refreshAccordionItems();\n        this.accordionItems.forEach((item) => {\n            item.openAccordion();\n        });\n    }\n\n    /**\n     * Closes all accordion items.\n     */\n    @Method()\n    async closeAll(): Promise<void> {\n        this.refreshAccordionItems();\n        this.accordionItems.forEach((item) => {\n            item.closeAccordion();\n        });\n    }\n\n    /**\n     * Toggles all accordion item's open state.\n     */\n    @Method()\n    async toggleAll(): Promise<void> {\n        this.refreshAccordionItems();\n        this.accordionItems.forEach((item) => {\n            if (item.open) {\n                item.closeAccordion();\n            } else {\n                item.openAccordion();\n            }\n        });\n    }\n\n    private refreshAccordionItems(): void {\n        this.accordionItems = Array.from(\n            this.el.querySelectorAll('atui-accordion-item'),\n        );\n    }\n\n    private accordionId = `accordion-${Math.random().toString(36).substring(2, 11)}`;\n\n    render() {\n        return (\n            <Host class=\"flex flex-col gap-2\">\n                <slot></slot>\n                {this.items &&\n                    this.items.map((item) => {\n                        return (\n                            <atui-accordion-item\n                                item_id={`${this.accordionId}-${item.item_id}`}\n                                label={item.label}\n                                content={item.content}\n                            />\n                        );\n                    })}\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DA+BaA,EAAsB,MAJnC,WAAAC,CAAAC,G,UAUYC,KAAKC,MAAoB,GAKzBD,KAAYE,aAAY,MAEhCF,KAAcG,eAAmC,GA0EzCH,KAAAI,YAAc,aAAaC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,KAmB9E,CA3FG,sBAAMC,SAEI,IAAIC,SAASC,GAAYC,WAAWD,EAAS,KACnDX,KAAKG,eAAiBU,MAAMC,KACxBd,KAAKe,GAAGC,iBAAiB,wBAE7B,GAAIhB,KAAKE,aAAc,OACbF,KAAKiB,S,EASnB,gBAAMC,CAAWC,GACbnB,KAAKoB,wBACLpB,KAAKG,eAAekB,SAASC,IACzB,GAAIA,EAAKC,UAAYJ,EAAO,CACxB,GAAIG,EAAKE,KAAM,CACXF,EAAKG,gB,KACF,CACHH,EAAKI,e,MAUrB,aAAMT,GACFjB,KAAKoB,wBACLpB,KAAKG,eAAekB,SAASC,IACzBA,EAAKI,eAAe,G,CAQ5B,cAAMC,GACF3B,KAAKoB,wBACLpB,KAAKG,eAAekB,SAASC,IACzBA,EAAKG,gBAAgB,G,CAQ7B,eAAMG,GACF5B,KAAKoB,wBACLpB,KAAKG,eAAekB,SAASC,IACzB,GAAIA,EAAKE,KAAM,CACXF,EAAKG,gB,KACF,CACHH,EAAKI,e,KAKT,qBAAAN,GACJpB,KAAKG,eAAiBU,MAAMC,KACxBd,KAAKe,GAAGC,iBAAiB,uB,CAMjC,MAAAa,GACI,OACIC,EAACC,EAAK,CAAAC,IAAA,2CAAAC,MAAM,uBACRH,EAAa,QAAAE,IAAA,6CACZhC,KAAKC,OACFD,KAAKC,MAAMiC,KAAKZ,GAERQ,EACI,uBAAAP,QAAS,GAAGvB,KAAKI,eAAekB,EAAKC,UACrCY,MAAOb,EAAKa,MACZC,QAASd,EAAKc,Y","ignoreList":[]}