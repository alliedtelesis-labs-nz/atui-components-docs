{"version":3,"names":["promptInputContainerVariants","classlist","variants","invalid","true","false","disabled","compoundVariants","class","defaultVariants","promptInputVariants","AtPromptInputComponent","constructor","hostRef","this","placeholder","max_height","max_length","in_progress","value","inputId","Math","random","toString","substring","componentWillLoad","translations","fetchTranslations","el","focusInput","textareaEl","focus","atFocus","emit","handleInput","event","stopPropagation","target","length","atChange","autoResize","style","height","scrollHeight","newHeight","max","min","componentDidLoad","setTimeout","handleKeyDown","key","shiftKey","preventDefault","sendMessage","atStop","trim","atSubmit","render","canSend","containerClass","inputClass","h","Host","tabindex","id","name","label","info_text","for","hint_text","onInput","onKeyDown","ref","minHeight","maxHeight","overflow","size","type","icon","onClick","error_text","ATUI","PROMPT","ERROR_MESSAGE","AtPromptThread","messages","loading","auto_scroll","chatbot_title","enable_vote","enable_copy","enable_edit","response_animation","componentDidUpdate","scrollContainer","scrollToBottom","Promise","resolve","requestAnimationFrame","scrollTo","top","behavior","scrollLastMessageToTop","userMessages","querySelectorAll","lastUserMessage","scrollIntoView","block","handleVote","messageIndex","findIndex","msg","detail","messageId","updatedMessages","Object","assign","score","atMessageVote","handleMessageCopy","getMessageIndexFromEvent","atMessageCopy","content","handleMessageRetry","atMessageRetry","handleMessageEdit","atMessageEdit","messageContainer","closest","parseInt","dataset","renderLoadingIndicator","role","renderMessage","message","index","animate","error","error_message","PromptResponseScore","NONE","message_id","renderMessages","map","hasMessages"],"sources":["src/components/prompt-components/at-prompt-input/at-prompt-input.tsx","src/components/prompt-components/at-prompt-thread/at-prompt-thread.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { classlist } from '../../../utils/classlist';\n\nconst promptInputContainerVariants = classlist(\n    'relative flex flex-col items-end gap-2 rounded-lg border border-solid p-8 transition-[background-color,color,box-shadow] duration-300 ease-in-out',\n    {\n        variants: {\n            invalid: {\n                true: 'border-destructive focus-within:border-destructive focus-within:ring-destructive/30 focus-within:ring-2',\n                false: 'border-med focus-within:border-active-foreground focus-within:ring-active-foreground/30 focus-within:ring-2',\n            },\n            disabled: {\n                true: 'bg-surface-1 pointer-events-none',\n                false: 'bg-white',\n            },\n        },\n        compoundVariants: [\n            {\n                disabled: true,\n                class: 'focus-within:ring-0',\n            },\n        ],\n        defaultVariants: {\n            invalid: false,\n            disabled: false,\n        },\n    },\n);\n\nconst promptInputVariants = classlist(\n    'text-body text-dark w-full resize-none border-none bg-transparent break-words whitespace-pre-wrap shadow-none outline-none focus-visible:ring-0 focus-visible:ring-offset-0',\n    {\n        variants: {\n            invalid: {\n                true: 'border-destructive-foreground',\n                false: 'border-med',\n            },\n            disabled: {\n                true: 'bg-surface-1 pointer-events-none',\n                false: 'bg-disableD-LIGHT',\n            },\n        },\n        defaultVariants: {\n            invalid: false,\n            disabled: false,\n        },\n    },\n);\n\n/**\n * @category Prompt\n * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.\n * @slot label -  Custom label content (alternative to using the label prop)\n * @slot actions-left - Custom content displayed at bottom left of input\n * @slot actions-right - Custom content displayed at bottom right of input\n * @slot footer - Custom content displayed below input\n */\n@Component({\n    tag: 'at-prompt-input',\n    shadow: false,\n})\nexport class AtPromptInputComponent {\n    /**\n     * Label above the input container\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * Short description or validation hint if required\n     */\n    @Prop()\n    hint_text: string;\n\n    /**\n     * Optional info icon with detailed tooltip description\n     */\n    @Prop()\n    info_text: string;\n\n    /**\n     * Error text displayed when invalid is set via max length\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Placeholder text to be shown when no input is passed\n     */\n    @Prop()\n    placeholder: string = 'Enter your message...';\n\n    /**\n     * Maximum height in pixels for auto-resize\n     */\n    @Prop()\n    max_height: number = 240;\n\n    /**\n     * Maximum character length with counter display\n     */\n    @Prop()\n    max_length: number = 2000;\n\n    /**\n     * Controls whether the component is in progress (shows stop button) or ready to send (shows send button)\n     */\n    @Prop()\n    in_progress: boolean = false;\n\n    /**\n     * The value of the input\n     */\n    @Prop({ mutable: true })\n    value: string = '';\n\n    /**\n     * Disable input interactions and apply visual indication\n     */\n    @Prop()\n    disabled?: boolean = false;\n\n    @State() textareaEl: HTMLTextAreaElement;\n    @State() translations: any;\n    @State() invalid: boolean = false;\n    @Element() el: HTMLElement;\n\n    /**\n     * Emits when the value changes\n     */\n    @Event()\n    atChange: EventEmitter<string>;\n\n    /**\n     * Emits when a message should be sent\n     */\n    @Event()\n    atSubmit: EventEmitter<string>;\n\n    /**\n     * Emits when the stop button is clicked\n     */\n    @Event()\n    atStop: EventEmitter<void>;\n\n    /**\n     * Emits when the input receives focus\n     */\n    @Event()\n    atFocus: EventEmitter<void>;\n\n    /**\n     * @slot label - Custom label content (alternative to using the label prop)\n     */\n\n    private inputId = `prompt-input-${Math.random().toString(36).substring(2, 11)}`;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    private focusInput(): void {\n        if (this.textareaEl) {\n            this.textareaEl.focus();\n            this.atFocus.emit();\n        }\n    }\n\n    handleInput(event: Event): void {\n        event.stopPropagation();\n        this.value = (event.target as HTMLTextAreaElement).value;\n\n        if (this.max_length && this.value.length > this.max_length) {\n            this.invalid = true;\n        } else {\n            this.invalid = false;\n        }\n\n        this.atChange.emit(this.value);\n        this.autoResize();\n    }\n\n    private autoResize(): void {\n        if (this.textareaEl) {\n            this.textareaEl.style.height = 'auto';\n            const scrollHeight = this.textareaEl.scrollHeight;\n            const newHeight = Math.max(\n                44,\n                Math.min(scrollHeight, this.max_height),\n            );\n            this.textareaEl.style.height = `${newHeight}px`;\n        }\n    }\n\n    componentDidLoad(): void {\n        setTimeout(() => {\n            this.autoResize();\n        }, 0);\n    }\n\n    handleKeyDown(event: KeyboardEvent): void {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n            this.sendMessage();\n        }\n    }\n\n    sendMessage(): void {\n        if (this.in_progress) {\n            this.atStop.emit();\n        } else if (this.value && this.value.trim() !== '' && !this.invalid) {\n            this.atSubmit.emit(this.value.trim());\n            this.value = '';\n            this.invalid = false;\n            setTimeout(() => {\n                this.autoResize();\n                this.focusInput();\n            }, 0);\n        }\n    }\n\n    render() {\n        const canSend =\n            !this.disabled &&\n            !this.invalid &&\n            (this.in_progress || (this.value && this.value.trim() !== ''));\n\n        const containerClass = promptInputContainerVariants({\n            invalid: this.invalid,\n            disabled: this.disabled,\n        });\n\n        const inputClass = promptInputVariants({\n            invalid: this.invalid,\n            disabled: this.disabled,\n        });\n        return (\n            <Host\n                tabindex=\"-1\"\n                id={this.inputId + '-container'}\n                class=\"w-full px-16\"\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.info_text) && (\n                        <at-form-label\n                            label={this.label}\n                            for={this.inputId}\n                            info_text={this.info_text}\n                            data-name=\"prompt-input-label\"\n                        />\n                    )}\n\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"prompt-input-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <div class={containerClass}>\n                    <textarea\n                        class={inputClass}\n                        disabled={this.disabled}\n                        id={this.inputId}\n                        placeholder={this.placeholder}\n                        onInput={(event) => this.handleInput(event)}\n                        onKeyDown={(event) => this.handleKeyDown(event)}\n                        value={this.value}\n                        ref={(el) => (this.textareaEl = el)}\n                        style={{\n                            minHeight: '44px',\n                            maxHeight: this.max_height + 'px',\n                            overflow: 'hidden',\n                        }}\n                        data-name=\"prompt-input\"\n                    />\n\n                    <div class=\"flex w-full items-center justify-between gap-1\">\n                        <div class=\"flex items-center gap-4\">\n                            <slot name=\"actions-left\" />\n                        </div>\n\n                        <div class=\"flex items-center gap-4 self-end\">\n                            <slot name=\"actions-right\" />\n                            <at-button\n                                class=\"rounded-lg\"\n                                size=\"sm\"\n                                type=\"secondary\"\n                                icon={\n                                    this.in_progress ? 'stop' : 'arrow_upward'\n                                }\n                                disabled={!canSend}\n                                onClick={() => this.sendMessage()}\n                                onKeyDown={(event) => {\n                                    if (\n                                        event.key === 'Enter' ||\n                                        event.key === ' '\n                                    ) {\n                                        this.sendMessage();\n                                    }\n                                }}\n                                data-name=\"prompt-send-button\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <slot name=\"footer\" />\n                {this.invalid && (\n                    <span\n                        class=\"text-error-dark text-xs\"\n                        data-name=\"error-text\"\n                    >\n                        {this.error_text\n                            ? this.error_text\n                            : this.translations.ATUI.PROMPT.ERROR_MESSAGE}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n","import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Listen,\n    Method,\n} from '@stencil/core';\nimport {\n    PromptResponseAnimation,\n    PromptResponseScore,\n    PromptMessage,\n} from '../../../types';\n\n/**\n * @category Prompt\n * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.\n * @slot thread-empty-state - Content is placed within the empty state wrapper. Used for placing custom empty state content.\n * @slot thread-messages - Content is placed within the messages wrapper. Used for placing custom messages content.\n */\n@Component({\n    tag: 'at-prompt-thread',\n    shadow: false,\n})\nexport class AtPromptThread {\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop({ mutable: true }) messages: PromptMessage[] = [];\n\n    /**\n     * Shows a loading indicator for incoming messages\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Automatically scroll to the bottom when new messages are added\n     */\n    @Prop() auto_scroll: boolean = true;\n\n    /**\n     * Display name for chatbot/assistant messages\n     */\n    @Prop() chatbot_title: string = 'Assistant';\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    /**\n     * Enable streaming text animations for system/assistant messages\n     * - 'none': No animation (default)\n     * - 'fade': Fade in the entire message\n     * - 'words': Animate words appearing sequentially like ChatGPT\n     */\n    @Prop() response_animation: PromptResponseAnimation = 'words';\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    /**\n     * @slot messages - Custom message content (alternative to using the messages prop)\n     */\n\n    private scrollContainer: HTMLElement;\n\n    componentDidUpdate() {\n        if (this.auto_scroll && this.scrollContainer) {\n            this.scrollToBottom();\n        }\n    }\n\n    /**\n     * Scrolls the thread to the bottom with smooth animation\n     */\n    @Method()\n    async scrollToBottom(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            requestAnimationFrame(() => {\n                if (this.scrollContainer) {\n                    this.scrollContainer.scrollTo({\n                        top: this.scrollContainer.scrollHeight,\n                        behavior: 'smooth',\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Scrolls the last user message to the top of the viewport\n     */\n    @Method()\n    async scrollLastMessageToTop(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            requestAnimationFrame(() => {\n                if (!this.scrollContainer) {\n                    resolve();\n                    return;\n                }\n\n                const userMessages =\n                    this.scrollContainer.querySelectorAll('[data-role=\"user\"]');\n                if (!userMessages.length) {\n                    resolve();\n                    return;\n                }\n\n                const lastUserMessage = userMessages[\n                    userMessages.length - 1\n                ] as HTMLElement;\n                lastUserMessage.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start',\n                });\n                resolve();\n            });\n        });\n    }\n\n    @Listen('atVote')\n    handleVote(event: CustomEvent<{ messageId: string; score: number }>) {\n        event.stopPropagation();\n\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                score: event.detail.score,\n            };\n            this.messages = updatedMessages;\n\n            this.atMessageVote.emit(event.detail);\n        }\n    }\n\n    @Listen('atCopy')\n    handleMessageCopy(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atMessageCopy.emit({\n                messageId: this.messages[messageIndex].id,\n                content: event.detail,\n            });\n        }\n    }\n\n    @Listen('atRetry')\n    handleMessageRetry(event: CustomEvent<void>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atMessageRetry.emit({\n                messageId: this.messages[messageIndex].id,\n            });\n        }\n    }\n\n    @Listen('atEdit')\n    handleMessageEdit(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atMessageEdit.emit({\n                messageId: this.messages[messageIndex].id,\n                content: event.detail,\n            });\n        }\n    }\n\n    private getMessageIndexFromEvent(event: CustomEvent): number {\n        const target = event.target as HTMLElement;\n        const messageContainer = target.closest(\n            '[data-message-index]',\n        ) as HTMLElement;\n        return messageContainer\n            ? parseInt(messageContainer.dataset.messageIndex || '-1', 10)\n            : -1;\n    }\n\n    private renderLoadingIndicator() {\n        if (!this.loading) return null;\n\n        return (\n            <div\n                class=\"flex flex-col gap-16\"\n                data-name=\"loading-container\"\n            >\n                <at-prompt-message\n                    role={'assistant'}\n                    content=\"Typing...\"\n                    name={this.chatbot_title}\n                    loading={true}\n                    data-name=\"loading-message\"\n                />\n            </div>\n        );\n    }\n\n    private renderMessage(message: PromptMessage, index: number) {\n        const role = message.role;\n        const name =\n            message.role === 'user'\n                ? message.name\n                : message.name || this.chatbot_title;\n\n        const animate =\n            message.role === 'assistant' ? this.response_animation : 'fade';\n\n        return (\n            <at-prompt-message\n                role={role}\n                content={message.content}\n                name={name}\n                loading={message.loading}\n                error={message.error}\n                error_message={message.error_message}\n                score={message.score || PromptResponseScore.NONE}\n                message_id={message.id}\n                enable_vote={this.enable_vote}\n                enable_copy={this.enable_copy}\n                enable_edit={this.enable_edit}\n                response_animation={animate}\n                data-name={`message-${index}`}\n                data-message-index={index}\n            />\n        );\n    }\n\n    private renderMessages() {\n        return this.messages.map((message, index) =>\n            this.renderMessage(message, index),\n        );\n    }\n\n    render() {\n        const hasMessages = this.messages && this.messages.length > 0;\n\n        return (\n            <Host\n                class=\"block h-full\"\n                data-name=\"thread-container\"\n            >\n                <div\n                    class=\"flex h-full flex-col gap-16 overflow-y-auto scroll-smooth\"\n                    ref={(el) => (this.scrollContainer = el)}\n                    data-name=\"scroll-container\"\n                >\n                    {!hasMessages ? (\n                        <slot name=\"thread-empty-state\" />\n                    ) : (\n                        <div\n                            data-name=\"thread-messages-container\"\n                            class=\"flex flex-col gap-16\"\n                        >\n                            {this.renderMessages()}\n                            {this.renderLoadingIndicator()}\n                        </div>\n                    )}\n                    <slot name=\"thread-messages\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}