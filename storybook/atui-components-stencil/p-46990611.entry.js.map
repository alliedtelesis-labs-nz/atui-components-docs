{"version":3,"names":["AtPromptContainer","constructor","hostRef","this","messages","header_title","placeholder","loading","disabled","show_header","show_new_thread_button","max_message_length","enable_vote","enable_copy","enable_edit","currentInput","inputInvalid","inputError","isSendEnabled","translations","handleSubmit","async","content","addMessage","atSubmit","emit","handleStop","atStop","handleNewThread","newThread","componentWillLoad","fetchTranslations","el","handleInputSubmit","event","detail","trim","handleMessageCopy","atMessageCopy","handleMessageRetry","atMessageRetry","handleMessageEdit","atMessageEdit","inputComponent","value","focusInput","handleMessageVote","stopPropagation","messageIndex","findIndex","msg","id","messageId","updatedMessages","Object","assign","score","atMessageVote","role","message","Date","now","toString","appendToLastMessage","length","lastMessage","atNewThread","setTimeout","setSendEnabled","enabled","focus","renderHeader","newThreadText","_c","_b","_a","ATUI","PROMPT","NEW_THREAD","h","size","subtitle","border","slot","type","onClick","renderFooter","class","ref","in_progress","max_length","error_text","onAtSubmit","onAtStop","render","Host","key","name","auto_scroll"],"sources":["src/components/prompt-components/at-prompt-container/at-prompt-container.tsx"],"sourcesContent":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    State,\n    Listen,\n    Method,\n    Element,\n} from '@stencil/core';\nimport type { PromptMessage, MessageRole } from '../../../types/prompt';\nimport { fetchTranslations } from '../../../utils/translation';\n\n/**\n * @category Prompt\n * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.\n * @slot prompt-container-header - Custom content displayed above the message thread\n * @slot prompt-container-footer - Custom content displayed below the message input\n */\n@Component({\n    tag: 'at-prompt-container',\n    shadow: false,\n})\nexport class AtPromptContainer {\n    @Element() el: HTMLElement;\n\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop({ mutable: true }) messages: PromptMessage[] = [];\n\n    /**\n     * Title displayed in the header section\n     */\n    @Prop() header_title: string = 'AI Assistant';\n\n    /**\n     * Subtitle displayed below the title in the header\n     */\n    @Prop() subtitle: string;\n\n    /**\n     * Placeholder text for the input field\n     */\n    @Prop() placeholder: string = 'Type your message here...';\n\n    /**\n     * Error text displayed when invalid is set via max length\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Shows loading state and disables input\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Disables all interactions with the container\n     */\n    @Prop() disabled: boolean = false;\n\n    /**\n     * Controls visibility of the header section\n     */\n    @Prop() show_header: boolean = true;\n\n    /**\n     * Controls visibility of the \"New Thread\" button in the header\n     */\n    @Prop() show_new_thread_button: boolean = true;\n\n    /**\n     * Maximum character length for input messages\n     */\n    @Prop() max_message_length: number = 2000;\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    @State() currentInput: string = '';\n    @State() inputInvalid: boolean = false;\n    @State() inputError: string = '';\n    @State() isSendEnabled: boolean = true;\n    @State() translations: any = {};\n\n    /**\n     * Emits when a message should be sent\n     */\n    @Event()\n    atSubmit: EventEmitter<string>;\n\n    /**\n     * Emits when the stop button is clicked\n     */\n    @Event()\n    atStop: EventEmitter<void>;\n\n    /**\n     * Emitted when the \"New Thread\" button is clicked\n     */\n    @Event() atNewThread: EventEmitter<void>;\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    private inputComponent: HTMLAtPromptInputElement;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    @Listen('atSubmit')\n    handleInputSubmit(event: CustomEvent<string>) {\n        const content = event.detail.trim();\n        if (content && this.isSendEnabled && !this.disabled && !this.loading) {\n            this.handleSubmit(content);\n        }\n    }\n\n    @Listen('atMessageCopy')\n    handleMessageCopy(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageCopy.emit(event.detail);\n    }\n\n    @Listen('atMessageRetry')\n    handleMessageRetry(event: CustomEvent<{ messageId: string }>) {\n        this.atMessageRetry.emit(event.detail);\n    }\n\n    @Listen('atMessageEdit')\n    async handleMessageEdit(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageEdit.emit(event.detail);\n        if (this.inputComponent) {\n            this.inputComponent.value = event.detail.content;\n            await this.focusInput();\n        }\n    }\n\n    @Listen('atMessageVote')\n    handleMessageVote(\n        event: CustomEvent<{ messageId: string; score: number }>,\n    ) {\n        event.stopPropagation();\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                score: event.detail.score,\n            };\n            this.messages = updatedMessages;\n        }\n\n        this.atMessageVote.emit(event.detail);\n    }\n\n    /**\n     * Programmatically add a message to the conversation thread\n     * @param role - The message role\n     * @param content - The message content\n     */\n    @Method()\n    async addMessage(role: MessageRole, content: string): Promise<void> {\n        const message: PromptMessage = {\n            id: Date.now().toString(),\n            role,\n            content,\n        };\n        this.messages = [...this.messages, message];\n    }\n\n    /**\n     * Append content to the last message in the thread (useful for streaming responses)\n     * @param content - The content to append\n     * @returns Promise<boolean> - Returns true if successful, false if no messages exist or last message is not from assistant\n     */\n    @Method()\n    async appendToLastMessage(content: string): Promise<boolean> {\n        if (this.messages.length === 0) return false;\n\n        const lastMessage = this.messages[this.messages.length - 1];\n        if (lastMessage.role !== 'assistant') return false;\n\n        lastMessage.content += content;\n        this.messages = [...this.messages];\n        return true;\n    }\n\n    /**\n     * Start a new conversation thread by clearing all messages and resetting state\n     */\n    @Method()\n    async newThread(): Promise<void> {\n        this.messages = [];\n        this.currentInput = '';\n        this.isSendEnabled = true;\n        this.atNewThread.emit();\n        setTimeout(() => this.focusInput(), 100);\n    }\n\n    /**\n     * Control the send button state programmatically\n     * @param enabled - Whether the send functionality should be enabled\n     */\n    @Method()\n    async setSendEnabled(enabled: boolean): Promise<void> {\n        this.isSendEnabled = enabled;\n    }\n\n    /**\n     * Programmatically focus the input field\n     */\n    @Method()\n    async focusInput(): Promise<void> {\n        if (this.inputComponent) {\n            setTimeout(() => {\n                this.inputComponent.focus();\n            }, 0);\n        }\n    }\n\n    private handleSubmit = async (content: string) => {\n        if (!content || this.disabled || this.loading || !this.isSendEnabled) {\n            return;\n        }\n\n        this.isSendEnabled = false;\n\n        await this.addMessage('user', content);\n        this.atSubmit.emit(content);\n    };\n\n    private handleStop = () => {\n        this.atStop.emit();\n    };\n\n    private handleNewThread = async () => {\n        await this.newThread();\n    };\n\n    private renderHeader() {\n        if (!this.show_header) return null;\n\n        const newThreadText =\n            this.translations?.ATUI?.PROMPT?.NEW_THREAD || 'New Thread';\n\n        return (\n            <at-header\n                size=\"h3\"\n                header_title={this.header_title}\n                subtitle={this.subtitle}\n                border={true}\n                data-name=\"prompt-container-header\"\n            >\n                {this.show_new_thread_button && (\n                    <at-button\n                        slot=\"actions\"\n                        size=\"sm\"\n                        type=\"secondaryText\"\n                        onClick={this.handleNewThread}\n                        disabled={this.loading}\n                        data-name=\"new-thread-button\"\n                    >\n                        {newThreadText}\n                    </at-button>\n                )}\n            </at-header>\n        );\n    }\n\n    private renderFooter() {\n        return (\n            <div class=\"p-4\">\n                <at-prompt-input\n                    ref={(el) => (this.inputComponent = el)}\n                    placeholder={this.placeholder}\n                    in_progress={this.loading}\n                    max_length={this.max_message_length}\n                    error_text={this.error_text}\n                    data-name=\"prompt-container-input\"\n                    onAtSubmit={(event) => this.handleSubmit(event.detail)}\n                    onAtStop={() => this.handleStop()}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Host\n                class=\"flex h-full w-full flex-col overflow-hidden\"\n                data-name=\"prompt-container\"\n            >\n                {this.renderHeader()}\n                <slot name=\"prompt-container-header\" />\n                <div\n                    class=\"min-h-0 flex-1\"\n                    data-name=\"thread-wrapper\"\n                >\n                    <at-prompt-thread\n                        messages={this.messages}\n                        loading={this.loading}\n                        auto_scroll={true}\n                        enable_vote={this.enable_vote}\n                        enable_copy={this.enable_copy}\n                        enable_edit={this.enable_edit}\n                        data-name=\"container-thread\"\n                    />\n                </div>\n                <div class=\"flex flex-col gap-4\">\n                    {this.renderFooter()}\n                    <slot name=\"prompt-container-footer\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}