{"version":3,"names":["AtuiFormLabelComponent","render","h","key","class","this","label","required","htmlFor","_a","for","undefined","info_text","position","slot","DEFAULT_TOOLTIP_MAX_WIDTH","AtuiTooltip","constructor","hostRef","align","disabled","width","offset","delay","isOpen","updatePosition","async","triggerEl","tooltipEl","updateFloatingPosition","disabledChanged","newValue","closeTooltip","openTooltip","showPopover","hidePopover","componentDidLoad","popoverId","Math","random","toString","substr","setupFloatingUI","setTimeout","setupPopoverEventListeners","disconnectedCallback","cleanupFloatingUI","showTimeout","clearTimeout","hideTimeout","addEventListener","event","customEvent","newState","requestAnimationFrame","style","opacity","mouseEnterHandler","mouseLeaveHandler","hideDelay","min","cleanupAutoUpdate","observer","IntersectionObserver","entries","isIntersecting","threshold","observe","autoUpdate","placement","getFloatingUIPlacement","strategy","computePosition","middleware","flip","fallbackStrategy","padding","shift","mainAxis","crossAxis","size","apply","availableWidth","availableHeight","elements","userMax","parseInt","Object","assign","floating","maxWidth","maxHeight","then","x","y","styles","left","top","margin","transform","ancestorScroll","ancestorResize","elementResize","layoutShift","animationFrame","originalCleanup","disconnect","call","positionMap","bottom","right","alignMap","start","end","center","Host","ref","el","onMouseEnter","onMouseLeave","name","popover","id"],"sources":["src/components/atui-form-label/atui-form-label.tsx","src/components/atui-tooltip/atui-tooltip.tsx"],"sourcesContent":["import { Component, h, Prop } from '@stencil/core';\n\n/**\n * @category Form Controls\n * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.\n */\n@Component({\n    tag: 'atui-form-label',\n    shadow: false,\n})\nexport class AtuiFormLabelComponent {\n    /**\n     * Label that appears before the info icon.\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * When true, there will be a red star on the label.\n     */\n    @Prop()\n    required: boolean;\n\n    /**\n     * The text to be contained in the tooltip.\n     */\n    @Prop()\n    info_text: string;\n\n    /**\n     * Placed in the 'for' attribute on the label element\n     */\n    @Prop()\n    for: string;\n\n    render() {\n        return (\n            <div class=\"flex items-center gap-8\">\n                {[\n                    (this.label || this.required) && (\n                        <label\n                            htmlFor={this.for ?? undefined}\n                            class=\"flex gap-4\"\n                        >\n                            {this.label}\n                            {this.required && <span class=\"text-error\">*</span>}\n                        </label>\n                    ),\n                    this.info_text && (\n                        <atui-tooltip position=\"right\">\n                            <span\n                                slot=\"tooltip-trigger\"\n                                class=\"material-icons cursor-pointer !text-icon-sm text-light\"\n                            >\n                                info_outline\n                            </span>\n                            <span slot=\"tooltip-content\">{this.info_text}</span>\n                        </atui-tooltip>\n                    ),\n                ]}\n            </div>\n        );\n    }\n}\n","import {\n    Component,\n    h,\n    Host,\n    Prop,\n    Element,\n    State,\n    Method,\n    Watch,\n} from '@stencil/core';\nimport {\n    computePosition,\n    flip,\n    shift,\n    offset,\n    autoUpdate,\n    type Placement,\n    size,\n} from '@floating-ui/dom';\n\nexport type TooltipPosition = 'top' | 'bottom' | 'left' | 'right';\nexport type TooltipAlign = 'start' | 'end' | 'center';\nconst DEFAULT_TOOLTIP_MAX_WIDTH = 200;\n\n/**\n * @category **Overlays**\n * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**\n *\n * @slot tooltip-trigger - Shows the tooltip when hovered\n * @slot tooltip-content - Content to go inside the tooltip\n */\n@Component({\n    tag: 'atui-tooltip',\n    shadow: false,\n})\nexport class AtuiTooltip {\n    /**\n     * Position of opened tooltip element relative to the trigger element.\n     */\n    @Prop() position: TooltipPosition = 'top';\n\n    /**\n     * Alignment of opened tooltip element relative to trigger element.\n     */\n    @Prop() align: TooltipAlign = 'center';\n\n    /**\n     * Prevent opening tooltip\n     */\n    @Prop() disabled: boolean = false;\n\n    /**\n     * Maximum width constraint for the tooltip in pixels. Defaults to 300px for readability.\n     */\n    @Prop() width?: string = '200px';\n\n    /**\n     * Offset in pixels from the edge of the trigger element\n     */\n    @Prop() offset?: number = 8;\n\n    /**\n     * Delay before showing and hiding the tooltip when interacting with the trigger element.\n     */\n    @Prop() delay?: number = 150;\n\n    @Watch('disabled')\n    async disabledChanged(newValue: boolean) {\n        if (newValue && this.isOpen) {\n            await this.closeTooltip();\n        }\n    }\n\n    @State() isOpen = false;\n\n    @Element() el: HTMLElement;\n    triggerEl: HTMLElement;\n    tooltipEl: HTMLElement;\n\n    private cleanupAutoUpdate?: () => void;\n    private popoverId: string;\n    private showTimeout?: NodeJS.Timeout;\n    private hideTimeout?: NodeJS.Timeout;\n\n    private updatePosition = async () => {\n        if (this.triggerEl && this.tooltipEl && this.isOpen) {\n            await this.updateFloatingPosition();\n        }\n    };\n\n    /**\n     * Opens the tooltip.\n     */\n    @Method()\n    async openTooltip(): Promise<void> {\n        if (this.disabled) return;\n\n        if (this.tooltipEl) {\n            this.tooltipEl.showPopover();\n            this.isOpen = true;\n        }\n        await this.updatePosition();\n    }\n\n    /**\n     * Closes the tooltip.\n     */\n    @Method()\n    async closeTooltip(): Promise<void> {\n        if (this.tooltipEl) {\n            this.tooltipEl.hidePopover();\n            this.isOpen = false;\n        }\n    }\n\n    async componentDidLoad() {\n        this.popoverId = `atui-tooltip-${Math.random().toString(36).substr(2, 9)}`;\n        await this.setupFloatingUI();\n        setTimeout(() => this.setupPopoverEventListeners(), 0);\n    }\n\n    disconnectedCallback() {\n        this.cleanupFloatingUI();\n\n        if (this.showTimeout) {\n            clearTimeout(this.showTimeout);\n            this.showTimeout = undefined;\n        }\n        if (this.hideTimeout) {\n            clearTimeout(this.hideTimeout);\n            this.hideTimeout = undefined;\n        }\n    }\n\n    private async setupPopoverEventListeners() {\n        if (this.tooltipEl) {\n            this.tooltipEl.addEventListener('toggle', (event: Event) => {\n                const customEvent = event as any;\n                this.isOpen = customEvent.newState === 'open';\n\n                if (this.isOpen) {\n                    requestAnimationFrame(() => {\n                        this.tooltipEl.style.opacity = '1';\n                        this.updatePosition();\n                    });\n                } else {\n                    this.tooltipEl.style.opacity = '0';\n                }\n            });\n        }\n    }\n\n    private async mouseEnterHandler(): Promise<void> {\n        if (this.hideTimeout) {\n            clearTimeout(this.hideTimeout);\n            this.hideTimeout = undefined;\n        }\n\n        if (this.isOpen) return;\n\n        if (this.showTimeout) {\n            clearTimeout(this.showTimeout);\n        }\n\n        this.showTimeout = setTimeout(async () => {\n            if (!this.disabled && !this.isOpen) {\n                await this.openTooltip();\n            }\n            this.showTimeout = undefined;\n        }, this.delay || 0);\n    }\n\n    private async mouseLeaveHandler(): Promise<void> {\n        if (this.showTimeout) {\n            clearTimeout(this.showTimeout);\n            this.showTimeout = undefined;\n        }\n\n        if (!this.isOpen) return;\n\n        const hideDelay = Math.min(this.delay || 0, 150);\n        this.hideTimeout = setTimeout(async () => {\n            if (this.isOpen) {\n                await this.closeTooltip();\n            }\n            this.hideTimeout = undefined;\n        }, hideDelay);\n    }\n\n    private async setupFloatingUI(): Promise<void> {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n        }\n\n        if (this.triggerEl && this.tooltipEl) {\n            const observer = new IntersectionObserver(\n                (entries) => {\n                    if (!entries[0].isIntersecting && this.isOpen) {\n                        this.closeTooltip();\n                    }\n                },\n                { threshold: 0 },\n            );\n            observer.observe(this.triggerEl);\n\n            this.cleanupAutoUpdate = autoUpdate(\n                this.triggerEl,\n                this.tooltipEl,\n\n                () => {\n                    if (this.isOpen) {\n                        const placement = this.getFloatingUIPlacement();\n                        const strategy = 'fixed';\n\n                        computePosition(this.triggerEl, this.tooltipEl, {\n                            placement,\n                            strategy,\n                            middleware: [\n                                offset(this.offset ?? 8),\n                                flip({\n                                    fallbackStrategy: 'bestFit',\n                                    padding: 8,\n                                }),\n                                shift({\n                                    padding: 8,\n                                    mainAxis: true,\n                                    crossAxis: true,\n                                }),\n                                size({\n                                    apply: ({\n                                        availableWidth,\n                                        availableHeight,\n                                        elements,\n                                    }) => {\n                                        const userMax =\n                                            parseInt(\n                                                (\n                                                    this.width || '200px'\n                                                ).toString(),\n                                                10,\n                                            ) || DEFAULT_TOOLTIP_MAX_WIDTH;\n                                        Object.assign(elements.floating.style, {\n                                            maxWidth: `${Math.min(availableWidth, userMax)}px`,\n                                            maxHeight: `${availableHeight}px`,\n                                        });\n                                    },\n                                }),\n                            ],\n                        }).then(({ x, y }) => {\n                            const styles: any = {\n                                position: strategy,\n                                left: `${x}px`,\n                                top: `${y}px`,\n                                margin: '0',\n                                transform: 'none',\n                                maxWidth: this.width || '200px',\n                            };\n\n                            Object.assign(this.tooltipEl.style, styles);\n                        });\n                    }\n                },\n                {\n                    ancestorScroll: true,\n                    ancestorResize: true,\n                    elementResize: true,\n                    layoutShift: true,\n                    animationFrame: true,\n                },\n            );\n\n            const originalCleanup = this.cleanupAutoUpdate;\n            this.cleanupAutoUpdate = () => {\n                originalCleanup();\n                observer.disconnect();\n            };\n        }\n    }\n\n    private cleanupFloatingUI() {\n        this.cleanupAutoUpdate?.();\n        this.cleanupAutoUpdate = undefined;\n    }\n\n    private async updateFloatingPosition(): Promise<void> {\n        if (!this.triggerEl || !this.tooltipEl) return;\n        this.setupFloatingUI();\n    }\n\n    private getFloatingUIPlacement(): Placement {\n        const positionMap: Record<TooltipPosition, string> = {\n            top: 'top',\n            bottom: 'bottom',\n            left: 'left',\n            right: 'right',\n        };\n\n        const alignMap: Record<TooltipAlign, string> = {\n            start: 'start',\n            end: 'end',\n            center: 'center',\n        };\n\n        const position = positionMap[this.position] || 'bottom';\n        const align = alignMap[this.align] || 'center';\n\n        return `${position}-${align}` as Placement;\n    }\n\n    render() {\n        return (\n            <Host class=\"relative\">\n                <div\n                    aria-haspopup=\"true\"\n                    data-name=\"tooltip-trigger\"\n                    ref={(el) => (this.triggerEl = el)}\n                    aria-expanded={`${this.isOpen ? 'true' : 'false'}`}\n                    class={this.disabled ? 'contents' : ''}\n                    onMouseEnter={() =>\n                        !this.disabled ? this.mouseEnterHandler() : null\n                    }\n                    onMouseLeave={() =>\n                        !this.disabled ? this.mouseLeaveHandler() : null\n                    }\n                >\n                    <slot name=\"tooltip-trigger\" />\n                </div>\n\n                <div\n                    ref={(el) => (this.tooltipEl = el)}\n                    data-position={this.position}\n                    data-align={this.align}\n                    popover=\"auto\"\n                    id={this.popoverId}\n                    class=\"pointer-events-none w-fit rounded-md bg-gray-950/80 px-[6px] py-2 text-sm text-white opacity-0 shadow-md transition-opacity duration-200 ease-out\"\n                    data-name=\"tooltip-content-wrapper\"\n                >\n                    <slot name=\"tooltip-content\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}