{"version":3,"names":["layoutVariantsConfig","variants","layout","column","row","grid","AtuiCheckboxGroup","constructor","hostRef","this","value","checkboxEls","formControlSelected","updateSelected","options","forEach","option","includes","option_id","push","filter","selection","componentDidLoad","getCheckBoxes","el","querySelectorAll","checkboxEl","index","disabled","addEventListener","event","handleChange","map","h","label","hint_text","onAtuiChange","checkboxId","stopPropagation","atuiChange","emit","render","getLayoutClassname","classlist","classname","Host","key","role","info_text","class","name","required","checkbox","error_text","invalid"],"sources":["src/components/atui-checkbox-group/atui-checkbox-group.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { classlist } from '../../utils/classlist';\n\nconst layoutVariantsConfig = {\n    variants: {\n        layout: {\n            column: 'flex flex-col gap-4',\n            row: 'flex',\n            grid: 'grid grid-cols-3',\n        },\n    },\n};\n\nexport interface CheckboxOptions {\n    option_id: string;\n    label?: string;\n    hint_text?: string;\n    value?: boolean;\n}\n\nexport type CheckboxLayout = 'column' | 'row' | 'grid';\n\n/**\n * ### ```interface CheckboxOptions```\n * ```\n *  id: string;\n *  label?: string;\n *  hint_text?: string;\n *  value?: boolean;\n * ```\n *\n * @category Form Controls\n * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.\n * @slot - Used to place checkboxes manually when 'options' property is not set.\n */\n@Component({\n    tag: 'atui-checkbox-group',\n    shadow: false,\n})\nexport class AtuiCheckboxGroup {\n    /**\n     * Label of the checkbox group.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Info icon with detailed tooltip description. Displayed at right of label.\n     */\n    @Prop()\n    info_text?: string;\n\n    /**\n     * Hint to be placed below the label\n     */\n    @Prop()\n    hint_text?: string;\n\n    /**\n     * Displayed when the input is invalid\n     */\n    @Prop()\n    error_text?: string;\n\n    /**\n     * Disables interaction with the checkbox\n     */\n    @Prop()\n    disabled?: boolean;\n\n    /**\n     * Shows the error text\n     */\n    @Prop()\n    invalid?: boolean;\n\n    /**\n     * Adds a required * to the label\n     */\n    @Prop()\n    required?: boolean;\n\n    /**\n     * Options displayed in the checkbox group.\n     */\n    @Prop()\n    options: CheckboxOptions[];\n\n    @Watch('options')\n    updateSelected() {\n        this.options.forEach((option) => {\n            if (\n                option.value === true &&\n                !this.value.includes(option.option_id)\n            ) {\n                this.value.push(option.option_id);\n            } else if (\n                option.value === false &&\n                this.value.includes(option.option_id)\n            ) {\n                this.value = this.value.filter(\n                    (selection) => selection !== option.option_id,\n                );\n            }\n        });\n    }\n\n    /**\n     * Sets the layout of the checkbox-group\n     */\n    @Prop()\n    layout?: CheckboxLayout = 'column';\n\n    /**\n     * A list of strings, containing the Id's of the currently selected checkboxes\n     */\n    @Prop({ mutable: true })\n    value: string[] = [];\n\n    @Element() el: HTMLAtuiCheckboxGroupElement;\n\n    checkboxEls: HTMLAtuiCheckboxElement[] = [];\n\n    /**\n     * Emits an event containing the 'selected' prop when changed\n     */\n    @Event()\n    atuiChange: EventEmitter<string[]>;\n\n    private formControlSelected: string[] = null;\n\n    componentDidLoad() {\n        if (!this.getCheckBoxes) {\n            this.el\n                .querySelectorAll('atui-checkbox')\n                .forEach((checkboxEl, index) => {\n                    checkboxEl.option_id = `${index}`;\n                    checkboxEl.disabled = this.disabled;\n                    checkboxEl.value = this.value.includes(`${index}`);\n                    checkboxEl.addEventListener('atuiChange', (event) =>\n                        this.handleChange(event, `${index}`),\n                    );\n                    this.checkboxEls.push(checkboxEl);\n                });\n        }\n    }\n\n    get getCheckBoxes(): any {\n        if (this.options) {\n            if (this.formControlSelected !== null) {\n                this.value = this.formControlSelected;\n                this.formControlSelected = null;\n            }\n            return this.options.map((option) => (\n                <atui-checkbox\n                    option_id={option.option_id}\n                    label={option.label}\n                    hint_text={option.hint_text}\n                    value={this.value.includes(option.option_id)}\n                    disabled={this.disabled}\n                    onAtuiChange={(event) =>\n                        this.handleChange(event, option.option_id)\n                    }\n                />\n            ));\n        }\n        return '';\n    }\n\n    handleChange(event: CustomEvent, checkboxId: string) {\n        event.stopPropagation();\n        this.value = this.value.includes(checkboxId)\n            ? this.value.filter((option) => option !== checkboxId)\n            : [...this.value, checkboxId];\n        this.atuiChange.emit(this.value);\n    }\n\n    render() {\n        const getLayoutClassname = classlist('gap-4', layoutVariantsConfig);\n        const classname = getLayoutClassname({\n            layout: this.layout,\n        });\n        return (\n            <Host\n                role=\"group\"\n                aria-label={this.label}\n                aria-description={this.info_text}\n                class=\"flex w-full flex-col\"\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.required || this.info_text) && (\n                        <atui-form-label\n                            label={this.label}\n                            required={this.required}\n                            info_text={this.info_text}\n                        />\n                    )}\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"checkbox-group-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <ul\n                    class={classname}\n                    data-name=\"checkbox-group-options\"\n                >\n                    <slot />\n                    {this.getCheckBoxes &&\n                        this.getCheckBoxes.map((checkbox) => (\n                            <li class=\"flex\">{checkbox}</li>\n                        ))}\n                </ul>\n\n                {this.error_text && this.invalid && (\n                    <span\n                        class=\"text-error text-sm\"\n                        data-name=\"checkbox-group-error-text\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n\n/**\n * @category Form Controls\n * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.\n *\n * @slot - Used to place checkboxes manually when 'options' property is not set.\n */\n"],"mappings":"oGAYA,MAAMA,EAAuB,CACzBC,SAAU,CACNC,OAAQ,CACJC,OAAQ,sBACRC,IAAK,OACLC,KAAM,sB,MA+BLC,EAAiB,MAJ9B,WAAAC,CAAAC,G,iDA4EIC,KAAMP,OAAoB,SAM1BO,KAAKC,MAAa,GAIlBD,KAAWE,YAA8B,GAQjCF,KAAmBG,oBAAa,IAqG3C,CA7IG,cAAAC,GACIJ,KAAKK,QAAQC,SAASC,IAClB,GACIA,EAAON,QAAU,OAChBD,KAAKC,MAAMO,SAASD,EAAOE,WAC9B,CACET,KAAKC,MAAMS,KAAKH,EAAOE,U,MACpB,GACHF,EAAON,QAAU,OACjBD,KAAKC,MAAMO,SAASD,EAAOE,WAC7B,CACET,KAAKC,MAAQD,KAAKC,MAAMU,QACnBC,GAAcA,IAAcL,EAAOE,W,KA8BpD,gBAAAI,GACI,IAAKb,KAAKc,cAAe,CACrBd,KAAKe,GACAC,iBAAiB,iBACjBV,SAAQ,CAACW,EAAYC,KAClBD,EAAWR,UAAY,GAAGS,IAC1BD,EAAWE,SAAWnB,KAAKmB,SAC3BF,EAAWhB,MAAQD,KAAKC,MAAMO,SAAS,GAAGU,KAC1CD,EAAWG,iBAAiB,cAAeC,GACvCrB,KAAKsB,aAAaD,EAAO,GAAGH,OAEhClB,KAAKE,YAAYQ,KAAKO,EAAW,G,EAKjD,iBAAIH,GACA,GAAId,KAAKK,QAAS,CACd,GAAIL,KAAKG,sBAAwB,KAAM,CACnCH,KAAKC,MAAQD,KAAKG,oBAClBH,KAAKG,oBAAsB,I,CAE/B,OAAOH,KAAKK,QAAQkB,KAAKhB,GACrBiB,EAAA,iBACIf,UAAWF,EAAOE,UAClBgB,MAAOlB,EAAOkB,MACdC,UAAWnB,EAAOmB,UAClBzB,MAAOD,KAAKC,MAAMO,SAASD,EAAOE,WAClCU,SAAUnB,KAAKmB,SACfQ,aAAeN,GACXrB,KAAKsB,aAAaD,EAAOd,EAAOE,c,CAKhD,MAAO,E,CAGX,YAAAa,CAAaD,EAAoBO,GAC7BP,EAAMQ,kBACN7B,KAAKC,MAAQD,KAAKC,MAAMO,SAASoB,GAC3B5B,KAAKC,MAAMU,QAAQJ,GAAWA,IAAWqB,IACzC,IAAI5B,KAAKC,MAAO2B,GACtB5B,KAAK8B,WAAWC,KAAK/B,KAAKC,M,CAG9B,MAAA+B,GACI,MAAMC,EAAqBC,EAAU,QAAS3C,GAC9C,MAAM4C,EAAYF,EAAmB,CACjCxC,OAAQO,KAAKP,SAEjB,OACI+B,EAACY,EAAI,CAAAC,IAAA,2CACDC,KAAK,QACO,aAAAtC,KAAKyB,MAAK,mBACJzB,KAAKuC,UACvBC,MAAM,wBAENhB,EAAK,OAAAa,IAAA,2CAAAG,MAAM,iBACPhB,EAAM,QAAAa,IAAA,2CAAAI,KAAK,WACTzC,KAAKyB,OAASzB,KAAK0C,UAAY1C,KAAKuC,YAClCf,EACI,mBAAAa,IAAA,2CAAAZ,MAAOzB,KAAKyB,MACZiB,SAAU1C,KAAK0C,SACfH,UAAWvC,KAAKuC,YAGvBvC,KAAK0B,WACFF,EAAA,QAAAa,IAAA,2CACIG,MAAM,qDACI,mCAETxC,KAAK0B,YAKlBF,EAAA,MAAAa,IAAA,2CACIG,MAAOL,EAAS,YACN,0BAEVX,EAAQ,QAAAa,IAAA,6CACPrC,KAAKc,eACFd,KAAKc,cAAcS,KAAKoB,GACpBnB,EAAI,MAAAgB,MAAM,QAAQG,MAI7B3C,KAAK4C,YAAc5C,KAAK6C,SACrBrB,EAAA,QAAAa,IAAA,2CACIG,MAAM,qBACI,yCAETxC,KAAK4C,Y","ignoreList":[]}