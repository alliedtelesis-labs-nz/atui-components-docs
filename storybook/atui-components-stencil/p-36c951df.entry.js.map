{"version":3,"names":["atDialogCss","AtDialogComponent","constructor","hostRef","this","role","backdrop","isOpen","triggerEls","externalTriggerListeners","handleDialogClose","event","preventDefault","closeDialog","handleKeyDown","key","toggleDialog","openDialog","dialog","el","querySelector","showModal","classList","add","close","removeAttribute","remove","componentDidLoad","trigger_id","Array","from","document","querySelectorAll","length","console","warn","setupExternalTriggerListeners","disconnectedCallback","cleanupExternalTriggerListeners","forEach","element","handler","removeEventListener","clickHandler","async","stopPropagation","keydownHandler","addEventListener","push","render","h","class","id","dialog_id","onClose","onKeyDown"],"sources":["src/components/at-dialog/at-dialog.scss?tag=at-dialog","src/components/at-dialog/at-dialog.tsx"],"sourcesContent":["@use '../../styles/shared/backdrop';\n\n.c-atui-dialog {\n    position: fixed;\n    inset: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    max-height: calc(100dvh - 48px);\n    overflow: hidden;\n    border: 0;\n    padding: 0;\n    background: transparent;\n    z-index: var(--token-z-index-modal);\n    transform-origin: center;\n    opacity: 0;\n    scale: 0.95;\n    box-shadow: var(--token-shadow-3);\n    transition:\n        translate 0.3s ease,\n        scale 0.3s ease,\n        opacity 0.3s ease,\n        visibility 0s linear 0.3s;\n    visibility: hidden;\n\n    &::backdrop {\n        background: none;\n    }\n\n    .backdrop-content {\n        display: flex;\n        max-height: calc(100dvh - 48px);\n    }\n\n    &[open] {\n        translate: 0 0;\n        scale: 1;\n        opacity: 1;\n        visibility: visible;\n        transition:\n            translate 0.3s ease,\n            scale 0.3s ease,\n            opacity 0.3s ease,\n            visibility 0s linear;\n\n        @starting-style {\n            opacity: 0;\n            scale: 1.15;\n        }\n    }\n\n    &:not([open]) {\n        scale: 0.95;\n        opacity: 0;\n        visibility: hidden;\n    }\n}\n","import { Component, Prop, h, Element, Method, State } from '@stencil/core';\n\n/**\n * @category Overlays\n * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.\n *\n * @slot - Content placed inside of the dialog box\n */\n@Component({\n    tag: 'at-dialog',\n    styleUrl: 'at-dialog.scss',\n    shadow: false,\n})\nexport class AtDialogComponent {\n    @Element() el!: HTMLAtDialogElement;\n\n    /**\n     * ID of the dialog element (used to open and close the modal)\n     */\n    @Prop()\n    dialog_id: string;\n\n    /**\n     * Role of the dialog element. Can be either 'dialog' or 'alertdialog'\n     */\n    @Prop()\n    role: 'dialog' | 'alertdialog' = 'dialog';\n\n    /**\n     * Whether to show a backdrop behind the dialog\n     */\n    @Prop()\n    backdrop: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.\n     */\n    @Prop() trigger_id?: string;\n\n    /**\n     * Internal state to track if dialog is open\n     */\n    @State()\n    isOpen: boolean = false;\n\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the dialog modal between open and closed states\n     * @returns Promise that resolves when the dialog state is toggled\n     */\n    @Method()\n    async toggleDialog(): Promise<void> {\n        if (this.isOpen) {\n            await this.closeDialog();\n        } else {\n            await this.openDialog();\n        }\n    }\n\n    /**\n     * Opens the dialog modal\n     * @returns Promise that resolves when the dialog is opened\n     */\n    @Method()\n    async openDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && !this.isOpen) {\n            dialog.showModal();\n            this.isOpen = true;\n            if (this.backdrop) {\n                dialog.classList.add('backdrop');\n            }\n        }\n    }\n\n    /**\n     * Closes the dialog modal\n     * @returns Promise that resolves when the dialog is closed\n     */\n    @Method()\n    async closeDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && this.isOpen) {\n            dialog.close();\n            this.isOpen = false;\n            dialog.removeAttribute('open');\n            dialog.classList.remove('backdrop');\n        }\n    }\n\n    private handleDialogClose = (event: Event) => {\n        event.preventDefault();\n        if (this.isOpen) {\n            this.closeDialog();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isOpen) {\n            event.preventDefault();\n            this.closeDialog();\n        }\n    };\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-id=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-dialog: No elements found with data-id=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleDialog();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleDialog();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <dialog\n                class={`c-atui-dialog ${this.backdrop ? 'backdrop' : ''}`}\n                id={this.dialog_id}\n                data-name=\"dialog\"\n                role={this.role}\n                aria-modal=\"true\"\n                onClose={this.handleDialogClose}\n                onKeyDown={this.handleKeyDown}\n            >\n                <div class=\"backdrop-content\">\n                    <slot />\n                </div>\n            </dialog>\n        );\n    }\n}\n"],"mappings":"kDAAA,MAAMA,EAAc,m7C,MCaPC,EAAiB,MAL9B,WAAAC,CAAAC,G,UAkBIC,KAAIC,KAA6B,SAMjCD,KAAQE,SAAY,MAWpBF,KAAMG,OAAY,MAEVH,KAAUI,WAAkB,GAC5BJ,KAAwBK,yBAI3B,GA8CGL,KAAAM,kBAAqBC,IACzBA,EAAMC,iBACN,GAAIR,KAAKG,OAAQ,CACbH,KAAKS,a,GAILT,KAAAU,cAAiBH,IACrB,GAAIA,EAAMI,MAAQ,UAAYX,KAAKG,OAAQ,CACvCI,EAAMC,iBACNR,KAAKS,a,EA4EhB,CA7HG,kBAAMG,GACF,GAAIZ,KAAKG,OAAQ,OACPH,KAAKS,a,KACR,OACGT,KAAKa,Y,EASnB,gBAAMA,GACF,MAAMC,EAASd,KAAKe,GAAGC,cAAc,UACrC,GAAIF,IAAWd,KAAKG,OAAQ,CACxBW,EAAOG,YACPjB,KAAKG,OAAS,KACd,GAAIH,KAAKE,SAAU,CACfY,EAAOI,UAAUC,IAAI,W,GAUjC,iBAAMV,GACF,MAAMK,EAASd,KAAKe,GAAGC,cAAc,UACrC,GAAIF,GAAUd,KAAKG,OAAQ,CACvBW,EAAOM,QACPpB,KAAKG,OAAS,MACdW,EAAOO,gBAAgB,QACvBP,EAAOI,UAAUI,OAAO,W,EAkBhC,sBAAMC,GACF,GAAIvB,KAAKwB,WAAY,CACjBxB,KAAKI,WAAaqB,MAAMC,KACpBC,SAASC,iBAAiB,aAAa5B,KAAKwB,iBAEhD,GAAIxB,KAAKI,WAAWyB,SAAW,EAAG,CAC9BC,QAAQC,KACJ,gDAAgD/B,KAAKwB,eAEzD,M,CAEJxB,KAAKgC,+B,EAIb,oBAAAC,GACIjC,KAAKkC,iC,CAGD,+BAAAA,GACJlC,KAAKK,yBAAyB8B,SAAQ,EAAGC,UAAS7B,QAAO8B,cACrDD,EAAQE,oBAAoB/B,EAAO8B,EAAQ,IAE/CrC,KAAKK,yBAA2B,E,CAG5B,6BAAA2B,GACJ,IAAKhC,KAAKI,YAAcJ,KAAKI,WAAWyB,SAAW,EAAG,OAEtD,MAAMU,EAAeC,MAAOjC,IACxBA,EAAMC,iBACND,EAAMkC,wBACAzC,KAAKY,cAAc,EAG7B,MAAM8B,EAAiBF,MAAOjC,IAC1B,OAAQA,EAAMI,KACV,IAAK,QACL,IAAK,IACDJ,EAAMC,uBACAR,KAAKY,eACX,M,EAIZZ,KAAKI,WAAW+B,SAASpB,IACrBA,EAAG4B,iBAAiB,QAASJ,GAC7BxB,EAAG4B,iBAAiB,UAAWD,GAC/B1C,KAAKK,yBAAyBuC,KAC1B,CAAER,QAASrB,EAAIR,MAAO,QAAS8B,QAASE,GACxC,CAAEH,QAASrB,EAAIR,MAAO,UAAW8B,QAASK,GAC7C,G,CAIT,MAAAG,GACI,OACIC,EAAA,UAAAnC,IAAA,2CACIoC,MAAO,iBAAiB/C,KAAKE,SAAW,WAAa,KACrD8C,GAAIhD,KAAKiD,UACC,qBACVhD,KAAMD,KAAKC,KAAI,aACJ,OACXiD,QAASlD,KAAKM,kBACd6C,UAAWnD,KAAKU,eAEhBoC,EAAK,OAAAnC,IAAA,2CAAAoC,MAAM,oBACPD,EAAQ,QAAAnC,IAAA,8C","ignoreList":[]}