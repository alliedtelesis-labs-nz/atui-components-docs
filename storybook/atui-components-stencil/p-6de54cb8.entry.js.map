{"version":3,"names":["AtAccordionItemComponent","constructor","hostRef","this","border","open","componentDidLoad","accordionElement","el","querySelector","handleSummaryInteraction","event","type","preventDefault","closeAccordion","openAccordion","atuiAccordionChange","emit","getIsOpen","render","h","Host","key","item_id","class","ref","role","id","onClick","onTouchEnd","label","name","hidden","content","AtAccordionTriggerComponent"],"sources":["src/components/at-accordion/at-accordion-item/at-accordion-item.tsx","src/components/at-accordion/at-accordion-item/at-accordion-trigger/at-accordion-trigger.tsx"],"sourcesContent":["import {\n    Component,\n    Prop,\n    Element,\n    Method,\n    h,\n    Host,\n    EventEmitter,\n    Event,\n} from '@stencil/core';\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot accordion-trigger - Used for placing the atui-accordion-trigger for this accordion item. Only use if not using the 'label' prop on this element.\n * @slot default - Used for placing the content for this accordion item.\n */\n@Component({\n    tag: 'at-accordion-item',\n    shadow: false,\n})\nexport class AtAccordionItemComponent {\n    @Element() el: HTMLElement;\n    /**\n     * Used to identify the accordion item among the other accordion items\n     */\n    @Prop() item_id!: string;\n\n    /**\n     * Provides an atui-accordion-trigger with this label if set\n     */\n    @Prop() label: string;\n\n    /**\n     * Puts a light gray separator below the accordion item\n     */\n    @Prop() border: boolean = true;\n\n    /**\n     * String content to display when the accordion is open\n     */\n    @Prop() content: string;\n\n    /**\n     * Used for setting if the accordion is open.\n     */\n    @Prop({ mutable: true }) open: boolean = false;\n\n    /**\n     * Emitted when the accordion item's open state changes\n     */\n    @Event() atuiAccordionChange: EventEmitter<boolean>;\n\n    private accordionElement: HTMLDetailsElement;\n\n    componentDidLoad() {\n        this.accordionElement = this.el.querySelector('details');\n    }\n\n    private async handleSummaryInteraction(event: Event) {\n        if (event.type === 'click' || event.type === 'touchend') {\n            event.preventDefault();\n            if (this.open) {\n                await this.closeAccordion();\n            } else {\n                await this.openAccordion();\n            }\n        }\n    }\n\n    /**\n     * Opens this accordion item\n     */\n    @Method()\n    async openAccordion(): Promise<void> {\n        if (this.open) return;\n        this.accordionElement.open = true;\n        this.open = true;\n        this.atuiAccordionChange.emit(this.open);\n    }\n\n    /**\n     * Closes this accordion item\n     */\n    @Method()\n    async closeAccordion(): Promise<void> {\n        if (!this.open) return;\n        this.accordionElement.open = false;\n        this.open = false;\n        this.atuiAccordionChange.emit(this.open);\n    }\n\n    /**\n     * Return the accordion items open state\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.open;\n    }\n\n    render() {\n        return (\n            <Host\n                data-name={this.item_id}\n                data-state={this.open ? 'expanded' : 'collapsed'}\n            >\n                <details\n                    class={`group/accordion-item'}`}\n                    ref={(el) =>\n                        (this.accordionElement = el as HTMLDetailsElement)\n                    }\n                    role=\"group\"\n                    open={this.open}\n                >\n                    <summary\n                        id={`trigger-${this.item_id}`}\n                        role=\"button\"\n                        aria-expanded={this.open}\n                        data-state={this.open ? 'expanded' : 'collapsed'}\n                        class=\"group/accordion-item focus-within:ring-active-foreground/30 flex rounded-sm outline-0 focus-within:ring-2\"\n                        onClick={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        onTouchEnd={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        aria-controls={`content-${this.item_id}`}\n                    >\n                        {this.label && (\n                            <at-accordion-trigger\n                                label={this.label}\n                            ></at-accordion-trigger>\n                        )}\n                        <slot name=\"accordion-trigger\" />\n                    </summary>\n                    <div\n                        id={`content-${this.item_id}`}\n                        aria-labelledby={`trigger-${this.item_id}`}\n                        hidden={!this.open}\n                        data-name=\"accordion-item-content\"\n                    >\n                        {this.content && (\n                            <div class=\"flex flex-col p-16 leading-normal\">\n                                {this.content}\n                            </div>\n                        )}\n                        <slot />\n                    </div>\n                </details>\n            </Host>\n        );\n    }\n}\n","import { Component, h, Host, Prop } from '@stencil/core';\n\n/**\n * @slot - Content placed inside of the trigger, after the 'label' prop if one is provided\n */\n@Component({\n    tag: 'at-accordion-trigger',\n})\nexport class AtAccordionTriggerComponent {\n    /**\n     * Text to display on the trigger for the accordion item.\n     */\n    @Prop() label: string;\n\n    render() {\n        return (\n            <Host\n                class=\"group flex flex-1 items-center justify-between p-8\"\n                data-name=\"accordion-trigger\"\n            >\n                {this.label && (\n                    <span class=\"flex flex-grow truncate text-sm font-medium group-hover:underline\">\n                        {this.label}\n                    </span>\n                )}\n                <slot />\n                <i\n                    role=\"presentation\"\n                    aria-hidden=\"true\"\n                    class=\"material-icons text-md text-light group-data-[state=expanded]/accordion-item:rotate-180\"\n                >\n                    keyboard_arrow_down\n                </i>\n            </Host>\n        );\n    }\n}\n"],"mappings":"sEAsBaA,EAAwB,MAJrC,WAAAC,CAAAC,G,mEAmBYC,KAAMC,OAAY,KAUDD,KAAIE,KAAY,KA0G5C,CAjGG,gBAAAC,GACIH,KAAKI,iBAAmBJ,KAAKK,GAAGC,cAAc,U,CAG1C,8BAAMC,CAAyBC,GACnC,GAAIA,EAAMC,OAAS,SAAWD,EAAMC,OAAS,WAAY,CACrDD,EAAME,iBACN,GAAIV,KAAKE,KAAM,OACLF,KAAKW,gB,KACR,OACGX,KAAKY,e,GASvB,mBAAMA,GACF,GAAIZ,KAAKE,KAAM,OACfF,KAAKI,iBAAiBF,KAAO,KAC7BF,KAAKE,KAAO,KACZF,KAAKa,oBAAoBC,KAAKd,KAAKE,K,CAOvC,oBAAMS,GACF,IAAKX,KAAKE,KAAM,OAChBF,KAAKI,iBAAiBF,KAAO,MAC7BF,KAAKE,KAAO,MACZF,KAAKa,oBAAoBC,KAAKd,KAAKE,K,CAOvC,eAAMa,GACF,OAAOf,KAAKE,I,CAGhB,MAAAc,GACI,OACIC,EAACC,EAAI,CAAAC,IAAA,uDACUnB,KAAKoB,QACJ,aAAApB,KAAKE,KAAO,WAAa,aAErCe,EACI,WAAAE,IAAA,2CAAAE,MAAO,yBACPC,IAAMjB,GACDL,KAAKI,iBAAmBC,EAE7BkB,KAAK,QACLrB,KAAMF,KAAKE,MAEXe,EAAA,WAAAE,IAAA,2CACIK,GAAI,WAAWxB,KAAKoB,UACpBG,KAAK,SAAQ,gBACEvB,KAAKE,KACR,aAAAF,KAAKE,KAAO,WAAa,YACrCmB,MAAM,4GACNI,QAAUjB,GACNR,KAAKO,yBAAyBC,GAElCkB,WAAalB,GACTR,KAAKO,yBAAyBC,GAEnB,2BAAWR,KAAKoB,WAE9BpB,KAAK2B,OACFV,EAAA,wBAAAE,IAAA,2CACIQ,MAAO3B,KAAK2B,QAGpBV,EAAA,QAAAE,IAAA,2CAAMS,KAAK,uBAEfX,EACI,OAAAE,IAAA,2CAAAK,GAAI,WAAWxB,KAAKoB,UAAS,kBACZ,WAAWpB,KAAKoB,UACjCS,QAAS7B,KAAKE,KAAI,YACR,0BAETF,KAAK8B,SACFb,EAAK,OAAAE,IAAA,2CAAAE,MAAM,qCACNrB,KAAK8B,SAGdb,EAAA,QAAAE,IAAA,+C,iCC3IXY,EAA2B,M,yBAMpC,MAAAf,GACI,OACIC,EAACC,EAAI,CAAAC,IAAA,2CACDE,MAAM,qDAAoD,YAChD,qBAETrB,KAAK2B,OACFV,EAAM,QAAAE,IAAA,2CAAAE,MAAM,qEACPrB,KAAK2B,OAGdV,EAAQ,QAAAE,IAAA,6CACRF,EAAA,KAAAE,IAAA,2CACII,KAAK,eAAc,cACP,OACZF,MAAM,2FAAyF,uB","ignoreList":[]}