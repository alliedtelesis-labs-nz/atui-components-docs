{"version":3,"names":["AbreviatedTimeUnits","FullTimeUnits","AtTimeRangeComponent","constructor","hostRef","this","selected_time_range","selected","unit","TimeUnit","HOURS","value","range_limit","enable_relative_time","custom_error_message","show_all_time","enable_range_limit","units","MINUTES","DAYS","WEEKS","MONTHS","YEARS","minSeconds","componentWillLoad","translations","fetchTranslations","el","today","Date","componentWillRender","lowerLimit","moment","subtract","toDate","TimeDateUtil","floorDateByTimeUnit","MIN_DATE","Duration","defaultFromDate","getLongUnitDisplay","time","custom","getRelativeDate","getRelativeDateRange","getCustomStartAndEndDate","selectedTime","from","to","fromDate","getShortUnitDisplay","onChangeCustomTime","customTime","TimeRangeDisplay","CUSTOM","atuiChange","emit","Object","assign","onChangeRelativeTime","buttonGroupOptions","output","ALL","push","h","class","ATUI","TIME","ALL_TIME_LABEL","_a","toLocaleString","lockEndDateToNow","_b","LAST","startDate","predefinedTimeRanges","presets","forEach","timerange","render","Host","key","options","onAtuiIndexChange","event","detail","relativeTimeMenuEl","focus","absoluteTimeMenuEl","length","ref","tabindex","onChange","stopPropagation","common_options","min_date","min_seconds","initial_selected_time","onAtuiSubmit","onAtuiCancel","blur","default_to_date","default_from_date","from_date_value","to_date_value","lock_end_date_to_now","_c"],"sources":["src/models/at-time-range.models.ts","src/components/at-time-range/at-time-range.tsx"],"sourcesContent":["import { TimeUnit, TimeWithUnit } from '../types/time';\nimport { DateRangeStrings, TimeRangeDisplay } from '../types/date';\n\nexport type TimePresets =\n    | {\n          unit: TimeUnit.MINUTES;\n          value: 5;\n      }\n    | {\n          unit: TimeUnit.MINUTES;\n          value: 30;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 1;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 6;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 12;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 24;\n      }\n    | {\n          unit: TimeUnit.DAYS;\n          value: 7;\n      }\n    | {\n          unit: TimeUnit.MONTHS;\n          value: 1;\n      }\n    | {\n          unit: TimeUnit.MONTHS;\n          value: 6;\n      }\n    | {\n          unit: TimeUnit.YEARS;\n          value: 1;\n      }\n    | {\n          unit: TimeUnit.YEARS;\n          value: 5;\n      };\n\nexport enum AbreviatedTimeUnits {\n    SECONDS = 's',\n    MINUTES = 'min',\n    HOURS = 'hr',\n    DAYS = 'd',\n    WEEKS = 'w',\n    MONTHS = 'm',\n    YEARS = 'yr',\n}\n\nexport enum FullTimeUnits {\n    SECONDS = 'SECONDS',\n    MINUTES = 'MINUTES',\n    HOURS = 'HOURS',\n    DAYS = 'DAYS',\n    WEEKS = 'WEEKS',\n    MONTHS = 'MONTHS',\n    YEARS = 'YEARS',\n}\n\n/**\n * @deprecated please use onChange to receive SelectedTimeRangeExtended event\n */\nexport interface SelectedTimeRange {\n    selected: TimeWithUnit | TimeRangeDisplay.CUSTOM;\n    custom?: DateRangeStrings;\n}\n\ntype SelectedAllTimeRange = {\n    selected: TimeRangeDisplay.ALL;\n    custom?: undefined;\n};\n\nexport type SelectedTimeRangeExtended =\n    | SelectedTimeRange\n    | SelectedAllTimeRange;\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Host,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport {\n    AbreviatedTimeUnits,\n    FullTimeUnits,\n    SelectedTimeRangeExtended,\n    TimePresets,\n} from '../../models/at-time-range.models';\nimport {\n    DateRange,\n    DateRangeStrings,\n    Duration,\n    MIN_DATE,\n    TimeRangeDisplay,\n    TimeUnit,\n    TimeWithUnit,\n} from '../../types';\nimport { TimeDateUtil } from '../../utils/time-date.util';\nimport moment from 'moment';\nimport { fetchTranslations } from '../../utils/translation';\n\n/**\n * @category Form Controls\n * @description A time range component for selecting time periods.\n */\n\n@Component({\n    tag: 'at-time-range',\n    shadow: false,\n})\nexport class AtTimeRangeComponent {\n    /**\n     * Selected time range.\n     */\n    @Prop()\n    selected_time_range: SelectedTimeRangeExtended = {\n        selected: {\n            unit: TimeUnit.HOURS,\n            value: 1,\n        },\n    };\n\n    /**\n     * Lower limit of the time range.\n     */\n    @Prop()\n    range_limit = 7;\n\n    /**\n     * Define the presets for the relative time ranges.\n     */\n    @Prop()\n    presets: TimePresets[];\n\n    /**\n     * Enable relative time selection.\n     */\n    @Prop()\n    enable_relative_time = true;\n\n    /**\n     * Custom error message to show when an invalid time is inputted.\n     */\n    @Prop()\n    custom_error_message = null;\n\n    /**\n     * Enable all time selection.\n     */\n    @Prop()\n    show_all_time = false;\n\n    /**\n     * Enable range limit setting. If set to false, use Jan 1, 1985 as the lower limit of time range, ignoring\n     * the value of range limit.\n     */\n    @Prop()\n    enable_range_limit = true;\n\n    @State() today: Date;\n    @State() lowerLimit;\n    @State() defaultFromDate;\n    @State() translations: any;\n    @State() relativeTimeMenuEl;\n    @State() absoluteTimeMenuEl;\n    @Element() el;\n\n    units = [\n        TimeUnit.MINUTES,\n        TimeUnit.HOURS,\n        TimeUnit.DAYS,\n        TimeUnit.WEEKS,\n        TimeUnit.MONTHS,\n        TimeUnit.YEARS,\n    ];\n    minSeconds = 300;\n\n    async componentWillLoad(): Promise<void> {\n        this.translations = await fetchTranslations(this.el);\n        this.today = new Date();\n    }\n\n    componentWillRender() {\n        this.lowerLimit = this.enable_range_limit\n            ? moment().subtract(this.range_limit, 'day').toDate()\n            : TimeDateUtil.floorDateByTimeUnit(MIN_DATE, Duration.HOURS);\n        this.defaultFromDate = moment(this.today).subtract(1, 'hours').toDate();\n    }\n\n    getLongUnitDisplay(time: SelectedTimeRangeExtended): string {\n        if (time.custom || !time.selected) {\n            return;\n        }\n        return FullTimeUnits[time.selected['unit']];\n    }\n\n    getRelativeDate(time: SelectedTimeRangeExtended): DateRange {\n        if (time.custom || !time.selected) {\n            return;\n        }\n        return TimeDateUtil.getRelativeDateRange(time.selected as TimeWithUnit);\n    }\n\n    getCustomStartAndEndDate(selectedTime: SelectedTimeRangeExtended): {\n        fromDate: Date;\n        toDate: Date;\n    } {\n        if (!selectedTime.custom) {\n            return;\n        }\n\n        const { from, to } = selectedTime.custom;\n        const fromDate = moment(from).toDate();\n        const toDate = moment(to).toDate();\n        return { fromDate, toDate };\n    }\n\n    getShortUnitDisplay(time: TimeWithUnit): string {\n        return AbreviatedTimeUnits[time.unit];\n    }\n\n    /**\n     * Emits an event containing the selected time range when it changes\n     */\n    @Event()\n    atuiChange: EventEmitter<SelectedTimeRangeExtended>;\n\n    onChangeCustomTime(customTime: DateRangeStrings): void {\n        this.selected_time_range = {\n            selected: TimeRangeDisplay.CUSTOM,\n            custom: customTime,\n        };\n\n        this.atuiChange.emit({ ...this.selected_time_range });\n    }\n\n    onChangeRelativeTime(time: TimeWithUnit | TimeRangeDisplay.ALL): void {\n        this.selected_time_range = {\n            selected: time,\n        };\n\n        this.atuiChange.emit({ ...this.selected_time_range });\n    }\n\n    get buttonGroupOptions() {\n        const output = [];\n        if (this.selected_time_range.selected === TimeRangeDisplay.ALL) {\n            output.push({\n                value: (\n                    <div class=\"text-dark flex items-center gap-4 font-normal\">\n                        <span class=\"font-medium\">\n                            {this.translations.ATUI.TIME.ALL_TIME_LABEL}\n                        </span>\n                    </div>\n                ),\n            });\n        } else if (this.selected_time_range.custom) {\n            output.push({\n                value: [\n                    <div class=\"text-dark flex items-center gap-4 font-normal\">\n                        <span>\n                            {this.getCustomStartAndEndDate(\n                                this.selected_time_range,\n                            )?.fromDate.toLocaleString()}\n                        </span>\n                        <span class=\"icon-md material-icons text-light\">\n                            arrow_forward\n                        </span>\n                        <span>\n                            {this.selected_time_range.custom.lockEndDateToNow\n                                ? 'NOW'\n                                : this.getCustomStartAndEndDate(\n                                      this.selected_time_range,\n                                  )?.toDate.toLocaleString()}\n                        </span>\n                    </div>,\n                ],\n            });\n        } else {\n            output.push({\n                value: (\n                    <div class=\"text-dark flex items-center gap-4 font-normal\">\n                        <span class=\"font-medium\">\n                            {this.translations.ATUI.TIME.LAST}\n                            {` `}\n                            {this.selected_time_range.selected['value']}\n                            {` `}\n                            {\n                                this.translations.ATUI.TIME[\n                                    this.getLongUnitDisplay(\n                                        this.selected_time_range,\n                                    )\n                                ]\n                            }{' '}\n                            :\n                        </span>\n                        <span>\n                            {this.getRelativeDate(\n                                this.selected_time_range,\n                            ).startDate.toLocaleString()}\n                        </span>\n                        <span class=\"icon-md material-icons text-light\">\n                            arrow_forward\n                        </span>\n                        <span>NOW</span>\n                    </div>\n                ),\n            });\n        }\n        output.push({\n            value: (\n                <div class=\"flex items-center\">\n                    <span class=\"icon-md material-icons text-light\">\n                        date_range\n                    </span>\n                </div>\n            ),\n        });\n        return output;\n    }\n\n    get predefinedTimeRanges() {\n        const output = [];\n        this.presets.forEach((timerange) => {\n            output.push({\n                value: (\n                    <span>\n                        {timerange.value}\n                        {this.getShortUnitDisplay(timerange)}\n                    </span>\n                ),\n            });\n        });\n        output.push({\n            value: (\n                <div class=\"flex items-center\">\n                    <span class=\"material-icons text-body text-light\">\n                        date_range\n                    </span>\n                </div>\n            ),\n        });\n        return output;\n    }\n\n    render() {\n        return (\n            <Host class=\"relative flex justify-center gap-8\">\n                {this.enable_relative_time && (\n                    <at-button-group\n                        options={this.buttonGroupOptions}\n                        onAtuiIndexChange={(event) =>\n                            (event.detail === 0 &&\n                                this.relativeTimeMenuEl.focus()) ||\n                            (event.detail === 1 &&\n                                this.absoluteTimeMenuEl.focus())\n                        }\n                    />\n                )}\n                {!this.enable_relative_time && (\n                    <at-button-group\n                        options={this.predefinedTimeRanges}\n                        onAtuiIndexChange={(event) => {\n                            if (event.detail < this.presets.length) {\n                                this.onChangeRelativeTime(\n                                    this.presets[event.detail],\n                                );\n                            } else if (\n                                event.detail ===\n                                this.predefinedTimeRanges.length - 1\n                            ) {\n                                this.absoluteTimeMenuEl.focus();\n                            }\n                        }}\n                    />\n                )}\n                <div\n                    ref={(el) => (this.relativeTimeMenuEl = el)}\n                    class=\"absolute top-[42px] z-10 h-0 overflow-hidden bg-white focus-within:h-fit focus-within:overflow-visible focus:h-fit\"\n                    tabindex={0}\n                    onChange={(event) => event.stopPropagation()}\n                >\n                    <at-time-with-unit\n                        units={this.units}\n                        common_options={this.presets}\n                        min_date={this.lowerLimit}\n                        min_seconds={this.minSeconds}\n                        initial_selected_time={\n                            this.selected_time_range.selected ===\n                            TimeRangeDisplay.CUSTOM\n                                ? TimeRangeDisplay.ALL\n                                : this.selected_time_range.selected\n                        }\n                        custom_error_message={this.custom_error_message}\n                        show_all_time={this.show_all_time}\n                        onAtuiSubmit={(event) =>\n                            this.onChangeRelativeTime(\n                                (event as CustomEvent).detail,\n                            )\n                        }\n                        onAtuiCancel={() => {\n                            this.relativeTimeMenuEl.focus();\n                            this.relativeTimeMenuEl.blur();\n                        }}\n                    />\n                </div>\n                <div\n                    ref={(el) => (this.absoluteTimeMenuEl = el)}\n                    class=\"absolute top-[42px] z-10 h-0 overflow-hidden bg-white focus-within:h-fit focus-within:overflow-visible focus:h-fit\"\n                    tabindex={0}\n                    onChange={(event) => event.stopPropagation()}\n                >\n                    <at-custom-time-range\n                        min_date={this.lowerLimit}\n                        default_to_date={this.today}\n                        default_from_date={this.defaultFromDate}\n                        from_date_value={\n                            this.getCustomStartAndEndDate(\n                                this.selected_time_range,\n                            )?.fromDate\n                        }\n                        to_date_value={\n                            this.getCustomStartAndEndDate(\n                                this.selected_time_range,\n                            )?.toDate\n                        }\n                        lock_end_date_to_now={\n                            this.selected_time_range.custom?.lockEndDateToNow\n                        }\n                        onAtuiSubmit={(event) =>\n                            this.onChangeCustomTime(\n                                (event as CustomEvent).detail,\n                            )\n                        }\n                        onAtuiCancel={() => {\n                            this.absoluteTimeMenuEl.focus();\n                            this.absoluteTimeMenuEl.blur();\n                        }}\n                    />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}