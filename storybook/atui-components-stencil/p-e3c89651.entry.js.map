{"version":3,"names":["AtuiButtonGroup","constructor","hostRef","this","options","buttonGroupId","Math","random","toString","substring","buttonRefs","componentDidLoad","setInitialActiveButton","handleChange","value","index","atuiChange","emit","atuiIndexChange","activeOption","find","option","option_id","length","render","h","Host","key","role","class","name","label","info_text","id","hint_text","renderOptions","error_text","map","disabled","ref","el","is_active","onAtuiClick","onKeyDown","event","preventDefault","AtuiCustomTimeRangeComponent","can_set_time","min_seconds","min_date","MIN_DATE","max_date","Date","now","lock_end_date_to_now","isFromMinDay","isToMaxDay","isFromMaxDay","isToMinDay","validateMinDate","newValue","oldValue","getTime","floorMinDate","validateMaxDate","ceilingMaxDate","validateDefaultFromDate","default_from_date","from_date_value","validateDefaultToDate","default_to_date","to_date_value","validateFromDateValue","undefined","toISOString","setFromDateAndTime","updateMinMaxFlags","validateToDateValue","setToDateAndTime","componentWillLoad","translations","fetchTranslations","componentWillRender","fromDate","fromTime","toDate","toTime","clearSelection","date","TimeDateUtil","ceilingDateByTimeUnit","Duration","HOURS","floorDateByTimeUnit","getCustomToDateTime","TimeDatePresentationUtil","buildDateFromStrings","getCustomFromDateTime","to","isSameDateByUnit","DAYS","from","setDateNow","toggleValue","setDateNowSwitch","getFormattedDate","getFromTimes","getTimeOptions","DateFormat","HOURS_ONLY","fromMaxTime","shiftDateByUnit","getToTimes","toMaxTime","handleCancel","atuiCancel","handleSubmit","moment","isBefore","atuiSubmit","lockEndDateToNow","ATUI","TIME","SELECT_ABSOLUTE_TIME","FROM_DATE","type","min","max","onChange","target","FROM_TIME","onAtuiChange","detail","TO_DATE","toDatePickerEl","TO_TIME","toTimePickerEl","SET_END_DATE_AND_TIME_TO_NOW","SET_END_DATE_AND_TIME_TO_NOW_DESCRIPTION","CLEAR_SELECTION","onClick","CANCEL","APPLY","AtuiTimeWithUnitComponent","max_seconds","Number","MAX_SAFE_INTEGER","custom_error_message","show_all_time","errorText","secondaryErrorText","watchTimeValue","updateSelectedTime","timeValue","watchTimeUnit","selectedTime","initSelectedTime","initial_selected_time","initDropdownOptions","dropdownOptions","TimeExtraOptions","ALL","units","initialTimeRange","unit","getCurrentOrDefaultUnit","timeUnit","startDate","_a","getRelativeDate","TimeRangeDisplay","validateInput","maxSeconds","getSecondsAgoFromDate","maxTimeValue","convertSecondsToUnit","minTimeValue","VALIDATION","MAX_NUMBER","replace","MIN_NUMBER","updateSelectedRange","getRelativeDateRange","handleSelectChange","timeTranslationObject","Object","keys","onKeyUp","tabindex","SELECT_RELATIVE_TIME","Fragment","toLocaleString","ALL_TIME_LABEL","common_options","COMMONLY_USED","timerange","stopPropagation","_b","LAST","RESET"],"sources":["src/components/atui-button-group/atui-button-group.tsx","src/components/atui-time-range/atui-custom-time-range/atui-custom-time-range.tsx","src/components/atui-time-range/atui-time-with-unit/atui-time-with-unit.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Host,\n    Element,\n} from '@stencil/core';\n\nexport interface ButtonGroupOption {\n    option_id: string;\n    label?: string;\n    icon?: string;\n    is_active?: string;\n    disabled?: boolean;\n    readonly?: boolean;\n}\n\n/**\n * @category Form Controls\n * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.\n *\n * @slot - used to place your own atui-button-group-options if 'options' prop isn't set. Button changing logic will not apply.\n */\n@Component({\n    tag: 'atui-button-group',\n    shadow: false,\n})\nexport class AtuiButtonGroup {\n    /**\n     * Label for button group.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Optional info icon with detailed tooltip description.\n     *\n     * Displayed at right of label.\n     */\n    @Prop()\n    info_text?: string;\n\n    /**\n     * Hint for options.\n     */\n    @Prop()\n    hint_text?: string;\n\n    /**\n     * Error text for invalid choices.\n     */\n    @Prop()\n    error_text?: string;\n\n    /**\n     * List of options to be displayed on the button group.\n     */\n    @Prop()\n    options: ButtonGroupOption[] = [];\n\n    /**\n     * Sets the current active button\n     */\n    @Prop({ mutable: true })\n    value: string;\n\n    /**\n     * Disables the button group and prevents interaction\n     */\n    @Prop()\n    disabled?: boolean;\n\n    @Element() el: HTMLAtuiButtonGroupElement;\n    private buttonGroupId = `buttonGroup-${Math.random().toString(36).substring(2, 11)}`;\n\n    /**\n     * When the active button is changed, this will emit the 0-based index of the active button\n     */\n    @Event()\n    atuiIndexChange: EventEmitter<number>;\n\n    /**\n     * When the active button is changed, this will emit the text value of the active button\n     */\n    @Event()\n    atuiChange: EventEmitter<string>;\n\n    private buttonRefs: HTMLElement[] = [];\n\n    componentDidLoad() {\n        this.setInitialActiveButton();\n    }\n\n    handleChange(value: string, index: number): void {\n        this.value = value;\n        this.atuiChange.emit(value);\n        this.atuiIndexChange.emit(index);\n    }\n\n    private setInitialActiveButton() {\n        const activeOption = this.options.find(\n            (option) => option.option_id === this.value,\n        );\n        if (activeOption) {\n            this.value = activeOption.option_id;\n        } else if (this.options.length > 0) {\n            this.value = this.options[0].option_id;\n        }\n    }\n\n    render() {\n        return (\n            <Host\n                role=\"radiogroup\"\n                aria-labelledby={this.buttonGroupId}\n                class={'flex flex-col items-start'}\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.info_text) && (\n                        <atui-form-label\n                            id={this.buttonGroupId}\n                            label={this.label}\n                            info_text={this.info_text}\n                        />\n                    )}\n                    {this.hint_text && (\n                        <span\n                            class=\"mb-8 inline-block text-xs leading-tight text-light\"\n                            data-name=\"button-group-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n                <div class=\"inset-shadow-xs relative rounded-lg border border-med bg-white\">\n                    <ul\n                        class=\"relative z-20 m-[3px] flex flex-row\"\n                        data-name=\"button-group-options\"\n                    >\n                        {this.renderOptions()}\n                        <slot />\n                    </ul>\n                </div>\n\n                {this.error_text && (\n                    <span\n                        class=\"text-xs font-medium text-error\"\n                        data-name=\"button-group-error-text\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n\n    renderOptions() {\n        return this.options.map((option, index) => (\n            <li\n                class={`relative z-10 mr-[-1px] ${this.disabled ? 'pointer-events-none' : ''}`}\n                ref={(el) => (this.buttonRefs[index] = el as HTMLElement)}\n            >\n                <atui-button-group-option\n                    option_id={option.option_id}\n                    label={option.label}\n                    is_active={this.value === option.option_id}\n                    disabled={option.disabled}\n                    onAtuiClick={() =>\n                        this.handleChange(option.option_id, index)\n                    }\n                    onKeyDown={(event) => {\n                        if (event.key === 'Enter' || event.key === ' ') {\n                            this.handleChange(option.option_id, index);\n                            event.preventDefault();\n                        }\n                    }}\n                />\n            </li>\n        ));\n    }\n}\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Watch,\n    EventEmitter,\n    Event,\n} from '@stencil/core';\nimport {\n    DateFormat,\n    DateRangeStrings,\n    Duration,\n    MIN_DATE,\n} from '../../../types';\nimport { TimeDateUtil } from '../../../utils/time-date.util';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { TimeDatePresentationUtil } from '../../../utils/time-date-presentation.util';\nimport moment from 'moment';\nimport { SelectOption } from '../../../types/select';\n\n@Component({\n    tag: 'atui-custom-time-range',\n    shadow: false,\n})\nexport class AtuiCustomTimeRangeComponent {\n    /**\n     * Whether time selection is enabled in addition to date selection\n     */\n    @Prop()\n    can_set_time: boolean = true;\n\n    /**\n     * Minimum number of seconds for the time range\n     */\n    @Prop()\n    min_seconds: number = 60;\n\n    /**\n     * Minimum selectable date\n     */\n    @Prop({ mutable: true }) min_date: Date = MIN_DATE;\n    @Watch('min_date')\n    validateMinDate(newValue: Date, oldValue: Date) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.min_date = this.floorMinDate(newValue);\n    }\n\n    /**\n     * Maximum selectable date\n     */\n    @Prop({ mutable: true }) max_date: Date = new Date(Date.now());\n    @Watch('max_date')\n    validateMaxDate(newValue: Date, oldValue: Date) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.max_date = this.ceilingMaxDate(newValue);\n    }\n\n    /**\n     * Default value for the from date\n     */\n    @Prop({ mutable: true }) default_from_date: Date;\n    @Watch('default_from_date')\n    validateDefaultFromDate(newValue: Date, oldValue: Date) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.default_from_date = this.floorMinDate(newValue);\n        this.from_date_value = this.default_from_date;\n    }\n\n    /**\n     * Default value for the to date\n     */\n    @Prop({ mutable: true }) default_to_date: Date;\n    @Watch('default_to_date')\n    validateDefaultToDate(newValue: Date | null, oldValue: Date | null) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.default_to_date = this.ceilingMaxDate(newValue);\n        this.to_date_value = this.default_to_date\n            ? this.default_to_date\n            : this.max_date;\n    }\n\n    /**\n     * Current value of the from date\n     */\n    @Prop({ mutable: true }) from_date_value: Date;\n    @Watch('from_date_value')\n    validateFromDateValue(newValue: Date | null, oldValue: Date | null) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        if (this.from_date_value === undefined)\n            this.from_date_value = new Date();\n        if (\n            this.from_date_value.toISOString() !==\n            this.floorMinDate(newValue).toISOString()\n        ) {\n            this.from_date_value = newValue && this.floorMinDate(newValue);\n        }\n        this.setFromDateAndTime(this.from_date_value);\n        this.updateMinMaxFlags();\n    }\n\n    /**\n     * Current value of the to date\n     */\n    @Prop({ mutable: true }) to_date_value: Date;\n    @Watch('to_date_value')\n    validateToDateValue(newValue: Date | null, oldValue: Date | null) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n\n        if (this.to_date_value === undefined) this.to_date_value = new Date();\n        if (\n            this.to_date_value.toISOString() !==\n            this.ceilingMaxDate(newValue).toISOString()\n        ) {\n            this.to_date_value = newValue && this.ceilingMaxDate(newValue);\n        }\n        this.setToDateAndTime(this.to_date_value);\n        this.updateMinMaxFlags();\n    }\n\n    /**\n     * Whether to lock the end date to the current time\n     */\n    @Prop({ mutable: true }) lock_end_date_to_now = false;\n\n    @State() isFromMinDay = true;\n    @State() isToMaxDay = true;\n    @State() isFromMaxDay = false;\n    @State() isToMinDay = false;\n    @State() toDate: string;\n    @State() toTime: string;\n    @State() fromDate: string;\n    @State() fromTime: string;\n    @State() translations: any;\n    @State() setDateNowSwitch: HTMLAtuiToggleSwitchElement;\n    @State() toDatePickerEl: HTMLInputElement;\n    @State() toTimePickerEl: HTMLAtuiSelectElement;\n    @Element() el;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    componentWillRender() {\n        if (!this.fromDate && !this.fromTime) {\n            this.from_date_value = this.default_from_date\n                ? this.default_from_date\n                : this.min_date;\n        }\n        if (!this.toDate && !this.toTime) {\n            this.to_date_value = this.default_to_date\n                ? this.default_to_date\n                : this.max_date;\n        }\n    }\n\n    clearSelection(): void {\n        this.from_date_value = this.default_from_date\n            ? this.default_from_date\n            : this.min_date;\n        this.to_date_value = this.default_to_date\n            ? this.default_to_date\n            : this.max_date;\n    }\n\n    private ceilingMaxDate(date: Date): Date {\n        return TimeDateUtil.ceilingDateByTimeUnit(date, Duration.HOURS);\n    }\n\n    private floorMinDate(date: Date): Date {\n        return TimeDateUtil.floorDateByTimeUnit(date, Duration.HOURS);\n    }\n\n    private getCustomToDateTime(): Date {\n        return TimeDatePresentationUtil.buildDateFromStrings(\n            this.toDate,\n            this.toTime,\n        );\n    }\n\n    private getCustomFromDateTime(): Date {\n        return TimeDatePresentationUtil.buildDateFromStrings(\n            this.fromDate,\n            this.fromTime,\n        );\n    }\n\n    private updateMinMaxFlags(): void {\n        const to = this.getCustomToDateTime();\n        this.isToMinDay = TimeDateUtil.isSameDateByUnit(\n            to,\n            this.min_date,\n            Duration.DAYS,\n        );\n        this.isToMaxDay = TimeDateUtil.isSameDateByUnit(\n            to,\n            this.max_date,\n            Duration.DAYS,\n        );\n\n        const from = this.getCustomFromDateTime();\n        this.isFromMinDay = TimeDateUtil.isSameDateByUnit(\n            from,\n            this.min_date,\n            Duration.DAYS,\n        );\n        this.isFromMaxDay = TimeDateUtil.isSameDateByUnit(\n            from,\n            this.max_date,\n            Duration.DAYS,\n        );\n    }\n\n    protected setDateNow(): void {\n        const toggleValue = this.setDateNowSwitch.value;\n        if (toggleValue) {\n            this.lock_end_date_to_now = true;\n            const date = this.ceilingMaxDate(new Date(Date.now()));\n            this.to_date_value = date;\n        } else {\n            this.lock_end_date_to_now = false;\n        }\n    }\n\n    private setToDateAndTime(toDate: Date) {\n        this.toDate = TimeDatePresentationUtil.getFormattedDate(\n            toDate,\n            'YYYY-MM-DD' as DateFormat,\n        );\n        this.toTime = TimeDatePresentationUtil.getFormattedDate(\n            toDate,\n            'hh:mm a' as DateFormat,\n        );\n    }\n\n    private setFromDateAndTime(fromDate: Date) {\n        this.fromDate = TimeDatePresentationUtil.getFormattedDate(\n            fromDate,\n            'YYYY-MM-DD' as DateFormat,\n        );\n        this.fromTime = TimeDatePresentationUtil.getFormattedDate(\n            fromDate,\n            'hh:mm a' as DateFormat,\n        );\n    }\n\n    get getFromTimes() {\n        this.updateMinMaxFlags();\n\n        if (this.isFromMinDay) {\n            return TimeDatePresentationUtil.getTimeOptions(\n                TimeDatePresentationUtil.getFormattedDate(\n                    this.min_date,\n                    DateFormat.HOURS_ONLY,\n                ),\n            );\n        } else if (this.isFromMaxDay) {\n            const fromMaxTime = TimeDatePresentationUtil.getFormattedDate(\n                TimeDateUtil.shiftDateByUnit(this.max_date, -1, Duration.HOURS),\n                DateFormat.HOURS_ONLY,\n            );\n            return TimeDatePresentationUtil.getTimeOptions(\n                undefined,\n                fromMaxTime,\n            );\n        } else {\n            return TimeDatePresentationUtil.getTimeOptions();\n        }\n    }\n\n    get getToTimes(): SelectOption[] {\n        this.updateMinMaxFlags();\n\n        if (this.isToMinDay) {\n            const toMaxTime = TimeDatePresentationUtil.getFormattedDate(\n                TimeDateUtil.shiftDateByUnit(this.min_date, 1, Duration.HOURS),\n                DateFormat.HOURS_ONLY,\n            );\n            return TimeDatePresentationUtil.getTimeOptions(toMaxTime);\n        } else if (this.isToMaxDay) {\n            return TimeDatePresentationUtil.getTimeOptions(\n                undefined,\n                TimeDatePresentationUtil.getFormattedDate(\n                    this.max_date,\n                    DateFormat.HOURS_ONLY,\n                ),\n            );\n        } else {\n            return TimeDatePresentationUtil.getTimeOptions();\n        }\n    }\n\n    /**\n     * Emitted when the user cancels the time range selection\n     */\n    @Event() atuiCancel: EventEmitter<null>;\n    /**\n     * Emitted when the user submits the time range selection\n     */\n    @Event() atuiSubmit: EventEmitter<DateRangeStrings>;\n\n    handleCancel(): void {\n        this.atuiCancel.emit();\n    }\n\n    handleSubmit() {\n        if (moment(this.from_date_value).isBefore(moment(this.to_date_value))) {\n            this.atuiSubmit.emit({\n                from: TimeDatePresentationUtil.buildDateFromStrings(\n                    this.fromDate,\n                    this.fromTime,\n                ).toISOString(),\n                to: TimeDatePresentationUtil.buildDateFromStrings(\n                    this.toDate,\n                    this.toTime,\n                ).toISOString(),\n                lockEndDateToNow: this.lock_end_date_to_now,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div class=\"flex w-fit flex-col gap-8 border border-gray-300\">\n                <h5 class=\"p-12 text-h5 font-medium text-dark\">\n                    {this.translations.ATUI.TIME.SELECT_ABSOLUTE_TIME}\n                </h5>\n                <div class=\"flex flex-row gap-16 px-12\">\n                    <div class=\"flex flex-fill flex-col gap-8\">\n                        <div>\n                            <label>\n                                {this.translations.ATUI.TIME.FROM_DATE}\n                            </label>\n                            <div>\n                                <input\n                                    type=\"date\"\n                                    name=\"fromDp\"\n                                    class=\"cursor-pointer\"\n                                    min={TimeDatePresentationUtil.getFormattedDate(\n                                        this.min_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    max={TimeDatePresentationUtil.getFormattedDate(\n                                        this.max_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    value={this.fromDate}\n                                    onChange={(event) => {\n                                        this.from_date_value =\n                                            TimeDatePresentationUtil.buildDateFromStrings(\n                                                (\n                                                    event.target as HTMLInputElement\n                                                ).value,\n                                                this.fromTime,\n                                            );\n                                        this.setToDateAndTime(\n                                            this.to_date_value,\n                                        );\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        {this.can_set_time && (\n                            <div>\n                                <label>\n                                    {this.translations.ATUI.TIME.FROM_TIME}\n                                </label>\n                                <div>\n                                    <atui-select\n                                        options={this.getFromTimes}\n                                        value={this.fromTime}\n                                        onAtuiChange={(event) => {\n                                            this.from_date_value =\n                                                TimeDatePresentationUtil.buildDateFromStrings(\n                                                    this.fromDate,\n                                                    event.detail,\n                                                );\n                                        }}\n                                    ></atui-select>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <div class=\"flex flex-fill flex-col gap-8\">\n                        <div>\n                            <label>{this.translations.ATUI.TIME.TO_DATE}</label>\n                            <div>\n                                <input\n                                    type=\"date\"\n                                    name=\"toDp\"\n                                    class=\"cursor-pointer\"\n                                    disabled={this.lock_end_date_to_now}\n                                    min={TimeDatePresentationUtil.getFormattedDate(\n                                        this.min_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    max={TimeDatePresentationUtil.getFormattedDate(\n                                        this.max_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    value={this.toDate}\n                                    ref={(el) => (this.toDatePickerEl = el)}\n                                    onChange={(event) => {\n                                        this.to_date_value =\n                                            TimeDatePresentationUtil.buildDateFromStrings(\n                                                (\n                                                    event.target as HTMLInputElement\n                                                ).value,\n                                                this.toTime,\n                                            );\n                                        this.setToDateAndTime(\n                                            this.to_date_value,\n                                        );\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        {this.can_set_time && (\n                            <div>\n                                <label>\n                                    {this.translations.ATUI.TIME.TO_TIME}\n                                </label>\n                                <div>\n                                    <atui-select\n                                        options={this.getToTimes}\n                                        value={this.toTime}\n                                        disabled={this.lock_end_date_to_now}\n                                        ref={(el) => (this.toTimePickerEl = el)}\n                                        onAtuiChange={(event) => {\n                                            this.to_date_value =\n                                                TimeDatePresentationUtil.buildDateFromStrings(\n                                                    this.toDate,\n                                                    event.detail,\n                                                );\n                                        }}\n                                    ></atui-select>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <div class=\"align-center my-8 flex flex-row justify-between gap-8 rounded-md px-12\">\n                    <div class=\"flex flex-col\">\n                        <label class=\"c-form__label\">\n                            {\n                                this.translations.ATUI.TIME\n                                    .SET_END_DATE_AND_TIME_TO_NOW\n                            }\n                        </label>\n                        <span class=\"text-xs text-med\">\n                            {\n                                this.translations.ATUI.TIME\n                                    .SET_END_DATE_AND_TIME_TO_NOW_DESCRIPTION\n                            }\n                        </span>\n                    </div>\n                    <atui-toggle-switch\n                        value={this.lock_end_date_to_now}\n                        onChange={() => this.setDateNow()}\n                        ref={(el) => (this.setDateNowSwitch = el)}\n                    ></atui-toggle-switch>\n                </div>\n                <div class=\"flex flex-row justify-between p-8\">\n                    <atui-button\n                        type=\"secondaryOutline\"\n                        data-name=\"custom-time-range-clear\"\n                        label={this.translations.ATUI.CLEAR_SELECTION}\n                        onClick={() => this.clearSelection()}\n                    ></atui-button>\n                    <div class=\"flex flex-row gap-8\">\n                        <atui-button\n                            type=\"secondaryOutline\"\n                            data-name=\"custom-time-range-cancel\"\n                            label={this.translations.ATUI.CANCEL}\n                            onClick={() => this.handleCancel()}\n                        ></atui-button>\n                        <atui-button\n                            data-name=\"custom-time-range-apply\"\n                            label={this.translations.ATUI.APPLY}\n                            onClick={() => this.handleSubmit()}\n                        ></atui-button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Watch,\n    Event,\n    EventEmitter,\n    Fragment,\n} from '@stencil/core';\nimport { TimeExtraOptions, TimeUnit, TimeWithUnit } from '../../../types/time';\nimport { TimePresets } from '../../../models/atui-time-range.models';\nimport { DateRange, TimeRangeDisplay } from '../../../types/date';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { TimeDateUtil } from '../../../utils/time-date.util';\n\n/**\n * @category Form Controls\n * @description A time with unit component for selecting a time period.\n */\n\n@Component({\n    tag: 'atui-time-with-unit',\n    shadow: false,\n})\nexport class AtuiTimeWithUnitComponent {\n    /**\n     * Available time units for selection\n     */\n    @Prop()\n    units: TimeUnit[];\n\n    /**\n     * Common time preset options to display\n     */\n    @Prop()\n    common_options: TimePresets[];\n\n    /**\n     * Minimum date constraint for time selection\n     */\n    @Prop()\n    min_date: Date = null;\n\n    /**\n     * Minimum number of seconds allowed for time selection\n     */\n    @Prop()\n    min_seconds = 60;\n\n    /**\n     * Maximum number of seconds allowed for time selection\n     */\n    @Prop()\n    max_seconds: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Initial time selection value\n     */\n    @Prop()\n    initial_selected_time: TimeWithUnit | TimeRangeDisplay.ALL;\n\n    /**\n     * Custom error message to display when validation fails\n     */\n    @Prop()\n    custom_error_message = null;\n\n    /**\n     * Whether to show the 'All Time' option\n     */\n    @Prop()\n    show_all_time = false;\n\n    @State() errorText: string = '';\n    @State() secondaryErrorText: string = '';\n    @State() translations: any;\n    @State() dropdownOptions: (TimeUnit | TimeExtraOptions)[];\n    @State() timeValue: number;\n    @Watch('timeValue')\n    watchTimeValue() {\n        this.updateSelectedTime(this.timeValue);\n    }\n    @State() timeUnit: TimeUnit | TimeExtraOptions;\n    @Watch('timeUnit')\n    watchTimeUnit() {\n        this.updateSelectedTime(this.timeValue);\n    }\n    @State() selectedTime: TimeWithUnit | TimeRangeDisplay.ALL;\n    @State() startDate;\n    @Element() el;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    componentWillRender() {\n        if (!this.selectedTime) {\n            this.initSelectedTime(this.initial_selected_time);\n            this.initDropdownOptions();\n        }\n    }\n\n    private initDropdownOptions(): void {\n        this.dropdownOptions = this.show_all_time\n            ? [TimeExtraOptions.ALL, ...this.units]\n            : this.units;\n    }\n\n    private initSelectedTime(\n        initialTimeRange: TimeWithUnit | TimeRangeDisplay.ALL,\n    ): void {\n        const unit =\n            typeof initialTimeRange === 'object'\n                ? TimeDateUtil.getCurrentOrDefaultUnit(\n                      initialTimeRange.unit,\n                      this.units,\n                  )\n                : TimeExtraOptions.ALL;\n        const value =\n            typeof initialTimeRange === 'object'\n                ? initialTimeRange.value\n                : null;\n\n        this.timeUnit = unit;\n        this.timeValue = value;\n        this.selectedTime = initialTimeRange;\n        this.startDate = this.getRelativeDate()?.startDate;\n    }\n\n    updateSelectedTime(value: number): void {\n        const unit = this.timeUnit;\n\n        if (unit !== TimeExtraOptions.ALL) {\n            this.selectedTime = { unit, value };\n        } else {\n            this.selectedTime = TimeRangeDisplay.ALL;\n            if (this.timeValue) {\n                this.timeValue = null;\n            }\n        }\n        this.validateInput();\n        this.startDate = this.getRelativeDate()?.startDate;\n    }\n\n    validateInput() {\n        if (this.selectedTime !== TimeRangeDisplay.ALL) {\n            const maxSeconds = this.min_date\n                ? TimeDateUtil.getSecondsAgoFromDate(this.min_date)\n                : this.max_seconds;\n            const maxTimeValue = TimeDateUtil.convertSecondsToUnit(\n                maxSeconds,\n                this.timeUnit,\n                0,\n                true,\n            );\n            const minTimeValue = TimeDateUtil.convertSecondsToUnit(\n                this.min_seconds,\n                this.timeUnit,\n                0,\n                false,\n            );\n            if (this.timeValue > maxTimeValue)\n                this.errorText = this.translations\n                    ? this.translations.ATUI.TIME.VALIDATION.MAX_NUMBER.replace(\n                          '{lowerThanValue}',\n                          `${maxTimeValue + 1} ${this.timeUnit}`,\n                      )\n                    : `Please enter a value lower than ${maxTimeValue} ${this.timeUnit}`;\n            else if (this.timeValue < minTimeValue)\n                this.errorText = this.translations\n                    ? this.translations.ATUI.TIME.VALIDATION.MIN_NUMBER.replace(\n                          '{min}',\n                          `${maxTimeValue} ${this.timeUnit}`,\n                      )\n                    : `Please enter a value larger than ${minTimeValue} ${this.timeUnit}`;\n            else this.errorText = '';\n            if (this.errorText && this.custom_error_message) {\n                this.secondaryErrorText = this.custom_error_message;\n            }\n        }\n    }\n\n    updateSelectedRange(value: TimeWithUnit): void {\n        this.timeUnit = value.unit;\n        this.timeValue = value.value;\n        this.selectedTime = value;\n    }\n\n    getRelativeDate(): DateRange {\n        if (typeof this.selectedTime === 'object') {\n            return TimeDateUtil.getRelativeDateRange(this.selectedTime);\n        }\n    }\n\n    clearSelection(): void {\n        if (typeof this.initial_selected_time === 'object') {\n            this.timeValue = this.initial_selected_time.value;\n            this.timeUnit = this.initial_selected_time.unit;\n        } else {\n            this.timeValue = null;\n            this.timeUnit = TimeExtraOptions.ALL;\n        }\n    }\n\n    /**\n     * Emitted when the user cancels the time selection\n     */\n    @Event() atuiCancel: EventEmitter<null>;\n    /**\n     * Emitted when the user submits the time selection\n     */\n    @Event() atuiSubmit: EventEmitter<TimeWithUnit | TimeRangeDisplay.ALL>;\n\n    handleCancel(): void {\n        this.atuiCancel.emit();\n    }\n\n    handleSubmit(): void {\n        if (this.errorText === '') {\n            this.atuiSubmit.emit(this.selectedTime);\n        }\n    }\n\n    handleSelectChange(event: CustomEvent): void {\n        const timeTranslationObject = this.translations.ATUI.TIME;\n        const newValue = event.detail;\n        this.timeUnit = (\n            this.translations\n                ? Object.keys(timeTranslationObject).find(\n                      (key) => timeTranslationObject[key] === newValue,\n                  )\n                : newValue\n        ) as TimeUnit;\n    }\n\n    render() {\n        return (\n            <div\n                class=\"flex w-panel-sm flex-col gap-16 border border-gray-300\"\n                onKeyUp={(event) =>\n                    (event.key === 'Enter' || event.key === ' ') &&\n                    this.handleSubmit()\n                }\n                tabindex={0}\n            >\n                <div class=\"flex flex-col gap-8 p-12\">\n                    <h5 class=\"text-h5 font-medium text-dark\">\n                        {this.translations.ATUI.TIME.SELECT_RELATIVE_TIME}\n                    </h5>\n                    <div class=\"flex flex-col gap-8\">\n                        <atui-input-numeric\n                            value={this.timeValue}\n                            onAtuiChange={(event) =>\n                                (this.timeValue = event.detail as number)\n                            }\n                        ></atui-input-numeric>\n                        <atui-select\n                            class=\"flex-fill\"\n                            value={this.translations.ATUI.TIME[this.timeUnit]}\n                            options={\n                                this.dropdownOptions\n                                    ? this.dropdownOptions.map(\n                                          (option) =>\n                                              this.translations.ATUI.TIME[\n                                                  option\n                                              ],\n                                      )\n                                    : null\n                            }\n                            onAtuiChange={(event) =>\n                                this.handleSelectChange(event)\n                            }\n                        />\n                    </div>\n\n                    {this.errorText ? (\n                        <Fragment>\n                            <span\n                                class=\"text-sm text-error\"\n                                data-name=\"time-with-unit-error\"\n                            >\n                                {this.errorText}\n                            </span>\n                            {this.secondaryErrorText && (\n                                <span\n                                    class=\"text-sm text-error\"\n                                    data-name=\"time-with-unit-error-secondary\"\n                                >\n                                    {this.secondaryErrorText}\n                                </span>\n                            )}\n                        </Fragment>\n                    ) : this.selectedTime !== TimeRangeDisplay.ALL ? (\n                        this.timeValue &&\n                        this.selectedTime?.unit && (\n                            <span class=\"text-sm font-normal text-med\">\n                                {this.startDate.toLocaleString()} ⁠— NOW\n                            </span>\n                        )\n                    ) : (\n                        this.selectedTime === TimeRangeDisplay.ALL && (\n                            <span class=\"text-sm font-normal text-med\">\n                                {this.translations.ATUI.TIME.ALL_TIME_LABEL}\n                            </span>\n                        )\n                    )}\n                </div>\n                {this.common_options && (\n                    <div class=\"flex flex-col gap-8 px-12\">\n                        <h5 class=\"text-h5 font-medium text-dark\">\n                            {this.translations.ATUI.TIME.COMMONLY_USED}\n                        </h5>\n                        <div\n                            class=\"columns-2\"\n                            data-name=\"time-with-unit-common-options\"\n                        >\n                            {this.common_options &&\n                                this.common_options.map((timerange) => (\n                                    <div\n                                        onClick={() =>\n                                            this.updateSelectedRange(timerange)\n                                        }\n                                        onKeyDown={(event) => {\n                                            event.stopPropagation();\n                                            if (\n                                                event.key === 'Enter' ||\n                                                event.key === ' '\n                                            )\n                                                this.updateSelectedRange(\n                                                    timerange,\n                                                );\n                                        }}\n                                        tabindex={0}\n                                        class={`${this.selectedTime !== TimeRangeDisplay.ALL && this.selectedTime?.value === timerange.value && this.selectedTime?.unit === timerange.unit ? 'bg-active-light px-4' : ''} cursor-pointer`}\n                                    >\n                                        <small>\n                                            {this.translations.ATUI.TIME.LAST}{' '}\n                                            {timerange.value}{' '}\n                                            {\n                                                this.translations.ATUI.TIME[\n                                                    timerange.unit\n                                                ]\n                                            }\n                                        </small>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>\n                )}\n                <footer class=\"flex justify-between p-8\">\n                    <atui-button\n                        type=\"secondaryOutline\"\n                        data-name=\"clear\"\n                        label={this.translations.ATUI.RESET}\n                        onAtuiClick={() => this.clearSelection()}\n                    ></atui-button>\n\n                    <div class=\"flex gap-8\">\n                        <atui-button\n                            type=\"secondaryOutline\"\n                            data-name=\"cancel\"\n                            label={this.translations.ATUI.CANCEL}\n                            onAtuiClick={() => this.handleCancel()}\n                        ></atui-button>\n                        <atui-button\n                            data-name=\"apply\"\n                            label={this.translations.ATUI.APPLY}\n                            onAtuiClick={() => this.handleSubmit()}\n                        ></atui-button>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\n"],"mappings":"wRA6BaA,EAAe,MAJ5B,WAAAC,CAAAC,G,kGAmCIC,KAAOC,QAAwB,GAevBD,KAAAE,cAAgB,eAAeC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,MAcvEN,KAAUO,WAAkB,EA8FvC,CA5FG,gBAAAC,GACIR,KAAKS,wB,CAGT,YAAAC,CAAaC,EAAeC,GACxBZ,KAAKW,MAAQA,EACbX,KAAKa,WAAWC,KAAKH,GACrBX,KAAKe,gBAAgBD,KAAKF,E,CAGtB,sBAAAH,GACJ,MAAMO,EAAehB,KAAKC,QAAQgB,MAC7BC,GAAWA,EAAOC,YAAcnB,KAAKW,QAE1C,GAAIK,EAAc,CACdhB,KAAKW,MAAQK,EAAaG,S,MACvB,GAAInB,KAAKC,QAAQmB,OAAS,EAAG,CAChCpB,KAAKW,MAAQX,KAAKC,QAAQ,GAAGkB,S,EAIrC,MAAAE,GACI,OACIC,EAACC,EAAI,CAAAC,IAAA,2CACDC,KAAK,aACY,kBAAAzB,KAAKE,cACtBwB,MAAO,6BAEPJ,EAAK,OAAAE,IAAA,2CAAAE,MAAM,iBACPJ,EAAM,QAAAE,IAAA,2CAAAG,KAAK,WACT3B,KAAK4B,OAAS5B,KAAK6B,YACjBP,EACI,mBAAAE,IAAA,2CAAAM,GAAI9B,KAAKE,cACT0B,MAAO5B,KAAK4B,MACZC,UAAW7B,KAAK6B,YAGvB7B,KAAK+B,WACFT,EAAA,QAAAE,IAAA,2CACIE,MAAM,qDACI,iCAET1B,KAAK+B,YAIlBT,EAAK,OAAAE,IAAA,2CAAAE,MAAM,kEACPJ,EAAA,MAAAE,IAAA,2CACIE,MAAM,sCAAqC,YACjC,wBAET1B,KAAKgC,gBACNV,EAAA,QAAAE,IAAA,+CAIPxB,KAAKiC,YACFX,EACI,QAAAE,IAAA,2CAAAE,MAAM,iCAAgC,YAC5B,2BAET1B,KAAKiC,Y,CAO1B,aAAAD,GACI,OAAOhC,KAAKC,QAAQiC,KAAI,CAAChB,EAAQN,IAC7BU,EACI,MAAAI,MAAO,2BAA2B1B,KAAKmC,SAAW,sBAAwB,KAC1EC,IAAMC,GAAQrC,KAAKO,WAAWK,GAASyB,GAEvCf,EACI,4BAAAH,UAAWD,EAAOC,UAClBS,MAAOV,EAAOU,MACdU,UAAWtC,KAAKW,QAAUO,EAAOC,UACjCgB,SAAUjB,EAAOiB,SACjBI,YAAa,IACTvC,KAAKU,aAAaQ,EAAOC,UAAWP,GAExC4B,UAAYC,IACR,GAAIA,EAAMjB,MAAQ,SAAWiB,EAAMjB,MAAQ,IAAK,CAC5CxB,KAAKU,aAAaQ,EAAOC,UAAWP,GACpC6B,EAAMC,gB,wCCtJrBC,EAA4B,MAJzC,WAAA7C,CAAAC,G,wFASIC,KAAY4C,aAAY,KAMxB5C,KAAW6C,YAAW,GAKG7C,KAAQ8C,SAASC,EAWjB/C,KAAQgD,SAAS,IAAIC,KAAKA,KAAKC,OA6E/BlD,KAAoBmD,qBAAG,MAEvCnD,KAAYoD,aAAG,KACfpD,KAAUqD,WAAG,KACbrD,KAAYsD,aAAG,MACftD,KAAUuD,WAAG,KAsWzB,CAjcG,eAAAC,CAAgBC,EAAgBC,GAC5B,GAAID,GAAYC,GAAYD,EAASE,YAAcD,EAASC,UACxD,OACJ3D,KAAK8C,SAAW9C,KAAK4D,aAAaH,E,CAQtC,eAAAI,CAAgBJ,EAAgBC,GAC5B,GAAID,GAAYC,GAAYD,EAASE,YAAcD,EAASC,UACxD,OACJ3D,KAAKgD,SAAWhD,KAAK8D,eAAeL,E,CAQxC,uBAAAM,CAAwBN,EAAgBC,GACpC,GAAID,GAAYC,GAAYD,EAASE,YAAcD,EAASC,UACxD,OACJ3D,KAAKgE,kBAAoBhE,KAAK4D,aAAaH,GAC3CzD,KAAKiE,gBAAkBjE,KAAKgE,iB,CAQhC,qBAAAE,CAAsBT,EAAuBC,GACzC,GAAID,GAAYC,GAAYD,EAASE,YAAcD,EAASC,UACxD,OACJ3D,KAAKmE,gBAAkBnE,KAAK8D,eAAeL,GAC3CzD,KAAKoE,cAAgBpE,KAAKmE,gBACpBnE,KAAKmE,gBACLnE,KAAKgD,Q,CAQf,qBAAAqB,CAAsBZ,EAAuBC,GACzC,GAAID,GAAYC,GAAYD,EAASE,YAAcD,EAASC,UACxD,OACJ,GAAI3D,KAAKiE,kBAAoBK,UACzBtE,KAAKiE,gBAAkB,IAAIhB,KAC/B,GACIjD,KAAKiE,gBAAgBM,gBACrBvE,KAAK4D,aAAaH,GAAUc,cAC9B,CACEvE,KAAKiE,gBAAkBR,GAAYzD,KAAK4D,aAAaH,E,CAEzDzD,KAAKwE,mBAAmBxE,KAAKiE,iBAC7BjE,KAAKyE,mB,CAQT,mBAAAC,CAAoBjB,EAAuBC,GACvC,GAAID,GAAYC,GAAYD,EAASE,YAAcD,EAASC,UACxD,OAEJ,GAAI3D,KAAKoE,gBAAkBE,UAAWtE,KAAKoE,cAAgB,IAAInB,KAC/D,GACIjD,KAAKoE,cAAcG,gBACnBvE,KAAK8D,eAAeL,GAAUc,cAChC,CACEvE,KAAKoE,cAAgBX,GAAYzD,KAAK8D,eAAeL,E,CAEzDzD,KAAK2E,iBAAiB3E,KAAKoE,eAC3BpE,KAAKyE,mB,CAsBT,uBAAMG,GACF5E,KAAK6E,mBAAqBC,EAAkB9E,KAAKqC,G,CAGrD,mBAAA0C,GACI,IAAK/E,KAAKgF,WAAahF,KAAKiF,SAAU,CAClCjF,KAAKiE,gBAAkBjE,KAAKgE,kBACtBhE,KAAKgE,kBACLhE,KAAK8C,Q,CAEf,IAAK9C,KAAKkF,SAAWlF,KAAKmF,OAAQ,CAC9BnF,KAAKoE,cAAgBpE,KAAKmE,gBACpBnE,KAAKmE,gBACLnE,KAAKgD,Q,EAInB,cAAAoC,GACIpF,KAAKiE,gBAAkBjE,KAAKgE,kBACtBhE,KAAKgE,kBACLhE,KAAK8C,SACX9C,KAAKoE,cAAgBpE,KAAKmE,gBACpBnE,KAAKmE,gBACLnE,KAAKgD,Q,CAGP,cAAAc,CAAeuB,GACnB,OAAOC,EAAaC,sBAAsBF,EAAMG,EAASC,M,CAGrD,YAAA7B,CAAayB,GACjB,OAAOC,EAAaI,oBAAoBL,EAAMG,EAASC,M,CAGnD,mBAAAE,GACJ,OAAOC,EAAyBC,qBAC5B7F,KAAKkF,OACLlF,KAAKmF,O,CAIL,qBAAAW,GACJ,OAAOF,EAAyBC,qBAC5B7F,KAAKgF,SACLhF,KAAKiF,S,CAIL,iBAAAR,GACJ,MAAMsB,EAAK/F,KAAK2F,sBAChB3F,KAAKuD,WAAa+B,EAAaU,iBAC3BD,EACA/F,KAAK8C,SACL0C,EAASS,MAEbjG,KAAKqD,WAAaiC,EAAaU,iBAC3BD,EACA/F,KAAKgD,SACLwC,EAASS,MAGb,MAAMC,EAAOlG,KAAK8F,wBAClB9F,KAAKoD,aAAekC,EAAaU,iBAC7BE,EACAlG,KAAK8C,SACL0C,EAASS,MAEbjG,KAAKsD,aAAegC,EAAaU,iBAC7BE,EACAlG,KAAKgD,SACLwC,EAASS,K,CAIP,UAAAE,GACN,MAAMC,EAAcpG,KAAKqG,iBAAiB1F,MAC1C,GAAIyF,EAAa,CACbpG,KAAKmD,qBAAuB,KAC5B,MAAMkC,EAAOrF,KAAK8D,eAAe,IAAIb,KAAKA,KAAKC,QAC/ClD,KAAKoE,cAAgBiB,C,KAClB,CACHrF,KAAKmD,qBAAuB,K,EAI5B,gBAAAwB,CAAiBO,GACrBlF,KAAKkF,OAASU,EAAyBU,iBACnCpB,EACA,cAEJlF,KAAKmF,OAASS,EAAyBU,iBACnCpB,EACA,U,CAIA,kBAAAV,CAAmBQ,GACvBhF,KAAKgF,SAAWY,EAAyBU,iBACrCtB,EACA,cAEJhF,KAAKiF,SAAWW,EAAyBU,iBACrCtB,EACA,U,CAIR,gBAAIuB,GACAvG,KAAKyE,oBAEL,GAAIzE,KAAKoD,aAAc,CACnB,OAAOwC,EAAyBY,eAC5BZ,EAAyBU,iBACrBtG,KAAK8C,SACL2D,EAAWC,Y,MAGhB,GAAI1G,KAAKsD,aAAc,CAC1B,MAAMqD,EAAcf,EAAyBU,iBACzChB,EAAasB,gBAAgB5G,KAAKgD,UAAU,EAAIwC,EAASC,OACzDgB,EAAWC,YAEf,OAAOd,EAAyBY,eAC5BlC,UACAqC,E,KAED,CACH,OAAOf,EAAyBY,gB,EAIxC,cAAIK,GACA7G,KAAKyE,oBAEL,GAAIzE,KAAKuD,WAAY,CACjB,MAAMuD,EAAYlB,EAAyBU,iBACvChB,EAAasB,gBAAgB5G,KAAK8C,SAAU,EAAG0C,EAASC,OACxDgB,EAAWC,YAEf,OAAOd,EAAyBY,eAAeM,E,MAC5C,GAAI9G,KAAKqD,WAAY,CACxB,OAAOuC,EAAyBY,eAC5BlC,UACAsB,EAAyBU,iBACrBtG,KAAKgD,SACLyD,EAAWC,Y,KAGhB,CACH,OAAOd,EAAyBY,gB,EAaxC,YAAAO,GACI/G,KAAKgH,WAAWlG,M,CAGpB,YAAAmG,GACI,GAAIC,EAAOlH,KAAKiE,iBAAiBkD,SAASD,EAAOlH,KAAKoE,gBAAiB,CACnEpE,KAAKoH,WAAWtG,KAAK,CACjBoF,KAAMN,EAAyBC,qBAC3B7F,KAAKgF,SACLhF,KAAKiF,UACPV,cACFwB,GAAIH,EAAyBC,qBACzB7F,KAAKkF,OACLlF,KAAKmF,QACPZ,cACF8C,iBAAkBrH,KAAKmD,sB,EAKnC,MAAA9B,GACI,OACIC,EAAA,OAAAE,IAAA,2CAAKE,MAAM,oDACPJ,EAAA,MAAAE,IAAA,2CAAIE,MAAM,sCACL1B,KAAK6E,aAAayC,KAAKC,KAAKC,sBAEjClG,EAAK,OAAAE,IAAA,2CAAAE,MAAM,8BACPJ,EAAK,OAAAE,IAAA,2CAAAE,MAAM,iCACPJ,EAAA,OAAAE,IAAA,4CACIF,EACK,SAAAE,IAAA,4CAAAxB,KAAK6E,aAAayC,KAAKC,KAAKE,WAEjCnG,EAAA,OAAAE,IAAA,4CACIF,EACI,SAAAE,IAAA,2CAAAkG,KAAK,OACL/F,KAAK,SACLD,MAAM,iBACNiG,IAAK/B,EAAyBU,iBAC1BtG,KAAK8C,SACL,cAEJ8E,IAAKhC,EAAyBU,iBAC1BtG,KAAKgD,SACL,cAEJrC,MAAOX,KAAKgF,SACZ6C,SAAWpF,IACPzC,KAAKiE,gBACD2B,EAAyBC,qBAEjBpD,EAAMqF,OACRnH,MACFX,KAAKiF,UAEbjF,KAAK2E,iBACD3E,KAAKoE,cACR,MAKhBpE,KAAK4C,cACFtB,EAAA,OAAAE,IAAA,4CACIF,EACK,SAAAE,IAAA,4CAAAxB,KAAK6E,aAAayC,KAAKC,KAAKQ,WAEjCzG,EAAA,OAAAE,IAAA,4CACIF,EAAA,eAAAE,IAAA,2CACIvB,QAASD,KAAKuG,aACd5F,MAAOX,KAAKiF,SACZ+C,aAAevF,IACXzC,KAAKiE,gBACD2B,EAAyBC,qBACrB7F,KAAKgF,SACLvC,EAAMwF,OACT,OAO7B3G,EAAK,OAAAE,IAAA,2CAAAE,MAAM,iCACPJ,EAAA,OAAAE,IAAA,4CACIF,EAAQ,SAAAE,IAAA,4CAAAxB,KAAK6E,aAAayC,KAAKC,KAAKW,SACpC5G,EAAA,OAAAE,IAAA,4CACIF,EAAA,SAAAE,IAAA,2CACIkG,KAAK,OACL/F,KAAK,OACLD,MAAM,iBACNS,SAAUnC,KAAKmD,qBACfwE,IAAK/B,EAAyBU,iBAC1BtG,KAAK8C,SACL,cAEJ8E,IAAKhC,EAAyBU,iBAC1BtG,KAAKgD,SACL,cAEJrC,MAAOX,KAAKkF,OACZ9C,IAAMC,GAAQrC,KAAKmI,eAAiB9F,EACpCwF,SAAWpF,IACPzC,KAAKoE,cACDwB,EAAyBC,qBAEjBpD,EAAMqF,OACRnH,MACFX,KAAKmF,QAEbnF,KAAK2E,iBACD3E,KAAKoE,cACR,MAKhBpE,KAAK4C,cACFtB,EAAA,OAAAE,IAAA,4CACIF,EACK,SAAAE,IAAA,4CAAAxB,KAAK6E,aAAayC,KAAKC,KAAKa,SAEjC9G,EAAA,OAAAE,IAAA,4CACIF,EAAA,eAAAE,IAAA,2CACIvB,QAASD,KAAK6G,WACdlG,MAAOX,KAAKmF,OACZhD,SAAUnC,KAAKmD,qBACff,IAAMC,GAAQrC,KAAKqI,eAAiBhG,EACpC2F,aAAevF,IACXzC,KAAKoE,cACDwB,EAAyBC,qBACrB7F,KAAKkF,OACLzC,EAAMwF,OACT,QAQjC3G,EAAK,OAAAE,IAAA,2CAAAE,MAAM,0EACPJ,EAAK,OAAAE,IAAA,2CAAAE,MAAM,iBACPJ,EAAO,SAAAE,IAAA,2CAAAE,MAAM,iBAEL1B,KAAK6E,aAAayC,KAAKC,KAClBe,8BAGbhH,EAAM,QAAAE,IAAA,2CAAAE,MAAM,oBAEJ1B,KAAK6E,aAAayC,KAAKC,KAClBgB,2CAIjBjH,EAAA,sBAAAE,IAAA,2CACIb,MAAOX,KAAKmD,qBACZ0E,SAAU,IAAM7H,KAAKmG,aACrB/D,IAAMC,GAAQrC,KAAKqG,iBAAmBhE,KAG9Cf,EAAK,OAAAE,IAAA,2CAAAE,MAAM,qCACPJ,EACI,eAAAE,IAAA,2CAAAkG,KAAK,mBACK,sCACV9F,MAAO5B,KAAK6E,aAAayC,KAAKkB,gBAC9BC,QAAS,IAAMzI,KAAKoF,mBAExB9D,EAAK,OAAAE,IAAA,2CAAAE,MAAM,uBACPJ,EACI,eAAAE,IAAA,2CAAAkG,KAAK,mBACK,uCACV9F,MAAO5B,KAAK6E,aAAayC,KAAKoB,OAC9BD,QAAS,IAAMzI,KAAK+G,iBAExBzF,EACc,eAAAE,IAAA,iFACVI,MAAO5B,KAAK6E,aAAayC,KAAKqB,MAC9BF,QAAS,IAAMzI,KAAKiH,mB,iSC5cnC2B,EAAyB,MAJtC,WAAA9I,CAAAC,G,wFAqBIC,KAAQ8C,SAAS,KAMjB9C,KAAW6C,YAAG,GAMd7C,KAAA6I,YAAsBC,OAAOC,iBAY7B/I,KAAoBgJ,qBAAG,KAMvBhJ,KAAaiJ,cAAG,MAEPjJ,KAASkJ,UAAW,GACpBlJ,KAAkBmJ,mBAAW,EA4SzC,CAvSG,cAAAC,GACIpJ,KAAKqJ,mBAAmBrJ,KAAKsJ,U,CAIjC,aAAAC,GACIvJ,KAAKqJ,mBAAmBrJ,KAAKsJ,U,CAMjC,uBAAM1E,GACF5E,KAAK6E,mBAAqBC,EAAkB9E,KAAKqC,G,CAGrD,mBAAA0C,GACI,IAAK/E,KAAKwJ,aAAc,CACpBxJ,KAAKyJ,iBAAiBzJ,KAAK0J,uBAC3B1J,KAAK2J,qB,EAIL,mBAAAA,GACJ3J,KAAK4J,gBAAkB5J,KAAKiJ,cACtB,CAACY,EAAiBC,OAAQ9J,KAAK+J,OAC/B/J,KAAK+J,K,CAGP,gBAAAN,CACJO,G,MAEA,MAAMC,SACKD,IAAqB,SACtB1E,EAAa4E,wBACTF,EAAiBC,KACjBjK,KAAK+J,OAETF,EAAiBC,IAC3B,MAAMnJ,SACKqJ,IAAqB,SACtBA,EAAiBrJ,MACjB,KAEVX,KAAKmK,SAAWF,EAChBjK,KAAKsJ,UAAY3I,EACjBX,KAAKwJ,aAAeQ,EACpBhK,KAAKoK,WAAYC,EAAArK,KAAKsK,qBAAmB,MAAAD,SAAA,SAAAA,EAAAD,S,CAG7C,kBAAAf,CAAmB1I,G,MACf,MAAMsJ,EAAOjK,KAAKmK,SAElB,GAAIF,IAASJ,EAAiBC,IAAK,CAC/B9J,KAAKwJ,aAAe,CAAES,OAAMtJ,Q,KACzB,CACHX,KAAKwJ,aAAee,EAAiBT,IACrC,GAAI9J,KAAKsJ,UAAW,CAChBtJ,KAAKsJ,UAAY,I,EAGzBtJ,KAAKwK,gBACLxK,KAAKoK,WAAYC,EAAArK,KAAKsK,qBAAmB,MAAAD,SAAA,SAAAA,EAAAD,S,CAG7C,aAAAI,GACI,GAAIxK,KAAKwJ,eAAiBe,EAAiBT,IAAK,CAC5C,MAAMW,EAAazK,KAAK8C,SAClBwC,EAAaoF,sBAAsB1K,KAAK8C,UACxC9C,KAAK6I,YACX,MAAM8B,EAAerF,EAAasF,qBAC9BH,EACAzK,KAAKmK,SACL,EACA,MAEJ,MAAMU,EAAevF,EAAasF,qBAC9B5K,KAAK6C,YACL7C,KAAKmK,SACL,EACA,OAEJ,GAAInK,KAAKsJ,UAAYqB,EACjB3K,KAAKkJ,UAAYlJ,KAAK6E,aAChB7E,KAAK6E,aAAayC,KAAKC,KAAKuD,WAAWC,WAAWC,QAC9C,mBACA,GAAGL,EAAe,KAAK3K,KAAKmK,YAEhC,mCAAmCQ,KAAgB3K,KAAKmK,gBAC7D,GAAInK,KAAKsJ,UAAYuB,EACtB7K,KAAKkJ,UAAYlJ,KAAK6E,aAChB7E,KAAK6E,aAAayC,KAAKC,KAAKuD,WAAWG,WAAWD,QAC9C,QACA,GAAGL,KAAgB3K,KAAKmK,YAE5B,oCAAoCU,KAAgB7K,KAAKmK,gBAC9DnK,KAAKkJ,UAAY,GACtB,GAAIlJ,KAAKkJ,WAAalJ,KAAKgJ,qBAAsB,CAC7ChJ,KAAKmJ,mBAAqBnJ,KAAKgJ,oB,GAK3C,mBAAAkC,CAAoBvK,GAChBX,KAAKmK,SAAWxJ,EAAMsJ,KACtBjK,KAAKsJ,UAAY3I,EAAMA,MACvBX,KAAKwJ,aAAe7I,C,CAGxB,eAAA2J,GACI,UAAWtK,KAAKwJ,eAAiB,SAAU,CACvC,OAAOlE,EAAa6F,qBAAqBnL,KAAKwJ,a,EAItD,cAAApE,GACI,UAAWpF,KAAK0J,wBAA0B,SAAU,CAChD1J,KAAKsJ,UAAYtJ,KAAK0J,sBAAsB/I,MAC5CX,KAAKmK,SAAWnK,KAAK0J,sBAAsBO,I,KACxC,CACHjK,KAAKsJ,UAAY,KACjBtJ,KAAKmK,SAAWN,EAAiBC,G,EAazC,YAAA/C,GACI/G,KAAKgH,WAAWlG,M,CAGpB,YAAAmG,GACI,GAAIjH,KAAKkJ,YAAc,GAAI,CACvBlJ,KAAKoH,WAAWtG,KAAKd,KAAKwJ,a,EAIlC,kBAAA4B,CAAmB3I,GACf,MAAM4I,EAAwBrL,KAAK6E,aAAayC,KAAKC,KACrD,MAAM9D,EAAWhB,EAAMwF,OACvBjI,KAAKmK,SACDnK,KAAK6E,aACCyG,OAAOC,KAAKF,GAAuBpK,MAC9BO,GAAQ6J,EAAsB7J,KAASiC,IAE5CA,C,CAId,MAAApC,G,MACI,OACIC,EACI,OAAAE,IAAA,2CAAAE,MAAM,yDACN8J,QAAU/I,IACLA,EAAMjB,MAAQ,SAAWiB,EAAMjB,MAAQ,MACxCxB,KAAKiH,eAETwE,SAAU,GAEVnK,EAAK,OAAAE,IAAA,2CAAAE,MAAM,4BACPJ,EAAA,MAAAE,IAAA,2CAAIE,MAAM,iCACL1B,KAAK6E,aAAayC,KAAKC,KAAKmE,sBAEjCpK,EAAK,OAAAE,IAAA,2CAAAE,MAAM,uBACPJ,EACI,sBAAAE,IAAA,2CAAAb,MAAOX,KAAKsJ,UACZtB,aAAevF,GACVzC,KAAKsJ,UAAY7G,EAAMwF,SAGhC3G,EACI,eAAAE,IAAA,2CAAAE,MAAM,YACNf,MAAOX,KAAK6E,aAAayC,KAAKC,KAAKvH,KAAKmK,UACxClK,QACID,KAAK4J,gBACC5J,KAAK4J,gBAAgB1H,KAChBhB,GACGlB,KAAK6E,aAAayC,KAAKC,KACnBrG,KAGZ,KAEV8G,aAAevF,GACXzC,KAAKoL,mBAAmB3I,MAKnCzC,KAAKkJ,UACF5H,EAACqK,EAAQ,KACLrK,EACI,QAAAI,MAAM,qBAAoB,YAChB,wBAET1B,KAAKkJ,WAETlJ,KAAKmJ,oBACF7H,EAAA,QACII,MAAM,qBAAoB,YAChB,kCAET1B,KAAKmJ,qBAIlBnJ,KAAKwJ,eAAiBe,EAAiBT,IACvC9J,KAAKsJ,aACLe,EAAArK,KAAKwJ,gBAAc,MAAAa,SAAA,SAAAA,EAAAJ,OACf3I,EAAA,QAAMI,MAAM,gCACP1B,KAAKoK,UAAUwB,iBACb,WAGX5L,KAAKwJ,eAAiBe,EAAiBT,KACnCxI,EAAA,QAAMI,MAAM,gCACP1B,KAAK6E,aAAayC,KAAKC,KAAKsE,iBAK5C7L,KAAK8L,gBACFxK,EAAK,OAAAE,IAAA,2CAAAE,MAAM,6BACPJ,EAAA,MAAAE,IAAA,2CAAIE,MAAM,iCACL1B,KAAK6E,aAAayC,KAAKC,KAAKwE,eAEjCzK,EACI,OAAAE,IAAA,2CAAAE,MAAM,YAAW,YACP,iCAET1B,KAAK8L,gBACF9L,KAAK8L,eAAe5J,KAAK8J,I,QAAc,OACnC1K,EACI,OAAAmH,QAAS,IACLzI,KAAKkL,oBAAoBc,GAE7BxJ,UAAYC,IACRA,EAAMwJ,kBACN,GACIxJ,EAAMjB,MAAQ,SACdiB,EAAMjB,MAAQ,IAEdxB,KAAKkL,oBACDc,EACH,EAETP,SAAU,EACV/J,MAAO,GAAG1B,KAAKwJ,eAAiBe,EAAiBT,OAAOO,EAAArK,KAAKwJ,gBAAc,MAAAa,SAAA,SAAAA,EAAA1J,SAAUqL,EAAUrL,SAASuL,EAAAlM,KAAKwJ,gBAAY,MAAA0C,SAAA,SAAAA,EAAEjC,QAAS+B,EAAU/B,KAAO,uBAAyB,qBAE9K3I,EAAA,aACKtB,KAAK6E,aAAayC,KAAKC,KAAK4E,KAAM,IAClCH,EAAUrL,MAAO,IAEdX,KAAK6E,aAAayC,KAAKC,KACnByE,EAAU/B,OAIpB,MAK1B3I,EAAQ,UAAAE,IAAA,2CAAAE,MAAM,4BACVJ,EACI,eAAAE,IAAA,2CAAAkG,KAAK,mBACK,oBACV9F,MAAO5B,KAAK6E,aAAayC,KAAK8E,MAC9B7J,YAAa,IAAMvC,KAAKoF,mBAG5B9D,EAAK,OAAAE,IAAA,2CAAAE,MAAM,cACPJ,EACI,eAAAE,IAAA,2CAAAkG,KAAK,mBACK,qBACV9F,MAAO5B,KAAK6E,aAAayC,KAAKoB,OAC9BnG,YAAa,IAAMvC,KAAK+G,iBAE5BzF,EACc,eAAAE,IAAA,+DACVI,MAAO5B,KAAK6E,aAAayC,KAAKqB,MAC9BpG,YAAa,IAAMvC,KAAKiH,mB","ignoreList":[]}