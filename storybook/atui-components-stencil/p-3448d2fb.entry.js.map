{"version":3,"names":["AtuiTextStatusCellComponent","constructor","hostRef","this","type","showSimpleText","init","params","value","setCellData","getGui","el","refresh","_","badgeType","mapValueToBadgeType","text","mapValueToText","checkShouldShowSimpleText","mapValueToStatus","render","h","Host","key","class","generateTooltip","position","slot","label","_a","tooltipClass"],"sources":["src/components/table-components/cell-components/atui-text-status-cell/atui-text-status-cell.tsx"],"sourcesContent":["import { Component, h, State, Element, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport type { ITooltipCell } from '../../../../types';\nimport { BadgeType } from '../../../atui-badge/atui-badge';\n\nexport interface TextStatusCellData {\n    value: 'active' | 'warning' | 'error' | 'default' | string;\n    tooltip?: string;\n}\n\nexport interface ITextStatusCellParams extends ITooltipCell {\n    mapValueToText?: (value: any) => string;\n    mapValueToStatus?: (value: any) => string | 'default';\n    showSimpleText?: boolean;\n    checkShouldShowSimpleText?: (value: any) => boolean; // can either show status span or plain text\n\n    // This is a function where you want to transform a text into something\n    // I have a situation where the value is a number, and i need to compare\n    // that number first to something, apply some things and now transform it\n    // into a certain string. e.g value: 50, textTransformed to '50ms'\n    textTransform?: (params: ICellRendererParams, value: string) => string;\n    useIconHeaderTooltip?: boolean;\n}\n\nexport interface TextStatusValueParam {\n    status: string;\n}\n\ninterface InitParams extends ITextStatusCellParams, ICellRendererParams {}\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with a status.\n */\n\n@Component({\n    tag: 'atui-text-status-cell',\n    shadow: false,\n})\nexport class AtuiTextStatusCellComponent implements ICellRendererComp {\n    @Element() el;\n    @State() params: InitParams;\n    @State() text: string;\n    @State() type: BadgeType = 'default';\n    @State() showSimpleText = false;\n\n    init(params: InitParams) {\n        const { value } = params;\n\n        if (!value) return;\n\n        this.setCellData(params, value);\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(_: InitParams): boolean {\n        return true;\n    }\n\n    private setCellData(params: InitParams, value: string) {\n        this.params = params;\n        const badgeType = this.mapValueToBadgeType(params, value as BadgeType);\n\n        this.text = params.mapValueToText\n            ? params.mapValueToText(value)\n            : value;\n        if (params.checkShouldShowSimpleText)\n            this.showSimpleText = params.checkShouldShowSimpleText(value);\n\n        this.type = badgeType as BadgeType;\n    }\n\n    private mapValueToBadgeType(params: InitParams, value: BadgeType) {\n        const badgeType =\n            params.mapValueToStatus && params.mapValueToStatus(value);\n        return badgeType || 'default';\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                {this.showSimpleText && this.params && (\n                    <span class=\"truncate text-sm\">{this.text}</span>\n                )}\n                {!this.showSimpleText &&\n                    this.params &&\n                    (this.params.generateTooltip ? (\n                        <atui-tooltip position=\"right\">\n                            <atui-badge\n                                slot=\"tooltip-trigger\"\n                                type={this.type}\n                                label={this.text}\n                            />\n                            <span\n                                class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                            >\n                                {this.params.generateTooltip(this.params)}\n                            </span>\n                        </atui-tooltip>\n                    ) : (\n                        <atui-badge\n                            type={this.type}\n                            label={this.text}\n                        />\n                    ))}\n            </Host>\n        );\n    }\n}\n"],"mappings":"+DAsCaA,EAA2B,MAJxC,WAAAC,CAAAC,G,UAQaC,KAAIC,KAAc,UAClBD,KAAcE,eAAG,KAmE7B,CAjEG,IAAAC,CAAKC,GACD,MAAMC,MAAEA,GAAUD,EAElB,IAAKC,EAAO,OAEZL,KAAKM,YAAYF,EAAQC,E,CAG7B,MAAAE,GACI,OAAOP,KAAKQ,E,CAGhB,OAAAC,CAAQC,GACJ,OAAO,I,CAGH,WAAAJ,CAAYF,EAAoBC,GACpCL,KAAKI,OAASA,EACd,MAAMO,EAAYX,KAAKY,oBAAoBR,EAAQC,GAEnDL,KAAKa,KAAOT,EAAOU,eACbV,EAAOU,eAAeT,GACtBA,EACN,GAAID,EAAOW,0BACPf,KAAKE,eAAiBE,EAAOW,0BAA0BV,GAE3DL,KAAKC,KAAOU,C,CAGR,mBAAAC,CAAoBR,EAAoBC,GAC5C,MAAMM,EACFP,EAAOY,kBAAoBZ,EAAOY,iBAAiBX,GACvD,OAAOM,GAAa,S,CAGxB,MAAAM,G,MACI,OACIC,EAACC,EAAK,CAAAC,IAAA,2CAAAC,MAAM,4BACPrB,KAAKE,gBAAkBF,KAAKI,QACzBc,EAAM,QAAAE,IAAA,2CAAAC,MAAM,oBAAoBrB,KAAKa,OAEvCb,KAAKE,gBACHF,KAAKI,SACJJ,KAAKI,OAAOkB,gBACTJ,EAAA,gBAAcK,SAAS,SACnBL,EAAA,cACIM,KAAK,kBACLvB,KAAMD,KAAKC,KACXwB,MAAOzB,KAAKa,OAEhBK,EACI,QAAAG,MAAO,IAAGK,EAAA1B,KAAKI,OAAOuB,gBAAY,MAAAD,SAAA,EAAAA,EAAI,qBAErC1B,KAAKI,OAAOkB,gBAAgBtB,KAAKI,UAI1Cc,EACI,cAAAjB,KAAMD,KAAKC,KACXwB,MAAOzB,KAAKa,Q","ignoreList":[]}