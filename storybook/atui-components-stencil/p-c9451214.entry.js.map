{"version":3,"names":["atuiSidePanelCss","panelVariants","base","origin","left","right","isExpanded","fixed","true","false","noScrollbar","sizeVariants","size","xs","sm","md","lg","xl","AtuiSidePanelComponent","constructor","hostRef","this","has_scrollbar","has_close_button","close_backdrop","backdrop","triggerEls","externalTriggerListeners","handleClose","closeSidePanel","handleDialogClose","event","preventDefault","handleKeyDown","key","toggleSidePanel","openSidePanel","panelDialog","open","showModal","classList","add","close","remove","offClickHandler","_a","_b","sidePanelWrapper","contains","target","componentDidLoad","trigger_id","Array","from","document","querySelectorAll","length","console","warn","setupExternalTriggerListeners","disconnectedCallback","cleanupExternalTriggerListeners","forEach","element","handler","removeEventListener","clickHandler","async","stopPropagation","keydownHandler","el","addEventListener","push","render","h","id","panel_id","ref","class","onClose","onKeyDown","panelClasses","sizeClasses","header_title","panel_title","subtitle","panel_subtitle","slot","onClick"],"sources":["src/components/atui-side-panel/atui-side-panel.scss?tag=atui-side-panel","src/components/atui-side-panel/atui-side-panel.tsx"],"sourcesContent":["@use '../../styles/shared/backdrop';\n","import {\n    Component,\n    Prop,\n    h,\n    State,\n    Listen,\n    Method,\n    Element,\n} from '@stencil/core';\n\nexport type SidePanelDirection = 'left' | 'right';\nexport type SidePanelSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nconst panelVariants = {\n    base: 'z-nav !fixed h-full min-w-panel-xs bg-white transition-transform shadow-md',\n    origin: {\n        left: 'left-0 top-0',\n        right: 'right-0 top-0',\n    },\n    isExpanded:\n        'border-l-med border-l-2 transition-transform duration-[300ms] ease-[cubic-bezier(0.455,0.03,0.515,0.955)]',\n    fixed: {\n        true: 'fixed h-full top-0',\n        false: 'absolute h-full',\n    },\n    noScrollbar: 'overflow-y-hidden',\n};\n\nconst sizeVariants = {\n    base: 'overflow-x-hidden overflow-y-auto h-full flex flex-col',\n    size: {\n        xs: 'w-panel-xs',\n        sm: 'w-panel-sm',\n        md: 'w-panel-md',\n        lg: 'w-panel-lg',\n        xl: 'w-panel-xl',\n    },\n};\n\n/**\n * @category Overlays\n * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.\n *\n * @slot default - Used for placing the content of the side panel.\n */\n@Component({\n    tag: 'atui-side-panel',\n    styleUrl: 'atui-side-panel.scss',\n    shadow: false,\n})\nexport class AtuiSidePanelComponent {\n    @Element() el!: HTMLAtuiSidePanelElement;\n\n    /**\n     * Size of the size panel\n     */\n    @Prop()\n    size: SidePanelSize = 'xs';\n\n    /**\n     * ID of the panel\n     */\n    @Prop()\n    panel_id: string;\n\n    /**\n     * Title displayed in the side panel\n     */\n    @Prop()\n    panel_title: string;\n\n    /**\n     * Subtitle displayed in the side panel\n     */\n    @Prop()\n    panel_subtitle: string;\n\n    /**\n     *  Position of the side panel\n     */\n    @Prop()\n    origin: SidePanelDirection = 'right';\n\n    /**\n     * Puts a scrollbar on the sidepanel if set\n     */\n    @Prop()\n    has_scrollbar: boolean = true;\n\n    /**\n     * Displays a close button if set\n     */\n    @Prop()\n    has_close_button: boolean = true;\n\n    /**\n     * Will close the sidepanel if clicked off when set\n     */\n    @Prop()\n    close_backdrop: boolean = false;\n\n    /**\n     * If sidepanel should used fixed positioning (otherwise absolute)\n     */\n    @Prop()\n    fixed = true;\n\n    /**\n     * Whether to show a backdrop behind the panel\n     */\n    @Prop()\n    backdrop: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the side panel.\n     */\n    @Prop() trigger_id?: string;\n\n    @State()\n    isExpanded = false;\n\n    private sidePanelWrapper: HTMLElement;\n    private panelDialog: HTMLDialogElement;\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the side panel between open and closed states\n     * @returns Promise that resolves when the panel state is toggled\n     */\n    @Method()\n    async toggleSidePanel(): Promise<void> {\n        if (this.isExpanded) {\n            await this.closeSidePanel();\n        } else {\n            await this.openSidePanel();\n        }\n    }\n\n    /**\n     * Opens the side panel\n     * @returns Promise that resolves when the panel is opened\n     */\n    @Method()\n    async openSidePanel(): Promise<void> {\n        if (this.panelDialog && !this.panelDialog.open) {\n            this.panelDialog.showModal();\n            this.isExpanded = true;\n            if (this.backdrop) {\n                this.panelDialog.classList.add('backdrop');\n            }\n        }\n    }\n\n    /**\n     * Closes the side panel\n     * @returns Promise that resolves when the panel is closed\n     */\n    @Method()\n    async closeSidePanel(): Promise<void> {\n        if (this.panelDialog && this.panelDialog.open) {\n            this.panelDialog.close();\n            this.isExpanded = false;\n            this.panelDialog.classList.remove('backdrop');\n        }\n    }\n\n    private handleClose = () => {\n        this.closeSidePanel();\n    };\n\n    private handleDialogClose = (event: Event) => {\n        event.preventDefault();\n        if (this.isExpanded) {\n            this.closeSidePanel();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isExpanded) {\n            event.preventDefault();\n            this.closeSidePanel();\n        }\n    };\n\n    @Listen('mousedown', { target: 'document' })\n    offClickHandler(event: any) {\n        if (!this.close_backdrop || !this.panelDialog?.open) return;\n        if (!this.sidePanelWrapper?.contains(event.target)) {\n            this.handleClose();\n        }\n    }\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-id=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-side-panel: No elements found with data-id=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleSidePanel();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleSidePanel();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <dialog\n                    id={this.panel_id}\n                    ref={(el) => (this.panelDialog = el)}\n                    class={this.backdrop ? 'backdrop' : ''}\n                    onClose={this.handleDialogClose}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    <div\n                        class={`${this.panelClasses} ${this.sizeClasses}`}\n                        ref={(el) => (this.sidePanelWrapper = el)}\n                        data-name=\"panel-wrapper\"\n                    >\n                        <div class={'z-nav sticky top-0'}>\n                            <atui-header\n                                header_title={this.panel_title}\n                                subtitle={this.panel_subtitle}\n                            >\n                                {this.has_close_button && (\n                                    <span\n                                        class={'rounded-full hover:bg-gray-100'}\n                                        slot={'actions'}\n                                    >\n                                        <i\n                                            class=\"material-icons md-16 top-20 right-16 cursor-pointer p-8 !text-[18px]\"\n                                            onClick={this.handleClose}\n                                            data-name=\"panel-close\"\n                                        >\n                                            close\n                                        </i>\n                                    </span>\n                                )}\n                            </atui-header>\n                        </div>\n\n                        <div class={'flex w-full flex-1 flex-col'}>\n                            <slot />\n                        </div>\n                    </div>\n                </dialog>\n            </div>\n        );\n    }\n\n    get panelClasses(): string {\n        return `${panelVariants.base} ${panelVariants.origin[this.origin]} ${this.isExpanded ? panelVariants.isExpanded : ''} \n        ${this.fixed ? panelVariants.fixed.true : panelVariants.fixed.false} ${!this.has_scrollbar ? panelVariants.noScrollbar : ''}`;\n    }\n\n    get sizeClasses(): string {\n        return `${sizeVariants.base} ${sizeVariants.size[this.size]}`;\n    }\n}\n"],"mappings":"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","ignoreList":[]}