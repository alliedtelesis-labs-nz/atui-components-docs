{"version":3,"names":["min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","value","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","yAxisSides","Set","getSideAxis","has","getAlignmentAxis","getAlignmentSides","rects","rtl","alignment","alignmentAxis","length","mainAlignmentSide","reference","floating","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","replace","lrPlacement","rlPlacement","tbPlacement","btPlacement","getSideList","side","isStart","getOppositeAxisPlacements","flipAlignment","direction","list","map","concat","expandPaddingObject","padding","getPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","sideAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","computePosition","async","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","flip","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","detectOverflowOptions","arrow","alignmentOffset","initialSideAxis","isBasePlacement","hasFallbackAxisSideDirection","push","placements","overflow","overflows","overflowsData","sides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","ignoreCrossAxisOverflow","d","resetPlacement","sort","a","b","_overflowsData$filter2","currentSideAxis","reduce","acc","originSides","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","offset","_middlewareData$offse","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","enabled","size","_state$middlewareData","_state$middlewareData2","apply","isYAxis","heightSide","widthSide","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions","getDimensions","hasWindow","window","getNodeName","node","isNode","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","invalidOverflowDisplayValues","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","tableElements","isTableElement","topLayerSelectors","isTopLayer","some","selector","matches","_e","transformProperties","willChangeValues","containValues","isContainingBlock","elementOrCss","webkit","isWebKit","css","containerType","backdropFilter","willChange","includes","contain","getContainingBlock","currentNode","getParentNode","isLastTraversableNode","CSS","supports","lastTraversableNodeNames","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","body","getOverflowAncestors","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","shouldAddVisualOffsets","isFixed","floatingOffsetParent","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getHTMLOffset","scroll","ignoreScrollbarX","htmlRect","topLayer","offsets","isOffsetParentAnElement","offsetRect","htmlOffset","getClientRects","Array","from","getDocumentRect","html","scrollWidth","clientWidth","scrollHeight","clientHeight","getViewportRect","visualViewportBased","absoluteOrFixed","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","position","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","ancestor","set","elementClippingAncestors","this","_c","clippingAncestors","firstClippingAncestor","clippingRect","accRect","getRectRelativeToOffsetParent","setLeftRTLScrollbarOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","getOffsetParentFn","getDimensionsFn","floatingDimensions","rectsAreEqual","observeMove","onMove","io","timeoutId","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","insetTop","insetRight","insetBottom","insetLeft","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","IntersectionObserver","observe","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","frameId","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset$1","shift$1","flip$1","size$1","Map","mergedOptions","platformWithCache","computePosition$1","AtuiMenu","constructor","hostRef","offset_x","offset_y","align","autoclose","trigger","role","disabled","isOpen","updatePosition","triggerEl","menuEl","updateFloatingPosition","disabledChanged","newValue","closeMenu","toggleMenu","togglePopover","atuiMenuStateChange","emit","openMenu","showPopover","hidePopover","getIsOpen","componentDidLoad","popoverId","random","toString","substr","setupFloatingUI","setupPopoverEventListeners","event","customEvent","newState","disconnectedCallback","cleanupFloatingUI","mouseEnterHandler","timedOutCloser","mouseLeaveHandler","cleanupAutoUpdate","observer","isIntersecting","getFloatingUIPlacement","assign","style","maxWidth","maxHeight","then","styles","margin","transform","originalCleanup","undefined","positionMap","alignMap","render","popoverAttrs","popover","id","triggerAttrs","h","Host","key","class","onBlur","ref","onMouseEnter","onKeyDown","preventDefault","onMouseLeave","onClick","stopPropagation"],"sources":["../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","src/components/atui-menu/atui-menu.tsx"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nconst yAxisSides = /*#__PURE__*/new Set(['top', 'bottom']);\nfunction getSideAxis(placement) {\n  return yAxisSides.has(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nconst lrPlacement = ['left', 'right'];\nconst rlPlacement = ['right', 'left'];\nconst tbPlacement = ['top', 'bottom'];\nconst btPlacement = ['bottom', 'top'];\nfunction getSideList(side, isStart, rtl) {\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rlPlacement : lrPlacement;\n      return isStart ? lrPlacement : rlPlacement;\n    case 'left':\n    case 'right':\n      return isStart ? tbPlacement : btPlacement;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => getSideAxis(d.placement) === initialSideAxis ? d.overflows[0] > 0 : true)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nconst originSides = /*#__PURE__*/new Set(['left', 'top']);\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = originSides.has(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = originSides.has(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nconst invalidOverflowDisplayValues = /*#__PURE__*/new Set(['inline', 'contents']);\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);\n}\nconst tableElements = /*#__PURE__*/new Set(['table', 'td', 'th']);\nfunction isTableElement(element) {\n  return tableElements.has(getNodeName(element));\n}\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(element) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (_e) {\n      return false;\n    }\n  });\n}\nconst transformProperties = ['transform', 'translate', 'scale', 'rotate', 'perspective'];\nconst willChangeValues = ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'];\nconst containValues = ['paint', 'layout', 'strict', 'content'];\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return transformProperties.some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || willChangeValues.some(value => (css.willChange || '').includes(value)) || containValues.some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nconst lastTraversableNodeNames = /*#__PURE__*/new Set(['html', 'body', '#document']);\nfunction isLastTraversableNode(node) {\n  return lastTraversableNodeNames.has(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, arrow as arrow$1, autoPlacement as autoPlacement$1, detectOverflow as detectOverflow$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nconst absoluteOrFixed = /*#__PURE__*/new Set(['absolute', 'fixed']);\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n  // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n","import {\n    Component,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n    Method,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport {\n    computePosition,\n    flip,\n    shift,\n    offset,\n    size,\n    autoUpdate,\n    type Placement,\n} from '@floating-ui/dom';\n\n/**\n * @category Actions\n * @description A versatile menu component for actions with keyboard support and positioning. Features auto-open behavior, customizable triggers, and accessible menu item management.\n */\n\nexport type Position = 'top' | 'bottom' | 'left' | 'right';\nexport type Align = 'start' | 'end';\nexport type OpenOn = 'hover' | 'click';\nexport type AriaRole = 'menu' | 'listbox';\n\n@Component({\n    tag: 'atui-menu',\n    shadow: false,\n})\nexport class AtuiMenu {\n    /**\n     * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'\n     */\n    @Prop() offset_x: number = 0;\n\n    /**\n     * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'\n     */\n    @Prop() offset_y: number = 0;\n\n    /**\n     * Position of opened menu element relative to trigger element.\n     */\n    @Prop() position: Position = 'bottom';\n\n    /**\n     * Alignment of opened menu element relative to trigger element.\n     */\n    @Prop() align: Align = 'start';\n\n    /**\n     * String representing the 'width' style of the menu element ('auto' or 'NUMpx'). When not specified, defaults to trigger element width.\n     * To fit menu to content use width=\"fit-content\" - Avoid width='auto' as this will result in 100% width.\n     */\n    @Prop() width?: string;\n\n    /**\n     * Prevent closing of menu when options are selected. Used for multi-selection controls.\n     */\n    @Prop() autoclose: boolean = true;\n\n    /**\n     * Event type that triggers the menu open state. Click or Hover.\n     */\n    @Prop() trigger: OpenOn = 'click';\n\n    /**\n     * Close the menu when the user clicks within the menu panel. Default for single selection menus.\n     */\n    @Prop() role: AriaRole = 'menu';\n\n    /**\n     * Prevent opening menu\n     */\n    @Prop() disabled: boolean = false;\n\n    @Watch('disabled')\n    disabledChanged(newValue: boolean) {\n        if (newValue && this.isOpen) {\n            this.closeMenu();\n        }\n    }\n\n    @State() isOpen = false;\n    triggerEl: HTMLElement;\n    menuEl: HTMLElement;\n    private cleanupAutoUpdate?: () => void;\n    private popoverId: string;\n    private updatePosition = async () => {\n        if (this.triggerEl && this.menuEl && this.isOpen) {\n            await this.updateFloatingPosition();\n        }\n    };\n\n    @Element() el: HTMLElement;\n\n    /**\n     * Toggles the dropdown menu's open state.\n     */\n    @Method()\n    async toggleMenu(): Promise<void> {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this.menuEl) {\n            this.menuEl.togglePopover();\n            this.isOpen = this.menuEl.matches(':popover-open');\n        }\n        this.atuiMenuStateChange.emit(this.isOpen);\n        await this.updatePosition();\n    }\n\n    /**\n     * Opens the dropdown menu.\n     */\n    @Method()\n    async openMenu(): Promise<void> {\n        if (this.disabled) {\n            return; // Don't open if disabled\n        }\n\n        if (this.menuEl) {\n            this.menuEl.showPopover();\n            this.isOpen = true;\n        }\n        this.atuiMenuStateChange.emit(true);\n        await this.updatePosition();\n    }\n\n    /**\n     * Closes the dropdown menu.\n     */\n    @Method()\n    async closeMenu(): Promise<void> {\n        if (this.menuEl) {\n            this.menuEl.hidePopover();\n            this.isOpen = false;\n        }\n        this.atuiMenuStateChange.emit(false);\n    }\n\n    /**\n     * Return the current menu open state\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.isOpen;\n    }\n\n    /**\n     * Emits an event containing the open menu state.\n     */\n    @Event() atuiMenuStateChange: EventEmitter<boolean>;\n\n    private timedOutCloser;\n\n    async componentDidLoad() {\n        this.popoverId = `atui-menu-${Math.random().toString(36).substr(2, 9)}`;\n        await this.setupFloatingUI();\n\n        setTimeout(() => this.setupPopoverEventListeners(), 0);\n    }\n\n    private setupPopoverEventListeners() {\n        if (this.menuEl) {\n            this.menuEl.addEventListener('toggle', (event: Event) => {\n                const customEvent = event as any;\n                this.isOpen = customEvent.newState === 'open';\n                this.atuiMenuStateChange.emit(this.isOpen);\n\n                if (this.isOpen) {\n                    requestAnimationFrame(() => this.updatePosition());\n                }\n            });\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupFloatingUI();\n    }\n\n    private async mouseEnterHandler(): Promise<void> {\n        if (this.timedOutCloser) clearTimeout(this.timedOutCloser);\n        if (!this.isOpen) {\n            await this.openMenu();\n        }\n    }\n\n    private async mouseLeaveHandler(): Promise<void> {\n        await this.closeMenu();\n    }\n\n    private async setupFloatingUI(): Promise<void> {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n        }\n\n        if (this.triggerEl && this.menuEl) {\n            const observer = new IntersectionObserver(\n                (entries) => {\n                    if (!entries[0].isIntersecting && this.isOpen) {\n                        this.mouseLeaveHandler();\n                    }\n                },\n                { threshold: 0 },\n            );\n            observer.observe(this.triggerEl);\n\n            this.cleanupAutoUpdate = autoUpdate(\n                this.triggerEl,\n                this.menuEl,\n                () => {\n                    if (this.isOpen) {\n                        const placement = this.getFloatingUIPlacement();\n                        const strategy = 'fixed';\n\n                        computePosition(this.triggerEl, this.menuEl, {\n                            placement,\n                            strategy,\n                            middleware: [\n                                offset(\n                                    this.position === 'bottom' ||\n                                        this.position === 'top'\n                                        ? this.offset_y\n                                        : this.offset_x,\n                                ),\n                                flip({\n                                    fallbackStrategy: 'bestFit',\n                                    padding: 8,\n                                }),\n                                shift({\n                                    padding: 8,\n                                    mainAxis: true,\n                                    crossAxis: true,\n                                }),\n                                size({\n                                    apply({\n                                        availableWidth,\n                                        availableHeight,\n                                        elements,\n                                    }) {\n                                        Object.assign(elements.floating.style, {\n                                            maxWidth: `${availableWidth}px`,\n                                            maxHeight: `${availableHeight}px`,\n                                        });\n                                    },\n                                }),\n                            ],\n                        }).then(({ x, y }) => {\n                            const styles: any = {\n                                position: strategy,\n                                left: `${x}px`,\n                                top: `${y}px`,\n                                margin: '0',\n                                transform: 'none',\n                            };\n\n                            if (this.width) {\n                                styles.width = this.width;\n                            }\n\n                            Object.assign(this.menuEl.style, styles);\n                        });\n                    }\n                },\n                {\n                    ancestorScroll: true,\n                    ancestorResize: true,\n                    elementResize: true,\n                    layoutShift: true,\n                    animationFrame: true,\n                },\n            );\n\n            const originalCleanup = this.cleanupAutoUpdate;\n            this.cleanupAutoUpdate = () => {\n                originalCleanup();\n                observer.disconnect();\n            };\n        }\n    }\n\n    private cleanupFloatingUI() {\n        if (this.cleanupAutoUpdate) {\n            this.cleanupAutoUpdate();\n            this.cleanupAutoUpdate = undefined;\n        }\n    }\n\n    private async updateFloatingPosition(): Promise<void> {\n        if (!this.triggerEl || !this.menuEl) return;\n        this.setupFloatingUI();\n    }\n\n    private getFloatingUIPlacement(): Placement {\n        const positionMap: Record<string, string> = {\n            top: 'top',\n            bottom: 'bottom',\n            left: 'left',\n            right: 'right',\n        };\n\n        const alignMap: Record<string, string> = {\n            start: 'start',\n            end: 'end',\n        };\n\n        const position = positionMap[this.position] || 'bottom';\n        const align = alignMap[this.align] || 'start';\n\n        return `${position}-${align}` as Placement;\n    }\n\n    render() {\n        const popoverAttrs = {\n            popover: 'auto',\n            id: this.popoverId,\n        };\n\n        const triggerAttrs = {};\n\n        return (\n            <Host class=\"relative z-modal\">\n                <div\n                    class=\"relative\"\n                    onBlur={() =>\n                        this.trigger === 'click' && !this.disabled\n                            ? this.mouseLeaveHandler()\n                            : null\n                    }\n                >\n                    <div\n                        aria-haspopup=\"true\"\n                        data-name=\"menu-trigger\"\n                        ref={(el) => (this.triggerEl = el)}\n                        aria-expanded={`${this.isOpen ? 'true' : 'false'}`}\n                        {...triggerAttrs}\n                        onMouseEnter={() =>\n                            this.trigger === 'hover' && !this.disabled\n                                ? this.mouseEnterHandler()\n                                : null\n                        }\n                        onKeyDown={async (event) => {\n                            switch (event.key) {\n                                case 'Escape':\n                                    await this.closeMenu();\n                                    break;\n                                case 'Enter':\n                                case ' ':\n                                    event.preventDefault();\n                                    await this.toggleMenu();\n                                    break;\n                            }\n                        }}\n                        onMouseLeave={() =>\n                            this.trigger === 'hover' && !this.disabled\n                                ? this.mouseLeaveHandler()\n                                : null\n                        }\n                        onClick={async (event) => {\n                            if (this.trigger === 'click' && !this.disabled) {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                if (this.isOpen) {\n                                    await this.closeMenu();\n                                } else {\n                                    await this.openMenu();\n                                }\n                            }\n                        }}\n                        class={this.disabled ? 'contents' : ''}\n                    >\n                        <slot name=\"menu-trigger\" />\n                    </div>\n\n                    <div\n                        role={this.role}\n                        data-position={this.position}\n                        data-align={this.align}\n                        ref={(el) => (this.menuEl = el)}\n                        aria-hidden={`${this.isOpen ? 'false' : 'true'}`}\n                        {...popoverAttrs}\n                        onMouseEnter={() =>\n                            this.trigger === 'hover' &&\n                            !this.disabled &&\n                            this.mouseEnterHandler()\n                        }\n                        onMouseLeave={() =>\n                            this.trigger === 'hover' &&\n                            !this.disabled &&\n                            this.mouseLeaveHandler()\n                        }\n                        onKeyDown={(event) => {\n                            if (\n                                event.key === 'Enter' ||\n                                event.key === ' ' ||\n                                event.key === 'Escape'\n                            ) {\n                                if (this.autoclose) {\n                                    this.mouseLeaveHandler();\n                                }\n                            }\n                        }}\n                        onClick={() =>\n                            this.autoclose && this.mouseLeaveHandler()\n                        }\n                        class=\"w-fit rounded-md border border-solid border-light bg-white p-4 shadow-md\"\n                        data-name=\"menu-content-wrapper\"\n                    >\n                        <slot name=\"menu-content\" />\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}