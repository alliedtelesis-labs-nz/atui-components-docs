{"version":3,"names":["AtChipList","constructor","hostRef","this","show_clear_all","size","keyDownHandler","event","chipsToRemove","key","preventDefault","removeChipHandler","atuiRemoveChip","emit","length","chips","filter","chip","getChips","map","h","class","rounded","type","disabled","label","readonly","tabIndex","onClick","onKeyDown","render","onAtuiClick"],"sources":["src/components/at-chip-list/at-chip-list.tsx"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    h,\n    Prop,\n    Event as StencilEvent,\n} from '@stencil/core';\n\nexport type BadgeSize = 'lg' | 'sm';\n\n/**\n * @category Utilities\n * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.\n *\n * @slot - Placed after the chips & the 'clear all' button\n */\n@Component({\n    tag: 'at-chip-list',\n    shadow: false,\n})\nexport class AtChipList {\n    /**\n     * Items in the chip list.\n     */\n    @Prop({ mutable: true })\n    chips: string[];\n\n    /**\n     * Disables the list of chips. Prevents removing a chip.\n     */\n    @Prop()\n    disabled: boolean;\n\n    /**\n     * Disables the list of chips but keeps the text readable. Prevents removing a chip.\n     */\n    @Prop()\n    readonly: boolean;\n\n    /**\n     * Shows the 'Clear All' button\n     */\n    @Prop()\n    show_clear_all: boolean = true;\n\n    /**\n     * Size of the chips. Determines padding and font-size. For use in input chip lists.\n     */\n    @Prop()\n    size: BadgeSize = 'lg';\n\n    /**\n     * Emitted when the 'X' on a chip, or 'Clear All' is clicked.\n     */\n    @StencilEvent({\n        eventName: 'atRemoveChip',\n        bubbles: true,\n        composed: true,\n        cancelable: false,\n    })\n    atuiRemoveChip: EventEmitter<string[]>;\n\n    keyDownHandler(event: KeyboardEvent, chipsToRemove: string[]) {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            this.removeChipHandler(chipsToRemove);\n        }\n    }\n\n    removeChipHandler(chipsToRemove: string[]): void {\n        this.atuiRemoveChip.emit(chipsToRemove);\n        if (chipsToRemove.length > 1) {\n            this.chips = [];\n        } else {\n            this.chips = this.chips.filter((chip) => chip !== chipsToRemove[0]);\n        }\n    }\n\n    get getChips(): any {\n        if (!this.chips) {\n            return '';\n        }\n\n        return this.chips.map((chip) => (\n            <at-badge\n                class={`flex items-center gap-4 text-center`}\n                rounded={true}\n                data-name=\"chip\"\n                type={this.disabled ? 'disabled' : 'default'}\n                size={this.size}\n                label={chip}\n            >\n                {!this.disabled && !this.readonly && (\n                    <i\n                        class=\"material-icons text-icon-md text-light hover:text-med relative flex h-[16px] w-[16px] cursor-pointer items-center justify-center text-center\"\n                        data-name=\"chip-remove\"\n                        tabIndex={0}\n                        onClick={() => {\n                            this.removeChipHandler([chip]);\n                        }}\n                        onKeyDown={(event) =>\n                            this.keyDownHandler(event, [chip])\n                        }\n                    >\n                        cancel\n                    </i>\n                )}\n            </at-badge>\n        ));\n    }\n\n    render() {\n        return (\n            <div class=\"flex h-full flex-wrap items-center gap-4\">\n                {this.chips && this.getChips}\n\n                {!this.disabled &&\n                    this.chips &&\n                    this.chips.length > 1 &&\n                    this.show_clear_all && (\n                        <at-button\n                            size=\"sm\"\n                            type=\"secondaryText\"\n                            label=\"Clear All\"\n                            data-name=\"clear-all\"\n                            onAtuiClick={() => {\n                                this.removeChipHandler(this.chips);\n                            }}\n                        ></at-button>\n                    )}\n                <slot />\n            </div>\n        );\n    }\n}\n"],"mappings":"wDAoBaA,EAAU,MAJvB,WAAAC,CAAAC,G,uDA2BIC,KAAcC,eAAY,KAM1BD,KAAIE,KAAc,IAqFrB,CAxEG,cAAAC,CAAeC,EAAsBC,GACjC,GAAID,EAAME,MAAQ,SAAWF,EAAME,MAAQ,IAAK,CAC5CF,EAAMG,iBACNP,KAAKQ,kBAAkBH,E,EAI/B,iBAAAG,CAAkBH,GACdL,KAAKS,eAAeC,KAAKL,GACzB,GAAIA,EAAcM,OAAS,EAAG,CAC1BX,KAAKY,MAAQ,E,KACV,CACHZ,KAAKY,MAAQZ,KAAKY,MAAMC,QAAQC,GAASA,IAAST,EAAc,I,EAIxE,YAAIU,GACA,IAAKf,KAAKY,MAAO,CACb,MAAO,E,CAGX,OAAOZ,KAAKY,MAAMI,KAAKF,GACnBG,EACI,YAAAC,MAAO,sCACPC,QAAS,KAAI,YACH,OACVC,KAAMpB,KAAKqB,SAAW,WAAa,UACnCnB,KAAMF,KAAKE,KACXoB,MAAOR,IAELd,KAAKqB,WAAarB,KAAKuB,UACrBN,EAAA,KACIC,MAAM,+IACI,0BACVM,SAAU,EACVC,QAAS,KACLzB,KAAKQ,kBAAkB,CAACM,GAAM,EAElCY,UAAYtB,GACRJ,KAAKG,eAAeC,EAAO,CAACU,KAAM,Y,CAU1D,MAAAa,GACI,OACIV,EAAA,OAAAX,IAAA,2CAAKY,MAAM,4CACNlB,KAAKY,OAASZ,KAAKe,UAElBf,KAAKqB,UACHrB,KAAKY,OACLZ,KAAKY,MAAMD,OAAS,GACpBX,KAAKC,gBACDgB,EAAA,aAAAX,IAAA,2CACIJ,KAAK,KACLkB,KAAK,gBACLE,MAAM,YAAW,YACP,YACVM,YAAa,KACT5B,KAAKQ,kBAAkBR,KAAKY,MAAM,IAIlDK,EAAQ,QAAAX,IAAA,6C","ignoreList":[]}