{"version":3,"names":["AtPromptContainer","constructor","hostRef","this","messages","placeholder","loading","disabled","show_new_thread_button","max_message_length","enable_vote","enable_copy","enable_edit","response_animation","currentInput","inputInvalid","inputError","isSendEnabled","translations","handleSubmit","async","content","addMessage","atSubmit","emit","handleStop","atStop","handleNewThread","newThread","componentWillLoad","fetchTranslations","el","handleInputSubmit","event","detail","trim","handleMessageCopy","atMessageCopy","handleMessageRetry","atMessageRetry","handleMessageEdit","atMessageEdit","inputComponent","value","focusInput","handleMessageVote","stopPropagation","messageIndex","findIndex","msg","id","messageId","updatedMessages","Object","assign","score","atMessageVote","role","message","Date","now","toString","appendToLastMessage","length","lastMessage","atNewThread","setTimeout","setSendEnabled","enabled","focus","renderHeader","newThreadText","_c","_b","_a","ATUI","PROMPT","NEW_THREAD","h","class","slot","size","type","onClick","renderFooter","ref","in_progress","max_length","error_text","onAtSubmit","onAtStop","render","Host","key","name","auto_scroll"],"sources":["src/components/prompt-components/at-prompt-container/at-prompt-container.tsx"],"sourcesContent":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    State,\n    Listen,\n    Method,\n    Element,\n} from '@stencil/core';\nimport {\n    type PromptMessage,\n    PromptUserRole,\n    PromptResponseAnimation,\n} from '../../../types';\nimport { fetchTranslations } from '../../../utils/translation';\n\n/**\n * @category Prompt\n * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.\n * @slot prompt-container-header - Custom content displayed above the message thread\n * @slot prompt-container-footer - Custom content displayed below the message input\n */\n@Component({\n    tag: 'at-prompt-container',\n    shadow: false,\n})\nexport class AtPromptContainer {\n    @Element() el: HTMLElement;\n\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop({ mutable: true }) messages: PromptMessage[] = [];\n\n    /**\n     * Placeholder text for the input field\n     */\n    @Prop() placeholder: string = 'Type your message here...';\n\n    /**\n     * Error text displayed when invalid is set via max length\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Shows loading state and disables input\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Disables all interactions with the container\n     */\n    @Prop() disabled: boolean = false;\n\n    /**\n     * Controls visibility of the \"New Thread\" button in the header\n     */\n    @Prop() show_new_thread_button: boolean = true;\n\n    /**\n     * Maximum character length for input messages\n     */\n    @Prop() max_message_length: number = 2000;\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    /**\n     * Enable streaming text animations for system/assistant messages\n     * - 'none': No animation\n     * - 'fade': Fade in the entire message\n     * - 'words': Animate words appearing sequentially like ChatGPT\n     */\n    @Prop() response_animation: PromptResponseAnimation = 'words';\n\n    @State() currentInput: string = '';\n    @State() inputInvalid: boolean = false;\n    @State() inputError: string = '';\n    @State() isSendEnabled: boolean = true;\n    @State() translations: any = {};\n\n    /**\n     * Emits when a message should be sent\n     */\n    @Event()\n    atSubmit: EventEmitter<string>;\n\n    /**\n     * Emits when the stop button is clicked\n     */\n    @Event()\n    atStop: EventEmitter<void>;\n\n    /**\n     * Emitted when the \"New Thread\" button is clicked\n     */\n    @Event() atNewThread: EventEmitter<void>;\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    private inputComponent: HTMLAtPromptInputElement;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    @Listen('atSubmit')\n    handleInputSubmit(event: CustomEvent<string>) {\n        const content = event.detail.trim();\n        if (content && this.isSendEnabled && !this.disabled && !this.loading) {\n            this.handleSubmit(content);\n        }\n    }\n\n    @Listen('atMessageCopy')\n    handleMessageCopy(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageCopy.emit(event.detail);\n    }\n\n    @Listen('atMessageRetry')\n    handleMessageRetry(event: CustomEvent<{ messageId: string }>) {\n        this.atMessageRetry.emit(event.detail);\n    }\n\n    @Listen('atMessageEdit')\n    async handleMessageEdit(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageEdit.emit(event.detail);\n        if (this.inputComponent) {\n            this.inputComponent.value = event.detail.content;\n            await this.focusInput();\n        }\n    }\n\n    @Listen('atMessageVote')\n    handleMessageVote(\n        event: CustomEvent<{ messageId: string; score: number }>,\n    ) {\n        event.stopPropagation();\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                score: event.detail.score,\n            };\n            this.messages = updatedMessages;\n            this.atMessageVote.emit(event.detail);\n        }\n\n        this.atMessageVote.emit(event.detail);\n    }\n\n    /**\n     * Programmatically add a message to the conversation thread\n     * @param role - The message role\n     * @param content - The message content\n     */\n    @Method()\n    async addMessage(role: PromptUserRole, content: string): Promise<void> {\n        const message: PromptMessage = {\n            id: Date.now().toString(),\n            role,\n            content,\n        };\n        this.messages = [...this.messages, message];\n    }\n\n    /**\n     * Append content to the last message in the thread (useful for streaming responses)\n     * @param content - The content to append\n     * @returns Promise<boolean> - Returns true if successful, false if no messages exist or last message is not from assistant\n     */\n    @Method()\n    async appendToLastMessage(content: string): Promise<boolean> {\n        if (this.messages.length === 0) return false;\n\n        const lastMessage = this.messages[this.messages.length - 1];\n        if (lastMessage.role !== 'assistant') return false;\n\n        lastMessage.content += content;\n        this.messages = [...this.messages];\n        return true;\n    }\n\n    /**\n     * Start a new conversation thread by clearing all messages and resetting state\n     */\n    @Method()\n    async newThread(): Promise<void> {\n        this.messages = [];\n        this.currentInput = '';\n        this.isSendEnabled = true;\n        this.atNewThread.emit();\n        setTimeout(() => this.focusInput(), 100);\n    }\n\n    /**\n     * Control the send button state programmatically\n     * @param enabled - Whether the send functionality should be enabled\n     */\n    @Method()\n    async setSendEnabled(enabled: boolean): Promise<void> {\n        this.isSendEnabled = enabled;\n    }\n\n    /**\n     * Programmatically focus the input field\n     */\n    @Method()\n    async focusInput(): Promise<void> {\n        if (this.inputComponent) {\n            setTimeout(() => {\n                this.inputComponent.focus();\n            }, 0);\n        }\n    }\n\n    private handleSubmit = async (content: string) => {\n        if (!content || this.disabled || this.loading || !this.isSendEnabled) {\n            return;\n        }\n\n        this.isSendEnabled = false;\n\n        await this.addMessage('user', content);\n        this.atSubmit.emit(content);\n    };\n\n    private handleStop = () => {\n        this.atStop.emit();\n    };\n\n    private handleNewThread = async () => {\n        await this.newThread();\n    };\n\n    private renderHeader() {\n        if (!this.show_new_thread_button) return null;\n\n        const newThreadText =\n            this.translations?.ATUI?.PROMPT?.NEW_THREAD || 'New Thread';\n\n        return (\n            <div class=\"flex justify-end pb-16\">\n                <at-button\n                    slot=\"actions\"\n                    size=\"md\"\n                    type=\"primaryOutline\"\n                    onClick={this.handleNewThread}\n                    disabled={this.loading}\n                    data-name=\"new-thread-button\"\n                >\n                    {newThreadText}\n                </at-button>\n            </div>\n        );\n    }\n\n    private renderFooter() {\n        return (\n            <div class=\"p-4\">\n                <at-prompt-input\n                    ref={(el) => (this.inputComponent = el)}\n                    placeholder={this.placeholder}\n                    in_progress={this.loading}\n                    max_length={this.max_message_length}\n                    error_text={this.error_text}\n                    data-name=\"prompt-container-input\"\n                    onAtSubmit={(event) => this.handleSubmit(event.detail)}\n                    onAtStop={() => this.handleStop()}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Host\n                class=\"flex h-full w-full flex-col overflow-hidden\"\n                data-name=\"prompt-container\"\n            >\n                {this.renderHeader()}\n                <slot name=\"prompt-container-header\" />\n                <div\n                    class=\"min-h-0 flex-1\"\n                    data-name=\"thread-wrapper\"\n                >\n                    <at-prompt-thread\n                        messages={this.messages}\n                        loading={this.loading}\n                        auto_scroll={true}\n                        enable_vote={this.enable_vote}\n                        enable_copy={this.enable_copy}\n                        enable_edit={this.enable_edit}\n                        response_animation={this.response_animation}\n                        data-name=\"container-thread\"\n                    />\n                </div>\n                <div class=\"flex flex-col gap-4\">\n                    {this.renderFooter()}\n                    <slot name=\"prompt-container-footer\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]}