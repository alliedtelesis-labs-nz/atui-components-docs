{"version":3,"names":["AtuiTreeComponent","constructor","hostRef","this","size","flattenedItemList","flattenedItemStyles","handleClick","id","clickedItem","updateIsSelected","items","tempItems","forEach","item","tempItem","Object","assign","selected","children","push","item_list","flattenItemList","atuiClick","emit","itemList","tempItemList","addToFlattenedAndCheckChildren","layer","itemWithDepth","depth","length","componentWillRender","render","h","key","class","map","index","tooltip","undefined","position","slot","onAtuiClick","label","displayName","has_children","name","style","paddingLeft"],"sources":["src/components/atui-tree/atui-tree.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, h, Prop, State } from '@stencil/core';\nimport { ButtonSize } from '../atui-button/atui-button';\nimport { TreeNode } from '../../types/tree';\n\n/**\n * @category Navigation\n * @description A tree component for displaying hierarchical data.\n */\n\n/**\n * ### ```interface ItemNode```\n * ```\n *  id: string;\n *  displayName: string;\n *  children: ItemNode[];\n *  isSelected?: boolean;\n *  tooltip?: string;\n * ```\n */\n@Component({\n    tag: 'atui-tree',\n    shadow: false,\n})\nexport class AtuiTreeComponent {\n    /**\n     * List of items to be displayed in the tree\n     */\n    @Prop({ mutable: true })\n    item_list: TreeNode[];\n\n    /**\n     * Set the size of the tree button, default sm\n     */\n    @Prop()\n    size: ButtonSize = 'sm';\n\n    /**\n     * Emits when the button is clicked\n     */\n    @Event()\n    atuiClick: EventEmitter<TreeNode>;\n\n    @State() flattenedItemList: Array<TreeNode> = [];\n    @State() flattenedItemStyles = [];\n\n    handleClick = (id: string) => {\n        let clickedItem: TreeNode | null = null;\n\n        const updateIsSelected = (items: TreeNode[]): TreeNode[] => {\n            const tempItems: TreeNode[] = [];\n\n            items.forEach((item) => {\n                const tempItem = { ...item };\n\n                if (item.id === id) {\n                    tempItem.selected = !tempItem.selected;\n                    clickedItem = tempItem;\n                }\n\n                if (item.children) {\n                    tempItem.children = updateIsSelected(item.children);\n                }\n\n                tempItems.push(tempItem);\n            });\n\n            return tempItems;\n        };\n\n        this.item_list = updateIsSelected(this.item_list);\n        this.flattenItemList(this.item_list);\n\n        if (clickedItem) {\n            this.atuiClick.emit(clickedItem);\n        }\n    };\n\n    flattenItemList = (itemList: TreeNode[]) => {\n        const tempItemList: TreeNode[] = [];\n\n        const addToFlattenedAndCheckChildren = (\n            items: TreeNode[],\n            layer: number,\n        ) => {\n            items.forEach((item) => {\n                const itemWithDepth = { ...item, depth: layer };\n                tempItemList.push(itemWithDepth);\n\n                if (item.selected && item.children && item.children.length) {\n                    addToFlattenedAndCheckChildren(item.children, layer + 1);\n                }\n            });\n        };\n\n        addToFlattenedAndCheckChildren(itemList, 0);\n        this.flattenedItemList = tempItemList;\n    };\n\n    componentWillRender() {\n        if (this.item_list && this.item_list.length) {\n            this.flattenItemList(this.item_list);\n        }\n    }\n\n    render() {\n        return (\n            <div class=\"w-full\">\n                <slot />\n                {this.flattenedItemList &&\n                    this.flattenedItemList.map((item, index) => (\n                        <div\n                            key={index}\n                            class={`flex w-full`}\n                        >\n                            {item.tooltip !== undefined ? (\n                                <atui-tooltip\n                                    position=\"right\"\n                                    class=\"flex flex-grow items-start\"\n                                >\n                                    <atui-tree-item\n                                        class=\"flex-grow\"\n                                        depth={item.depth}\n                                        slot=\"tooltip-trigger\"\n                                        onAtuiClick={() =>\n                                            this.handleClick(item.id)\n                                        }\n                                        key={item.id}\n                                        label={item.displayName}\n                                        size={this.size}\n                                        has_children={\n                                            item.children &&\n                                            item.children.length > 0\n                                        }\n                                        selected={item.selected}\n                                    >\n                                        <slot name=\"item-content\"></slot>\n                                    </atui-tree-item>\n\n                                    <span>{item.tooltip}</span>\n                                </atui-tooltip>\n                            ) : (\n                                <atui-tree-item\n                                    depth={item.depth}\n                                    style={{\n                                        paddingLeft:\n                                            this.flattenedItemStyles[index] +\n                                            'px',\n                                    }}\n                                    onAtuiClick={() =>\n                                        this.handleClick(item.id)\n                                    }\n                                    has_children={\n                                        item.children &&\n                                        item.children.length > 0\n                                    }\n                                    key={item.id}\n                                    label={item.displayName}\n                                    size={this.size}\n                                >\n                                    <slot name=\"item-content\"></slot>\n                                </atui-tree-item>\n                            )}\n                        </div>\n                    ))}\n            </div>\n        );\n    }\n}\n"],"mappings":"wDAuBaA,EAAiB,MAJ9B,WAAAC,CAAAC,G,+CAeIC,KAAIC,KAAe,KAQVD,KAAiBE,kBAAoB,GACrCF,KAAmBG,oBAAG,GAE/BH,KAAAI,YAAeC,IACX,IAAIC,EAA+B,KAEnC,MAAMC,EAAoBC,IACtB,MAAMC,EAAwB,GAE9BD,EAAME,SAASC,IACX,MAAMC,EAAQC,OAAAC,OAAA,GAAQH,GAEtB,GAAIA,EAAKN,KAAOA,EAAI,CAChBO,EAASG,UAAYH,EAASG,SAC9BT,EAAcM,C,CAGlB,GAAID,EAAKK,SAAU,CACfJ,EAASI,SAAWT,EAAiBI,EAAKK,S,CAG9CP,EAAUQ,KAAKL,EAAS,IAG5B,OAAOH,CAAS,EAGpBT,KAAKkB,UAAYX,EAAiBP,KAAKkB,WACvClB,KAAKmB,gBAAgBnB,KAAKkB,WAE1B,GAAIZ,EAAa,CACbN,KAAKoB,UAAUC,KAAKf,E,GAI5BN,KAAAmB,gBAAmBG,IACf,MAAMC,EAA2B,GAEjC,MAAMC,EAAiC,CACnChB,EACAiB,KAEAjB,EAAME,SAASC,IACX,MAAMe,EAAab,OAAAC,OAAAD,OAAAC,OAAA,GAAQH,GAAI,CAAEgB,MAAOF,IACxCF,EAAaN,KAAKS,GAElB,GAAIf,EAAKI,UAAYJ,EAAKK,UAAYL,EAAKK,SAASY,OAAQ,CACxDJ,EAA+Bb,EAAKK,SAAUS,EAAQ,E,IAE5D,EAGND,EAA+BF,EAAU,GACzCtB,KAAKE,kBAAoBqB,CAAY,CAwE5C,CArEG,mBAAAM,GACI,GAAI7B,KAAKkB,WAAalB,KAAKkB,UAAUU,OAAQ,CACzC5B,KAAKmB,gBAAgBnB,KAAKkB,U,EAIlC,MAAAY,GACI,OACIC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,UACPF,EAAQ,QAAAC,IAAA,6CACPhC,KAAKE,mBACFF,KAAKE,kBAAkBgC,KAAI,CAACvB,EAAMwB,IAC9BJ,EAAA,OACIC,IAAKG,EACLF,MAAO,eAENtB,EAAKyB,UAAYC,UACdN,EAAA,gBACIO,SAAS,QACTL,MAAM,8BAENF,EACI,kBAAAE,MAAM,YACNN,MAAOhB,EAAKgB,MACZY,KAAK,kBACLC,YAAa,IACTxC,KAAKI,YAAYO,EAAKN,IAE1B2B,IAAKrB,EAAKN,GACVoC,MAAO9B,EAAK+B,YACZzC,KAAMD,KAAKC,KACX0C,aACIhC,EAAKK,UACLL,EAAKK,SAASY,OAAS,EAE3Bb,SAAUJ,EAAKI,UAEfgB,EAAA,QAAMa,KAAK,kBAGfb,EAAA,YAAOpB,EAAKyB,UAGhBL,EAAA,kBACIJ,MAAOhB,EAAKgB,MACZkB,MAAO,CACHC,YACI9C,KAAKG,oBAAoBgC,GACzB,MAERK,YAAa,IACTxC,KAAKI,YAAYO,EAAKN,IAE1BsC,aACIhC,EAAKK,UACLL,EAAKK,SAASY,OAAS,EAE3BI,IAAKrB,EAAKN,GACVoC,MAAO9B,EAAK+B,YACZzC,KAAMD,KAAKC,MAEX8B,EAAM,QAAAa,KAAK,qB","ignoreList":[]}