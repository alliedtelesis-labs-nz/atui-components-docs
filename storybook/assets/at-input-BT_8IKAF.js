import{j as t,M as o}from"./index-BfcnOpS7.js";import{useMDXComponents as a}from"./index-CM4ZRcL7.js";import{ar as r}from"./MermaidMarkdown-kyyq2Pni.js";import"./iframe-DpZNVFE-.js";import"./index-DGnb9v-d.js";import"./index-DrFu-skq.js";const l="# atui-input\n\n<!-- Auto Generated Below -->\n\n\n## Properties\n\n| Property       | Attribute      | Description                                                               | Type                                       | Default     |\n| -------------- | -------------- | ------------------------------------------------------------------------- | ------------------------------------------ | ----------- |\n| `autocomplete` | `autocomplete` | Sets the 'autocomplete' attribute on the input element                    | `string`                                   | `'on'`      |\n| `clearable`    | `clearable`    | Allows the input to be cleared with a 'x' at the end of the input element | `boolean`                                  | `undefined` |\n| `disabled`     | `disabled`     | Disables interaction with the input                                       | `boolean`                                  | `false`     |\n| `error_text`   | `error_text`   | Error text displayed when invalid is set                                  | `string`                                   | `undefined` |\n| `hint_text`    | `hint_text`    | Short description or validation hint if required                          | `string`                                   | `undefined` |\n| `info_text`    | `info_text`    | Optional info icon with detailed tooltip description                      | `string`                                   | `undefined` |\n| `invalid`      | `invalid`      | Shows the error text                                                      | `boolean`                                  | `undefined` |\n| `label`        | `label`        | Label above the input container                                           | `string`                                   | `undefined` |\n| `placeholder`  | `placeholder`  | Placeholder text to be shown when no input is passed                      | `number \\| string`                         | `''`        |\n| `readonly`     | `readonly`     | Makes the input read only                                                 | `boolean`                                  | `undefined` |\n| `required`     | `required`     | Adds a required * to the element                                          | `boolean`                                  | `undefined` |\n| `type`         | `type`         | Type of the input                                                         | `\"email\" \\| \"password\" \\| \"text\" \\| \"url\"` | `'text'`    |\n| `value`        | `value`        | The value of the input                                                    | `string`                                   | `undefined` |\n\n\n## Events\n\n| Event        | Description                                                                             | Type                            |\n| ------------ | --------------------------------------------------------------------------------------- | ------------------------------- |\n| `atuiChange` | Emits an event containing the text string or number when the input's content is changed | `CustomEvent<number \\| string>` |\n\n\n## Dependencies\n\n### Used by\n\n - [at-edit-text-cell](../table-components/cell-components/at-edit-text-cell)\n - [at-table-filters](../table-components/at-table-filters)\n\n### Depends on\n\n- [at-form-label](../at-form-label)\n- [at-button](../at-button)\n\n### Graph\n```mermaid\ngraph TD;\n  at-input --> at-form-label\n  at-input --> at-button\n  at-form-label --> at-tooltip\n  at-button --> at-loading\n  at-edit-text-cell --> at-input\n  at-table-filters --> at-input\n  style at-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n";function i(e){return t.jsxs(t.Fragment,{children:[t.jsx(o,{title:"Components/Input"}),`
`,t.jsx(r,{md:l})]})}function c(e={}){const{wrapper:n}={...a(),...e.components};return n?t.jsx(n,{...e,children:t.jsx(i,{...e})}):i()}export{c as default};
