import{j as e,M as o}from"./index-BpRwEArn.js";import{useMDXComponents as s}from"./index-CRID036a.js";import{ar as a}from"./MermaidMarkdown-BVTLM2lp.js";import"./iframe-CdhIbeUi.js";import"./index-DGnb9v-d.js";import"./index-DrFu-skq.js";const l='# atui-side-panel\n\n<!-- Auto Generated Below -->\n\n\n## Properties\n\n| Property           | Attribute          | Description                                                                                                                                                  | Type                                   | Default     |\n| ------------------ | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------- | ----------- |\n| `backdrop`         | `backdrop`         | Whether to show a backdrop behind the panel, prevents any interaction with background UI.                                                                    | `boolean`                              | `false`     |\n| `close_backdrop`   | `close_backdrop`   | Will close the sidepanel if clicked                                                                                                                          | `boolean`                              | `false`     |\n| `has_close_button` | `has_close_button` | Displays a close button if set                                                                                                                               | `boolean`                              | `true`      |\n| `has_scrollbar`    | `has_scrollbar`    | Enables scroll overflow on the sidepanel container                                                                                                           | `boolean`                              | `true`      |\n| `origin`           | `origin`           | Position of the side panel                                                                                                                                   | `"left" \\| "right"`                    | `\'right\'`   |\n| `panel_subtitle`   | `panel_subtitle`   | Subtitle displayed in the side panel                                                                                                                         | `string`                               | `undefined` |\n| `panel_title`      | `panel_title`      | Title displayed in the side panel                                                                                                                            | `string`                               | `undefined` |\n| `position`         | `position`         | If sidepanel should use fixed positioning (will fallback to absolute)                                                                                        | `"absolute" \\| "fixed"`                | `\'fixed\'`   |\n| `size`             | `size`             | Size of the size panel                                                                                                                                       | `"lg" \\| "md" \\| "sm" \\| "xl" \\| "xs"` | `\'xs\'`      |\n| `trigger_id`       | `trigger_id`       | Target an external element to use as the trigger. When provided, clicking an element wia matching data-sidepanel attribute value will toggle the side panel. | `string`                               | `undefined` |\n\n\n## Events\n\n| Event                 | Description                                                                                            | Type               |\n| --------------------- | ------------------------------------------------------------------------------------------------------ | ------------------ |\n| `atuiSidepanelChange` | Emits an event when the side panel is toggled, with `event.detail` being true if the panel is now open | `CustomEvent<any>` |\n\n\n## Methods\n\n### `closeSidePanel() => Promise<void>`\n\nCloses the side panel\n\n#### Returns\n\nType: `Promise<void>`\n\nPromise that resolves when the panel is closed\n\n### `getIsOpen() => Promise<boolean>`\n\nGetter method for the open state of the side panel\n\n#### Returns\n\nType: `Promise<boolean>`\n\nThe current open state of the side panel\n\n### `openSidePanel() => Promise<void>`\n\nOpens the side panel\n\n#### Returns\n\nType: `Promise<void>`\n\nPromise that resolves when the panel is opened\n\n### `toggleSidePanel() => Promise<void>`\n\nToggles the side panel between open and closed states\n\n#### Returns\n\nType: `Promise<void>`\n\nPromise that resolves when the panel state is toggled\n\n\n## Slots\n\n| Slot | Description                       |\n| ---- | --------------------------------- |\n|      | Display content within the dialog |\n\n\n## Dependencies\n\n### Depends on\n\n- [at-button](../at-button)\n\n### Graph\n```mermaid\ngraph TD;\n  at-side-panel --> at-button\n  at-button --> at-loading\n  style at-side-panel fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n';function i(n){return e.jsxs(e.Fragment,{children:[e.jsx(o,{title:"Components/Side Panel"}),`
`,e.jsx(a,{md:l})]})}function m(n={}){const{wrapper:t}={...s(),...n.components};return t?e.jsx(t,{...n,children:e.jsx(i,{...n})}):i()}export{m as default};
