/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AccordionItem } from "./components/at-accordion/at-accordion";
import { AvatarSize, AvatarVariant } from "./components/at-avatar/at-avatar";
import { BadgeContrast, BadgeSize, BadgeType } from "./components/at-badge/at-badge";
import { ButtonSize, ButtonType } from "./components/at-button/at-button";
import { AtEvent } from "./types/events";
import { ButtonGroupOption } from "./components/at-button-group/at-button-group";
import { ChartDataset, Plugin } from "chart.js";
import { PointStyles, Threshold } from "./components/at-chart-bar-line/at-chart-bar-line";
import { Height } from "./components/at-chart-donut/at-chart-donut";
import { ChartColorPalette } from "./types/chart-color";
import { Height as Height1 } from "./components/at-chart-donut/at-chart-donut";
import { CheckboxLayout, CheckboxOptions } from "./components/at-checkbox-group/at-checkbox-group";
import { BadgeSize as BadgeSize1 } from "./components/at-chip-list/at-chip-list";
import { ColDef, GridApi, GridOptions, IRowNode } from "ag-grid-community";
import { ColumnManagerChangeEvent } from "./components/table-components/at-column-manager/at-column-manager";
import { DateRangeStrings, PromptMessage, PromptResponseAnimation, PromptResponseScore, PromptUserRole } from "./types";
import { HeaderSizes } from "./components/at-header/at-header";
import { InputType } from "./components/at-input/at-input";
import { InputPosition } from "./components/at-input-range/at-input-range";
import { Template } from "./components/at-layout/at-layout";
import { ListSelectorItem } from "./components/at-list-selector/at-list-selector";
import { LoadingSize, LoadingType, LoadingVariant } from "./components/at-loading/at-loading";
import { Align, AriaRole, OpenOn, Position } from "./components/at-menu/at-menu";
import { SelectOption } from "./types/select";
import { PlaceholderSize } from "./components/at-placeholder/at-placeholder";
import { RadioLayout, RadioOption } from "./components/at-radio-group/at-radio-group";
import { SidePanelDirection, SidePanelPosition, SidePanelSize } from "./components/at-side-panel/at-side-panel";
import { Width } from "./components/at-sidebar/at-sidebar";
import { SrcDestAlign } from "./components/at-src-dest/at-src-dest";
import { StatusBar } from "./components/at-status-bar/at-status-bar";
import { Layout } from "./components/at-tab-selector/at-tab/at-tab";
import { Layout as Layout1, Tab } from "./components/at-tab-selector/at-tab-selector";
import { FilterEvent } from "./components/table-components/at-table-filters/at-table-filters";
import { SelectedTimeRangeExtended, TimePresets } from "./models/at-time-range.models";
import { TimeUnit, TimeWithUnit } from "./types/time";
import { TimeRangeDisplay } from "./types/date";
import { LabelPosition } from "./components/at-toggle-switch/at-toggle-switch";
import { TooltipAlign, TooltipPosition } from "./components/at-tooltip/at-tooltip";
import { TreeNode } from "./types/tree";
import { ButtonSize as ButtonSize1 } from "./components/at-button/at-button";
import { TreeItemSize } from "./components/at-tree/at-tree-item/at-tree-item";
export { AccordionItem } from "./components/at-accordion/at-accordion";
export { AvatarSize, AvatarVariant } from "./components/at-avatar/at-avatar";
export { BadgeContrast, BadgeSize, BadgeType } from "./components/at-badge/at-badge";
export { ButtonSize, ButtonType } from "./components/at-button/at-button";
export { AtEvent } from "./types/events";
export { ButtonGroupOption } from "./components/at-button-group/at-button-group";
export { ChartDataset, Plugin } from "chart.js";
export { PointStyles, Threshold } from "./components/at-chart-bar-line/at-chart-bar-line";
export { Height } from "./components/at-chart-donut/at-chart-donut";
export { ChartColorPalette } from "./types/chart-color";
export { Height as Height1 } from "./components/at-chart-donut/at-chart-donut";
export { CheckboxLayout, CheckboxOptions } from "./components/at-checkbox-group/at-checkbox-group";
export { BadgeSize as BadgeSize1 } from "./components/at-chip-list/at-chip-list";
export { ColDef, GridApi, GridOptions, IRowNode } from "ag-grid-community";
export { ColumnManagerChangeEvent } from "./components/table-components/at-column-manager/at-column-manager";
export { DateRangeStrings, PromptMessage, PromptResponseAnimation, PromptResponseScore, PromptUserRole } from "./types";
export { HeaderSizes } from "./components/at-header/at-header";
export { InputType } from "./components/at-input/at-input";
export { InputPosition } from "./components/at-input-range/at-input-range";
export { Template } from "./components/at-layout/at-layout";
export { ListSelectorItem } from "./components/at-list-selector/at-list-selector";
export { LoadingSize, LoadingType, LoadingVariant } from "./components/at-loading/at-loading";
export { Align, AriaRole, OpenOn, Position } from "./components/at-menu/at-menu";
export { SelectOption } from "./types/select";
export { PlaceholderSize } from "./components/at-placeholder/at-placeholder";
export { RadioLayout, RadioOption } from "./components/at-radio-group/at-radio-group";
export { SidePanelDirection, SidePanelPosition, SidePanelSize } from "./components/at-side-panel/at-side-panel";
export { Width } from "./components/at-sidebar/at-sidebar";
export { SrcDestAlign } from "./components/at-src-dest/at-src-dest";
export { StatusBar } from "./components/at-status-bar/at-status-bar";
export { Layout } from "./components/at-tab-selector/at-tab/at-tab";
export { Layout as Layout1, Tab } from "./components/at-tab-selector/at-tab-selector";
export { FilterEvent } from "./components/table-components/at-table-filters/at-table-filters";
export { SelectedTimeRangeExtended, TimePresets } from "./models/at-time-range.models";
export { TimeUnit, TimeWithUnit } from "./types/time";
export { TimeRangeDisplay } from "./types/date";
export { LabelPosition } from "./components/at-toggle-switch/at-toggle-switch";
export { TooltipAlign, TooltipPosition } from "./components/at-tooltip/at-tooltip";
export { TreeNode } from "./types/tree";
export { ButtonSize as ButtonSize1 } from "./components/at-button/at-button";
export { TreeItemSize } from "./components/at-tree/at-tree-item/at-tree-item";
export namespace Components {
    /**
     * ### ```interface AccordionItem```
     * ```
     * item_id: string;
     * label: string;
     * content: string;
     * ```
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtAccordion {
        /**
          * Closes all accordion items.
         */
        "closeAll": () => Promise<void>;
        /**
          * If set, all child accordions will be open by default.
          * @default false
         */
        "default_open": boolean;
        /**
          * Used to create accordion items.
          * @default []
         */
        "items": AccordionItem[];
        /**
          * Opens all accordion items
         */
        "openAll": () => Promise<void>;
        /**
          * Toggles all accordion item's open state.
         */
        "toggleAll": () => Promise<void>;
        /**
          * Toggles the open state of a specific accordion item
          * @param value Id of element to be toggled
         */
        "toggleById": (value: string) => Promise<void>;
    }
    /**
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtAccordionItem {
        /**
          * Puts a light gray separator below the accordion item
          * @default true
         */
        "border": boolean;
        /**
          * Closes this accordion item
         */
        "closeAccordion": () => Promise<void>;
        /**
          * String content to display when the accordion is open
         */
        "content": string;
        /**
          * Return the accordion items open state
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Used to identify the accordion item among the other accordion items
         */
        "item_id": string;
        /**
          * Provides an atui-accordion-trigger with this label if set
         */
        "label": string;
        /**
          * Used for setting if the accordion is open.
          * @default false
         */
        "open": boolean;
        /**
          * Opens this accordion item
         */
        "openAccordion": () => Promise<void>;
    }
    interface AtAccordionTrigger {
        /**
          * Text to display on the trigger for the accordion item.
         */
        "label": string;
    }
    /**
     * @category Decoration
     * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
     */
    interface AtAvatar {
        /**
          * Alt text for the avatar image
         */
        "alt"?: string;
        /**
          * Initials text to display when no image is provided
         */
        "initials"?: string;
        /**
          * Size of the avatar
          * @default 'md'
         */
        "size": AvatarSize;
        /**
          * URL for the avatar image  Recommended cropped image sizes for optimal display: - sm:24x24px - md:32x32px - lg:40x40px  Higher resolution images (2x display size) are recommended for crisp display on high-DPI screens.
         */
        "src"?: string;
        /**
          * Visual variant of the avatar
          * @default 'secondary'
         */
        "variant": AvatarVariant;
    }
    /**
     * @category Feedback
     * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
     */
    interface AtBadge {
        /**
          * Icon appearing to the left of the badge title. MUST use mat-icon name.
         */
        "icon"?: string;
        /**
          * Impact of the badge, changes the colours.
          * @default 'low'
         */
        "impact": BadgeContrast;
        /**
          * Title shown on the badge.
         */
        "label"?: string;
        /**
          * Boolean value to round the edges of the badge.
          * @default false
         */
        "rounded": boolean;
        /**
          * Size of the badge. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size": BadgeSize;
        /**
          * Type of the badge. Determines colour theming.
          * @default 'default'
         */
        "type": BadgeType;
    }
    /**
     * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
     * Provides clickable path navigation with customizable separators and accessibility features.
     * @category Navigation
     */
    interface AtBreadcrumb {
        /**
          * Function to get the prefix for breadcrumbs.
          * @default () => ''
         */
        "get_prefix": (idx: number) => string;
        /**
          * Delimiter between the prefix and the prefix.
          * @default ''
         */
        "prefix_delimiter": string;
        /**
          * Used to place atui-breadcrumb-item(s) and atui-breadcrumb-separator(s) automatically with the string values given
         */
        "values": string[];
    }
    /**
     * @category Navigation
     * @description A breadcrumb item component for the breadcrumb.
     */
    interface AtBreadcrumbItem {
        /**
          * Applies different styling and makes the element non-clickable when set
         */
        "is_active"?: boolean;
        /**
          * Label for the breadcrumb item
         */
        "label": string;
    }
    /**
     * @category Actions
     * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
     */
    interface AtButton {
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled": boolean;
        /**
          * Material icon to be displayed before the label within the button
         */
        "icon"?: string;
        /**
          * Material icon to be displayed after the label within the button
         */
        "icon_after"?: string;
        /**
          * When set, will display a loading spinner inside the button and hide all labels & icons
          * @default false
         */
        "in_progress": boolean;
        /**
          * Label to be displayed within the button
         */
        "label": string;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size": ButtonSize;
        /**
          * Delay period on spinner
          * @default 1000
         */
        "spinner_delay_ms": number;
        /**
          * If set, will request submit from the closest form element when clicked
          * @default false
         */
        "submit": boolean;
        /**
          * Theme of the button. Default primary
          * @default 'primary'
         */
        "type": ButtonType;
    }
    /**
     * @category Form Controls
     * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
     */
    interface AtButtonGroup {
        /**
          * Disables the button group and prevents interaction
         */
        "disabled"?: boolean;
        /**
          * Error text for invalid choices.
         */
        "error_text"?: string;
        /**
          * Hint for options.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description.  Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Label for button group.
         */
        "label"?: string;
        /**
          * List of options to be displayed on the button group.
          * @default []
         */
        "options": ButtonGroupOption[];
        /**
          * Sets the current active button
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A button group option component for the button group.
     */
    interface AtButtonGroupOption {
        /**
          * Will disable interaction if set
         */
        "disabled": boolean;
        /**
          * Icon to be displayed in the button
         */
        "icon": string;
        /**
          * Will apply active styling to the button
         */
        "is_active": boolean;
        /**
          * String to be displayed in the button
         */
        "label": string;
        /**
          * ID of the button element and its option
         */
        "option_id"?: string;
    }
    /**
     * @category Layout
     * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
     */
    interface AtCard {
        /**
          * Title of the card.
         */
        "card_title"?: string;
        /**
          * Content of the card, placed below title, and subtitle.
         */
        "content"?: string;
        /**
          * Enables overflow on the content area. If false overflow will be applied on the host.
          * @default false
         */
        "overflow_content"?: boolean;
        /**
          * Apply or remove padding form the card content area.
          * @default true
         */
        "padding"?: boolean;
        /**
          * Box-shadow around card.
          * @default 'none'
         */
        "shadow"?: 'none' | 'sm' | 'lg';
        /**
          * Display footer persistently at bottom of card.
          * @default true
         */
        "sticky_footer"?: boolean;
        /**
          * Display header persistently at top of card.
          * @default true
         */
        "sticky_header"?: boolean;
        /**
          * Subtitle of the card, placed below title.
         */
        "subtitle"?: string;
    }
    /**
     * ### ```interface PointStyles```
     * ```
     *  pointBackgroundColor: Color;
     *  pointBorderColor: Color;
     *  pointBorderWidth: number;
     *  pointHitRadius: number;
     *  pointHoverBackgroundColor: Color;
     *  pointHoverBorderColor: Color;
     *  pointHoverBorderWidth: number;
     *  pointHoverRadius: number;
     *  pointRadius: number;
     *  pointRotaion: number;
     *  pointStyle: PointStyle;
     * ```
     * ### ```interface Threshold```
     * ```
     *  label: string;
     *  data: (number | Point | [number, number] | BubbleDataPoint)[];
     *  color?: string;
     *  dashLine?: boolean;
     *  stepped?: boolean;
     * ```
     */
    interface AtChartBarLine {
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette": ChartColorPalette;
        /**
          * Data to go in the chart. ChartDataset properties found [here for line](https://www.chartjs.org/docs/latest/charts/line.html), and [here for bar](https://www.chartjs.org/docs/latest/charts/bar.html)
         */
        "data": {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Getter method for the chart's configuration object
          * @returns Configuration of the chart
         */
        "getConfig": () => Promise<object>;
        /**
          * Height of the chart.
          * @default 'md'
         */
        "height"?: Height;
        /**
          * Options for the legend
         */
        "legend_format"?: object;
        /**
          * Additional options to go into the 'options' seciont of the chart configuration
         */
        "options"?: object;
        /**
          * Styles for the points in the chart
         */
        "point_styles"?: PointStyles;
        /**
          * Thresholds to be displayed in the chart
         */
        "thresholds"?: Threshold[];
        /**
          * The time range that the chart is displayed in.
         */
        "time_range"?: SelectedTimeRangeExtended;
        /**
          * Options for the tooltips on the chart
         */
        "tooltip_options"?: object;
        /**
          * Type of the chart
         */
        "type": 'bar' | 'line';
        /**
          * X axis formatting to be applied to the chart. If you would like the default formatting provided by chart.js, set this to an empty object.
         */
        "x_axis_format": object;
        /**
          * Y axis formatting to be applied to the chart.
         */
        "y_axis_format"?: object;
    }
    /**
     * @category Data Visualization
     * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
     */
    interface AtChartDonut {
        /**
          * Animations added to the chart configuration
         */
        "animations": object;
        /**
          * Optional heading text to display in the center of the donut chart
         */
        "center_text"?: string;
        /**
          * Optional value text to display in the center of the donut chart
         */
        "center_value"?: string;
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette": ChartColorPalette;
        /**
          * Controls the thickness of the donut ring. Value between 0 and 100. 0 means no cutout (solid circle), 100 means maximum cutout (thin ring). Default is 70.
          * @default 70
         */
        "cutout"?: number;
        /**
          * Data to be shown in the chart. ChartDataset properties can be found [here](https://www.chartjs.org/docs/latest/charts/doughnut.html#dataset-properties)
         */
        "data": {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Getter method for the chart's configuration object
          * @returns Configuration of the chart
         */
        "getConfig": () => Promise<object>;
        /**
          * Height of the chart
          * @default 'md'
         */
        "height"?: Height1;
        /**
          * Additional options for formatting the legend
          * @default {         labels: {             boxWidth: 10,             boxHeight: 10,             fontSize: 11,         },         onHover: (event): void => {             if (event.native) {                 (event.native.target as HTMLElement).style.cursor = 'pointer';             }         },         display: true,     }
         */
        "legend_format"?: object;
        /**
          * Additional options to be added to the chart configuration
         */
        "options"?: object;
        /**
          * Additional plugin options
         */
        "plugins"?: Plugin[];
        /**
          * Additional options for the tooltip
          * @default {         mode: 'index',         intersect: false,         position: 'nearest',     }
         */
        "tooltip_options"?: object;
    }
    /**
     * @category Form Controls
     * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtCheckbox {
        /**
          * Disables interaction with the checkbox
         */
        "disabled": boolean;
        /**
          * Subtitle of the checkbox component.
         */
        "hint_text"?: string;
        /**
          * Title of the checkbox component.
         */
        "label"?: string;
        /**
          * Id of the checkbox.
         */
        "option_id"?: string;
        /**
          * State of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Table Cell
     * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
     */
    interface AtCheckboxCell {
    }
    /**
     * ### ```interface CheckboxOptions```
     * ```
     *  id: string;
     *  label?: string;
     *  hint_text?: string;
     *  value?: boolean;
     * ```
     * @category Form Controls
     * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtCheckboxGroup {
        /**
          * Disables interaction with the checkbox
         */
        "disabled"?: boolean;
        /**
          * Displayed when the input is invalid
         */
        "error_text"?: string;
        /**
          * Hint to be placed below the label
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label of the checkbox group.
         */
        "label"?: string;
        /**
          * Sets the layout of the checkbox-group
          * @default 'column'
         */
        "layout"?: CheckboxLayout;
        /**
          * Options displayed in the checkbox group.
         */
        "options": CheckboxOptions[];
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A list of strings, containing the Id's of the currently selected checkboxes
          * @default []
         */
        "value": string[];
    }
    /**
     * @category Table Cell
     * @description A header component for displaying a checkbox.
     */
    interface AtCheckboxHeader {
    }
    /**
     * @category Utilities
     * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
     */
    interface AtChipList {
        /**
          * Items in the chip list.
         */
        "chips": string[];
        /**
          * Disables the list of chips. Prevents removing a chip.
         */
        "disabled": boolean;
        /**
          * Disables the list of chips but keeps the text readable. Prevents removing a chip.
         */
        "readonly": boolean;
        /**
          * Shows the 'Clear All' button
          * @default true
         */
        "show_clear_all": boolean;
        /**
          * Size of the chips. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size": BadgeSize1;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a list of chips.
     */
    interface AtChipListCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a color status indicator based on predefined types
     */
    interface AtColorStatusCell {
    }
    interface AtColumnManager {
        /**
          * Column definitions used in your at-table
         */
        "col_defs": ColDef[];
    }
    interface AtCustomTimeRange {
        /**
          * Whether time selection is enabled in addition to date selection
          * @default true
         */
        "can_set_time": boolean;
        /**
          * Default value for the from date
         */
        "default_from_date": Date;
        /**
          * Default value for the to date
         */
        "default_to_date": Date;
        /**
          * Current value of the from date
         */
        "from_date_value": Date;
        /**
          * Whether to lock the end date to the current time
          * @default false
         */
        "lock_end_date_to_now": boolean;
        /**
          * Maximum selectable date
          * @default new Date(Date.now())
         */
        "max_date": Date;
        /**
          * Minimum selectable date
          * @default MIN_DATE
         */
        "min_date": Date;
        /**
          * Minimum number of seconds for the time range
          * @default 60
         */
        "min_seconds": number;
        /**
          * Current value of the to date
         */
        "to_date_value": Date;
    }
    /**
     * @category Overlays
     * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
     * @Event - atuiDialogChange: Emitted when dialog is opened/closed.
     */
    interface AtDialog {
        /**
          * Whether to show a backdrop behind the panel, prevents any interaction with background UI.
          * @default true
         */
        "backdrop": boolean;
        /**
          * Closes the dialog modal
          * @returns Promise that resolves when the dialog is closed
         */
        "closeDialog": () => Promise<void>;
        /**
          * Will close the dialog if clicked
          * @default false
         */
        "close_backdrop": boolean;
        /**
          * Getter method for the open state of the dialog
          * @returns The current open state of the dialog
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Opens the dialog modal
          * @returns Promise that resolves when the dialog is opened
         */
        "openDialog": () => Promise<void>;
        /**
          * Role of the dialog element. Can be either 'dialog' or 'alertdialog'
          * @default 'dialog'
         */
        "role": 'dialog' | 'alertdialog';
        /**
          * Toggles the dialog modal between open and closed states
          * @returns Promise that resolves when the dialog state is toggled
         */
        "toggleDialog": () => Promise<void>;
        /**
          * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.
         */
        "trigger_id"?: string;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying and editing text.
     */
    interface AtEditTextCell {
    }
    /**
     * @category Form Controls
     * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
     */
    interface AtFormLabel {
        /**
          * Placed in the 'for' attribute on the label element
         */
        "for": string;
        /**
          * The text to be contained in the tooltip.
         */
        "info_text": string;
        /**
          * Label that appears before the info icon.
         */
        "label": string;
        /**
          * When true, there will be a red star on the label.
         */
        "required": boolean;
    }
    /**
     * @category Layout
     * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
     */
    interface AtHeader {
        /**
          * Adds a border to the bottom of the header.
         */
        "border"?: boolean;
        /**
          * Title of the header.
         */
        "header_title"?: string;
        /**
          * Icon of header. Must use mat-icon name.
         */
        "icon"?: string;
        /**
          * Adds 16 pixels of padding to the header element
          * @default true
         */
        "padding"?: boolean;
        /**
          * Size of the header.
          * @default 'h1'
         */
        "size": HeaderSizes;
        /**
          * Subtitle of the header.
         */
        "subtitle"?: string;
    }
    /**
     * @category Form Controls
     * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
     */
    interface AtInput {
        /**
          * Sets the 'autocomplete' attribute on the input element
          * @default 'on'
         */
        "autocomplete": string;
        /**
          * Allows the input to be cleared with a 'x' at the end of the input element
         */
        "clearable": boolean;
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled": boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Shows the error text
         */
        "invalid": boolean;
        /**
          * Label above the input container
         */
        "label": string;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder": string | number;
        /**
          * Makes the input read only
         */
        "readonly": boolean;
        /**
          * Adds a required * to the element
         */
        "required": boolean;
        /**
          * Type of the input
          * @default 'text'
         */
        "type": InputType;
        /**
          * The value of the input
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A numeric input component for entering numerical values.
     */
    interface AtInputNumeric {
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled": boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Shows the error text
         */
        "invalid": boolean;
        /**
          * Label above the input container
         */
        "label": string;
        /**
          * Max selectable value of the input.
          * @default 100
         */
        "max": number;
        /**
          * Min selectable value of the input.
          * @default 0
         */
        "min": number;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder": string;
        /**
          * Makes the input read only
         */
        "readonly": boolean;
        /**
          * Adds a required * to the element
         */
        "required": boolean;
        /**
          * Show buttons inside input or outside
          * @default true
         */
        "show_buttons": boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * The value of the input
          * @default 0
         */
        "value": number;
    }
    /**
     * @category Form Controls
     * @description A range input component for selecting a value within a specified range.
     */
    interface AtInputRange {
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is invalid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description if required. Content is available via info icon tooltip.
         */
        "info_text"?: string;
        /**
          * Set the input to an invalid state.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Position of the numeric input, left or right of the slider.
          * @default 'after'
         */
        "label_position": InputPosition;
        /**
          * Max selectable value of the slider.
          * @default 100
         */
        "max": number;
        /**
          * Min selectable value of the slider.
          * @default 0
         */
        "min": number;
        /**
          * Set the input to a readonly state.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Display numeric input with slider.
          * @default true
         */
        "show_input"?: boolean;
        /**
          * Display min and max text values.
          * @default true
         */
        "show_minmax"?: boolean;
        /**
          * Display step indicators.
          * @default true
         */
        "show_ticks"?: boolean;
        /**
          * Display order of input and slider.
          * @default true
         */
        "show_value"?: boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * suffix message for the input.
         */
        "suffix"?: string;
        /**
          * Numeric value of the slider component.
         */
        "value": number;
        /**
          * Warning message for the input.
         */
        "warning_text"?: string;
    }
    /**
     * @category Layout
     * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
     */
    interface AtLayout {
        /**
          * If overflow is allowed on the detail in master-detail
          * @default true
         */
        "overflow": boolean;
        /**
          * Template used to display content
          * @default 'master-detail'
         */
        "template": Template;
    }
    /**
     * @category Layout
     * @description A list item component for the list.
     */
    interface AtListItem {
        /**
          * Border below the list item.
          * @default true
         */
        "border"?: boolean;
        /**
          * Content of the list item placed at the right of the item.
         */
        "content"?: string;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title": string;
        /**
          * Size of the list item.
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Navigation
     * @description A list selector component for selecting an item from a list.
     */
    interface AtListSelector {
        /**
          * Whether each item has a bottom border.
         */
        "has_border": boolean;
        /**
          * List of items.
          * @default []
         */
        "options": ListSelectorItem[];
        /**
          * The selected item.
         */
        "selected_item_id": string;
    }
    /**
     * @category Navigation
     * @description A list selector item component for the list selector.
     */
    interface AtListSelectorItem {
        /**
          * Border below the list item.
          * @default false
         */
        "has_border"?: boolean;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Visual indication of the selected item.
         */
        "is_selected"?: boolean;
        /**
          * Id of the list item
         */
        "item_id": string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title": string;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Feedback
     * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
     */
    interface AtLoading {
        /**
          * Size of the loading indicator
          * @default 'md'
         */
        "size": LoadingSize;
        /**
          * Custom text to display with text-based animations
          * @default 'Loading'
         */
        "text": string;
        /**
          * Visual type/color of the loading indicator
          * @default 'default'
         */
        "type": LoadingType;
        /**
          * Type of loading animation to display
          * @default 'spinner'
         */
        "variant": LoadingVariant;
    }
    interface AtMenu {
        /**
          * Alignment of opened menu element relative to trigger element.
          * @default 'start'
         */
        "align": Align;
        /**
          * Prevent closing of menu when options are selected. Used for multi-selection controls.
          * @default true
         */
        "autoclose": boolean;
        /**
          * Closes the dropdown menu.
         */
        "closeMenu": () => Promise<void>;
        /**
          * Prevent opening menu
          * @default false
         */
        "disabled": boolean;
        /**
          * Return the current menu open state
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'
          * @default 0
         */
        "offset_x": number;
        /**
          * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'
          * @default 0
         */
        "offset_y": number;
        /**
          * Opens the dropdown menu.
         */
        "openMenu": () => Promise<void>;
        /**
          * Position of opened menu element relative to the trigger element.
          * @default 'bottom'
         */
        "position": Position;
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default 'menu'
         */
        "role": AriaRole;
        /**
          * Toggles the dropdown menu's open state.
         */
        "toggleMenu": () => Promise<void>;
        /**
          * Event type that triggers the menu open state. Click or Hover.
          * @default 'click'
         */
        "trigger": OpenOn;
        /**
          * Target an external element to use as the trigger. When provided, clicking an element wia matching data-menu attribute value will toggle the side panel.
         */
        "trigger_id"?: string;
        /**
          * String representing the 'width' style of the menu element ('NUMpx'). To fit menu to content use width="fit-content" - Avoid width='auto' or 'inherit' as this will result in 100% width.
          * @default 'fit-content'
         */
        "width"?: string;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a menu.
     */
    interface AtMenuCell {
    }
    interface AtMenuItem {
        /**
          * Disables user interaction with the menu-item and updates visual style to appear inactive
          * @default false
         */
        "disabled": boolean;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
          * @default false
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Feedback
     * @description A message component for displaying notifications, alerts, or informational messages.
     */
    interface AtMessage {
        /**
          * Content of the message.
         */
        "content": string;
        /**
          * An icon is provided for success, warning, error, or info types. You can provide a custom value to replace the default icon.  Must use material icon name.
         */
        "icon"?: string;
        /**
          * Theme of the message, either "light" or "default".
          * @default 'high'
         */
        "impact": 'low' | 'high';
        /**
          * Title of the app message.
         */
        "message_title": string;
        /**
          * Type of the message.
         */
        "type": 'error' | 'warning' | 'success' | 'info' | 'default';
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying multiple buttons.
     */
    interface AtMultiBtnCell {
    }
    /**
     * @category Form Controls
     * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtMultiSelect {
        /**
          * Set the select to be clearable.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error text for the select.
          * @default ''
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
          * @default ''
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
          * @default ''
         */
        "info_text"?: string;
        /**
          * Set the select to appear invalid.
         */
        "invalid"?: boolean;
        /**
          * Label of the select.
          * @default ''
         */
        "label"?: string;
        /**
          * Options displayed in the dropdown menu.
         */
        "options": SelectOption[];
        /**
          * Placeholder text for the select.
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to enable typeahead search.
         */
        "typeahead"?: boolean;
        /**
          * The selected items
          * @default []
         */
        "value": string[];
    }
    /**
     * @category Feedback
     * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
     */
    interface AtPlaceholder {
        /**
          * Content to be displayed below the title
         */
        "content": string;
        /**
          * Material icon to be displayed in the center of the placeholder
         */
        "icon"?: string;
        /**
          * Title to be displayed below the icon
         */
        "placeholder_title": string;
        /**
          * Will show a loading spinner when set
         */
        "show_loading_spinner": boolean;
        /**
          * Size of the placeholder
          * @default 'md'
         */
        "size": PlaceholderSize;
    }
    /**
     * @category Prompt
     * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
     */
    interface AtPromptContainer {
        /**
          * Programmatically add a message to the conversation thread
          * @param role - The message role
          * @param content - The message content
         */
        "addMessage": (role: PromptUserRole, content: string) => Promise<void>;
        /**
          * Append content to the last message in the thread (useful for streaming responses)
          * @param content - The content to append
          * @returns Promise<boolean> - Returns true if successful, false if no messages exist or last message is not from assistant
         */
        "appendToLastMessage": (content: string) => Promise<boolean>;
        /**
          * Disables all interactions with the container
          * @default false
         */
        "disabled": boolean;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy": boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit": boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote": boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text": string;
        /**
          * Programmatically focus the input field
         */
        "focusInput": () => Promise<void>;
        /**
          * Shows loading state and disables input
          * @default false
         */
        "loading": boolean;
        /**
          * Maximum character length for input messages
          * @default 2000
         */
        "max_message_length": number;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages": PromptMessage[];
        /**
          * Start a new conversation thread by clearing all messages and resetting state
         */
        "newThread": () => Promise<void>;
        /**
          * Placeholder text for the input field
          * @default 'Type your message here...'
         */
        "placeholder": string;
        /**
          * Enable streaming text animations for system/assistant messages - 'none': No animation - 'fade': Fade in the entire message - 'words': Animate words appearing sequentially like ChatGPT
          * @default 'words'
         */
        "response_animation": PromptResponseAnimation;
        /**
          * Control the send button state programmatically
          * @param enabled - Whether the send functionality should be enabled
         */
        "setSendEnabled": (enabled: boolean) => Promise<void>;
        /**
          * Controls visibility of the "New Thread" button in the header
          * @default true
         */
        "show_new_thread_button": boolean;
    }
    /**
     * @category Prompt
     * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
     */
    interface AtPromptInput {
        /**
          * Disable input interactions and apply visual indication
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Controls whether the component is in progress (shows stop button) or ready to send (shows send button)
          * @default false
         */
        "in_progress": boolean;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Label above the input container
         */
        "label": string;
        /**
          * Maximum height in pixels for auto-resize
          * @default 240
         */
        "max_height": number;
        /**
          * Maximum character length with counter display
          * @default 2000
         */
        "max_length": number;
        /**
          * Placeholder text to be shown when no input is passed
          * @default 'Enter your message...'
         */
        "placeholder": string;
        /**
          * The value of the input
          * @default ''
         */
        "value": string;
    }
    /**
     * @category Prompt
     * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
     */
    interface AtPromptMessage {
        /**
          * The message content text
          * @default ''
         */
        "content": string;
        /**
          * Display copy action for assistant messages - copies message content to clipboard
          * @default false
         */
        "enable_copy": boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit": boolean;
        /**
          * Display voting actions for assistant messages
          * @default false
         */
        "enable_vote": boolean;
        /**
          * Shows error state styling and enables retry action
          * @default false
         */
        "error": boolean;
        /**
          * Custom error message text (defaults to generic error message)
         */
        "error_message": string;
        /**
          * Shows loading state with animated placeholder content
          * @default false
         */
        "loading": boolean;
        /**
          * Unique identifier for the message
         */
        "message_id": string;
        /**
          * Display name for the message sender
         */
        "name": string;
        /**
          * Animation type for text streaming effect - 'none': No animation (default) - 'fade': Fade in the entire message - 'words': Animate words appearing sequentially
          * @default 'words'
         */
        "response_animation": PromptResponseAnimation;
        /**
          * The role/type of the message sender (only 'user' and 'assistant' are supported)
          * @default 'user'
         */
        "role": PromptUserRole;
        /**
          * The current vote score of the message
          * @default PromptResponseScore.NONE
         */
        "score": PromptResponseScore;
    }
    /**
     * @category Prompt
     * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
     */
    interface AtPromptThread {
        /**
          * Automatically scroll to the bottom when new messages are added
          * @default true
         */
        "auto_scroll": boolean;
        /**
          * Display name for chatbot/assistant messages
          * @default 'Assistant'
         */
        "chatbot_title": string;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy": boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit": boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote": boolean;
        /**
          * Shows a loading indicator for incoming messages
          * @default false
         */
        "loading": boolean;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages": PromptMessage[];
        /**
          * Enable streaming text animations for system/assistant messages - 'none': No animation (default) - 'fade': Fade in the entire message - 'words': Animate words appearing sequentially like ChatGPT
          * @default 'words'
         */
        "response_animation": PromptResponseAnimation;
        /**
          * Scrolls the last user message to the top of the viewport
         */
        "scrollLastMessageToTop": () => Promise<void>;
        /**
          * Scrolls the thread to the bottom with smooth animation
         */
        "scrollToBottom": () => Promise<void>;
    }
    /**
     * @category Form Controls
     * @description A radio button component for selecting a single option from a predefined list.
     */
    interface AtRadio {
        /**
          * Disables interaction with the radio
         */
        "disabled"?: boolean;
        /**
          * Name of radio group. Buttons sharing a name are associated with the same radio group.
         */
        "group"?: string;
        /**
          * Subtitle of the radio component.
         */
        "hint_text"?: string;
        /**
          * Title of the radio component.
         */
        "label"?: string;
        /**
          * ID of the radio button element and its option
         */
        "option_id"?: string;
        /**
          * Disables the radio option but keeps the text readable. Used for global readonly form state.
          * @default false
         */
        "readonly": boolean;
        /**
          * Sets the value of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
     */
    interface AtRadioGroup {
        /**
          * Disables the radio options but keeps the text readable. Use for global readonly form state.
         */
        "disabled"?: boolean;
        /**
          * Shown when 'invalid' prop is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid": boolean;
        /**
          * Label of the radio group.
         */
        "label"?: string;
        /**
          * Direction that the radio elements are placed
          * @default 'column'
         */
        "layout"?: RadioLayout;
        /**
          * Options displayed in the radio group.
         */
        "options": RadioOption[];
        /**
          * Disables interaction with atui-radio elements when set
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A string containing the Id of the currently selected radio
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A search component for filtering data.
     */
    interface AtSearch {
        /**
          * Hint text for the input, appears below the search bar.
         */
        "hint_text"?: string;
        /**
          * Tooltip description.
         */
        "info_text"?: string;
        /**
          * Label text above the search bar.
         */
        "label"?: string;
        /**
          * String content of the search.
         */
        "model"?: string;
        /**
          * Placeholder text inside the search component.
         */
        "placeholder"?: string;
    }
    /**
     * @category Data Tables
     * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
     */
    interface AtSearchTable {
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns": boolean;
        /**
          * Column definitions passed to at-table component.
          * @default []
         */
        "col_defs": ColDef[];
        /**
          * Returns the **currently displayed row nodes** from the ag-Grid instance.  This asynchronous method retrieves an array of row nodes representing the rows currently visible (rendered) in the grid, after filtering, sorting, and other view-based operations.
          * @template T The data type contained in each row node.
          * @returns Promise resolving to an array of displayed row nodes.
         */
        "getDisplayedRows": <T>() => Promise<IRowNode<T>[]>;
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager"?: boolean;
        /**
          * If true the table dropdown filters will not be added
         */
        "hide_dropdown_filters"?: boolean;
        /**
          * If true the table export menu will not be added
         */
        "hide_export_menu"?: boolean;
        /**
          * Label for the table, appears above the search input.
         */
        "label": string;
        /**
          * Default page size of the table
          * @default 10
         */
        "page_size"?: number;
        /**
          * Hint text displayed below the search label.
         */
        "search_hint": string;
        /**
          * Info text displayed in the search info tooltip.
         */
        "search_info_tooltip": string;
        /**
          * Label for the search input.
         */
        "search_label": string;
        /**
          * Table data passed to at-table component.
         */
        "table_data": {
        items: any[];
        total: number;
    };
        /**
          * Updates the data of rows in the AG Grid based on their displayed row index.  Use this method when you need to programmatically update one or more specific rows in the grid, identified by their current displayed index. This is particularly useful when you want to perform partial updates (such as in-place cell editing, real-time updates, or upon receiving new data from a server), and want to reflect these changes immediately in the UI with optional visual feedback.
          * @template T - The data type of the row's underlying data structure.
          * @param rowUpdates - An array of objects specifying the row indices and the data updates to apply. - `index`: The displayed index of the row to update. - `update`: An object containing the updated data for the row.
          * @param options - Optional settings for the update operation. - `flash`: Whether to visually flash the updated rows after the data change (improves user visibility). - `forceRefresh`: Whether to force refresh the row cells after updating (useful for advanced rendering scenarios).
          * @example // Update row at displayed index 2 with new values and flash the change updateRowByIndex([{ index: 2, update: { status: 'Processed' }}], { flash: true });
          * @remarks - This function works with currently rendered rows; if rows are virtualized or paged out, ensure   the specified indices match the grid's current rendering context. - Recommended for cases where quick, UI-driven row data mutations are required (such as action buttons,   websocket pushes, or UI triggers).
         */
        "updateRowByIndex": <T>(rowUpdates: RowUpdate<T>[], options?: RowUpdateOptions) => Promise<void>;
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtSelect {
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default true
         */
        "autoclose"?: boolean;
        /**
          * Set the select input to be clearable. Only enabled on typeahead selects.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is valid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Set the input to appear valid.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Sets the options in the dropdown
         */
        "options": SelectOption[];
        /**
          * Placeholder for the select.
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to appear as a typeahead input.
          * @default false
         */
        "typeahead"?: boolean;
        /**
          * Value of the currently selected option
         */
        "value": string;
    }
    /**
     * @category Overlays
     * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
     * @dependency at-button
     */
    interface AtSidePanel {
        /**
          * Whether to show a backdrop behind the panel, prevents any interaction with background UI.
          * @default false
         */
        "backdrop": boolean;
        /**
          * Closes the side panel
          * @returns Promise that resolves when the panel is closed
         */
        "closeSidePanel": () => Promise<void>;
        /**
          * Will close the sidepanel if clicked
          * @default false
         */
        "close_backdrop": boolean;
        /**
          * Getter method for the open state of the side panel
          * @returns The current open state of the side panel
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Displays a close button if set
          * @default true
         */
        "has_close_button": boolean;
        /**
          * Enables scroll overflow on the sidepanel container
          * @default true
         */
        "has_scrollbar": boolean;
        /**
          * Opens the side panel
          * @returns Promise that resolves when the panel is opened
         */
        "openSidePanel": () => Promise<void>;
        /**
          * Position of the side panel
          * @default 'right'
         */
        "origin": SidePanelDirection;
        /**
          * Subtitle displayed in the side panel
         */
        "panel_subtitle": string;
        /**
          * Title displayed in the side panel
         */
        "panel_title": string;
        /**
          * If sidepanel should use fixed positioning (will fallback to absolute)
          * @default 'fixed'
         */
        "position": SidePanelPosition;
        /**
          * Size of the size panel
          * @default 'xs'
         */
        "size": SidePanelSize;
        /**
          * Toggles the side panel between open and closed states
          * @returns Promise that resolves when the panel state is toggled
         */
        "toggleSidePanel": () => Promise<void>;
        /**
          * Target an external element to use as the trigger. When provided, clicking an element wia matching data-sidepanel attribute value will toggle the side panel.
         */
        "trigger_id"?: string;
    }
    /**
     * @category Navigation
     * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
     */
    interface AtSidebar {
        /**
          * Display a clickable backdrop when mode = over
          * @default false
         */
        "backdrop": boolean;
        /**
          * Size of the sidebar when collapsed.
         */
        "collapsible": 'offcanvas' | 'icon' | 'none';
        /**
          * Opens the sidebar by default when set
          * @default false
         */
        "default_open"?: boolean;
        /**
          * Getter method for the open state of the sidebar
          * @returns The current open state of the sidebar
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * How the sidenav interacts with main content when open
         */
        "mode": 'over' | 'push';
        /**
          * Position of the sidebar on the page
         */
        "side": 'left' | 'right';
        /**
          * Toggles the sidebar's open state.
         */
        "toggleSidebar": () => Promise<void>;
        /**
          * Width of the sidebar
          * @default 'menu'
         */
        "width": Width;
    }
    /**
     * @category Navigation
     * @description 
     */
    interface AtSidebarMenu {
    }
    /**
     * @category Navigation
     * @description A sidebar menu item component for the sidebar.
     */
    interface AtSidebarMenuitem {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change style to indicate menuitem is active when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Navigation
     * @description Display nested sub-menus in the atui-sidebar.
     * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
     * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
     * Menu indent styling is supported up to 3 levels.
     */
    interface AtSidebarSubmenu {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label": string;
    }
    /**
     * @category Navigation
     * @description A sidebar trigger component for the sidebar.
     */
    interface AtSidebarTrigger {
    }
    /**
     * @category Utilities
     * @description A src-dest component for displaying source and destination information.
     */
    interface AtSrcDest {
        /**
          * Aligns the content to the left or center of the container
          * @default 'left'
         */
        "align": SrcDestAlign;
        /**
          * Subtitle displayed on the right
         */
        "dest_subtitle": string;
        /**
          * Text displayed on the right
         */
        "dest_text": string;
        /**
          * Title displayed on the right
         */
        "dest_title": string;
        /**
          * Subtitle displayed on the left
         */
        "src_subtitle": string;
        /**
          * Text displayed on the left
         */
        "src_text": string;
        /**
          * Title displayed on the left
         */
        "src_title": string;
    }
    /**
     * @category Data Tables
     * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
     */
    interface AtStaticTable {
        /**
          * Column definitions for the table
         */
        "col_defs": ColDef[];
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager": boolean;
        /**
          * Max number of items per page
          * @default 10
         */
        "page_size": number;
        /**
          * Data to go into the table
         */
        "table_data": {
        items: any[];
        total: number;
    };
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Data Visualization
     * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
     */
    interface AtStatusBar {
        /**
          * Disables the tooltip when hovered
         */
        "disable_tooltip"?: boolean;
        /**
          * Height of the status bar
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * List of segments that make up the status bar. Each segment implements the StatusBar interface.
          * @default []
         */
        "status_bar": StatusBar[];
    }
    /**
     * @category Navigation
     * @description A tab component for the tab selector.
     */
    interface AtTab {
        /**
          * Applies styling when active
         */
        "is_active": boolean;
        /**
          * Styling based on the layout of the tabs
          * @default 'horizontal'
         */
        "layout": Layout;
        /**
          * ID of the tab
         */
        "tab_id": string;
        /**
          * Title to be displayed in the tab
         */
        "tab_title": string;
    }
    /**
     * @category Navigation
     * @description A tab content component for the tab selector.
     */
    interface AtTabContent {
        /**
          * Determines if the tab content is active
          * @default false
         */
        "is_active": boolean;
        /**
          * ID of the tab
         */
        "tab_id": string;
    }
    /**
     * ### interface Tab
     * ```
     * {
     *   id: string;
     *   title: string;
     * }
     * ```
     * @category Navigation
     * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
     */
    interface AtTabSelector {
        /**
          * Sets the current active tab
         */
        "active_tab"?: string;
        /**
          * Gets the current active tab
          * @returns The current active_tab value
         */
        "getActiveTab": () => Promise<string>;
        /**
          * hide navigation when you want to provide custom controls
          * @default false
         */
        "hide_nav": boolean;
        /**
          * Layout of the tabs
          * @default 'horizontal'
         */
        "layout": Layout1;
        /**
          * Sets the current active tab
          * @param value - The tab id to set as active
         */
        "setActiveTab": (value: string) => Promise<void>;
        /**
          * List of tabs the selector will have
          * @default []
         */
        "tabs": Tab[];
    }
    /**
     * @category Data Tables
     * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
     */
    interface AtTable {
        /**
          * The AG Grid API
         */
        "ag_grid": GridApi;
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns": boolean;
        /**
          * Column definitions for the table
         */
        "col_defs": ColDef[];
        /**
          * Method used to initialize the table.
          * @returns The [AG Grid API](https://www.ag-grid.com/javascript-data-grid/grid-api/)
         */
        "createGrid": () => Promise<GridApi>;
        /**
          * If true, disables automatic grid initialization. When disabled, you must manually call createGrid(). Used when the table is controlled by a parent component.
          * @default false
         */
        "disable_auto_init": boolean;
        /**
          * Gets the AG Grid API instance
          * @returns The AG Grid API
         */
        "getGridApi": () => Promise<GridApi>;
        /**
          * Default page size of the table if pagination is activated
          * @default 10
         */
        "page_size": number;
        /**
          * Data provided to the table
         */
        "table_data": {
        items: any[];
        total: number;
    };
        /**
          * Disables the default pagination provided by agGrid. When using custom pagination, the default sorting provided by ag grid will not work correctly.
          * @default false
         */
        "use_custom_pagination": boolean;
        /**
          * Disables the default sorting provided by agGrid.
          * @default false
         */
        "use_custom_sorting": boolean;
    }
    /**
     * @category Data Tables
     * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
     */
    interface AtTableActions {
        /**
          * AG Grid Api (provided by at-table createGrid method)
         */
        "ag_grid": GridApi;
    }
    /**
     * @category Data Tables
     * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
     */
    interface AtTableExportMenu {
    }
    /**
     * @category Data Tables
     * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
     */
    interface AtTableFilterMenu {
        /**
          * Column definitions used in your at-table
         */
        "col_defs": ColDef[];
        /**
          * Currently selected filter columns
          * @default []
         */
        "selected": string[];
    }
    interface AtTableFilters {
        /**
          * Column definitions used in your at-table
         */
        "col_defs": ColDef[];
        /**
          * Currently selected columns and filter values
          * @default []
         */
        "selected": { id: string; value: string }[];
    }
    /**
     * @category Data Tables
     * @description Optional component for use with ```<at-table>```.
     * Provides controls for pagination if you would like to
     * have control of the table's pagination.
     */
    interface AtTablePagination {
        /**
          * Current page number
          * @default 1
         */
        "current_page": number;
        /**
          * Total number of pages
          * @default 1
         */
        "num_pages": number;
        /**
          * Options provided in dropdown for page sizes.
          * @default [         { value: '5' },         { value: '10' },         { value: '20' },         { value: '50' },         { value: '100' },     ]
         */
        "page_size_options": SelectOption[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a badge.
     */
    interface AtTextBadgeCell {
    }
    /**
     * @category Table Cell
     * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
     */
    interface AtTextCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
     */
    interface AtTextIconCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with an image.
     */
    interface AtTextImageCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a status.
     */
    interface AtTextStatusCell {
    }
    /**
     * @category Form Controls
     * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
     */
    interface AtTextarea {
        /**
          * Sets the 'autocomplete' attribute on the textarea
          * @default 'on'
         */
        "autocomplete": string;
        /**
          * Disables interaction with the textarea
         */
        "disabled": boolean;
        /**
          * Displayed when invalid is set
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Displays then error text when set
         */
        "invalid": boolean;
        /**
          * Label to be displayed for the textarea
         */
        "label": string;
        /**
          * Maximum number of rows to expand to
          * @default 10
         */
        "max_rows": number;
        /**
          * Minimum number of rows to display
          * @default 1
         */
        "min_rows": number;
        /**
          * Placeholder in the textarea when no text is placed
         */
        "placeholder": string;
        /**
          * Makes the textarea read only
         */
        "readonly": boolean;
        /**
          * Adds a required * to the label
         */
        "required": boolean;
        /**
          * Sets the value of the textarea
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A time range component for selecting time periods.
     */
    interface AtTimeRange {
        /**
          * Custom error message to show when an invalid time is inputted.
          * @default null
         */
        "custom_error_message": any;
        /**
          * Enable range limit setting. If set to false, use Jan 1, 1985 as the lower limit of time range, ignoring the value of range limit.
          * @default true
         */
        "enable_range_limit": boolean;
        /**
          * Enable relative time selection.
          * @default true
         */
        "enable_relative_time": boolean;
        /**
          * Define the presets for the relative time ranges.
         */
        "presets": TimePresets[];
        /**
          * Lower limit of the time range.
          * @default 7
         */
        "range_limit": number;
        /**
          * Selected time range.
          * @default {         selected: {             unit: TimeUnit.HOURS,             value: 1,         },     }
         */
        "selected_time_range": SelectedTimeRangeExtended;
        /**
          * Enable all time selection.
          * @default false
         */
        "show_all_time": boolean;
    }
    /**
     * @category Form Controls
     * @description A time with unit component for selecting a time period.
     */
    interface AtTimeWithUnit {
        /**
          * Common time preset options to display
         */
        "common_options": TimePresets[];
        /**
          * Custom error message to display when validation fails
          * @default null
         */
        "custom_error_message": any;
        /**
          * Initial time selection value
         */
        "initial_selected_time": TimeWithUnit | TimeRangeDisplay.ALL;
        /**
          * Maximum number of seconds allowed for time selection
          * @default Number.MAX_SAFE_INTEGER
         */
        "max_seconds": number;
        /**
          * Minimum date constraint for time selection
          * @default null
         */
        "min_date": Date;
        /**
          * Minimum number of seconds allowed for time selection
          * @default 60
         */
        "min_seconds": number;
        /**
          * Whether to show the 'All Time' option
          * @default false
         */
        "show_all_time": boolean;
        /**
          * Available time units for selection
         */
        "units": TimeUnit[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle.
     */
    interface AtTitleSubtitleCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle with a date.
     */
    interface AtTitleSubtitleDateCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a toggle.
     */
    interface AtToggleCell {
    }
    /**
     * @category Form Controls
     * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
     */
    interface AtToggleSwitch {
        /**
          * Disable interaction with the toggle.
         */
        "disabled"?: boolean;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Label displayed alongside the toggle.
         */
        "label"?: string;
        /**
          * Position of the label, left or right of the toggle.
          * @default 'before'
         */
        "label_position": LabelPosition;
        /**
          * Show the toggle label.
          * @default true
         */
        "show_label"?: boolean;
        /**
          * Set the toggles state.
          * @default false
         */
        "value": boolean;
    }
    /**
     * @category **Overlays**
     * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
     */
    interface AtTooltip {
        /**
          * Alignment of opened tooltip element relative to trigger element.
          * @default 'center'
         */
        "align": TooltipAlign;
        /**
          * Closes the tooltip.
         */
        "closeTooltip": () => Promise<void>;
        /**
          * Delay before showing and hiding the tooltip when interacting with the trigger element.
          * @default 150
         */
        "delay"?: number;
        /**
          * Prevent opening tooltip
          * @default false
         */
        "disabled": boolean;
        /**
          * Offset in pixels from the edge of the trigger element
          * @default 8
         */
        "offset"?: number;
        /**
          * Opens the tooltip.
         */
        "openTooltip": () => Promise<void>;
        /**
          * Position of opened tooltip element relative to the trigger element.
          * @default 'top'
         */
        "position": TooltipPosition;
        /**
          * Target an external element to use as the trigger. When provided, clicking an element wia matching data-tooltip attribute value will toggle the side panel.
         */
        "trigger_id"?: string;
        /**
          * Maximum width constraint for the tooltip in pixels. Defaults to 300px for readability.
          * @default '200px'
         */
        "width"?: string;
    }
    /**
     * ### ```interface ItemNode```
     * ```
     *  id: string;
     *  displayName: string;
     *  children: ItemNode[];
     *  isSelected?: boolean;
     *  tooltip?: string;
     * ```
     */
    interface AtTree {
        /**
          * List of items to be displayed in the tree
         */
        "item_list": TreeNode[];
        /**
          * Set the size of the tree button, default sm
          * @default 'sm'
         */
        "size": ButtonSize1;
    }
    interface AtTreeItem {
        /**
          * Defines the indent of the tree item
         */
        "depth"?: number;
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Determines whether to add the arrow indicator icon
          * @default false
         */
        "has_children"?: boolean;
        /**
          * Label to be displayed within the button
         */
        "label": string;
        /**
          * Determines the direction of the indicator arrow
          * @default false
         */
        "selected"?: boolean;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size": TreeItemSize;
    }
}
export interface AtAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtAccordionItemElement;
}
export interface AtBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtBreadcrumbElement;
}
export interface AtButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtButtonElement;
}
export interface AtButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtButtonGroupElement;
}
export interface AtButtonGroupOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtButtonGroupOptionElement;
}
export interface AtCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtCheckboxElement;
}
export interface AtCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtCheckboxGroupElement;
}
export interface AtChipListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtChipListElement;
}
export interface AtColumnManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtColumnManagerElement;
}
export interface AtCustomTimeRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtCustomTimeRangeElement;
}
export interface AtDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtDialogElement;
}
export interface AtInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtInputElement;
}
export interface AtInputNumericCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtInputNumericElement;
}
export interface AtInputRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtInputRangeElement;
}
export interface AtListSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtListSelectorElement;
}
export interface AtMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtMenuElement;
}
export interface AtMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtMenuItemElement;
}
export interface AtMultiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtMultiSelectElement;
}
export interface AtPromptContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtPromptContainerElement;
}
export interface AtPromptInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtPromptInputElement;
}
export interface AtPromptMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtPromptMessageElement;
}
export interface AtPromptThreadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtPromptThreadElement;
}
export interface AtRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtRadioElement;
}
export interface AtRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtRadioGroupElement;
}
export interface AtSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtSearchElement;
}
export interface AtSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtSelectElement;
}
export interface AtSidePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtSidePanelElement;
}
export interface AtSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtSidebarElement;
}
export interface AtTabSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTabSelectorElement;
}
export interface AtTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTableElement;
}
export interface AtTableActionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTableActionsElement;
}
export interface AtTableExportMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTableExportMenuElement;
}
export interface AtTableFilterMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTableFilterMenuElement;
}
export interface AtTableFiltersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTableFiltersElement;
}
export interface AtTablePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTablePaginationElement;
}
export interface AtTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTextareaElement;
}
export interface AtTimeRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTimeRangeElement;
}
export interface AtTimeWithUnitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTimeWithUnitElement;
}
export interface AtToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtToggleSwitchElement;
}
export interface AtTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTreeElement;
}
export interface AtTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtTreeItemElement;
}
declare global {
    /**
     * ### ```interface AccordionItem```
     * ```
     * item_id: string;
     * label: string;
     * content: string;
     * ```
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface HTMLAtAccordionElement extends Components.AtAccordion, HTMLStencilElement {
    }
    var HTMLAtAccordionElement: {
        prototype: HTMLAtAccordionElement;
        new (): HTMLAtAccordionElement;
    };
    interface HTMLAtAccordionItemElementEventMap {
        "atuiAccordionChange": boolean;
    }
    /**
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface HTMLAtAccordionItemElement extends Components.AtAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtAccordionItemElementEventMap>(type: K, listener: (this: HTMLAtAccordionItemElement, ev: AtAccordionItemCustomEvent<HTMLAtAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtAccordionItemElementEventMap>(type: K, listener: (this: HTMLAtAccordionItemElement, ev: AtAccordionItemCustomEvent<HTMLAtAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtAccordionItemElement: {
        prototype: HTMLAtAccordionItemElement;
        new (): HTMLAtAccordionItemElement;
    };
    interface HTMLAtAccordionTriggerElement extends Components.AtAccordionTrigger, HTMLStencilElement {
    }
    var HTMLAtAccordionTriggerElement: {
        prototype: HTMLAtAccordionTriggerElement;
        new (): HTMLAtAccordionTriggerElement;
    };
    /**
     * @category Decoration
     * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
     */
    interface HTMLAtAvatarElement extends Components.AtAvatar, HTMLStencilElement {
    }
    var HTMLAtAvatarElement: {
        prototype: HTMLAtAvatarElement;
        new (): HTMLAtAvatarElement;
    };
    /**
     * @category Feedback
     * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
     */
    interface HTMLAtBadgeElement extends Components.AtBadge, HTMLStencilElement {
    }
    var HTMLAtBadgeElement: {
        prototype: HTMLAtBadgeElement;
        new (): HTMLAtBadgeElement;
    };
    interface HTMLAtBreadcrumbElementEventMap {
        "atuiClick": number;
    }
    /**
     * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
     * Provides clickable path navigation with customizable separators and accessibility features.
     * @category Navigation
     */
    interface HTMLAtBreadcrumbElement extends Components.AtBreadcrumb, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtBreadcrumbElementEventMap>(type: K, listener: (this: HTMLAtBreadcrumbElement, ev: AtBreadcrumbCustomEvent<HTMLAtBreadcrumbElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtBreadcrumbElementEventMap>(type: K, listener: (this: HTMLAtBreadcrumbElement, ev: AtBreadcrumbCustomEvent<HTMLAtBreadcrumbElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtBreadcrumbElement: {
        prototype: HTMLAtBreadcrumbElement;
        new (): HTMLAtBreadcrumbElement;
    };
    /**
     * @category Navigation
     * @description A breadcrumb item component for the breadcrumb.
     */
    interface HTMLAtBreadcrumbItemElement extends Components.AtBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLAtBreadcrumbItemElement: {
        prototype: HTMLAtBreadcrumbItemElement;
        new (): HTMLAtBreadcrumbItemElement;
    };
    interface HTMLAtButtonElementEventMap {
        "atuiClick": AtEvent;
    }
    /**
     * @category Actions
     * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
     */
    interface HTMLAtButtonElement extends Components.AtButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtButtonElementEventMap>(type: K, listener: (this: HTMLAtButtonElement, ev: AtButtonCustomEvent<HTMLAtButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtButtonElementEventMap>(type: K, listener: (this: HTMLAtButtonElement, ev: AtButtonCustomEvent<HTMLAtButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtButtonElement: {
        prototype: HTMLAtButtonElement;
        new (): HTMLAtButtonElement;
    };
    interface HTMLAtButtonGroupElementEventMap {
        "atuiIndexChange": number;
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
     */
    interface HTMLAtButtonGroupElement extends Components.AtButtonGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtButtonGroupElementEventMap>(type: K, listener: (this: HTMLAtButtonGroupElement, ev: AtButtonGroupCustomEvent<HTMLAtButtonGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtButtonGroupElementEventMap>(type: K, listener: (this: HTMLAtButtonGroupElement, ev: AtButtonGroupCustomEvent<HTMLAtButtonGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtButtonGroupElement: {
        prototype: HTMLAtButtonGroupElement;
        new (): HTMLAtButtonGroupElement;
    };
    interface HTMLAtButtonGroupOptionElementEventMap {
        "atuiClick": AtEvent;
    }
    /**
     * @category Form Controls
     * @description A button group option component for the button group.
     */
    interface HTMLAtButtonGroupOptionElement extends Components.AtButtonGroupOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtButtonGroupOptionElementEventMap>(type: K, listener: (this: HTMLAtButtonGroupOptionElement, ev: AtButtonGroupOptionCustomEvent<HTMLAtButtonGroupOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtButtonGroupOptionElementEventMap>(type: K, listener: (this: HTMLAtButtonGroupOptionElement, ev: AtButtonGroupOptionCustomEvent<HTMLAtButtonGroupOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtButtonGroupOptionElement: {
        prototype: HTMLAtButtonGroupOptionElement;
        new (): HTMLAtButtonGroupOptionElement;
    };
    /**
     * @category Layout
     * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
     */
    interface HTMLAtCardElement extends Components.AtCard, HTMLStencilElement {
    }
    var HTMLAtCardElement: {
        prototype: HTMLAtCardElement;
        new (): HTMLAtCardElement;
    };
    /**
     * ### ```interface PointStyles```
     * ```
     *  pointBackgroundColor: Color;
     *  pointBorderColor: Color;
     *  pointBorderWidth: number;
     *  pointHitRadius: number;
     *  pointHoverBackgroundColor: Color;
     *  pointHoverBorderColor: Color;
     *  pointHoverBorderWidth: number;
     *  pointHoverRadius: number;
     *  pointRadius: number;
     *  pointRotaion: number;
     *  pointStyle: PointStyle;
     * ```
     * ### ```interface Threshold```
     * ```
     *  label: string;
     *  data: (number | Point | [number, number] | BubbleDataPoint)[];
     *  color?: string;
     *  dashLine?: boolean;
     *  stepped?: boolean;
     * ```
     */
    interface HTMLAtChartBarLineElement extends Components.AtChartBarLine, HTMLStencilElement {
    }
    var HTMLAtChartBarLineElement: {
        prototype: HTMLAtChartBarLineElement;
        new (): HTMLAtChartBarLineElement;
    };
    /**
     * @category Data Visualization
     * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
     */
    interface HTMLAtChartDonutElement extends Components.AtChartDonut, HTMLStencilElement {
    }
    var HTMLAtChartDonutElement: {
        prototype: HTMLAtChartDonutElement;
        new (): HTMLAtChartDonutElement;
    };
    interface HTMLAtCheckboxElementEventMap {
        "atuiChange": boolean;
    }
    /**
     * @category Form Controls
     * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
     */
    interface HTMLAtCheckboxElement extends Components.AtCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtCheckboxElementEventMap>(type: K, listener: (this: HTMLAtCheckboxElement, ev: AtCheckboxCustomEvent<HTMLAtCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtCheckboxElementEventMap>(type: K, listener: (this: HTMLAtCheckboxElement, ev: AtCheckboxCustomEvent<HTMLAtCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtCheckboxElement: {
        prototype: HTMLAtCheckboxElement;
        new (): HTMLAtCheckboxElement;
    };
    /**
     * @category Table Cell
     * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
     */
    interface HTMLAtCheckboxCellElement extends Components.AtCheckboxCell, HTMLStencilElement {
    }
    var HTMLAtCheckboxCellElement: {
        prototype: HTMLAtCheckboxCellElement;
        new (): HTMLAtCheckboxCellElement;
    };
    interface HTMLAtCheckboxGroupElementEventMap {
        "atuiChange": string[];
    }
    /**
     * ### ```interface CheckboxOptions```
     * ```
     *  id: string;
     *  label?: string;
     *  hint_text?: string;
     *  value?: boolean;
     * ```
     * @category Form Controls
     * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
     */
    interface HTMLAtCheckboxGroupElement extends Components.AtCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLAtCheckboxGroupElement, ev: AtCheckboxGroupCustomEvent<HTMLAtCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLAtCheckboxGroupElement, ev: AtCheckboxGroupCustomEvent<HTMLAtCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtCheckboxGroupElement: {
        prototype: HTMLAtCheckboxGroupElement;
        new (): HTMLAtCheckboxGroupElement;
    };
    /**
     * @category Table Cell
     * @description A header component for displaying a checkbox.
     */
    interface HTMLAtCheckboxHeaderElement extends Components.AtCheckboxHeader, HTMLStencilElement {
    }
    var HTMLAtCheckboxHeaderElement: {
        prototype: HTMLAtCheckboxHeaderElement;
        new (): HTMLAtCheckboxHeaderElement;
    };
    interface HTMLAtChipListElementEventMap {
        "atRemoveChip": string[];
    }
    /**
     * @category Utilities
     * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
     */
    interface HTMLAtChipListElement extends Components.AtChipList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtChipListElementEventMap>(type: K, listener: (this: HTMLAtChipListElement, ev: AtChipListCustomEvent<HTMLAtChipListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtChipListElementEventMap>(type: K, listener: (this: HTMLAtChipListElement, ev: AtChipListCustomEvent<HTMLAtChipListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtChipListElement: {
        prototype: HTMLAtChipListElement;
        new (): HTMLAtChipListElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a list of chips.
     */
    interface HTMLAtChipListCellElement extends Components.AtChipListCell, HTMLStencilElement {
    }
    var HTMLAtChipListCellElement: {
        prototype: HTMLAtChipListCellElement;
        new (): HTMLAtChipListCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a color status indicator based on predefined types
     */
    interface HTMLAtColorStatusCellElement extends Components.AtColorStatusCell, HTMLStencilElement {
    }
    var HTMLAtColorStatusCellElement: {
        prototype: HTMLAtColorStatusCellElement;
        new (): HTMLAtColorStatusCellElement;
    };
    interface HTMLAtColumnManagerElementEventMap {
        "atChange": ColumnManagerChangeEvent;
    }
    interface HTMLAtColumnManagerElement extends Components.AtColumnManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtColumnManagerElementEventMap>(type: K, listener: (this: HTMLAtColumnManagerElement, ev: AtColumnManagerCustomEvent<HTMLAtColumnManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtColumnManagerElementEventMap>(type: K, listener: (this: HTMLAtColumnManagerElement, ev: AtColumnManagerCustomEvent<HTMLAtColumnManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtColumnManagerElement: {
        prototype: HTMLAtColumnManagerElement;
        new (): HTMLAtColumnManagerElement;
    };
    interface HTMLAtCustomTimeRangeElementEventMap {
        "atuiCancel": null;
        "atuiSubmit": DateRangeStrings;
    }
    interface HTMLAtCustomTimeRangeElement extends Components.AtCustomTimeRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtCustomTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtCustomTimeRangeElement, ev: AtCustomTimeRangeCustomEvent<HTMLAtCustomTimeRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtCustomTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtCustomTimeRangeElement, ev: AtCustomTimeRangeCustomEvent<HTMLAtCustomTimeRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtCustomTimeRangeElement: {
        prototype: HTMLAtCustomTimeRangeElement;
        new (): HTMLAtCustomTimeRangeElement;
    };
    interface HTMLAtDialogElementEventMap {
        "atuiDialogChange": any;
    }
    /**
     * @category Overlays
     * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
     * @Event - atuiDialogChange: Emitted when dialog is opened/closed.
     */
    interface HTMLAtDialogElement extends Components.AtDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtDialogElementEventMap>(type: K, listener: (this: HTMLAtDialogElement, ev: AtDialogCustomEvent<HTMLAtDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtDialogElementEventMap>(type: K, listener: (this: HTMLAtDialogElement, ev: AtDialogCustomEvent<HTMLAtDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtDialogElement: {
        prototype: HTMLAtDialogElement;
        new (): HTMLAtDialogElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying and editing text.
     */
    interface HTMLAtEditTextCellElement extends Components.AtEditTextCell, HTMLStencilElement {
    }
    var HTMLAtEditTextCellElement: {
        prototype: HTMLAtEditTextCellElement;
        new (): HTMLAtEditTextCellElement;
    };
    /**
     * @category Form Controls
     * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
     */
    interface HTMLAtFormLabelElement extends Components.AtFormLabel, HTMLStencilElement {
    }
    var HTMLAtFormLabelElement: {
        prototype: HTMLAtFormLabelElement;
        new (): HTMLAtFormLabelElement;
    };
    /**
     * @category Layout
     * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
     */
    interface HTMLAtHeaderElement extends Components.AtHeader, HTMLStencilElement {
    }
    var HTMLAtHeaderElement: {
        prototype: HTMLAtHeaderElement;
        new (): HTMLAtHeaderElement;
    };
    interface HTMLAtInputElementEventMap {
        "atuiChange": string | number;
    }
    /**
     * @category Form Controls
     * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
     */
    interface HTMLAtInputElement extends Components.AtInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtInputElementEventMap>(type: K, listener: (this: HTMLAtInputElement, ev: AtInputCustomEvent<HTMLAtInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtInputElementEventMap>(type: K, listener: (this: HTMLAtInputElement, ev: AtInputCustomEvent<HTMLAtInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtInputElement: {
        prototype: HTMLAtInputElement;
        new (): HTMLAtInputElement;
    };
    interface HTMLAtInputNumericElementEventMap {
        "atuiChange": string | number;
    }
    /**
     * @category Form Controls
     * @description A numeric input component for entering numerical values.
     */
    interface HTMLAtInputNumericElement extends Components.AtInputNumeric, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtInputNumericElementEventMap>(type: K, listener: (this: HTMLAtInputNumericElement, ev: AtInputNumericCustomEvent<HTMLAtInputNumericElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtInputNumericElementEventMap>(type: K, listener: (this: HTMLAtInputNumericElement, ev: AtInputNumericCustomEvent<HTMLAtInputNumericElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtInputNumericElement: {
        prototype: HTMLAtInputNumericElement;
        new (): HTMLAtInputNumericElement;
    };
    interface HTMLAtInputRangeElementEventMap {
        "atuiChange": number;
    }
    /**
     * @category Form Controls
     * @description A range input component for selecting a value within a specified range.
     */
    interface HTMLAtInputRangeElement extends Components.AtInputRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtInputRangeElementEventMap>(type: K, listener: (this: HTMLAtInputRangeElement, ev: AtInputRangeCustomEvent<HTMLAtInputRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtInputRangeElementEventMap>(type: K, listener: (this: HTMLAtInputRangeElement, ev: AtInputRangeCustomEvent<HTMLAtInputRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtInputRangeElement: {
        prototype: HTMLAtInputRangeElement;
        new (): HTMLAtInputRangeElement;
    };
    /**
     * @category Layout
     * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
     */
    interface HTMLAtLayoutElement extends Components.AtLayout, HTMLStencilElement {
    }
    var HTMLAtLayoutElement: {
        prototype: HTMLAtLayoutElement;
        new (): HTMLAtLayoutElement;
    };
    /**
     * @category Layout
     * @description A list item component for the list.
     */
    interface HTMLAtListItemElement extends Components.AtListItem, HTMLStencilElement {
    }
    var HTMLAtListItemElement: {
        prototype: HTMLAtListItemElement;
        new (): HTMLAtListItemElement;
    };
    interface HTMLAtListSelectorElementEventMap {
        "atuiChange": ListSelectorItem;
        "atuiInfoButtonClick": AtEvent;
    }
    /**
     * @category Navigation
     * @description A list selector component for selecting an item from a list.
     */
    interface HTMLAtListSelectorElement extends Components.AtListSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtListSelectorElementEventMap>(type: K, listener: (this: HTMLAtListSelectorElement, ev: AtListSelectorCustomEvent<HTMLAtListSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtListSelectorElementEventMap>(type: K, listener: (this: HTMLAtListSelectorElement, ev: AtListSelectorCustomEvent<HTMLAtListSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtListSelectorElement: {
        prototype: HTMLAtListSelectorElement;
        new (): HTMLAtListSelectorElement;
    };
    /**
     * @category Navigation
     * @description A list selector item component for the list selector.
     */
    interface HTMLAtListSelectorItemElement extends Components.AtListSelectorItem, HTMLStencilElement {
    }
    var HTMLAtListSelectorItemElement: {
        prototype: HTMLAtListSelectorItemElement;
        new (): HTMLAtListSelectorItemElement;
    };
    /**
     * @category Feedback
     * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
     */
    interface HTMLAtLoadingElement extends Components.AtLoading, HTMLStencilElement {
    }
    var HTMLAtLoadingElement: {
        prototype: HTMLAtLoadingElement;
        new (): HTMLAtLoadingElement;
    };
    interface HTMLAtMenuElementEventMap {
        "atuiMenuStateChange": boolean;
    }
    interface HTMLAtMenuElement extends Components.AtMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtMenuElementEventMap>(type: K, listener: (this: HTMLAtMenuElement, ev: AtMenuCustomEvent<HTMLAtMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtMenuElementEventMap>(type: K, listener: (this: HTMLAtMenuElement, ev: AtMenuCustomEvent<HTMLAtMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtMenuElement: {
        prototype: HTMLAtMenuElement;
        new (): HTMLAtMenuElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a menu.
     */
    interface HTMLAtMenuCellElement extends Components.AtMenuCell, HTMLStencilElement {
    }
    var HTMLAtMenuCellElement: {
        prototype: HTMLAtMenuCellElement;
        new (): HTMLAtMenuCellElement;
    };
    interface HTMLAtMenuItemElementEventMap {
        "atuiClick": AtEvent;
    }
    interface HTMLAtMenuItemElement extends Components.AtMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtMenuItemElementEventMap>(type: K, listener: (this: HTMLAtMenuItemElement, ev: AtMenuItemCustomEvent<HTMLAtMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtMenuItemElementEventMap>(type: K, listener: (this: HTMLAtMenuItemElement, ev: AtMenuItemCustomEvent<HTMLAtMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtMenuItemElement: {
        prototype: HTMLAtMenuItemElement;
        new (): HTMLAtMenuItemElement;
    };
    /**
     * @category Feedback
     * @description A message component for displaying notifications, alerts, or informational messages.
     */
    interface HTMLAtMessageElement extends Components.AtMessage, HTMLStencilElement {
    }
    var HTMLAtMessageElement: {
        prototype: HTMLAtMessageElement;
        new (): HTMLAtMessageElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying multiple buttons.
     */
    interface HTMLAtMultiBtnCellElement extends Components.AtMultiBtnCell, HTMLStencilElement {
    }
    var HTMLAtMultiBtnCellElement: {
        prototype: HTMLAtMultiBtnCellElement;
        new (): HTMLAtMultiBtnCellElement;
    };
    interface HTMLAtMultiSelectElementEventMap {
        "atuiChange": string[];
    }
    /**
     * @category Form Controls
     * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface HTMLAtMultiSelectElement extends Components.AtMultiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtMultiSelectElementEventMap>(type: K, listener: (this: HTMLAtMultiSelectElement, ev: AtMultiSelectCustomEvent<HTMLAtMultiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtMultiSelectElementEventMap>(type: K, listener: (this: HTMLAtMultiSelectElement, ev: AtMultiSelectCustomEvent<HTMLAtMultiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtMultiSelectElement: {
        prototype: HTMLAtMultiSelectElement;
        new (): HTMLAtMultiSelectElement;
    };
    /**
     * @category Feedback
     * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
     */
    interface HTMLAtPlaceholderElement extends Components.AtPlaceholder, HTMLStencilElement {
    }
    var HTMLAtPlaceholderElement: {
        prototype: HTMLAtPlaceholderElement;
        new (): HTMLAtPlaceholderElement;
    };
    interface HTMLAtPromptContainerElementEventMap {
        "atSubmit": string;
        "atStop": void;
        "atNewThread": void;
        "atMessageCopy": {
        messageId: string;
        content: string;
    };
        "atMessageRetry": { messageId: string };
        "atMessageEdit": {
        messageId: string;
        content: string;
    };
        "atMessageVote": {
        messageId: string;
        score: number;
    };
    }
    /**
     * @category Prompt
     * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
     */
    interface HTMLAtPromptContainerElement extends Components.AtPromptContainer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtPromptContainerElementEventMap>(type: K, listener: (this: HTMLAtPromptContainerElement, ev: AtPromptContainerCustomEvent<HTMLAtPromptContainerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtPromptContainerElementEventMap>(type: K, listener: (this: HTMLAtPromptContainerElement, ev: AtPromptContainerCustomEvent<HTMLAtPromptContainerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtPromptContainerElement: {
        prototype: HTMLAtPromptContainerElement;
        new (): HTMLAtPromptContainerElement;
    };
    interface HTMLAtPromptInputElementEventMap {
        "atChange": string;
        "atSubmit": string;
        "atStop": void;
        "atFocus": void;
    }
    /**
     * @category Prompt
     * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
     */
    interface HTMLAtPromptInputElement extends Components.AtPromptInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtPromptInputElementEventMap>(type: K, listener: (this: HTMLAtPromptInputElement, ev: AtPromptInputCustomEvent<HTMLAtPromptInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtPromptInputElementEventMap>(type: K, listener: (this: HTMLAtPromptInputElement, ev: AtPromptInputCustomEvent<HTMLAtPromptInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtPromptInputElement: {
        prototype: HTMLAtPromptInputElement;
        new (): HTMLAtPromptInputElement;
    };
    interface HTMLAtPromptMessageElementEventMap {
        "atCopy": string;
        "atVote": {
        messageId: string;
        score: number;
    };
        "atRetry": void;
        "atEdit": string;
    }
    /**
     * @category Prompt
     * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
     */
    interface HTMLAtPromptMessageElement extends Components.AtPromptMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtPromptMessageElementEventMap>(type: K, listener: (this: HTMLAtPromptMessageElement, ev: AtPromptMessageCustomEvent<HTMLAtPromptMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtPromptMessageElementEventMap>(type: K, listener: (this: HTMLAtPromptMessageElement, ev: AtPromptMessageCustomEvent<HTMLAtPromptMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtPromptMessageElement: {
        prototype: HTMLAtPromptMessageElement;
        new (): HTMLAtPromptMessageElement;
    };
    interface HTMLAtPromptThreadElementEventMap {
        "atMessageCopy": {
        messageId: string;
        content: string;
    };
        "atMessageRetry": {
        messageId: string;
    };
        "atMessageEdit": {
        messageId: string;
        content: string;
    };
        "atMessageVote": {
        messageId: string;
        score: number;
    };
    }
    /**
     * @category Prompt
     * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
     */
    interface HTMLAtPromptThreadElement extends Components.AtPromptThread, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtPromptThreadElementEventMap>(type: K, listener: (this: HTMLAtPromptThreadElement, ev: AtPromptThreadCustomEvent<HTMLAtPromptThreadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtPromptThreadElementEventMap>(type: K, listener: (this: HTMLAtPromptThreadElement, ev: AtPromptThreadCustomEvent<HTMLAtPromptThreadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtPromptThreadElement: {
        prototype: HTMLAtPromptThreadElement;
        new (): HTMLAtPromptThreadElement;
    };
    interface HTMLAtRadioElementEventMap {
        "atuiChange": boolean;
    }
    /**
     * @category Form Controls
     * @description A radio button component for selecting a single option from a predefined list.
     */
    interface HTMLAtRadioElement extends Components.AtRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtRadioElementEventMap>(type: K, listener: (this: HTMLAtRadioElement, ev: AtRadioCustomEvent<HTMLAtRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtRadioElementEventMap>(type: K, listener: (this: HTMLAtRadioElement, ev: AtRadioCustomEvent<HTMLAtRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtRadioElement: {
        prototype: HTMLAtRadioElement;
        new (): HTMLAtRadioElement;
    };
    interface HTMLAtRadioGroupElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
     */
    interface HTMLAtRadioGroupElement extends Components.AtRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtRadioGroupElementEventMap>(type: K, listener: (this: HTMLAtRadioGroupElement, ev: AtRadioGroupCustomEvent<HTMLAtRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtRadioGroupElementEventMap>(type: K, listener: (this: HTMLAtRadioGroupElement, ev: AtRadioGroupCustomEvent<HTMLAtRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtRadioGroupElement: {
        prototype: HTMLAtRadioGroupElement;
        new (): HTMLAtRadioGroupElement;
    };
    interface HTMLAtSearchElementEventMap {
        "atChange": string;
    }
    /**
     * @category Form Controls
     * @description A search component for filtering data.
     */
    interface HTMLAtSearchElement extends Components.AtSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtSearchElementEventMap>(type: K, listener: (this: HTMLAtSearchElement, ev: AtSearchCustomEvent<HTMLAtSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtSearchElementEventMap>(type: K, listener: (this: HTMLAtSearchElement, ev: AtSearchCustomEvent<HTMLAtSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtSearchElement: {
        prototype: HTMLAtSearchElement;
        new (): HTMLAtSearchElement;
    };
    /**
     * @category Data Tables
     * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
     */
    interface HTMLAtSearchTableElement extends Components.AtSearchTable, HTMLStencilElement {
    }
    var HTMLAtSearchTableElement: {
        prototype: HTMLAtSearchTableElement;
        new (): HTMLAtSearchTableElement;
    };
    interface HTMLAtSelectElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface HTMLAtSelectElement extends Components.AtSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtSelectElementEventMap>(type: K, listener: (this: HTMLAtSelectElement, ev: AtSelectCustomEvent<HTMLAtSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtSelectElementEventMap>(type: K, listener: (this: HTMLAtSelectElement, ev: AtSelectCustomEvent<HTMLAtSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtSelectElement: {
        prototype: HTMLAtSelectElement;
        new (): HTMLAtSelectElement;
    };
    interface HTMLAtSidePanelElementEventMap {
        "atuiSidepanelChange": any;
    }
    /**
     * @category Overlays
     * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
     * @dependency at-button
     */
    interface HTMLAtSidePanelElement extends Components.AtSidePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtSidePanelElementEventMap>(type: K, listener: (this: HTMLAtSidePanelElement, ev: AtSidePanelCustomEvent<HTMLAtSidePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtSidePanelElementEventMap>(type: K, listener: (this: HTMLAtSidePanelElement, ev: AtSidePanelCustomEvent<HTMLAtSidePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtSidePanelElement: {
        prototype: HTMLAtSidePanelElement;
        new (): HTMLAtSidePanelElement;
    };
    interface HTMLAtSidebarElementEventMap {
        "atuiSidebarChange": any;
    }
    /**
     * @category Navigation
     * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
     */
    interface HTMLAtSidebarElement extends Components.AtSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtSidebarElementEventMap>(type: K, listener: (this: HTMLAtSidebarElement, ev: AtSidebarCustomEvent<HTMLAtSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtSidebarElementEventMap>(type: K, listener: (this: HTMLAtSidebarElement, ev: AtSidebarCustomEvent<HTMLAtSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtSidebarElement: {
        prototype: HTMLAtSidebarElement;
        new (): HTMLAtSidebarElement;
    };
    /**
     * @category Navigation
     * @description 
     */
    interface HTMLAtSidebarMenuElement extends Components.AtSidebarMenu, HTMLStencilElement {
    }
    var HTMLAtSidebarMenuElement: {
        prototype: HTMLAtSidebarMenuElement;
        new (): HTMLAtSidebarMenuElement;
    };
    /**
     * @category Navigation
     * @description A sidebar menu item component for the sidebar.
     */
    interface HTMLAtSidebarMenuitemElement extends Components.AtSidebarMenuitem, HTMLStencilElement {
    }
    var HTMLAtSidebarMenuitemElement: {
        prototype: HTMLAtSidebarMenuitemElement;
        new (): HTMLAtSidebarMenuitemElement;
    };
    /**
     * @category Navigation
     * @description Display nested sub-menus in the atui-sidebar.
     * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
     * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
     * Menu indent styling is supported up to 3 levels.
     */
    interface HTMLAtSidebarSubmenuElement extends Components.AtSidebarSubmenu, HTMLStencilElement {
    }
    var HTMLAtSidebarSubmenuElement: {
        prototype: HTMLAtSidebarSubmenuElement;
        new (): HTMLAtSidebarSubmenuElement;
    };
    /**
     * @category Navigation
     * @description A sidebar trigger component for the sidebar.
     */
    interface HTMLAtSidebarTriggerElement extends Components.AtSidebarTrigger, HTMLStencilElement {
    }
    var HTMLAtSidebarTriggerElement: {
        prototype: HTMLAtSidebarTriggerElement;
        new (): HTMLAtSidebarTriggerElement;
    };
    /**
     * @category Utilities
     * @description A src-dest component for displaying source and destination information.
     */
    interface HTMLAtSrcDestElement extends Components.AtSrcDest, HTMLStencilElement {
    }
    var HTMLAtSrcDestElement: {
        prototype: HTMLAtSrcDestElement;
        new (): HTMLAtSrcDestElement;
    };
    /**
     * @category Data Tables
     * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
     */
    interface HTMLAtStaticTableElement extends Components.AtStaticTable, HTMLStencilElement {
    }
    var HTMLAtStaticTableElement: {
        prototype: HTMLAtStaticTableElement;
        new (): HTMLAtStaticTableElement;
    };
    /**
     * @category Data Visualization
     * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
     */
    interface HTMLAtStatusBarElement extends Components.AtStatusBar, HTMLStencilElement {
    }
    var HTMLAtStatusBarElement: {
        prototype: HTMLAtStatusBarElement;
        new (): HTMLAtStatusBarElement;
    };
    /**
     * @category Navigation
     * @description A tab component for the tab selector.
     */
    interface HTMLAtTabElement extends Components.AtTab, HTMLStencilElement {
    }
    var HTMLAtTabElement: {
        prototype: HTMLAtTabElement;
        new (): HTMLAtTabElement;
    };
    /**
     * @category Navigation
     * @description A tab content component for the tab selector.
     */
    interface HTMLAtTabContentElement extends Components.AtTabContent, HTMLStencilElement {
    }
    var HTMLAtTabContentElement: {
        prototype: HTMLAtTabContentElement;
        new (): HTMLAtTabContentElement;
    };
    interface HTMLAtTabSelectorElementEventMap {
        "atuiChange": string;
    }
    /**
     * ### interface Tab
     * ```
     * {
     *   id: string;
     *   title: string;
     * }
     * ```
     * @category Navigation
     * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
     */
    interface HTMLAtTabSelectorElement extends Components.AtTabSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTabSelectorElementEventMap>(type: K, listener: (this: HTMLAtTabSelectorElement, ev: AtTabSelectorCustomEvent<HTMLAtTabSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTabSelectorElementEventMap>(type: K, listener: (this: HTMLAtTabSelectorElement, ev: AtTabSelectorCustomEvent<HTMLAtTabSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTabSelectorElement: {
        prototype: HTMLAtTabSelectorElement;
        new (): HTMLAtTabSelectorElement;
    };
    interface HTMLAtTableElementEventMap {
        "atSortChange": {
        colId: string;
        sortDirection: 'asc' | 'desc' | null;
    };
    }
    /**
     * @category Data Tables
     * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
     */
    interface HTMLAtTableElement extends Components.AtTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTableElementEventMap>(type: K, listener: (this: HTMLAtTableElement, ev: AtTableCustomEvent<HTMLAtTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTableElementEventMap>(type: K, listener: (this: HTMLAtTableElement, ev: AtTableCustomEvent<HTMLAtTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTableElement: {
        prototype: HTMLAtTableElement;
        new (): HTMLAtTableElement;
    };
    interface HTMLAtTableActionsElementEventMap {
        "atExportCsv": any;
        "atExportPdf": any;
        "atChange": any;
    }
    /**
     * @category Data Tables
     * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
     */
    interface HTMLAtTableActionsElement extends Components.AtTableActions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTableActionsElementEventMap>(type: K, listener: (this: HTMLAtTableActionsElement, ev: AtTableActionsCustomEvent<HTMLAtTableActionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTableActionsElementEventMap>(type: K, listener: (this: HTMLAtTableActionsElement, ev: AtTableActionsCustomEvent<HTMLAtTableActionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTableActionsElement: {
        prototype: HTMLAtTableActionsElement;
        new (): HTMLAtTableActionsElement;
    };
    interface HTMLAtTableExportMenuElementEventMap {
        "atChange": string;
    }
    /**
     * @category Data Tables
     * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
     */
    interface HTMLAtTableExportMenuElement extends Components.AtTableExportMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTableExportMenuElementEventMap>(type: K, listener: (this: HTMLAtTableExportMenuElement, ev: AtTableExportMenuCustomEvent<HTMLAtTableExportMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTableExportMenuElementEventMap>(type: K, listener: (this: HTMLAtTableExportMenuElement, ev: AtTableExportMenuCustomEvent<HTMLAtTableExportMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTableExportMenuElement: {
        prototype: HTMLAtTableExportMenuElement;
        new (): HTMLAtTableExportMenuElement;
    };
    interface HTMLAtTableFilterMenuElementEventMap {
        "atChange": string[];
    }
    /**
     * @category Data Tables
     * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
     */
    interface HTMLAtTableFilterMenuElement extends Components.AtTableFilterMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTableFilterMenuElementEventMap>(type: K, listener: (this: HTMLAtTableFilterMenuElement, ev: AtTableFilterMenuCustomEvent<HTMLAtTableFilterMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTableFilterMenuElementEventMap>(type: K, listener: (this: HTMLAtTableFilterMenuElement, ev: AtTableFilterMenuCustomEvent<HTMLAtTableFilterMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTableFilterMenuElement: {
        prototype: HTMLAtTableFilterMenuElement;
        new (): HTMLAtTableFilterMenuElement;
    };
    interface HTMLAtTableFiltersElementEventMap {
        "atChange": FilterEvent[];
    }
    interface HTMLAtTableFiltersElement extends Components.AtTableFilters, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTableFiltersElementEventMap>(type: K, listener: (this: HTMLAtTableFiltersElement, ev: AtTableFiltersCustomEvent<HTMLAtTableFiltersElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTableFiltersElementEventMap>(type: K, listener: (this: HTMLAtTableFiltersElement, ev: AtTableFiltersCustomEvent<HTMLAtTableFiltersElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTableFiltersElement: {
        prototype: HTMLAtTableFiltersElement;
        new (): HTMLAtTableFiltersElement;
    };
    interface HTMLAtTablePaginationElementEventMap {
        "atChange": number;
        "atPageSizeChange": number;
    }
    /**
     * @category Data Tables
     * @description Optional component for use with ```<at-table>```.
     * Provides controls for pagination if you would like to
     * have control of the table's pagination.
     */
    interface HTMLAtTablePaginationElement extends Components.AtTablePagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTablePaginationElementEventMap>(type: K, listener: (this: HTMLAtTablePaginationElement, ev: AtTablePaginationCustomEvent<HTMLAtTablePaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTablePaginationElementEventMap>(type: K, listener: (this: HTMLAtTablePaginationElement, ev: AtTablePaginationCustomEvent<HTMLAtTablePaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTablePaginationElement: {
        prototype: HTMLAtTablePaginationElement;
        new (): HTMLAtTablePaginationElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a badge.
     */
    interface HTMLAtTextBadgeCellElement extends Components.AtTextBadgeCell, HTMLStencilElement {
    }
    var HTMLAtTextBadgeCellElement: {
        prototype: HTMLAtTextBadgeCellElement;
        new (): HTMLAtTextBadgeCellElement;
    };
    /**
     * @category Table Cell
     * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
     */
    interface HTMLAtTextCellElement extends Components.AtTextCell, HTMLStencilElement {
    }
    var HTMLAtTextCellElement: {
        prototype: HTMLAtTextCellElement;
        new (): HTMLAtTextCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
     */
    interface HTMLAtTextIconCellElement extends Components.AtTextIconCell, HTMLStencilElement {
    }
    var HTMLAtTextIconCellElement: {
        prototype: HTMLAtTextIconCellElement;
        new (): HTMLAtTextIconCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with an image.
     */
    interface HTMLAtTextImageCellElement extends Components.AtTextImageCell, HTMLStencilElement {
    }
    var HTMLAtTextImageCellElement: {
        prototype: HTMLAtTextImageCellElement;
        new (): HTMLAtTextImageCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a status.
     */
    interface HTMLAtTextStatusCellElement extends Components.AtTextStatusCell, HTMLStencilElement {
    }
    var HTMLAtTextStatusCellElement: {
        prototype: HTMLAtTextStatusCellElement;
        new (): HTMLAtTextStatusCellElement;
    };
    interface HTMLAtTextareaElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
     */
    interface HTMLAtTextareaElement extends Components.AtTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTextareaElementEventMap>(type: K, listener: (this: HTMLAtTextareaElement, ev: AtTextareaCustomEvent<HTMLAtTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTextareaElementEventMap>(type: K, listener: (this: HTMLAtTextareaElement, ev: AtTextareaCustomEvent<HTMLAtTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTextareaElement: {
        prototype: HTMLAtTextareaElement;
        new (): HTMLAtTextareaElement;
    };
    interface HTMLAtTimeRangeElementEventMap {
        "atuiChange": SelectedTimeRangeExtended;
    }
    /**
     * @category Form Controls
     * @description A time range component for selecting time periods.
     */
    interface HTMLAtTimeRangeElement extends Components.AtTimeRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtTimeRangeElement, ev: AtTimeRangeCustomEvent<HTMLAtTimeRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtTimeRangeElement, ev: AtTimeRangeCustomEvent<HTMLAtTimeRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTimeRangeElement: {
        prototype: HTMLAtTimeRangeElement;
        new (): HTMLAtTimeRangeElement;
    };
    interface HTMLAtTimeWithUnitElementEventMap {
        "atuiCancel": null;
        "atuiSubmit": TimeWithUnit | TimeRangeDisplay.ALL;
    }
    /**
     * @category Form Controls
     * @description A time with unit component for selecting a time period.
     */
    interface HTMLAtTimeWithUnitElement extends Components.AtTimeWithUnit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTimeWithUnitElementEventMap>(type: K, listener: (this: HTMLAtTimeWithUnitElement, ev: AtTimeWithUnitCustomEvent<HTMLAtTimeWithUnitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTimeWithUnitElementEventMap>(type: K, listener: (this: HTMLAtTimeWithUnitElement, ev: AtTimeWithUnitCustomEvent<HTMLAtTimeWithUnitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTimeWithUnitElement: {
        prototype: HTMLAtTimeWithUnitElement;
        new (): HTMLAtTimeWithUnitElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle.
     */
    interface HTMLAtTitleSubtitleCellElement extends Components.AtTitleSubtitleCell, HTMLStencilElement {
    }
    var HTMLAtTitleSubtitleCellElement: {
        prototype: HTMLAtTitleSubtitleCellElement;
        new (): HTMLAtTitleSubtitleCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle with a date.
     */
    interface HTMLAtTitleSubtitleDateCellElement extends Components.AtTitleSubtitleDateCell, HTMLStencilElement {
    }
    var HTMLAtTitleSubtitleDateCellElement: {
        prototype: HTMLAtTitleSubtitleDateCellElement;
        new (): HTMLAtTitleSubtitleDateCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a toggle.
     */
    interface HTMLAtToggleCellElement extends Components.AtToggleCell, HTMLStencilElement {
    }
    var HTMLAtToggleCellElement: {
        prototype: HTMLAtToggleCellElement;
        new (): HTMLAtToggleCellElement;
    };
    interface HTMLAtToggleSwitchElementEventMap {
        "atuiChange": boolean;
    }
    /**
     * @category Form Controls
     * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
     */
    interface HTMLAtToggleSwitchElement extends Components.AtToggleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtToggleSwitchElementEventMap>(type: K, listener: (this: HTMLAtToggleSwitchElement, ev: AtToggleSwitchCustomEvent<HTMLAtToggleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtToggleSwitchElementEventMap>(type: K, listener: (this: HTMLAtToggleSwitchElement, ev: AtToggleSwitchCustomEvent<HTMLAtToggleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtToggleSwitchElement: {
        prototype: HTMLAtToggleSwitchElement;
        new (): HTMLAtToggleSwitchElement;
    };
    /**
     * @category **Overlays**
     * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
     */
    interface HTMLAtTooltipElement extends Components.AtTooltip, HTMLStencilElement {
    }
    var HTMLAtTooltipElement: {
        prototype: HTMLAtTooltipElement;
        new (): HTMLAtTooltipElement;
    };
    interface HTMLAtTreeElementEventMap {
        "atuiClick": TreeNode;
    }
    /**
     * ### ```interface ItemNode```
     * ```
     *  id: string;
     *  displayName: string;
     *  children: ItemNode[];
     *  isSelected?: boolean;
     *  tooltip?: string;
     * ```
     */
    interface HTMLAtTreeElement extends Components.AtTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTreeElementEventMap>(type: K, listener: (this: HTMLAtTreeElement, ev: AtTreeCustomEvent<HTMLAtTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTreeElementEventMap>(type: K, listener: (this: HTMLAtTreeElement, ev: AtTreeCustomEvent<HTMLAtTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTreeElement: {
        prototype: HTMLAtTreeElement;
        new (): HTMLAtTreeElement;
    };
    interface HTMLAtTreeItemElementEventMap {
        "atuiClick": AtEvent;
    }
    interface HTMLAtTreeItemElement extends Components.AtTreeItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtTreeItemElementEventMap>(type: K, listener: (this: HTMLAtTreeItemElement, ev: AtTreeItemCustomEvent<HTMLAtTreeItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtTreeItemElementEventMap>(type: K, listener: (this: HTMLAtTreeItemElement, ev: AtTreeItemCustomEvent<HTMLAtTreeItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtTreeItemElement: {
        prototype: HTMLAtTreeItemElement;
        new (): HTMLAtTreeItemElement;
    };
    interface HTMLElementTagNameMap {
        "at-accordion": HTMLAtAccordionElement;
        "at-accordion-item": HTMLAtAccordionItemElement;
        "at-accordion-trigger": HTMLAtAccordionTriggerElement;
        "at-avatar": HTMLAtAvatarElement;
        "at-badge": HTMLAtBadgeElement;
        "at-breadcrumb": HTMLAtBreadcrumbElement;
        "at-breadcrumb-item": HTMLAtBreadcrumbItemElement;
        "at-button": HTMLAtButtonElement;
        "at-button-group": HTMLAtButtonGroupElement;
        "at-button-group-option": HTMLAtButtonGroupOptionElement;
        "at-card": HTMLAtCardElement;
        "at-chart-bar-line": HTMLAtChartBarLineElement;
        "at-chart-donut": HTMLAtChartDonutElement;
        "at-checkbox": HTMLAtCheckboxElement;
        "at-checkbox-cell": HTMLAtCheckboxCellElement;
        "at-checkbox-group": HTMLAtCheckboxGroupElement;
        "at-checkbox-header": HTMLAtCheckboxHeaderElement;
        "at-chip-list": HTMLAtChipListElement;
        "at-chip-list-cell": HTMLAtChipListCellElement;
        "at-color-status-cell": HTMLAtColorStatusCellElement;
        "at-column-manager": HTMLAtColumnManagerElement;
        "at-custom-time-range": HTMLAtCustomTimeRangeElement;
        "at-dialog": HTMLAtDialogElement;
        "at-edit-text-cell": HTMLAtEditTextCellElement;
        "at-form-label": HTMLAtFormLabelElement;
        "at-header": HTMLAtHeaderElement;
        "at-input": HTMLAtInputElement;
        "at-input-numeric": HTMLAtInputNumericElement;
        "at-input-range": HTMLAtInputRangeElement;
        "at-layout": HTMLAtLayoutElement;
        "at-list-item": HTMLAtListItemElement;
        "at-list-selector": HTMLAtListSelectorElement;
        "at-list-selector-item": HTMLAtListSelectorItemElement;
        "at-loading": HTMLAtLoadingElement;
        "at-menu": HTMLAtMenuElement;
        "at-menu-cell": HTMLAtMenuCellElement;
        "at-menu-item": HTMLAtMenuItemElement;
        "at-message": HTMLAtMessageElement;
        "at-multi-btn-cell": HTMLAtMultiBtnCellElement;
        "at-multi-select": HTMLAtMultiSelectElement;
        "at-placeholder": HTMLAtPlaceholderElement;
        "at-prompt-container": HTMLAtPromptContainerElement;
        "at-prompt-input": HTMLAtPromptInputElement;
        "at-prompt-message": HTMLAtPromptMessageElement;
        "at-prompt-thread": HTMLAtPromptThreadElement;
        "at-radio": HTMLAtRadioElement;
        "at-radio-group": HTMLAtRadioGroupElement;
        "at-search": HTMLAtSearchElement;
        "at-search-table": HTMLAtSearchTableElement;
        "at-select": HTMLAtSelectElement;
        "at-side-panel": HTMLAtSidePanelElement;
        "at-sidebar": HTMLAtSidebarElement;
        "at-sidebar-menu": HTMLAtSidebarMenuElement;
        "at-sidebar-menuitem": HTMLAtSidebarMenuitemElement;
        "at-sidebar-submenu": HTMLAtSidebarSubmenuElement;
        "at-sidebar-trigger": HTMLAtSidebarTriggerElement;
        "at-src-dest": HTMLAtSrcDestElement;
        "at-static-table": HTMLAtStaticTableElement;
        "at-status-bar": HTMLAtStatusBarElement;
        "at-tab": HTMLAtTabElement;
        "at-tab-content": HTMLAtTabContentElement;
        "at-tab-selector": HTMLAtTabSelectorElement;
        "at-table": HTMLAtTableElement;
        "at-table-actions": HTMLAtTableActionsElement;
        "at-table-export-menu": HTMLAtTableExportMenuElement;
        "at-table-filter-menu": HTMLAtTableFilterMenuElement;
        "at-table-filters": HTMLAtTableFiltersElement;
        "at-table-pagination": HTMLAtTablePaginationElement;
        "at-text-badge-cell": HTMLAtTextBadgeCellElement;
        "at-text-cell": HTMLAtTextCellElement;
        "at-text-icon-cell": HTMLAtTextIconCellElement;
        "at-text-image-cell": HTMLAtTextImageCellElement;
        "at-text-status-cell": HTMLAtTextStatusCellElement;
        "at-textarea": HTMLAtTextareaElement;
        "at-time-range": HTMLAtTimeRangeElement;
        "at-time-with-unit": HTMLAtTimeWithUnitElement;
        "at-title-subtitle-cell": HTMLAtTitleSubtitleCellElement;
        "at-title-subtitle-date-cell": HTMLAtTitleSubtitleDateCellElement;
        "at-toggle-cell": HTMLAtToggleCellElement;
        "at-toggle-switch": HTMLAtToggleSwitchElement;
        "at-tooltip": HTMLAtTooltipElement;
        "at-tree": HTMLAtTreeElement;
        "at-tree-item": HTMLAtTreeItemElement;
    }
}
declare namespace LocalJSX {
    /**
     * ### ```interface AccordionItem```
     * ```
     * item_id: string;
     * label: string;
     * content: string;
     * ```
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtAccordion {
        /**
          * If set, all child accordions will be open by default.
          * @default false
         */
        "default_open"?: boolean;
        /**
          * Used to create accordion items.
          * @default []
         */
        "items"?: AccordionItem[];
    }
    /**
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtAccordionItem {
        /**
          * Puts a light gray separator below the accordion item
          * @default true
         */
        "border"?: boolean;
        /**
          * String content to display when the accordion is open
         */
        "content"?: string;
        /**
          * Used to identify the accordion item among the other accordion items
         */
        "item_id": string;
        /**
          * Provides an atui-accordion-trigger with this label if set
         */
        "label"?: string;
        /**
          * Emitted when the accordion item's open state changes
         */
        "onAtuiAccordionChange"?: (event: AtAccordionItemCustomEvent<boolean>) => void;
        /**
          * Used for setting if the accordion is open.
          * @default false
         */
        "open"?: boolean;
    }
    interface AtAccordionTrigger {
        /**
          * Text to display on the trigger for the accordion item.
         */
        "label"?: string;
    }
    /**
     * @category Decoration
     * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
     */
    interface AtAvatar {
        /**
          * Alt text for the avatar image
         */
        "alt"?: string;
        /**
          * Initials text to display when no image is provided
         */
        "initials"?: string;
        /**
          * Size of the avatar
          * @default 'md'
         */
        "size"?: AvatarSize;
        /**
          * URL for the avatar image  Recommended cropped image sizes for optimal display: - sm:24x24px - md:32x32px - lg:40x40px  Higher resolution images (2x display size) are recommended for crisp display on high-DPI screens.
         */
        "src"?: string;
        /**
          * Visual variant of the avatar
          * @default 'secondary'
         */
        "variant"?: AvatarVariant;
    }
    /**
     * @category Feedback
     * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
     */
    interface AtBadge {
        /**
          * Icon appearing to the left of the badge title. MUST use mat-icon name.
         */
        "icon"?: string;
        /**
          * Impact of the badge, changes the colours.
          * @default 'low'
         */
        "impact"?: BadgeContrast;
        /**
          * Title shown on the badge.
         */
        "label"?: string;
        /**
          * Boolean value to round the edges of the badge.
          * @default false
         */
        "rounded"?: boolean;
        /**
          * Size of the badge. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size"?: BadgeSize;
        /**
          * Type of the badge. Determines colour theming.
          * @default 'default'
         */
        "type"?: BadgeType;
    }
    /**
     * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
     * Provides clickable path navigation with customizable separators and accessibility features.
     * @category Navigation
     */
    interface AtBreadcrumb {
        /**
          * Function to get the prefix for breadcrumbs.
          * @default () => ''
         */
        "get_prefix"?: (idx: number) => string;
        /**
          * Emits when one of the breadcrumb-items is clicked, `event.detail` is the 0-based index of the breadcrumb-item
         */
        "onAtuiClick"?: (event: AtBreadcrumbCustomEvent<number>) => void;
        /**
          * Delimiter between the prefix and the prefix.
          * @default ''
         */
        "prefix_delimiter"?: string;
        /**
          * Used to place atui-breadcrumb-item(s) and atui-breadcrumb-separator(s) automatically with the string values given
         */
        "values"?: string[];
    }
    /**
     * @category Navigation
     * @description A breadcrumb item component for the breadcrumb.
     */
    interface AtBreadcrumbItem {
        /**
          * Applies different styling and makes the element non-clickable when set
         */
        "is_active"?: boolean;
        /**
          * Label for the breadcrumb item
         */
        "label": string;
    }
    /**
     * @category Actions
     * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
     */
    interface AtButton {
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Material icon to be displayed before the label within the button
         */
        "icon"?: string;
        /**
          * Material icon to be displayed after the label within the button
         */
        "icon_after"?: string;
        /**
          * When set, will display a loading spinner inside the button and hide all labels & icons
          * @default false
         */
        "in_progress"?: boolean;
        /**
          * Label to be displayed within the button
         */
        "label"?: string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtButtonCustomEvent<AtEvent>) => void;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size"?: ButtonSize;
        /**
          * Delay period on spinner
          * @default 1000
         */
        "spinner_delay_ms"?: number;
        /**
          * If set, will request submit from the closest form element when clicked
          * @default false
         */
        "submit"?: boolean;
        /**
          * Theme of the button. Default primary
          * @default 'primary'
         */
        "type"?: ButtonType;
    }
    /**
     * @category Form Controls
     * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
     */
    interface AtButtonGroup {
        /**
          * Disables the button group and prevents interaction
         */
        "disabled"?: boolean;
        /**
          * Error text for invalid choices.
         */
        "error_text"?: string;
        /**
          * Hint for options.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description.  Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Label for button group.
         */
        "label"?: string;
        /**
          * When the active button is changed, this will emit the text value of the active button
         */
        "onAtuiChange"?: (event: AtButtonGroupCustomEvent<string>) => void;
        /**
          * When the active button is changed, this will emit the 0-based index of the active button
         */
        "onAtuiIndexChange"?: (event: AtButtonGroupCustomEvent<number>) => void;
        /**
          * List of options to be displayed on the button group.
          * @default []
         */
        "options"?: ButtonGroupOption[];
        /**
          * Sets the current active button
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A button group option component for the button group.
     */
    interface AtButtonGroupOption {
        /**
          * Will disable interaction if set
         */
        "disabled"?: boolean;
        /**
          * Icon to be displayed in the button
         */
        "icon"?: string;
        /**
          * Will apply active styling to the button
         */
        "is_active"?: boolean;
        /**
          * String to be displayed in the button
         */
        "label"?: string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtButtonGroupOptionCustomEvent<AtEvent>) => void;
        /**
          * ID of the button element and its option
         */
        "option_id"?: string;
    }
    /**
     * @category Layout
     * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
     */
    interface AtCard {
        /**
          * Title of the card.
         */
        "card_title"?: string;
        /**
          * Content of the card, placed below title, and subtitle.
         */
        "content"?: string;
        /**
          * Enables overflow on the content area. If false overflow will be applied on the host.
          * @default false
         */
        "overflow_content"?: boolean;
        /**
          * Apply or remove padding form the card content area.
          * @default true
         */
        "padding"?: boolean;
        /**
          * Box-shadow around card.
          * @default 'none'
         */
        "shadow"?: 'none' | 'sm' | 'lg';
        /**
          * Display footer persistently at bottom of card.
          * @default true
         */
        "sticky_footer"?: boolean;
        /**
          * Display header persistently at top of card.
          * @default true
         */
        "sticky_header"?: boolean;
        /**
          * Subtitle of the card, placed below title.
         */
        "subtitle"?: string;
    }
    /**
     * ### ```interface PointStyles```
     * ```
     *  pointBackgroundColor: Color;
     *  pointBorderColor: Color;
     *  pointBorderWidth: number;
     *  pointHitRadius: number;
     *  pointHoverBackgroundColor: Color;
     *  pointHoverBorderColor: Color;
     *  pointHoverBorderWidth: number;
     *  pointHoverRadius: number;
     *  pointRadius: number;
     *  pointRotaion: number;
     *  pointStyle: PointStyle;
     * ```
     * ### ```interface Threshold```
     * ```
     *  label: string;
     *  data: (number | Point | [number, number] | BubbleDataPoint)[];
     *  color?: string;
     *  dashLine?: boolean;
     *  stepped?: boolean;
     * ```
     */
    interface AtChartBarLine {
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette"?: ChartColorPalette;
        /**
          * Data to go in the chart. ChartDataset properties found [here for line](https://www.chartjs.org/docs/latest/charts/line.html), and [here for bar](https://www.chartjs.org/docs/latest/charts/bar.html)
         */
        "data"?: {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Height of the chart.
          * @default 'md'
         */
        "height"?: Height;
        /**
          * Options for the legend
         */
        "legend_format"?: object;
        /**
          * Additional options to go into the 'options' seciont of the chart configuration
         */
        "options"?: object;
        /**
          * Styles for the points in the chart
         */
        "point_styles"?: PointStyles;
        /**
          * Thresholds to be displayed in the chart
         */
        "thresholds"?: Threshold[];
        /**
          * The time range that the chart is displayed in.
         */
        "time_range"?: SelectedTimeRangeExtended;
        /**
          * Options for the tooltips on the chart
         */
        "tooltip_options"?: object;
        /**
          * Type of the chart
         */
        "type"?: 'bar' | 'line';
        /**
          * X axis formatting to be applied to the chart. If you would like the default formatting provided by chart.js, set this to an empty object.
         */
        "x_axis_format"?: object;
        /**
          * Y axis formatting to be applied to the chart.
         */
        "y_axis_format"?: object;
    }
    /**
     * @category Data Visualization
     * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
     */
    interface AtChartDonut {
        /**
          * Animations added to the chart configuration
         */
        "animations"?: object;
        /**
          * Optional heading text to display in the center of the donut chart
         */
        "center_text"?: string;
        /**
          * Optional value text to display in the center of the donut chart
         */
        "center_value"?: string;
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette"?: ChartColorPalette;
        /**
          * Controls the thickness of the donut ring. Value between 0 and 100. 0 means no cutout (solid circle), 100 means maximum cutout (thin ring). Default is 70.
          * @default 70
         */
        "cutout"?: number;
        /**
          * Data to be shown in the chart. ChartDataset properties can be found [here](https://www.chartjs.org/docs/latest/charts/doughnut.html#dataset-properties)
         */
        "data"?: {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Height of the chart
          * @default 'md'
         */
        "height"?: Height1;
        /**
          * Additional options for formatting the legend
          * @default {         labels: {             boxWidth: 10,             boxHeight: 10,             fontSize: 11,         },         onHover: (event): void => {             if (event.native) {                 (event.native.target as HTMLElement).style.cursor = 'pointer';             }         },         display: true,     }
         */
        "legend_format"?: object;
        /**
          * Additional options to be added to the chart configuration
         */
        "options"?: object;
        /**
          * Additional plugin options
         */
        "plugins"?: Plugin[];
        /**
          * Additional options for the tooltip
          * @default {         mode: 'index',         intersect: false,         position: 'nearest',     }
         */
        "tooltip_options"?: object;
    }
    /**
     * @category Form Controls
     * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtCheckbox {
        /**
          * Disables interaction with the checkbox
         */
        "disabled"?: boolean;
        /**
          * Subtitle of the checkbox component.
         */
        "hint_text"?: string;
        /**
          * Title of the checkbox component.
         */
        "label"?: string;
        /**
          * When the checkbox is toggled, this will emit true if the current value is checked, vice versa.
         */
        "onAtuiChange"?: (event: AtCheckboxCustomEvent<boolean>) => void;
        /**
          * Id of the checkbox.
         */
        "option_id"?: string;
        /**
          * State of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Table Cell
     * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
     */
    interface AtCheckboxCell {
    }
    /**
     * ### ```interface CheckboxOptions```
     * ```
     *  id: string;
     *  label?: string;
     *  hint_text?: string;
     *  value?: boolean;
     * ```
     * @category Form Controls
     * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtCheckboxGroup {
        /**
          * Disables interaction with the checkbox
         */
        "disabled"?: boolean;
        /**
          * Displayed when the input is invalid
         */
        "error_text"?: string;
        /**
          * Hint to be placed below the label
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label of the checkbox group.
         */
        "label"?: string;
        /**
          * Sets the layout of the checkbox-group
          * @default 'column'
         */
        "layout"?: CheckboxLayout;
        /**
          * Emits an event containing the 'selected' prop when changed
         */
        "onAtuiChange"?: (event: AtCheckboxGroupCustomEvent<string[]>) => void;
        /**
          * Options displayed in the checkbox group.
         */
        "options"?: CheckboxOptions[];
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A list of strings, containing the Id's of the currently selected checkboxes
          * @default []
         */
        "value"?: string[];
    }
    /**
     * @category Table Cell
     * @description A header component for displaying a checkbox.
     */
    interface AtCheckboxHeader {
    }
    /**
     * @category Utilities
     * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
     */
    interface AtChipList {
        /**
          * Items in the chip list.
         */
        "chips"?: string[];
        /**
          * Disables the list of chips. Prevents removing a chip.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the 'X' on a chip, or 'Clear All' is clicked.
         */
        "onAtRemoveChip"?: (event: AtChipListCustomEvent<string[]>) => void;
        /**
          * Disables the list of chips but keeps the text readable. Prevents removing a chip.
         */
        "readonly"?: boolean;
        /**
          * Shows the 'Clear All' button
          * @default true
         */
        "show_clear_all"?: boolean;
        /**
          * Size of the chips. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size"?: BadgeSize1;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a list of chips.
     */
    interface AtChipListCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a color status indicator based on predefined types
     */
    interface AtColorStatusCell {
    }
    interface AtColumnManager {
        /**
          * Column definitions used in your at-table
         */
        "col_defs"?: ColDef[];
        /**
          * Custom event used by at-table-actions to perform ag-grid logic  Emitted when checkbox is clicked
         */
        "onAtChange"?: (event: AtColumnManagerCustomEvent<ColumnManagerChangeEvent>) => void;
    }
    interface AtCustomTimeRange {
        /**
          * Whether time selection is enabled in addition to date selection
          * @default true
         */
        "can_set_time"?: boolean;
        /**
          * Default value for the from date
         */
        "default_from_date"?: Date;
        /**
          * Default value for the to date
         */
        "default_to_date"?: Date;
        /**
          * Current value of the from date
         */
        "from_date_value"?: Date;
        /**
          * Whether to lock the end date to the current time
          * @default false
         */
        "lock_end_date_to_now"?: boolean;
        /**
          * Maximum selectable date
          * @default new Date(Date.now())
         */
        "max_date"?: Date;
        /**
          * Minimum selectable date
          * @default MIN_DATE
         */
        "min_date"?: Date;
        /**
          * Minimum number of seconds for the time range
          * @default 60
         */
        "min_seconds"?: number;
        /**
          * Emitted when the user cancels the time range selection
         */
        "onAtuiCancel"?: (event: AtCustomTimeRangeCustomEvent<null>) => void;
        /**
          * Emitted when the user submits the time range selection
         */
        "onAtuiSubmit"?: (event: AtCustomTimeRangeCustomEvent<DateRangeStrings>) => void;
        /**
          * Current value of the to date
         */
        "to_date_value"?: Date;
    }
    /**
     * @category Overlays
     * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
     * @Event - atuiDialogChange: Emitted when dialog is opened/closed.
     */
    interface AtDialog {
        /**
          * Whether to show a backdrop behind the panel, prevents any interaction with background UI.
          * @default true
         */
        "backdrop"?: boolean;
        /**
          * Will close the dialog if clicked
          * @default false
         */
        "close_backdrop"?: boolean;
        /**
          * Emits an event when the dialog is toggled, with `event.detail` being true if the dialog is now open
         */
        "onAtuiDialogChange"?: (event: AtDialogCustomEvent<any>) => void;
        /**
          * Role of the dialog element. Can be either 'dialog' or 'alertdialog'
          * @default 'dialog'
         */
        "role"?: 'dialog' | 'alertdialog';
        /**
          * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.
         */
        "trigger_id"?: string;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying and editing text.
     */
    interface AtEditTextCell {
    }
    /**
     * @category Form Controls
     * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
     */
    interface AtFormLabel {
        /**
          * Placed in the 'for' attribute on the label element
         */
        "for"?: string;
        /**
          * The text to be contained in the tooltip.
         */
        "info_text"?: string;
        /**
          * Label that appears before the info icon.
         */
        "label"?: string;
        /**
          * When true, there will be a red star on the label.
         */
        "required"?: boolean;
    }
    /**
     * @category Layout
     * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
     */
    interface AtHeader {
        /**
          * Adds a border to the bottom of the header.
         */
        "border"?: boolean;
        /**
          * Title of the header.
         */
        "header_title"?: string;
        /**
          * Icon of header. Must use mat-icon name.
         */
        "icon"?: string;
        /**
          * Adds 16 pixels of padding to the header element
          * @default true
         */
        "padding"?: boolean;
        /**
          * Size of the header.
          * @default 'h1'
         */
        "size"?: HeaderSizes;
        /**
          * Subtitle of the header.
         */
        "subtitle"?: string;
    }
    /**
     * @category Form Controls
     * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
     */
    interface AtInput {
        /**
          * Sets the 'autocomplete' attribute on the input element
          * @default 'on'
         */
        "autocomplete"?: string;
        /**
          * Allows the input to be cleared with a 'x' at the end of the input element
         */
        "clearable"?: boolean;
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label above the input container
         */
        "label"?: string;
        /**
          * Emits an event containing the text string or number when the input's content is changed
         */
        "onAtuiChange"?: (event: AtInputCustomEvent<string | number>) => void;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder"?: string | number;
        /**
          * Makes the input read only
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the element
         */
        "required"?: boolean;
        /**
          * Type of the input
          * @default 'text'
         */
        "type"?: InputType;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A numeric input component for entering numerical values.
     */
    interface AtInputNumeric {
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label above the input container
         */
        "label"?: string;
        /**
          * Max selectable value of the input.
          * @default 100
         */
        "max"?: number;
        /**
          * Min selectable value of the input.
          * @default 0
         */
        "min"?: number;
        /**
          * Emits an event containing the text string or number when the input's content is changed
         */
        "onAtuiChange"?: (event: AtInputNumericCustomEvent<string | number>) => void;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Makes the input read only
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the element
         */
        "required"?: boolean;
        /**
          * Show buttons inside input or outside
          * @default true
         */
        "show_buttons"?: boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * The value of the input
          * @default 0
         */
        "value"?: number;
    }
    /**
     * @category Form Controls
     * @description A range input component for selecting a value within a specified range.
     */
    interface AtInputRange {
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is invalid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description if required. Content is available via info icon tooltip.
         */
        "info_text"?: string;
        /**
          * Set the input to an invalid state.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Position of the numeric input, left or right of the slider.
          * @default 'after'
         */
        "label_position"?: InputPosition;
        /**
          * Max selectable value of the slider.
          * @default 100
         */
        "max"?: number;
        /**
          * Min selectable value of the slider.
          * @default 0
         */
        "min"?: number;
        /**
          * Emits an event containing the current value when the text input or slider input's content is changed
         */
        "onAtuiChange"?: (event: AtInputRangeCustomEvent<number>) => void;
        /**
          * Set the input to a readonly state.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Display numeric input with slider.
          * @default true
         */
        "show_input"?: boolean;
        /**
          * Display min and max text values.
          * @default true
         */
        "show_minmax"?: boolean;
        /**
          * Display step indicators.
          * @default true
         */
        "show_ticks"?: boolean;
        /**
          * Display order of input and slider.
          * @default true
         */
        "show_value"?: boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * suffix message for the input.
         */
        "suffix"?: string;
        /**
          * Numeric value of the slider component.
         */
        "value"?: number;
        /**
          * Warning message for the input.
         */
        "warning_text"?: string;
    }
    /**
     * @category Layout
     * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
     */
    interface AtLayout {
        /**
          * If overflow is allowed on the detail in master-detail
          * @default true
         */
        "overflow"?: boolean;
        /**
          * Template used to display content
          * @default 'master-detail'
         */
        "template"?: Template;
    }
    /**
     * @category Layout
     * @description A list item component for the list.
     */
    interface AtListItem {
        /**
          * Border below the list item.
          * @default true
         */
        "border"?: boolean;
        /**
          * Content of the list item placed at the right of the item.
         */
        "content"?: string;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title"?: string;
        /**
          * Size of the list item.
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Navigation
     * @description A list selector component for selecting an item from a list.
     */
    interface AtListSelector {
        /**
          * Whether each item has a bottom border.
         */
        "has_border"?: boolean;
        /**
          * Emits an event when the selected item is changed, the `event.detail` is the ListSelectorItem
         */
        "onAtuiChange"?: (event: AtListSelectorCustomEvent<ListSelectorItem>) => void;
        /**
          * Emits when event when the info button of an item is clicked
         */
        "onAtuiInfoButtonClick"?: (event: AtListSelectorCustomEvent<AtEvent>) => void;
        /**
          * List of items.
          * @default []
         */
        "options"?: ListSelectorItem[];
        /**
          * The selected item.
         */
        "selected_item_id"?: string;
    }
    /**
     * @category Navigation
     * @description A list selector item component for the list selector.
     */
    interface AtListSelectorItem {
        /**
          * Border below the list item.
          * @default false
         */
        "has_border"?: boolean;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Visual indication of the selected item.
         */
        "is_selected"?: boolean;
        /**
          * Id of the list item
         */
        "item_id"?: string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title"?: string;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Feedback
     * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
     */
    interface AtLoading {
        /**
          * Size of the loading indicator
          * @default 'md'
         */
        "size"?: LoadingSize;
        /**
          * Custom text to display with text-based animations
          * @default 'Loading'
         */
        "text"?: string;
        /**
          * Visual type/color of the loading indicator
          * @default 'default'
         */
        "type"?: LoadingType;
        /**
          * Type of loading animation to display
          * @default 'spinner'
         */
        "variant"?: LoadingVariant;
    }
    interface AtMenu {
        /**
          * Alignment of opened menu element relative to trigger element.
          * @default 'start'
         */
        "align"?: Align;
        /**
          * Prevent closing of menu when options are selected. Used for multi-selection controls.
          * @default true
         */
        "autoclose"?: boolean;
        /**
          * Prevent opening menu
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'
          * @default 0
         */
        "offset_x"?: number;
        /**
          * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'
          * @default 0
         */
        "offset_y"?: number;
        /**
          * Emits an event containing the open menu state.
         */
        "onAtuiMenuStateChange"?: (event: AtMenuCustomEvent<boolean>) => void;
        /**
          * Position of opened menu element relative to the trigger element.
          * @default 'bottom'
         */
        "position"?: Position;
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default 'menu'
         */
        "role"?: AriaRole;
        /**
          * Event type that triggers the menu open state. Click or Hover.
          * @default 'click'
         */
        "trigger"?: OpenOn;
        /**
          * Target an external element to use as the trigger. When provided, clicking an element wia matching data-menu attribute value will toggle the side panel.
         */
        "trigger_id"?: string;
        /**
          * String representing the 'width' style of the menu element ('NUMpx'). To fit menu to content use width="fit-content" - Avoid width='auto' or 'inherit' as this will result in 100% width.
          * @default 'fit-content'
         */
        "width"?: string;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a menu.
     */
    interface AtMenuCell {
    }
    interface AtMenuItem {
        /**
          * Disables user interaction with the menu-item and updates visual style to appear inactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
          * @default false
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtMenuItemCustomEvent<AtEvent>) => void;
    }
    /**
     * @category Feedback
     * @description A message component for displaying notifications, alerts, or informational messages.
     */
    interface AtMessage {
        /**
          * Content of the message.
         */
        "content"?: string;
        /**
          * An icon is provided for success, warning, error, or info types. You can provide a custom value to replace the default icon.  Must use material icon name.
         */
        "icon"?: string;
        /**
          * Theme of the message, either "light" or "default".
          * @default 'high'
         */
        "impact"?: 'low' | 'high';
        /**
          * Title of the app message.
         */
        "message_title"?: string;
        /**
          * Type of the message.
         */
        "type"?: 'error' | 'warning' | 'success' | 'info' | 'default';
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying multiple buttons.
     */
    interface AtMultiBtnCell {
    }
    /**
     * @category Form Controls
     * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtMultiSelect {
        /**
          * Set the select to be clearable.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error text for the select.
          * @default ''
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
          * @default ''
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
          * @default ''
         */
        "info_text"?: string;
        /**
          * Set the select to appear invalid.
         */
        "invalid"?: boolean;
        /**
          * Label of the select.
          * @default ''
         */
        "label"?: string;
        /**
          * Emits an event containing a list of the selected items when the selection changes.
         */
        "onAtuiChange"?: (event: AtMultiSelectCustomEvent<string[]>) => void;
        /**
          * Options displayed in the dropdown menu.
         */
        "options"?: SelectOption[];
        /**
          * Placeholder text for the select.
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to enable typeahead search.
         */
        "typeahead"?: boolean;
        /**
          * The selected items
          * @default []
         */
        "value"?: string[];
    }
    /**
     * @category Feedback
     * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
     */
    interface AtPlaceholder {
        /**
          * Content to be displayed below the title
         */
        "content"?: string;
        /**
          * Material icon to be displayed in the center of the placeholder
         */
        "icon"?: string;
        /**
          * Title to be displayed below the icon
         */
        "placeholder_title"?: string;
        /**
          * Will show a loading spinner when set
         */
        "show_loading_spinner"?: boolean;
        /**
          * Size of the placeholder
          * @default 'md'
         */
        "size"?: PlaceholderSize;
    }
    /**
     * @category Prompt
     * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
     */
    interface AtPromptContainer {
        /**
          * Disables all interactions with the container
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy"?: boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit"?: boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote"?: boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text"?: string;
        /**
          * Shows loading state and disables input
          * @default false
         */
        "loading"?: boolean;
        /**
          * Maximum character length for input messages
          * @default 2000
         */
        "max_message_length"?: number;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages"?: PromptMessage[];
        /**
          * Emitted when a message copy action is requested
         */
        "onAtMessageCopy"?: (event: AtPromptContainerCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message edit action is requested
         */
        "onAtMessageEdit"?: (event: AtPromptContainerCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message retry action is requested
         */
        "onAtMessageRetry"?: (event: AtPromptContainerCustomEvent<{ messageId: string }>) => void;
        /**
          * Emitted when a message vote action is requested
         */
        "onAtMessageVote"?: (event: AtPromptContainerCustomEvent<{
        messageId: string;
        score: number;
    }>) => void;
        /**
          * Emitted when the "New Thread" button is clicked
         */
        "onAtNewThread"?: (event: AtPromptContainerCustomEvent<void>) => void;
        /**
          * Emits when the stop button is clicked
         */
        "onAtStop"?: (event: AtPromptContainerCustomEvent<void>) => void;
        /**
          * Emits when a message should be sent
         */
        "onAtSubmit"?: (event: AtPromptContainerCustomEvent<string>) => void;
        /**
          * Placeholder text for the input field
          * @default 'Type your message here...'
         */
        "placeholder"?: string;
        /**
          * Enable streaming text animations for system/assistant messages - 'none': No animation - 'fade': Fade in the entire message - 'words': Animate words appearing sequentially like ChatGPT
          * @default 'words'
         */
        "response_animation"?: PromptResponseAnimation;
        /**
          * Controls visibility of the "New Thread" button in the header
          * @default true
         */
        "show_new_thread_button"?: boolean;
    }
    /**
     * @category Prompt
     * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
     */
    interface AtPromptInput {
        /**
          * Disable input interactions and apply visual indication
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Controls whether the component is in progress (shows stop button) or ready to send (shows send button)
          * @default false
         */
        "in_progress"?: boolean;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Label above the input container
         */
        "label"?: string;
        /**
          * Maximum height in pixels for auto-resize
          * @default 240
         */
        "max_height"?: number;
        /**
          * Maximum character length with counter display
          * @default 2000
         */
        "max_length"?: number;
        /**
          * Emits when the value changes
         */
        "onAtChange"?: (event: AtPromptInputCustomEvent<string>) => void;
        /**
          * Emits when the input receives focus
         */
        "onAtFocus"?: (event: AtPromptInputCustomEvent<void>) => void;
        /**
          * Emits when the stop button is clicked
         */
        "onAtStop"?: (event: AtPromptInputCustomEvent<void>) => void;
        /**
          * Emits when a message should be sent
         */
        "onAtSubmit"?: (event: AtPromptInputCustomEvent<string>) => void;
        /**
          * Placeholder text to be shown when no input is passed
          * @default 'Enter your message...'
         */
        "placeholder"?: string;
        /**
          * The value of the input
          * @default ''
         */
        "value"?: string;
    }
    /**
     * @category Prompt
     * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
     */
    interface AtPromptMessage {
        /**
          * The message content text
          * @default ''
         */
        "content"?: string;
        /**
          * Display copy action for assistant messages - copies message content to clipboard
          * @default false
         */
        "enable_copy"?: boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit"?: boolean;
        /**
          * Display voting actions for assistant messages
          * @default false
         */
        "enable_vote"?: boolean;
        /**
          * Shows error state styling and enables retry action
          * @default false
         */
        "error"?: boolean;
        /**
          * Custom error message text (defaults to generic error message)
         */
        "error_message"?: string;
        /**
          * Shows loading state with animated placeholder content
          * @default false
         */
        "loading"?: boolean;
        /**
          * Unique identifier for the message
         */
        "message_id"?: string;
        /**
          * Display name for the message sender
         */
        "name"?: string;
        /**
          * Emitted when the copy action is triggered
         */
        "onAtCopy"?: (event: AtPromptMessageCustomEvent<string>) => void;
        /**
          * Emitted when the edit action is triggered (for user messages)
         */
        "onAtEdit"?: (event: AtPromptMessageCustomEvent<string>) => void;
        /**
          * Emitted when the retry action is triggered (for assistant messages with errors)
         */
        "onAtRetry"?: (event: AtPromptMessageCustomEvent<void>) => void;
        /**
          * Emitted when a vote action is triggered
         */
        "onAtVote"?: (event: AtPromptMessageCustomEvent<{
        messageId: string;
        score: number;
    }>) => void;
        /**
          * Animation type for text streaming effect - 'none': No animation (default) - 'fade': Fade in the entire message - 'words': Animate words appearing sequentially
          * @default 'words'
         */
        "response_animation"?: PromptResponseAnimation;
        /**
          * The role/type of the message sender (only 'user' and 'assistant' are supported)
          * @default 'user'
         */
        "role"?: PromptUserRole;
        /**
          * The current vote score of the message
          * @default PromptResponseScore.NONE
         */
        "score"?: PromptResponseScore;
    }
    /**
     * @category Prompt
     * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
     */
    interface AtPromptThread {
        /**
          * Automatically scroll to the bottom when new messages are added
          * @default true
         */
        "auto_scroll"?: boolean;
        /**
          * Display name for chatbot/assistant messages
          * @default 'Assistant'
         */
        "chatbot_title"?: string;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy"?: boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit"?: boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote"?: boolean;
        /**
          * Shows a loading indicator for incoming messages
          * @default false
         */
        "loading"?: boolean;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages"?: PromptMessage[];
        /**
          * Emitted when a message copy action is requested
         */
        "onAtMessageCopy"?: (event: AtPromptThreadCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message edit action is requested
         */
        "onAtMessageEdit"?: (event: AtPromptThreadCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message retry action is requested
         */
        "onAtMessageRetry"?: (event: AtPromptThreadCustomEvent<{
        messageId: string;
    }>) => void;
        /**
          * Emitted when a message vote action is requested
         */
        "onAtMessageVote"?: (event: AtPromptThreadCustomEvent<{
        messageId: string;
        score: number;
    }>) => void;
        /**
          * Enable streaming text animations for system/assistant messages - 'none': No animation (default) - 'fade': Fade in the entire message - 'words': Animate words appearing sequentially like ChatGPT
          * @default 'words'
         */
        "response_animation"?: PromptResponseAnimation;
    }
    /**
     * @category Form Controls
     * @description A radio button component for selecting a single option from a predefined list.
     */
    interface AtRadio {
        /**
          * Disables interaction with the radio
         */
        "disabled"?: boolean;
        /**
          * Name of radio group. Buttons sharing a name are associated with the same radio group.
         */
        "group"?: string;
        /**
          * Subtitle of the radio component.
         */
        "hint_text"?: string;
        /**
          * Title of the radio component.
         */
        "label"?: string;
        /**
          * Emits the current state of the radio when clicked.
         */
        "onAtuiChange"?: (event: AtRadioCustomEvent<boolean>) => void;
        /**
          * ID of the radio button element and its option
         */
        "option_id"?: string;
        /**
          * Disables the radio option but keeps the text readable. Used for global readonly form state.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Sets the value of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
     */
    interface AtRadioGroup {
        /**
          * Disables the radio options but keeps the text readable. Use for global readonly form state.
         */
        "disabled"?: boolean;
        /**
          * Shown when 'invalid' prop is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label of the radio group.
         */
        "label"?: string;
        /**
          * Direction that the radio elements are placed
          * @default 'column'
         */
        "layout"?: RadioLayout;
        /**
          * Emits an event when active radio element changes. `event.detail` is the ID of the active radio
         */
        "onAtuiChange"?: (event: AtRadioGroupCustomEvent<string>) => void;
        /**
          * Options displayed in the radio group.
         */
        "options"?: RadioOption[];
        /**
          * Disables interaction with atui-radio elements when set
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A string containing the Id of the currently selected radio
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A search component for filtering data.
     */
    interface AtSearch {
        /**
          * Hint text for the input, appears below the search bar.
         */
        "hint_text"?: string;
        /**
          * Tooltip description.
         */
        "info_text"?: string;
        /**
          * Label text above the search bar.
         */
        "label"?: string;
        /**
          * String content of the search.
         */
        "model"?: string;
        /**
          * Emits an event when the input is changed. Used by atui-table.
         */
        "onAtChange"?: (event: AtSearchCustomEvent<string>) => void;
        /**
          * Placeholder text inside the search component.
         */
        "placeholder"?: string;
    }
    /**
     * @category Data Tables
     * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
     */
    interface AtSearchTable {
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns"?: boolean;
        /**
          * Column definitions passed to at-table component.
          * @default []
         */
        "col_defs"?: ColDef[];
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager"?: boolean;
        /**
          * If true the table dropdown filters will not be added
         */
        "hide_dropdown_filters"?: boolean;
        /**
          * If true the table export menu will not be added
         */
        "hide_export_menu"?: boolean;
        /**
          * Label for the table, appears above the search input.
         */
        "label"?: string;
        /**
          * Default page size of the table
          * @default 10
         */
        "page_size"?: number;
        /**
          * Hint text displayed below the search label.
         */
        "search_hint"?: string;
        /**
          * Info text displayed in the search info tooltip.
         */
        "search_info_tooltip"?: string;
        /**
          * Label for the search input.
         */
        "search_label"?: string;
        /**
          * Table data passed to at-table component.
         */
        "table_data"?: {
        items: any[];
        total: number;
    };
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtSelect {
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default true
         */
        "autoclose"?: boolean;
        /**
          * Set the select input to be clearable. Only enabled on typeahead selects.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is valid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Set the input to appear valid.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Emits an event containing the selected value when changed.
         */
        "onAtuiChange"?: (event: AtSelectCustomEvent<string>) => void;
        /**
          * Sets the options in the dropdown
         */
        "options"?: SelectOption[];
        /**
          * Placeholder for the select.
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to appear as a typeahead input.
          * @default false
         */
        "typeahead"?: boolean;
        /**
          * Value of the currently selected option
         */
        "value"?: string;
    }
    /**
     * @category Overlays
     * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
     * @dependency at-button
     */
    interface AtSidePanel {
        /**
          * Whether to show a backdrop behind the panel, prevents any interaction with background UI.
          * @default false
         */
        "backdrop"?: boolean;
        /**
          * Will close the sidepanel if clicked
          * @default false
         */
        "close_backdrop"?: boolean;
        /**
          * Displays a close button if set
          * @default true
         */
        "has_close_button"?: boolean;
        /**
          * Enables scroll overflow on the sidepanel container
          * @default true
         */
        "has_scrollbar"?: boolean;
        /**
          * Emits an event when the side panel is toggled, with `event.detail` being true if the panel is now open
         */
        "onAtuiSidepanelChange"?: (event: AtSidePanelCustomEvent<any>) => void;
        /**
          * Position of the side panel
          * @default 'right'
         */
        "origin"?: SidePanelDirection;
        /**
          * Subtitle displayed in the side panel
         */
        "panel_subtitle"?: string;
        /**
          * Title displayed in the side panel
         */
        "panel_title"?: string;
        /**
          * If sidepanel should use fixed positioning (will fallback to absolute)
          * @default 'fixed'
         */
        "position"?: SidePanelPosition;
        /**
          * Size of the size panel
          * @default 'xs'
         */
        "size"?: SidePanelSize;
        /**
          * Target an external element to use as the trigger. When provided, clicking an element wia matching data-sidepanel attribute value will toggle the side panel.
         */
        "trigger_id"?: string;
    }
    /**
     * @category Navigation
     * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
     */
    interface AtSidebar {
        /**
          * Display a clickable backdrop when mode = over
          * @default false
         */
        "backdrop"?: boolean;
        /**
          * Size of the sidebar when collapsed.
         */
        "collapsible"?: 'offcanvas' | 'icon' | 'none';
        /**
          * Opens the sidebar by default when set
          * @default false
         */
        "default_open"?: boolean;
        /**
          * How the sidenav interacts with main content when open
         */
        "mode"?: 'over' | 'push';
        /**
          * Emits an even when the sidebar is toggled, with `event.detail` being true if the sidebar is now open
         */
        "onAtuiSidebarChange"?: (event: AtSidebarCustomEvent<any>) => void;
        /**
          * Position of the sidebar on the page
         */
        "side"?: 'left' | 'right';
        /**
          * Width of the sidebar
          * @default 'menu'
         */
        "width"?: Width;
    }
    /**
     * @category Navigation
     * @description 
     */
    interface AtSidebarMenu {
    }
    /**
     * @category Navigation
     * @description A sidebar menu item component for the sidebar.
     */
    interface AtSidebarMenuitem {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change style to indicate menuitem is active when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Navigation
     * @description Display nested sub-menus in the atui-sidebar.
     * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
     * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
     * Menu indent styling is supported up to 3 levels.
     */
    interface AtSidebarSubmenu {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label": string;
    }
    /**
     * @category Navigation
     * @description A sidebar trigger component for the sidebar.
     */
    interface AtSidebarTrigger {
    }
    /**
     * @category Utilities
     * @description A src-dest component for displaying source and destination information.
     */
    interface AtSrcDest {
        /**
          * Aligns the content to the left or center of the container
          * @default 'left'
         */
        "align"?: SrcDestAlign;
        /**
          * Subtitle displayed on the right
         */
        "dest_subtitle"?: string;
        /**
          * Text displayed on the right
         */
        "dest_text"?: string;
        /**
          * Title displayed on the right
         */
        "dest_title"?: string;
        /**
          * Subtitle displayed on the left
         */
        "src_subtitle"?: string;
        /**
          * Text displayed on the left
         */
        "src_text"?: string;
        /**
          * Title displayed on the left
         */
        "src_title"?: string;
    }
    /**
     * @category Data Tables
     * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
     */
    interface AtStaticTable {
        /**
          * Column definitions for the table
         */
        "col_defs"?: ColDef[];
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager"?: boolean;
        /**
          * Max number of items per page
          * @default 10
         */
        "page_size"?: number;
        /**
          * Data to go into the table
         */
        "table_data"?: {
        items: any[];
        total: number;
    };
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Data Visualization
     * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
     */
    interface AtStatusBar {
        /**
          * Disables the tooltip when hovered
         */
        "disable_tooltip"?: boolean;
        /**
          * Height of the status bar
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * List of segments that make up the status bar. Each segment implements the StatusBar interface.
          * @default []
         */
        "status_bar"?: StatusBar[];
    }
    /**
     * @category Navigation
     * @description A tab component for the tab selector.
     */
    interface AtTab {
        /**
          * Applies styling when active
         */
        "is_active"?: boolean;
        /**
          * Styling based on the layout of the tabs
          * @default 'horizontal'
         */
        "layout"?: Layout;
        /**
          * ID of the tab
         */
        "tab_id"?: string;
        /**
          * Title to be displayed in the tab
         */
        "tab_title"?: string;
    }
    /**
     * @category Navigation
     * @description A tab content component for the tab selector.
     */
    interface AtTabContent {
        /**
          * Determines if the tab content is active
          * @default false
         */
        "is_active"?: boolean;
        /**
          * ID of the tab
         */
        "tab_id"?: string;
    }
    /**
     * ### interface Tab
     * ```
     * {
     *   id: string;
     *   title: string;
     * }
     * ```
     * @category Navigation
     * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
     */
    interface AtTabSelector {
        /**
          * Sets the current active tab
         */
        "active_tab"?: string;
        /**
          * hide navigation when you want to provide custom controls
          * @default false
         */
        "hide_nav"?: boolean;
        /**
          * Layout of the tabs
          * @default 'horizontal'
         */
        "layout"?: Layout1;
        /**
          * Emits the id of the tab when a new active_tab is set
         */
        "onAtuiChange"?: (event: AtTabSelectorCustomEvent<string>) => void;
        /**
          * List of tabs the selector will have
          * @default []
         */
        "tabs"?: Tab[];
    }
    /**
     * @category Data Tables
     * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
     */
    interface AtTable {
        /**
          * The AG Grid API
         */
        "ag_grid"?: GridApi;
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns"?: boolean;
        /**
          * Column definitions for the table
         */
        "col_defs"?: ColDef[];
        /**
          * If true, disables automatic grid initialization. When disabled, you must manually call createGrid(). Used when the table is controlled by a parent component.
          * @default false
         */
        "disable_auto_init"?: boolean;
        /**
          * Emits an event when a column's sorting state changes. Used to perform sorting outside of agGrid, when use_custom_sorting is set. Data in the table should be updated using the agGrid api: ```agGrid.setGridOption("rowData", yourNewData)```
         */
        "onAtSortChange"?: (event: AtTableCustomEvent<{
        colId: string;
        sortDirection: 'asc' | 'desc' | null;
    }>) => void;
        /**
          * Default page size of the table if pagination is activated
          * @default 10
         */
        "page_size"?: number;
        /**
          * Data provided to the table
         */
        "table_data"?: {
        items: any[];
        total: number;
    };
        /**
          * Disables the default pagination provided by agGrid. When using custom pagination, the default sorting provided by ag grid will not work correctly.
          * @default false
         */
        "use_custom_pagination"?: boolean;
        /**
          * Disables the default sorting provided by agGrid.
          * @default false
         */
        "use_custom_sorting"?: boolean;
    }
    /**
     * @category Data Tables
     * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
     */
    interface AtTableActions {
        /**
          * AG Grid Api (provided by at-table createGrid method)
         */
        "ag_grid"?: GridApi;
        /**
          * Emits an event when filters change
         */
        "onAtChange"?: (event: AtTableActionsCustomEvent<any>) => void;
        /**
          * Emits an event when 'Export CSV' is pressed on provided at-table-export-menu
         */
        "onAtExportCsv"?: (event: AtTableActionsCustomEvent<any>) => void;
        /**
          * Emits an event when 'Export PDF' is pressed on provided at-table-export-menu
         */
        "onAtExportPdf"?: (event: AtTableActionsCustomEvent<any>) => void;
    }
    /**
     * @category Data Tables
     * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
     */
    interface AtTableExportMenu {
        /**
          * Emits id of the clicked menu item, either 'CSV' or 'PDF'.
         */
        "onAtChange"?: (event: AtTableExportMenuCustomEvent<string>) => void;
    }
    /**
     * @category Data Tables
     * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
     */
    interface AtTableFilterMenu {
        /**
          * Column definitions used in your at-table
         */
        "col_defs"?: ColDef[];
        /**
          * Emits selected columns when checkbox selection changes
         */
        "onAtChange"?: (event: AtTableFilterMenuCustomEvent<string[]>) => void;
        /**
          * Currently selected filter columns
          * @default []
         */
        "selected"?: string[];
    }
    interface AtTableFilters {
        /**
          * Column definitions used in your at-table
         */
        "col_defs"?: ColDef[];
        /**
          * Emits id of column and filter value on change.
         */
        "onAtChange"?: (event: AtTableFiltersCustomEvent<FilterEvent[]>) => void;
        /**
          * Currently selected columns and filter values
          * @default []
         */
        "selected"?: { id: string; value: string }[];
    }
    /**
     * @category Data Tables
     * @description Optional component for use with ```<at-table>```.
     * Provides controls for pagination if you would like to
     * have control of the table's pagination.
     */
    interface AtTablePagination {
        /**
          * Current page number
          * @default 1
         */
        "current_page"?: number;
        /**
          * Total number of pages
          * @default 1
         */
        "num_pages"?: number;
        /**
          * Emits event with ```event.detail``` as the new page number
         */
        "onAtChange"?: (event: AtTablePaginationCustomEvent<number>) => void;
        /**
          * Emits event with ```event.detail``` as the new page size
         */
        "onAtPageSizeChange"?: (event: AtTablePaginationCustomEvent<number>) => void;
        /**
          * Options provided in dropdown for page sizes.
          * @default [         { value: '5' },         { value: '10' },         { value: '20' },         { value: '50' },         { value: '100' },     ]
         */
        "page_size_options"?: SelectOption[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a badge.
     */
    interface AtTextBadgeCell {
    }
    /**
     * @category Table Cell
     * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
     */
    interface AtTextCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
     */
    interface AtTextIconCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with an image.
     */
    interface AtTextImageCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a status.
     */
    interface AtTextStatusCell {
    }
    /**
     * @category Form Controls
     * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
     */
    interface AtTextarea {
        /**
          * Sets the 'autocomplete' attribute on the textarea
          * @default 'on'
         */
        "autocomplete"?: string;
        /**
          * Disables interaction with the textarea
         */
        "disabled"?: boolean;
        /**
          * Displayed when invalid is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Displays then error text when set
         */
        "invalid"?: boolean;
        /**
          * Label to be displayed for the textarea
         */
        "label"?: string;
        /**
          * Maximum number of rows to expand to
          * @default 10
         */
        "max_rows"?: number;
        /**
          * Minimum number of rows to display
          * @default 1
         */
        "min_rows"?: number;
        /**
          * Emits an event containing the text string when the textarea's content is changed
         */
        "onAtuiChange"?: (event: AtTextareaCustomEvent<string>) => void;
        /**
          * Placeholder in the textarea when no text is placed
         */
        "placeholder"?: string;
        /**
          * Makes the textarea read only
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * Sets the value of the textarea
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A time range component for selecting time periods.
     */
    interface AtTimeRange {
        /**
          * Custom error message to show when an invalid time is inputted.
          * @default null
         */
        "custom_error_message"?: any;
        /**
          * Enable range limit setting. If set to false, use Jan 1, 1985 as the lower limit of time range, ignoring the value of range limit.
          * @default true
         */
        "enable_range_limit"?: boolean;
        /**
          * Enable relative time selection.
          * @default true
         */
        "enable_relative_time"?: boolean;
        /**
          * Emits an event containing the selected time range when it changes
         */
        "onAtuiChange"?: (event: AtTimeRangeCustomEvent<SelectedTimeRangeExtended>) => void;
        /**
          * Define the presets for the relative time ranges.
         */
        "presets"?: TimePresets[];
        /**
          * Lower limit of the time range.
          * @default 7
         */
        "range_limit"?: number;
        /**
          * Selected time range.
          * @default {         selected: {             unit: TimeUnit.HOURS,             value: 1,         },     }
         */
        "selected_time_range"?: SelectedTimeRangeExtended;
        /**
          * Enable all time selection.
          * @default false
         */
        "show_all_time"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A time with unit component for selecting a time period.
     */
    interface AtTimeWithUnit {
        /**
          * Common time preset options to display
         */
        "common_options"?: TimePresets[];
        /**
          * Custom error message to display when validation fails
          * @default null
         */
        "custom_error_message"?: any;
        /**
          * Initial time selection value
         */
        "initial_selected_time"?: TimeWithUnit | TimeRangeDisplay.ALL;
        /**
          * Maximum number of seconds allowed for time selection
          * @default Number.MAX_SAFE_INTEGER
         */
        "max_seconds"?: number;
        /**
          * Minimum date constraint for time selection
          * @default null
         */
        "min_date"?: Date;
        /**
          * Minimum number of seconds allowed for time selection
          * @default 60
         */
        "min_seconds"?: number;
        /**
          * Emitted when the user cancels the time selection
         */
        "onAtuiCancel"?: (event: AtTimeWithUnitCustomEvent<null>) => void;
        /**
          * Emitted when the user submits the time selection
         */
        "onAtuiSubmit"?: (event: AtTimeWithUnitCustomEvent<TimeWithUnit | TimeRangeDisplay.ALL>) => void;
        /**
          * Whether to show the 'All Time' option
          * @default false
         */
        "show_all_time"?: boolean;
        /**
          * Available time units for selection
         */
        "units"?: TimeUnit[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle.
     */
    interface AtTitleSubtitleCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle with a date.
     */
    interface AtTitleSubtitleDateCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a toggle.
     */
    interface AtToggleCell {
    }
    /**
     * @category Form Controls
     * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
     */
    interface AtToggleSwitch {
        /**
          * Disable interaction with the toggle.
         */
        "disabled"?: boolean;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Label displayed alongside the toggle.
         */
        "label"?: string;
        /**
          * Position of the label, left or right of the toggle.
          * @default 'before'
         */
        "label_position"?: LabelPosition;
        /**
          * Emits an event when toggled with `event.detail` being true if the switch is enabled
         */
        "onAtuiChange"?: (event: AtToggleSwitchCustomEvent<boolean>) => void;
        /**
          * Show the toggle label.
          * @default true
         */
        "show_label"?: boolean;
        /**
          * Set the toggles state.
          * @default false
         */
        "value"?: boolean;
    }
    /**
     * @category **Overlays**
     * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
     */
    interface AtTooltip {
        /**
          * Alignment of opened tooltip element relative to trigger element.
          * @default 'center'
         */
        "align"?: TooltipAlign;
        /**
          * Delay before showing and hiding the tooltip when interacting with the trigger element.
          * @default 150
         */
        "delay"?: number;
        /**
          * Prevent opening tooltip
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Offset in pixels from the edge of the trigger element
          * @default 8
         */
        "offset"?: number;
        /**
          * Position of opened tooltip element relative to the trigger element.
          * @default 'top'
         */
        "position"?: TooltipPosition;
        /**
          * Target an external element to use as the trigger. When provided, clicking an element wia matching data-tooltip attribute value will toggle the side panel.
         */
        "trigger_id"?: string;
        /**
          * Maximum width constraint for the tooltip in pixels. Defaults to 300px for readability.
          * @default '200px'
         */
        "width"?: string;
    }
    /**
     * ### ```interface ItemNode```
     * ```
     *  id: string;
     *  displayName: string;
     *  children: ItemNode[];
     *  isSelected?: boolean;
     *  tooltip?: string;
     * ```
     */
    interface AtTree {
        /**
          * List of items to be displayed in the tree
         */
        "item_list"?: TreeNode[];
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtTreeCustomEvent<TreeNode>) => void;
        /**
          * Set the size of the tree button, default sm
          * @default 'sm'
         */
        "size"?: ButtonSize1;
    }
    interface AtTreeItem {
        /**
          * Defines the indent of the tree item
         */
        "depth"?: number;
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Determines whether to add the arrow indicator icon
          * @default false
         */
        "has_children"?: boolean;
        /**
          * Label to be displayed within the button
         */
        "label": string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtTreeItemCustomEvent<AtEvent>) => void;
        /**
          * Determines the direction of the indicator arrow
          * @default false
         */
        "selected"?: boolean;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size"?: TreeItemSize;
    }
    interface IntrinsicElements {
        "at-accordion": AtAccordion;
        "at-accordion-item": AtAccordionItem;
        "at-accordion-trigger": AtAccordionTrigger;
        "at-avatar": AtAvatar;
        "at-badge": AtBadge;
        "at-breadcrumb": AtBreadcrumb;
        "at-breadcrumb-item": AtBreadcrumbItem;
        "at-button": AtButton;
        "at-button-group": AtButtonGroup;
        "at-button-group-option": AtButtonGroupOption;
        "at-card": AtCard;
        "at-chart-bar-line": AtChartBarLine;
        "at-chart-donut": AtChartDonut;
        "at-checkbox": AtCheckbox;
        "at-checkbox-cell": AtCheckboxCell;
        "at-checkbox-group": AtCheckboxGroup;
        "at-checkbox-header": AtCheckboxHeader;
        "at-chip-list": AtChipList;
        "at-chip-list-cell": AtChipListCell;
        "at-color-status-cell": AtColorStatusCell;
        "at-column-manager": AtColumnManager;
        "at-custom-time-range": AtCustomTimeRange;
        "at-dialog": AtDialog;
        "at-edit-text-cell": AtEditTextCell;
        "at-form-label": AtFormLabel;
        "at-header": AtHeader;
        "at-input": AtInput;
        "at-input-numeric": AtInputNumeric;
        "at-input-range": AtInputRange;
        "at-layout": AtLayout;
        "at-list-item": AtListItem;
        "at-list-selector": AtListSelector;
        "at-list-selector-item": AtListSelectorItem;
        "at-loading": AtLoading;
        "at-menu": AtMenu;
        "at-menu-cell": AtMenuCell;
        "at-menu-item": AtMenuItem;
        "at-message": AtMessage;
        "at-multi-btn-cell": AtMultiBtnCell;
        "at-multi-select": AtMultiSelect;
        "at-placeholder": AtPlaceholder;
        "at-prompt-container": AtPromptContainer;
        "at-prompt-input": AtPromptInput;
        "at-prompt-message": AtPromptMessage;
        "at-prompt-thread": AtPromptThread;
        "at-radio": AtRadio;
        "at-radio-group": AtRadioGroup;
        "at-search": AtSearch;
        "at-search-table": AtSearchTable;
        "at-select": AtSelect;
        "at-side-panel": AtSidePanel;
        "at-sidebar": AtSidebar;
        "at-sidebar-menu": AtSidebarMenu;
        "at-sidebar-menuitem": AtSidebarMenuitem;
        "at-sidebar-submenu": AtSidebarSubmenu;
        "at-sidebar-trigger": AtSidebarTrigger;
        "at-src-dest": AtSrcDest;
        "at-static-table": AtStaticTable;
        "at-status-bar": AtStatusBar;
        "at-tab": AtTab;
        "at-tab-content": AtTabContent;
        "at-tab-selector": AtTabSelector;
        "at-table": AtTable;
        "at-table-actions": AtTableActions;
        "at-table-export-menu": AtTableExportMenu;
        "at-table-filter-menu": AtTableFilterMenu;
        "at-table-filters": AtTableFilters;
        "at-table-pagination": AtTablePagination;
        "at-text-badge-cell": AtTextBadgeCell;
        "at-text-cell": AtTextCell;
        "at-text-icon-cell": AtTextIconCell;
        "at-text-image-cell": AtTextImageCell;
        "at-text-status-cell": AtTextStatusCell;
        "at-textarea": AtTextarea;
        "at-time-range": AtTimeRange;
        "at-time-with-unit": AtTimeWithUnit;
        "at-title-subtitle-cell": AtTitleSubtitleCell;
        "at-title-subtitle-date-cell": AtTitleSubtitleDateCell;
        "at-toggle-cell": AtToggleCell;
        "at-toggle-switch": AtToggleSwitch;
        "at-tooltip": AtTooltip;
        "at-tree": AtTree;
        "at-tree-item": AtTreeItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * ### ```interface AccordionItem```
             * ```
             * item_id: string;
             * label: string;
             * content: string;
             * ```
             * @category Layout
             * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
             */
            "at-accordion": LocalJSX.AtAccordion & JSXBase.HTMLAttributes<HTMLAtAccordionElement>;
            /**
             * @category Layout
             * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
             */
            "at-accordion-item": LocalJSX.AtAccordionItem & JSXBase.HTMLAttributes<HTMLAtAccordionItemElement>;
            "at-accordion-trigger": LocalJSX.AtAccordionTrigger & JSXBase.HTMLAttributes<HTMLAtAccordionTriggerElement>;
            /**
             * @category Decoration
             * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
             */
            "at-avatar": LocalJSX.AtAvatar & JSXBase.HTMLAttributes<HTMLAtAvatarElement>;
            /**
             * @category Feedback
             * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
             */
            "at-badge": LocalJSX.AtBadge & JSXBase.HTMLAttributes<HTMLAtBadgeElement>;
            /**
             * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
             * Provides clickable path navigation with customizable separators and accessibility features.
             * @category Navigation
             */
            "at-breadcrumb": LocalJSX.AtBreadcrumb & JSXBase.HTMLAttributes<HTMLAtBreadcrumbElement>;
            /**
             * @category Navigation
             * @description A breadcrumb item component for the breadcrumb.
             */
            "at-breadcrumb-item": LocalJSX.AtBreadcrumbItem & JSXBase.HTMLAttributes<HTMLAtBreadcrumbItemElement>;
            /**
             * @category Actions
             * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
             */
            "at-button": LocalJSX.AtButton & JSXBase.HTMLAttributes<HTMLAtButtonElement>;
            /**
             * @category Form Controls
             * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
             */
            "at-button-group": LocalJSX.AtButtonGroup & JSXBase.HTMLAttributes<HTMLAtButtonGroupElement>;
            /**
             * @category Form Controls
             * @description A button group option component for the button group.
             */
            "at-button-group-option": LocalJSX.AtButtonGroupOption & JSXBase.HTMLAttributes<HTMLAtButtonGroupOptionElement>;
            /**
             * @category Layout
             * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
             */
            "at-card": LocalJSX.AtCard & JSXBase.HTMLAttributes<HTMLAtCardElement>;
            /**
             * ### ```interface PointStyles```
             * ```
             *  pointBackgroundColor: Color;
             *  pointBorderColor: Color;
             *  pointBorderWidth: number;
             *  pointHitRadius: number;
             *  pointHoverBackgroundColor: Color;
             *  pointHoverBorderColor: Color;
             *  pointHoverBorderWidth: number;
             *  pointHoverRadius: number;
             *  pointRadius: number;
             *  pointRotaion: number;
             *  pointStyle: PointStyle;
             * ```
             * ### ```interface Threshold```
             * ```
             *  label: string;
             *  data: (number | Point | [number, number] | BubbleDataPoint)[];
             *  color?: string;
             *  dashLine?: boolean;
             *  stepped?: boolean;
             * ```
             */
            "at-chart-bar-line": LocalJSX.AtChartBarLine & JSXBase.HTMLAttributes<HTMLAtChartBarLineElement>;
            /**
             * @category Data Visualization
             * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
             */
            "at-chart-donut": LocalJSX.AtChartDonut & JSXBase.HTMLAttributes<HTMLAtChartDonutElement>;
            /**
             * @category Form Controls
             * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
             */
            "at-checkbox": LocalJSX.AtCheckbox & JSXBase.HTMLAttributes<HTMLAtCheckboxElement>;
            /**
             * @category Table Cell
             * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
             */
            "at-checkbox-cell": LocalJSX.AtCheckboxCell & JSXBase.HTMLAttributes<HTMLAtCheckboxCellElement>;
            /**
             * ### ```interface CheckboxOptions```
             * ```
             *  id: string;
             *  label?: string;
             *  hint_text?: string;
             *  value?: boolean;
             * ```
             * @category Form Controls
             * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
             */
            "at-checkbox-group": LocalJSX.AtCheckboxGroup & JSXBase.HTMLAttributes<HTMLAtCheckboxGroupElement>;
            /**
             * @category Table Cell
             * @description A header component for displaying a checkbox.
             */
            "at-checkbox-header": LocalJSX.AtCheckboxHeader & JSXBase.HTMLAttributes<HTMLAtCheckboxHeaderElement>;
            /**
             * @category Utilities
             * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
             */
            "at-chip-list": LocalJSX.AtChipList & JSXBase.HTMLAttributes<HTMLAtChipListElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a list of chips.
             */
            "at-chip-list-cell": LocalJSX.AtChipListCell & JSXBase.HTMLAttributes<HTMLAtChipListCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a color status indicator based on predefined types
             */
            "at-color-status-cell": LocalJSX.AtColorStatusCell & JSXBase.HTMLAttributes<HTMLAtColorStatusCellElement>;
            "at-column-manager": LocalJSX.AtColumnManager & JSXBase.HTMLAttributes<HTMLAtColumnManagerElement>;
            "at-custom-time-range": LocalJSX.AtCustomTimeRange & JSXBase.HTMLAttributes<HTMLAtCustomTimeRangeElement>;
            /**
             * @category Overlays
             * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
             * @Event - atuiDialogChange: Emitted when dialog is opened/closed.
             */
            "at-dialog": LocalJSX.AtDialog & JSXBase.HTMLAttributes<HTMLAtDialogElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying and editing text.
             */
            "at-edit-text-cell": LocalJSX.AtEditTextCell & JSXBase.HTMLAttributes<HTMLAtEditTextCellElement>;
            /**
             * @category Form Controls
             * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
             */
            "at-form-label": LocalJSX.AtFormLabel & JSXBase.HTMLAttributes<HTMLAtFormLabelElement>;
            /**
             * @category Layout
             * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
             */
            "at-header": LocalJSX.AtHeader & JSXBase.HTMLAttributes<HTMLAtHeaderElement>;
            /**
             * @category Form Controls
             * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
             */
            "at-input": LocalJSX.AtInput & JSXBase.HTMLAttributes<HTMLAtInputElement>;
            /**
             * @category Form Controls
             * @description A numeric input component for entering numerical values.
             */
            "at-input-numeric": LocalJSX.AtInputNumeric & JSXBase.HTMLAttributes<HTMLAtInputNumericElement>;
            /**
             * @category Form Controls
             * @description A range input component for selecting a value within a specified range.
             */
            "at-input-range": LocalJSX.AtInputRange & JSXBase.HTMLAttributes<HTMLAtInputRangeElement>;
            /**
             * @category Layout
             * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
             */
            "at-layout": LocalJSX.AtLayout & JSXBase.HTMLAttributes<HTMLAtLayoutElement>;
            /**
             * @category Layout
             * @description A list item component for the list.
             */
            "at-list-item": LocalJSX.AtListItem & JSXBase.HTMLAttributes<HTMLAtListItemElement>;
            /**
             * @category Navigation
             * @description A list selector component for selecting an item from a list.
             */
            "at-list-selector": LocalJSX.AtListSelector & JSXBase.HTMLAttributes<HTMLAtListSelectorElement>;
            /**
             * @category Navigation
             * @description A list selector item component for the list selector.
             */
            "at-list-selector-item": LocalJSX.AtListSelectorItem & JSXBase.HTMLAttributes<HTMLAtListSelectorItemElement>;
            /**
             * @category Feedback
             * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
             */
            "at-loading": LocalJSX.AtLoading & JSXBase.HTMLAttributes<HTMLAtLoadingElement>;
            "at-menu": LocalJSX.AtMenu & JSXBase.HTMLAttributes<HTMLAtMenuElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a menu.
             */
            "at-menu-cell": LocalJSX.AtMenuCell & JSXBase.HTMLAttributes<HTMLAtMenuCellElement>;
            "at-menu-item": LocalJSX.AtMenuItem & JSXBase.HTMLAttributes<HTMLAtMenuItemElement>;
            /**
             * @category Feedback
             * @description A message component for displaying notifications, alerts, or informational messages.
             */
            "at-message": LocalJSX.AtMessage & JSXBase.HTMLAttributes<HTMLAtMessageElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying multiple buttons.
             */
            "at-multi-btn-cell": LocalJSX.AtMultiBtnCell & JSXBase.HTMLAttributes<HTMLAtMultiBtnCellElement>;
            /**
             * @category Form Controls
             * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
             */
            "at-multi-select": LocalJSX.AtMultiSelect & JSXBase.HTMLAttributes<HTMLAtMultiSelectElement>;
            /**
             * @category Feedback
             * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
             */
            "at-placeholder": LocalJSX.AtPlaceholder & JSXBase.HTMLAttributes<HTMLAtPlaceholderElement>;
            /**
             * @category Prompt
             * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
             */
            "at-prompt-container": LocalJSX.AtPromptContainer & JSXBase.HTMLAttributes<HTMLAtPromptContainerElement>;
            /**
             * @category Prompt
             * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
             */
            "at-prompt-input": LocalJSX.AtPromptInput & JSXBase.HTMLAttributes<HTMLAtPromptInputElement>;
            /**
             * @category Prompt
             * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
             */
            "at-prompt-message": LocalJSX.AtPromptMessage & JSXBase.HTMLAttributes<HTMLAtPromptMessageElement>;
            /**
             * @category Prompt
             * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
             */
            "at-prompt-thread": LocalJSX.AtPromptThread & JSXBase.HTMLAttributes<HTMLAtPromptThreadElement>;
            /**
             * @category Form Controls
             * @description A radio button component for selecting a single option from a predefined list.
             */
            "at-radio": LocalJSX.AtRadio & JSXBase.HTMLAttributes<HTMLAtRadioElement>;
            /**
             * @category Form Controls
             * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
             */
            "at-radio-group": LocalJSX.AtRadioGroup & JSXBase.HTMLAttributes<HTMLAtRadioGroupElement>;
            /**
             * @category Form Controls
             * @description A search component for filtering data.
             */
            "at-search": LocalJSX.AtSearch & JSXBase.HTMLAttributes<HTMLAtSearchElement>;
            /**
             * @category Data Tables
             * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
             */
            "at-search-table": LocalJSX.AtSearchTable & JSXBase.HTMLAttributes<HTMLAtSearchTableElement>;
            /**
             * @category Form Controls
             * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
             */
            "at-select": LocalJSX.AtSelect & JSXBase.HTMLAttributes<HTMLAtSelectElement>;
            /**
             * @category Overlays
             * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
             * @dependency at-button
             */
            "at-side-panel": LocalJSX.AtSidePanel & JSXBase.HTMLAttributes<HTMLAtSidePanelElement>;
            /**
             * @category Navigation
             * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
             */
            "at-sidebar": LocalJSX.AtSidebar & JSXBase.HTMLAttributes<HTMLAtSidebarElement>;
            /**
             * @category Navigation
             * @description 
             */
            "at-sidebar-menu": LocalJSX.AtSidebarMenu & JSXBase.HTMLAttributes<HTMLAtSidebarMenuElement>;
            /**
             * @category Navigation
             * @description A sidebar menu item component for the sidebar.
             */
            "at-sidebar-menuitem": LocalJSX.AtSidebarMenuitem & JSXBase.HTMLAttributes<HTMLAtSidebarMenuitemElement>;
            /**
             * @category Navigation
             * @description Display nested sub-menus in the atui-sidebar.
             * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
             * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
             * Menu indent styling is supported up to 3 levels.
             */
            "at-sidebar-submenu": LocalJSX.AtSidebarSubmenu & JSXBase.HTMLAttributes<HTMLAtSidebarSubmenuElement>;
            /**
             * @category Navigation
             * @description A sidebar trigger component for the sidebar.
             */
            "at-sidebar-trigger": LocalJSX.AtSidebarTrigger & JSXBase.HTMLAttributes<HTMLAtSidebarTriggerElement>;
            /**
             * @category Utilities
             * @description A src-dest component for displaying source and destination information.
             */
            "at-src-dest": LocalJSX.AtSrcDest & JSXBase.HTMLAttributes<HTMLAtSrcDestElement>;
            /**
             * @category Data Tables
             * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
             */
            "at-static-table": LocalJSX.AtStaticTable & JSXBase.HTMLAttributes<HTMLAtStaticTableElement>;
            /**
             * @category Data Visualization
             * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
             */
            "at-status-bar": LocalJSX.AtStatusBar & JSXBase.HTMLAttributes<HTMLAtStatusBarElement>;
            /**
             * @category Navigation
             * @description A tab component for the tab selector.
             */
            "at-tab": LocalJSX.AtTab & JSXBase.HTMLAttributes<HTMLAtTabElement>;
            /**
             * @category Navigation
             * @description A tab content component for the tab selector.
             */
            "at-tab-content": LocalJSX.AtTabContent & JSXBase.HTMLAttributes<HTMLAtTabContentElement>;
            /**
             * ### interface Tab
             * ```
             * {
             *   id: string;
             *   title: string;
             * }
             * ```
             * @category Navigation
             * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
             */
            "at-tab-selector": LocalJSX.AtTabSelector & JSXBase.HTMLAttributes<HTMLAtTabSelectorElement>;
            /**
             * @category Data Tables
             * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
             */
            "at-table": LocalJSX.AtTable & JSXBase.HTMLAttributes<HTMLAtTableElement>;
            /**
             * @category Data Tables
             * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
             */
            "at-table-actions": LocalJSX.AtTableActions & JSXBase.HTMLAttributes<HTMLAtTableActionsElement>;
            /**
             * @category Data Tables
             * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
             */
            "at-table-export-menu": LocalJSX.AtTableExportMenu & JSXBase.HTMLAttributes<HTMLAtTableExportMenuElement>;
            /**
             * @category Data Tables
             * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
             */
            "at-table-filter-menu": LocalJSX.AtTableFilterMenu & JSXBase.HTMLAttributes<HTMLAtTableFilterMenuElement>;
            "at-table-filters": LocalJSX.AtTableFilters & JSXBase.HTMLAttributes<HTMLAtTableFiltersElement>;
            /**
             * @category Data Tables
             * @description Optional component for use with ```<at-table>```.
             * Provides controls for pagination if you would like to
             * have control of the table's pagination.
             */
            "at-table-pagination": LocalJSX.AtTablePagination & JSXBase.HTMLAttributes<HTMLAtTablePaginationElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with a badge.
             */
            "at-text-badge-cell": LocalJSX.AtTextBadgeCell & JSXBase.HTMLAttributes<HTMLAtTextBadgeCellElement>;
            /**
             * @category Table Cell
             * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
             */
            "at-text-cell": LocalJSX.AtTextCell & JSXBase.HTMLAttributes<HTMLAtTextCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
             */
            "at-text-icon-cell": LocalJSX.AtTextIconCell & JSXBase.HTMLAttributes<HTMLAtTextIconCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with an image.
             */
            "at-text-image-cell": LocalJSX.AtTextImageCell & JSXBase.HTMLAttributes<HTMLAtTextImageCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with a status.
             */
            "at-text-status-cell": LocalJSX.AtTextStatusCell & JSXBase.HTMLAttributes<HTMLAtTextStatusCellElement>;
            /**
             * @category Form Controls
             * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
             */
            "at-textarea": LocalJSX.AtTextarea & JSXBase.HTMLAttributes<HTMLAtTextareaElement>;
            /**
             * @category Form Controls
             * @description A time range component for selecting time periods.
             */
            "at-time-range": LocalJSX.AtTimeRange & JSXBase.HTMLAttributes<HTMLAtTimeRangeElement>;
            /**
             * @category Form Controls
             * @description A time with unit component for selecting a time period.
             */
            "at-time-with-unit": LocalJSX.AtTimeWithUnit & JSXBase.HTMLAttributes<HTMLAtTimeWithUnitElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a title and subtitle.
             */
            "at-title-subtitle-cell": LocalJSX.AtTitleSubtitleCell & JSXBase.HTMLAttributes<HTMLAtTitleSubtitleCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a title and subtitle with a date.
             */
            "at-title-subtitle-date-cell": LocalJSX.AtTitleSubtitleDateCell & JSXBase.HTMLAttributes<HTMLAtTitleSubtitleDateCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a toggle.
             */
            "at-toggle-cell": LocalJSX.AtToggleCell & JSXBase.HTMLAttributes<HTMLAtToggleCellElement>;
            /**
             * @category Form Controls
             * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
             */
            "at-toggle-switch": LocalJSX.AtToggleSwitch & JSXBase.HTMLAttributes<HTMLAtToggleSwitchElement>;
            /**
             * @category **Overlays**
             * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
             */
            "at-tooltip": LocalJSX.AtTooltip & JSXBase.HTMLAttributes<HTMLAtTooltipElement>;
            /**
             * ### ```interface ItemNode```
             * ```
             *  id: string;
             *  displayName: string;
             *  children: ItemNode[];
             *  isSelected?: boolean;
             *  tooltip?: string;
             * ```
             */
            "at-tree": LocalJSX.AtTree & JSXBase.HTMLAttributes<HTMLAtTreeElement>;
            "at-tree-item": LocalJSX.AtTreeItem & JSXBase.HTMLAttributes<HTMLAtTreeItemElement>;
        }
    }
}
