/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AccordionItem } from "./components/atui-accordion/atui-accordion";
import { AvatarSize, AvatarVariant } from "./components/atui-avatar/atui-avatar";
import { BadgeContrast, BadgeSize, BadgeType } from "./components/atui-badge/atui-badge";
import { ButtonSize, ButtonType } from "./components/atui-button/atui-button";
import { AtuiEvent } from "./types/events";
import { ButtonGroupOption } from "./components/atui-button-group/atui-button-group";
import { ChartDataset, Plugin } from "chart.js";
import { PointStyles, Threshold } from "./components/atui-chart-bar-line/atui-chart-bar-line";
import { Height } from "./components/atui-chart-donut/atui-chart-donut";
import { ChartColorPalette } from "./types/chart-color";
import { Height as Height1 } from "./components/atui-chart-donut/atui-chart-donut";
import { CheckboxLayout, CheckboxOptions } from "./components/atui-checkbox-group/atui-checkbox-group";
import { BadgeSize as BadgeSize1 } from "./components/atui-chip-list/atui-chip-list";
import { ColDef, GridApi, GridOptions, IRowNode } from "ag-grid-community";
import { ColumnManagerChangeEvent } from "./components/table-components/atui-column-manager/atui-column-manager";
import { DateRangeStrings, MessageRole as MessageRole1, PromptMessage as PromptMessage1 } from "./types";
import { HeaderSizes } from "./components/atui-header/atui-header";
import { InputType } from "./components/atui-input/atui-input";
import { InputPosition } from "./components/atui-input-range/atui-input-range";
import { Template } from "./components/atui-layout/atui-layout";
import { ListSelectorItem } from "./components/atui-list-selector/atui-list-selector";
import { LoadingSize, LoadingType, LoadingVariant } from "./components/atui-loading/atui-loading";
import { Align, AriaRole, OpenOn, Position } from "./components/atui-menu/atui-menu";
import { SelectOption } from "./types/select";
import { PlaceholderSize } from "./components/atui-placeholder/atui-placeholder";
import { MessageRole, PromptMessage } from "./types/prompt";
import { VoteStatus } from "./components/prompt-components/atui-prompt-message/atui-prompt-message";
import { RadioLayout, RadioOption } from "./components/atui-radio-group/atui-radio-group";
import { SidePanelDirection, SidePanelSize } from "./components/atui-side-panel/atui-side-panel";
import { Collapsible, Side, Width } from "./components/atui-sidebar/atui-sidebar";
import { ButtonSize as ButtonSize1 } from "./components/atui-button/atui-button";
import { SrcDestAlign } from "./components/atui-src-dest/atui-src-dest";
import { StatusBar } from "./components/atui-status-bar/atui-status-bar";
import { Layout } from "./components/atui-tab-selector/atui-tab/atui-tab";
import { Layout as Layout1, Tab } from "./components/atui-tab-selector/atui-tab-selector";
import { FilterEvent } from "./components/table-components/atui-table-filters/atui-table-filters";
import { SelectedTimeRangeExtended, TimePresets } from "./models/atui-time-range.models";
import { TimeUnit, TimeWithUnit } from "./types/time";
import { TimeRangeDisplay } from "./types/date";
import { LabelPosition } from "./components/atui-toggle-switch/atui-toggle-switch";
import { TooltipAlign, TooltipPosition } from "./components/atui-tooltip/atui-tooltip";
import { TreeNode } from "./types/tree";
import { TreeItemSize } from "./components/atui-tree/atui-tree-item/atui-tree-item";
export { AccordionItem } from "./components/atui-accordion/atui-accordion";
export { AvatarSize, AvatarVariant } from "./components/atui-avatar/atui-avatar";
export { BadgeContrast, BadgeSize, BadgeType } from "./components/atui-badge/atui-badge";
export { ButtonSize, ButtonType } from "./components/atui-button/atui-button";
export { AtuiEvent } from "./types/events";
export { ButtonGroupOption } from "./components/atui-button-group/atui-button-group";
export { ChartDataset, Plugin } from "chart.js";
export { PointStyles, Threshold } from "./components/atui-chart-bar-line/atui-chart-bar-line";
export { Height } from "./components/atui-chart-donut/atui-chart-donut";
export { ChartColorPalette } from "./types/chart-color";
export { Height as Height1 } from "./components/atui-chart-donut/atui-chart-donut";
export { CheckboxLayout, CheckboxOptions } from "./components/atui-checkbox-group/atui-checkbox-group";
export { BadgeSize as BadgeSize1 } from "./components/atui-chip-list/atui-chip-list";
export { ColDef, GridApi, GridOptions, IRowNode } from "ag-grid-community";
export { ColumnManagerChangeEvent } from "./components/table-components/atui-column-manager/atui-column-manager";
export { DateRangeStrings, MessageRole as MessageRole1, PromptMessage as PromptMessage1 } from "./types";
export { HeaderSizes } from "./components/atui-header/atui-header";
export { InputType } from "./components/atui-input/atui-input";
export { InputPosition } from "./components/atui-input-range/atui-input-range";
export { Template } from "./components/atui-layout/atui-layout";
export { ListSelectorItem } from "./components/atui-list-selector/atui-list-selector";
export { LoadingSize, LoadingType, LoadingVariant } from "./components/atui-loading/atui-loading";
export { Align, AriaRole, OpenOn, Position } from "./components/atui-menu/atui-menu";
export { SelectOption } from "./types/select";
export { PlaceholderSize } from "./components/atui-placeholder/atui-placeholder";
export { MessageRole, PromptMessage } from "./types/prompt";
export { VoteStatus } from "./components/prompt-components/atui-prompt-message/atui-prompt-message";
export { RadioLayout, RadioOption } from "./components/atui-radio-group/atui-radio-group";
export { SidePanelDirection, SidePanelSize } from "./components/atui-side-panel/atui-side-panel";
export { Collapsible, Side, Width } from "./components/atui-sidebar/atui-sidebar";
export { ButtonSize as ButtonSize1 } from "./components/atui-button/atui-button";
export { SrcDestAlign } from "./components/atui-src-dest/atui-src-dest";
export { StatusBar } from "./components/atui-status-bar/atui-status-bar";
export { Layout } from "./components/atui-tab-selector/atui-tab/atui-tab";
export { Layout as Layout1, Tab } from "./components/atui-tab-selector/atui-tab-selector";
export { FilterEvent } from "./components/table-components/atui-table-filters/atui-table-filters";
export { SelectedTimeRangeExtended, TimePresets } from "./models/atui-time-range.models";
export { TimeUnit, TimeWithUnit } from "./types/time";
export { TimeRangeDisplay } from "./types/date";
export { LabelPosition } from "./components/atui-toggle-switch/atui-toggle-switch";
export { TooltipAlign, TooltipPosition } from "./components/atui-tooltip/atui-tooltip";
export { TreeNode } from "./types/tree";
export { TreeItemSize } from "./components/atui-tree/atui-tree-item/atui-tree-item";
export namespace Components {
    /**
     * ### ```interface AccordionItem```
     * ```
     * item_id: string;
     * label: string;
     * content: string;
     * ```
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtuiAccordion {
        /**
          * Closes all accordion items.
         */
        "closeAll": () => Promise<void>;
        /**
          * If set, all child accordions will be open by default.
          * @default false
         */
        "default_open": boolean;
        /**
          * Used to create accordion items.
          * @default []
         */
        "items": AccordionItem[];
        /**
          * Opens all accordion items
         */
        "openAll": () => Promise<void>;
        /**
          * Toggles all accordion item's open state.
         */
        "toggleAll": () => Promise<void>;
        /**
          * Toggles the open state of a specific accordion item
          * @param value Id of element to be toggled
         */
        "toggleById": (value: string) => Promise<void>;
    }
    /**
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtuiAccordionItem {
        /**
          * Puts a light gray separator below the accordion item
          * @default true
         */
        "border": boolean;
        /**
          * Closes this accordion item
         */
        "closeAccordion": () => Promise<void>;
        /**
          * String content to display when the accordion is open
         */
        "content": string;
        /**
          * Return the accordion items open state
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Used to identify the accordion item among the other accordion items
         */
        "item_id": string;
        /**
          * Provides an atui-accordion-trigger with this label if set
         */
        "label": string;
        /**
          * Used for setting if the accordion is open.
          * @default false
         */
        "open": boolean;
        /**
          * Opens this accordion item
         */
        "openAccordion": () => Promise<void>;
    }
    interface AtuiAccordionTrigger {
        /**
          * Text to display on the trigger for the accordion item.
         */
        "label": string;
    }
    /**
     * @category Decoration
     * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
     */
    interface AtuiAvatar {
        /**
          * Alt text for the avatar image
         */
        "alt"?: string;
        /**
          * Initials text to display when no image is provided
         */
        "initials"?: string;
        /**
          * Size of the avatar
          * @default 'md'
         */
        "size": AvatarSize;
        /**
          * URL for the avatar image  Recommended cropped image sizes for optimal display: - sm:24x24px - md:32x32px - lg:40x40px  Higher resolution images (2x display size) are recommended for crisp display on high-DPI screens.
         */
        "src"?: string;
        /**
          * Visual variant of the avatar
          * @default 'secondary'
         */
        "variant": AvatarVariant;
    }
    /**
     * @category Feedback
     * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
     */
    interface AtuiBadge {
        /**
          * Icon appearing to the left of the badge title. MUST use mat-icon name.
         */
        "icon"?: string;
        /**
          * Impact of the badge, changes the colours.
          * @default 'low'
         */
        "impact": BadgeContrast;
        /**
          * Title shown on the badge.
         */
        "label"?: string;
        /**
          * Boolean value to round the edges of the badge.
          * @default false
         */
        "rounded": boolean;
        /**
          * Size of the badge. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size": BadgeSize;
        /**
          * Type of the badge. Determines colour theming.
          * @default 'default'
         */
        "type": BadgeType;
    }
    /**
     * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
     * Provides clickable path navigation with customizable separators and accessibility features.
     * @category Navigation
     */
    interface AtuiBreadcrumb {
        /**
          * Function to get the prefix for breadcrumbs.
          * @default () => ''
         */
        "get_prefix": (idx: number) => string;
        /**
          * Delimiter between the prefix and the prefix.
          * @default ''
         */
        "prefix_delimiter": string;
        /**
          * Used to place atui-breadcrumb-item(s) and atui-breadcrumb-separator(s) automatically with the string values given
         */
        "values": string[];
    }
    /**
     * @category Navigation
     * @description A breadcrumb item component for the breadcrumb.
     */
    interface AtuiBreadcrumbItem {
        /**
          * Applies different styling and makes the element non-clickable when set
         */
        "is_active"?: boolean;
        /**
          * Label for the breadcrumb item
         */
        "label": string;
    }
    /**
     * @category Actions
     * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
     */
    interface AtuiButton {
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled": boolean;
        /**
          * Material icon to be displayed before the label within the button
         */
        "icon"?: string;
        /**
          * Material icon to be displayed after the label within the button
         */
        "icon_after"?: string;
        /**
          * When set, will display a loading spinner inside the button and hide all labels & icons
          * @default false
         */
        "in_progress": boolean;
        /**
          * Label to be displayed within the button
         */
        "label": string;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size": ButtonSize;
        /**
          * Delay period on spinner
          * @default 1000
         */
        "spinner_delay_ms": number;
        /**
          * If set, will request submit from the closest form element when clicked
          * @default false
         */
        "submit": boolean;
        /**
          * Styling of the button
          * @default 'primary'
         */
        "type": ButtonType;
    }
    /**
     * @category Form Controls
     * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
     */
    interface AtuiButtonGroup {
        /**
          * Disables the button group and prevents interaction
         */
        "disabled"?: boolean;
        /**
          * Error text for invalid choices.
         */
        "error_text"?: string;
        /**
          * Hint for options.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description.  Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Label for button group.
         */
        "label"?: string;
        /**
          * List of options to be displayed on the button group.
          * @default []
         */
        "options": ButtonGroupOption[];
        /**
          * Sets the current active button
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A button group option component for the button group.
     */
    interface AtuiButtonGroupOption {
        /**
          * Will disable interaction if set
         */
        "disabled": boolean;
        /**
          * Icon to be displayed in the button
         */
        "icon": string;
        /**
          * Will apply active styling to the button
         */
        "is_active": boolean;
        /**
          * String to be displayed in the button
         */
        "label": string;
        /**
          * ID of the button element and its option
         */
        "option_id"?: string;
    }
    /**
     * @category Layout
     * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
     */
    interface AtuiCard {
        /**
          * Title of the card.
         */
        "card_title"?: string;
        /**
          * Content of the card, placed below title, and subtitle.
         */
        "content"?: string;
        /**
          * Enables overflow on the content area. If false overflow will be applied on the host.
          * @default false
         */
        "overflow_content"?: boolean;
        /**
          * Apply or remove padding form the card content area.
          * @default true
         */
        "padding"?: boolean;
        /**
          * Box-shadow around card.
          * @default 'sm'
         */
        "shadow"?: 'none' | 'sm' | 'lg';
        /**
          * Display footer persistently at bottom of card.
          * @default true
         */
        "sticky_footer"?: boolean;
        /**
          * Display header persistently at top of card.
          * @default true
         */
        "sticky_header"?: boolean;
        /**
          * Subtitle of the card, placed below title.
         */
        "subtitle"?: string;
    }
    /**
     * ### ```interface PointStyles```
     * ```
     *  pointBackgroundColor: Color;
     *  pointBorderColor: Color;
     *  pointBorderWidth: number;
     *  pointHitRadius: number;
     *  pointHoverBackgroundColor: Color;
     *  pointHoverBorderColor: Color;
     *  pointHoverBorderWidth: number;
     *  pointHoverRadius: number;
     *  pointRadius: number;
     *  pointRotaion: number;
     *  pointStyle: PointStyle;
     * ```
     * ### ```interface Threshold```
     * ```
     *  label: string;
     *  data: (number | Point | [number, number] | BubbleDataPoint)[];
     *  color?: string;
     *  dashLine?: boolean;
     *  stepped?: boolean;
     * ```
     */
    interface AtuiChartBarLine {
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette": ChartColorPalette;
        /**
          * Data to go in the chart. ChartDataset properties found [here for line](https://www.chartjs.org/docs/latest/charts/line.html), and [here for bar](https://www.chartjs.org/docs/latest/charts/bar.html)
         */
        "data": {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Getter method for the chart's configuration object
          * @returns Configuration of the chart
         */
        "getConfig": () => Promise<object>;
        /**
          * Height of the chart.
          * @default 'md'
         */
        "height"?: Height;
        /**
          * Options for the legend
         */
        "legend_format"?: object;
        /**
          * Additional options to go into the 'options' seciont of the chart configuration
         */
        "options"?: object;
        /**
          * Styles for the points in the chart
         */
        "point_styles"?: PointStyles;
        /**
          * Thresholds to be displayed in the chart
         */
        "thresholds"?: Threshold[];
        /**
          * The time range that the chart is displayed in.
         */
        "time_range"?: SelectedTimeRangeExtended;
        /**
          * Options for the tooltips on the chart
         */
        "tooltip_options"?: object;
        /**
          * Type of the chart
         */
        "type": 'bar' | 'line';
        /**
          * X axis formatting to be applied to the chart. If you would like the default formatting provided by chart.js, set this to an empty object.
         */
        "x_axis_format": object;
        /**
          * Y axis formatting to be applied to the chart.
         */
        "y_axis_format"?: object;
    }
    /**
     * @category Data Visualization
     * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
     */
    interface AtuiChartDonut {
        /**
          * Animations added to the chart configuration
         */
        "animations": object;
        /**
          * Optional heading text to display in the center of the donut chart
         */
        "center_text"?: string;
        /**
          * Optional value text to display in the center of the donut chart
         */
        "center_value"?: string;
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette": ChartColorPalette;
        /**
          * Controls the thickness of the donut ring. Value between 0 and 100. 0 means no cutout (solid circle), 100 means maximum cutout (thin ring). Default is 70.
          * @default 70
         */
        "cutout"?: number;
        /**
          * Data to be shown in the chart. ChartDataset properties can be found [here](https://www.chartjs.org/docs/latest/charts/doughnut.html#dataset-properties)
         */
        "data": {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Getter method for the chart's configuration object
          * @returns Configuration of the chart
         */
        "getConfig": () => Promise<object>;
        /**
          * Height of the chart
          * @default 'md'
         */
        "height"?: Height1;
        /**
          * Additional options for formatting the legend
          * @default {         labels: {             boxWidth: 10,             boxHeight: 10,             fontSize: 11,         },         onHover: (event): void => {             if (event.native) {                 (event.native.target as HTMLElement).style.cursor = 'pointer';             }         },         display: true,     }
         */
        "legend_format"?: object;
        /**
          * Additional options to be added to the chart configuration
         */
        "options"?: object;
        /**
          * Additional plugin options
         */
        "plugins"?: Plugin[];
        /**
          * Additional options for the tooltip
          * @default {         mode: 'index',         intersect: false,         position: 'nearest',     }
         */
        "tooltip_options"?: object;
    }
    /**
     * @category Form Controls
     * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtuiCheckbox {
        /**
          * Disables interaction with the checkbox
         */
        "disabled": boolean;
        /**
          * Subtitle of the checkbox component.
         */
        "hint_text"?: string;
        /**
          * Title of the checkbox component.
         */
        "label"?: string;
        /**
          * Id of the checkbox.
         */
        "option_id"?: string;
        /**
          * State of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Table Cell
     * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
     */
    interface AtuiCheckboxCell {
    }
    /**
     * ### ```interface CheckboxOptions```
     * ```
     *  id: string;
     *  label?: string;
     *  hint_text?: string;
     *  value?: boolean;
     * ```
     * @category Form Controls
     * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtuiCheckboxGroup {
        /**
          * Disables interaction with the checkbox
         */
        "disabled"?: boolean;
        /**
          * Displayed when the input is invalid
         */
        "error_text"?: string;
        /**
          * Hint to be placed below the label
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label of the checkbox group.
         */
        "label"?: string;
        /**
          * Sets the layout of the checkbox-group
          * @default 'column'
         */
        "layout"?: CheckboxLayout;
        /**
          * Options displayed in the checkbox group.
         */
        "options": CheckboxOptions[];
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A list of strings, containing the Id's of the currently selected checkboxes
          * @default []
         */
        "value": string[];
    }
    /**
     * @category Table Cell
     * @description A header component for displaying a checkbox.
     */
    interface AtuiCheckboxHeader {
    }
    /**
     * @category Utilities
     * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
     */
    interface AtuiChipList {
        /**
          * Items in the chip list.
         */
        "chips": string[];
        /**
          * Disables the list of chips. Prevents removing a chip.
         */
        "disabled": boolean;
        /**
          * Disables the list of chips but keeps the text readable. Prevents removing a chip.
         */
        "readonly": boolean;
        /**
          * Shows the 'Clear All' button
          * @default true
         */
        "show_clear_all": boolean;
        /**
          * Size of the chips. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size": BadgeSize1;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a list of chips.
     */
    interface AtuiChipListCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a color status indicator based on predefined types
     */
    interface AtuiColorStatusCell {
    }
    interface AtuiColumnManager {
        /**
          * Column definitions used in your atui-table
         */
        "col_defs": ColDef[];
    }
    interface AtuiCustomTimeRange {
        /**
          * Whether time selection is enabled in addition to date selection
          * @default true
         */
        "can_set_time": boolean;
        /**
          * Default value for the from date
         */
        "default_from_date": Date;
        /**
          * Default value for the to date
         */
        "default_to_date": Date;
        /**
          * Current value of the from date
         */
        "from_date_value": Date;
        /**
          * Whether to lock the end date to the current time
          * @default false
         */
        "lock_end_date_to_now": boolean;
        /**
          * Maximum selectable date
          * @default new Date(Date.now())
         */
        "max_date": Date;
        /**
          * Minimum selectable date
          * @default MIN_DATE
         */
        "min_date": Date;
        /**
          * Minimum number of seconds for the time range
          * @default 60
         */
        "min_seconds": number;
        /**
          * Current value of the to date
         */
        "to_date_value": Date;
    }
    /**
     * @category Overlays
     * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
     */
    interface AtuiDialog {
        /**
          * Whether to show a backdrop behind the dialog
          * @default false
         */
        "backdrop": boolean;
        /**
          * Closes the dialog modal
          * @returns Promise that resolves when the dialog is closed
         */
        "closeDialog": () => Promise<void>;
        /**
          * ID of the dialog element (used to open and close the modal)
         */
        "dialog_id": string;
        /**
          * Opens the dialog modal
          * @returns Promise that resolves when the dialog is opened
         */
        "openDialog": () => Promise<void>;
        /**
          * Role of the dialog element. Can be either 'dialog' or 'alertdialog'
          * @default 'dialog'
         */
        "role": 'dialog' | 'alertdialog';
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying and editing text.
     */
    interface AtuiEditTextCell {
    }
    /**
     * @category Form Controls
     * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
     */
    interface AtuiFormLabel {
        /**
          * Placed in the 'for' attribute on the label element
         */
        "for": string;
        /**
          * The text to be contained in the tooltip.
         */
        "info_text": string;
        /**
          * Label that appears before the info icon.
         */
        "label": string;
        /**
          * When true, there will be a red star on the label.
         */
        "required": boolean;
    }
    /**
     * @category Layout
     * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
     */
    interface AtuiHeader {
        /**
          * Adds a border to the bottom of the header.
         */
        "border"?: boolean;
        /**
          * Title of the header.
         */
        "header_title"?: string;
        /**
          * Icon of header. Must use mat-icon name.
         */
        "icon"?: string;
        /**
          * Adds 16 pixels of padding to the header element
          * @default true
         */
        "padding"?: boolean;
        /**
          * Size of the header.
          * @default 'h1'
         */
        "size": HeaderSizes;
        /**
          * Subtitle of the header.
         */
        "subtitle"?: string;
    }
    /**
     * @category Form Controls
     * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
     */
    interface AtuiInput {
        /**
          * Sets the 'autocomplete' attribute on the input element
          * @default 'on'
         */
        "autocomplete": string;
        /**
          * Allows the input to be cleared with a 'x' at the end of the input element
         */
        "clearable": boolean;
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled": boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Shows the error text
         */
        "invalid": boolean;
        /**
          * Label above the input container
         */
        "label": string;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder": string | number;
        /**
          * Makes the input read only
         */
        "readonly": boolean;
        /**
          * Adds a required * to the element
         */
        "required": boolean;
        /**
          * Type of the input
          * @default 'text'
         */
        "type": InputType;
        /**
          * The value of the input
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A numeric input component for entering numerical values.
     */
    interface AtuiInputNumeric {
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled": boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Shows the error text
         */
        "invalid": boolean;
        /**
          * Label above the input container
         */
        "label": string;
        /**
          * Max selectable value of the input.
          * @default 100
         */
        "max": number;
        /**
          * Min selectable value of the input.
          * @default 0
         */
        "min": number;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder": string;
        /**
          * Makes the input read only
         */
        "readonly": boolean;
        /**
          * Adds a required * to the element
         */
        "required": boolean;
        /**
          * Show buttons inside input or outside
          * @default true
         */
        "show_buttons": boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * The value of the input
          * @default 0
         */
        "value": number;
    }
    /**
     * @category Form Controls
     * @description A range input component for selecting a value within a specified range.
     */
    interface AtuiInputRange {
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is invalid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description if required. Content is available via info icon tooltip.
         */
        "info_text"?: string;
        /**
          * Set the input to an invalid state.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Position of the numeric input, left or right of the slider.
          * @default 'after'
         */
        "label_position": InputPosition;
        /**
          * Max selectable value of the slider.
          * @default 100
         */
        "max": number;
        /**
          * Min selectable value of the slider.
          * @default 0
         */
        "min": number;
        /**
          * Set the input to a readonly state.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Display numeric input with slider.
          * @default true
         */
        "show_input"?: boolean;
        /**
          * Display min and max text values.
          * @default true
         */
        "show_minmax"?: boolean;
        /**
          * Display step indicators.
          * @default true
         */
        "show_ticks"?: boolean;
        /**
          * Display order of input and slider.
          * @default true
         */
        "show_value"?: boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * suffix message for the input.
         */
        "suffix"?: string;
        /**
          * Numeric value of the slider component.
         */
        "value": number;
        /**
          * Warning message for the input.
         */
        "warning_text"?: string;
    }
    /**
     * @category Layout
     * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
     */
    interface AtuiLayout {
        /**
          * If overflow is allowed on the detail in master-detail
          * @default true
         */
        "overflow": boolean;
        /**
          * Template used to display content
          * @default 'master-detail'
         */
        "template": Template;
    }
    /**
     * @category Layout
     * @description A list item component for the list.
     */
    interface AtuiListItem {
        /**
          * Border below the list item.
          * @default true
         */
        "border"?: boolean;
        /**
          * Content of the list item placed at the right of the item.
         */
        "content"?: string;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title": string;
        /**
          * Size of the list item.
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Navigation
     * @description A list selector component for selecting an item from a list.
     */
    interface AtuiListSelector {
        /**
          * Whether each item has a bottom border.
         */
        "has_border": boolean;
        /**
          * List of items.
          * @default []
         */
        "options": ListSelectorItem[];
        /**
          * The selected item.
         */
        "selected_item_id": string;
    }
    /**
     * @category Navigation
     * @description A list selector item component for the list selector.
     */
    interface AtuiListSelectorItem {
        /**
          * Border below the list item.
          * @default false
         */
        "has_border"?: boolean;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Visual indication of the selected item.
         */
        "is_selected"?: boolean;
        /**
          * Id of the list item
         */
        "item_id": string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title": string;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Feedback
     * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
     */
    interface AtuiLoading {
        /**
          * Size of the loading indicator
          * @default 'md'
         */
        "size": LoadingSize;
        /**
          * Custom text to display with text-based animations
          * @default 'Loading'
         */
        "text": string;
        /**
          * Visual type/color of the loading indicator
          * @default 'default'
         */
        "type": LoadingType;
        /**
          * Type of loading animation to display
          * @default 'spinner'
         */
        "variant": LoadingVariant;
    }
    interface AtuiMenu {
        /**
          * Alignment of opened menu element relative to trigger element.
          * @default 'start'
         */
        "align": Align;
        /**
          * Prevent closing of menu when options are selected. Used for multi-selection controls.
          * @default true
         */
        "autoclose": boolean;
        /**
          * Closes the dropdown menu.
         */
        "closeMenu": () => Promise<void>;
        /**
          * Prevent opening menu
          * @default false
         */
        "disabled": boolean;
        /**
          * Return the current menu open state
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'
          * @default 0
         */
        "offset_x": number;
        /**
          * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'
          * @default 0
         */
        "offset_y": number;
        /**
          * Opens the dropdown menu.
         */
        "openMenu": () => Promise<void>;
        /**
          * Position of opened menu element relative to the trigger element.
          * @default 'bottom'
         */
        "position": Position;
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default 'menu'
         */
        "role": AriaRole;
        /**
          * Toggles the dropdown menu's open state.
         */
        "toggleMenu": () => Promise<void>;
        /**
          * Event type that triggers the menu open state. Click or Hover.
          * @default 'click'
         */
        "trigger": OpenOn;
        /**
          * String representing the 'width' style of the menu element ('auto' or 'NUMpx'). When not specified, defaults to trigger element width. To fit menu to content use width="fit-content" - Avoid width='auto' as this will result in 100% width.
         */
        "width"?: string;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a menu.
     */
    interface AtuiMenuCell {
    }
    interface AtuiMenuItem {
        /**
          * Disables user interaction with the menu-item and updates visual style to appear inactive
          * @default false
         */
        "disabled": boolean;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
          * @default false
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Feedback
     * @description A message component for displaying notifications, alerts, or informational messages.
     */
    interface AtuiMessage {
        /**
          * Content of the message.
         */
        "content": string;
        /**
          * An icon is provided for success, warning, error, or info types. You can provide a custom value to replace the default icon.  Must use material icon name.
         */
        "icon"?: string;
        /**
          * Theme of the message, either "light" or "default".
          * @default 'high'
         */
        "impact": 'low' | 'high';
        /**
          * Title of the app message.
         */
        "message_title": string;
        /**
          * Type of the message.
         */
        "type": 'error' | 'warning' | 'success' | 'info' | 'default';
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying multiple buttons.
     */
    interface AtuiMultiBtnCell {
    }
    /**
     * @category Form Controls
     * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtuiMultiSelect {
        /**
          * Set the select to be clearable.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error text for the select.
          * @default ''
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
          * @default ''
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
          * @default ''
         */
        "info_text"?: string;
        /**
          * Set the select to appear invalid.
         */
        "invalid"?: boolean;
        /**
          * Label of the select.
          * @default ''
         */
        "label"?: string;
        /**
          * Options displayed in the dropdown menu.
         */
        "options": SelectOption[];
        /**
          * Placeholder text for the select.
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to enable typeahead search.
         */
        "typeahead"?: boolean;
        /**
          * The selected items
          * @default []
         */
        "value": string[];
    }
    /**
     * @category Feedback
     * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
     */
    interface AtuiPlaceholder {
        /**
          * Content to be displayed below the title
         */
        "content": string;
        /**
          * Material icon to be displayed in the center of the placeholder
         */
        "icon"?: string;
        /**
          * Title to be displayed below the icon
         */
        "placeholder_title": string;
        /**
          * Will show a loading spinner when set
         */
        "show_loading_spinner": boolean;
        /**
          * Size of the placeholder
          * @default 'md'
         */
        "size": PlaceholderSize;
    }
    /**
     * @category Prompt
     * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
     */
    interface AtuiPromptContainer {
        /**
          * Programmatically add a message to the conversation thread
          * @param role - The message role
          * @param content - The message content
         */
        "addMessage": (role: MessageRole, content: string) => Promise<void>;
        /**
          * Append content to the last message in the thread (useful for streaming responses)
          * @param content - The content to append
          * @returns Promise<boolean> - Returns true if successful, false if no messages exist or last message is not from assistant
         */
        "appendToLastMessage": (content: string) => Promise<boolean>;
        /**
          * Disables all interactions with the container
          * @default false
         */
        "disabled": boolean;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy": boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit": boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote": boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text": string;
        /**
          * Programmatically focus the input field
         */
        "focusInput": () => Promise<void>;
        /**
          * Title displayed in the header section
          * @default 'AI Assistant'
         */
        "header_title": string;
        /**
          * Shows loading state and disables input
          * @default false
         */
        "loading": boolean;
        /**
          * Maximum character length for input messages
          * @default 2000
         */
        "max_message_length": number;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages": PromptMessage[];
        /**
          * Start a new conversation thread by clearing all messages and resetting state
         */
        "newThread": () => Promise<void>;
        /**
          * Placeholder text for the input field
          * @default 'Type your message here...'
         */
        "placeholder": string;
        /**
          * Control the send button state programmatically
          * @param enabled - Whether the send functionality should be enabled
         */
        "setSendEnabled": (enabled: boolean) => Promise<void>;
        /**
          * Controls visibility of the header section
          * @default true
         */
        "show_header": boolean;
        /**
          * Controls visibility of the "New Thread" button in the header
          * @default true
         */
        "show_new_thread_button": boolean;
        /**
          * Subtitle displayed below the title in the header
         */
        "subtitle": string;
    }
    /**
     * @category Prompt
     * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
     */
    interface AtuiPromptInput {
        /**
          * Disable input interactions and apply visual indication
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Controls whether the component is in progress (shows stop button) or ready to send (shows send button)
          * @default false
         */
        "in_progress": boolean;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Label above the input container
         */
        "label": string;
        /**
          * Maximum height in pixels for auto-resize
          * @default 240
         */
        "max_height": number;
        /**
          * Maximum character length with counter display
          * @default 2000
         */
        "max_length": number;
        /**
          * Placeholder text to be shown when no input is passed
          * @default 'Enter your message...'
         */
        "placeholder": string;
        /**
          * The value of the input
          * @default ''
         */
        "value": string;
    }
    /**
     * @category Prompt
     * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
     */
    interface AtuiPromptMessage {
        /**
          * The message content text
          * @default ''
         */
        "content": string;
        /**
          * Display copy action for assistant messages - copies message content to clipboard
          * @default false
         */
        "enable_copy": boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit": boolean;
        /**
          * Display voting actions for assistant messages
          * @default false
         */
        "enable_vote": boolean;
        /**
          * Shows error state styling and enables retry action
          * @default false
         */
        "error": boolean;
        /**
          * Custom error message text (defaults to generic error message)
         */
        "error_message": string;
        /**
          * Shows loading state with animated placeholder content
          * @default false
         */
        "loading": boolean;
        /**
          * Unique identifier for the message
         */
        "message_id": string;
        /**
          * Display name for the message sender
         */
        "name": string;
        /**
          * The role/type of the message sender (only 'user' and 'assistant' are supported)
          * @default 'user'
         */
        "role": Exclude<MessageRole1, 'system'>;
        /**
          * The current vote status of the message
          * @default VoteStatus.None
         */
        "vote_status": VoteStatus;
    }
    /**
     * @category Prompt
     * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
     */
    interface AtuiPromptThread {
        /**
          * Automatically scroll to the bottom when new messages are added
          * @default true
         */
        "auto_scroll": boolean;
        /**
          * Display name for chatbot/assistant messages
          * @default 'Assistant'
         */
        "chatbot_title": string;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy": boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit": boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote": boolean;
        /**
          * Shows a loading indicator for incoming messages
          * @default false
         */
        "loading": boolean;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages": PromptMessage1[];
        /**
          * Scrolls the last user message to the top of the viewport
         */
        "scrollLastMessageToTop": () => Promise<void>;
        /**
          * Scrolls the thread to the bottom with smooth animation
         */
        "scrollToBottom": () => Promise<void>;
    }
    /**
     * @category Form Controls
     * @description A radio button component for selecting a single option from a predefined list.
     */
    interface AtuiRadio {
        /**
          * Disables interaction with the radio
         */
        "disabled"?: boolean;
        /**
          * Name of radio group. Buttons sharing a name are associated with the same radio group.
         */
        "group"?: string;
        /**
          * Subtitle of the radio component.
         */
        "hint_text"?: string;
        /**
          * Title of the radio component.
         */
        "label"?: string;
        /**
          * ID of the radio button element and its option
         */
        "option_id"?: string;
        /**
          * Disables the radio option but keeps the text readable. Used for global readonly form state.
          * @default false
         */
        "readonly": boolean;
        /**
          * Sets the value of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
     */
    interface AtuiRadioGroup {
        /**
          * Disables the radio options but keeps the text readable. Use for global readonly form state.
         */
        "disabled"?: boolean;
        /**
          * Shown when 'invalid' prop is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid": boolean;
        /**
          * Label of the radio group.
         */
        "label"?: string;
        /**
          * Direction that the radio elements are placed
          * @default 'column'
         */
        "layout"?: RadioLayout;
        /**
          * Options displayed in the radio group.
         */
        "options": RadioOption[];
        /**
          * Disables interaction with atui-radio elements when set
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A string containing the Id of the currently selected radio
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A search component for filtering data.
     */
    interface AtuiSearch {
        /**
          * Hint text for the input, appears below the search bar.
         */
        "hint_text"?: string;
        /**
          * Tooltip description.
         */
        "info_text"?: string;
        /**
          * Label text above the search bar.
         */
        "label"?: string;
        /**
          * String content of the search.
         */
        "model"?: string;
        /**
          * Placeholder text inside the search component.
         */
        "placeholder"?: string;
    }
    /**
     * @category Data Tables
     * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
     */
    interface AtuiSearchTable {
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns": boolean;
        /**
          * Column definitions passed to atui-table component.
         */
        "col_defs": ColDef[];
        /**
          * Returns the **currently displayed row nodes** from the ag-Grid instance.  This asynchronous method retrieves an array of row nodes representing the rows currently visible (rendered) in the grid, after filtering, sorting, and other view-based operations.
          * @template T The data type contained in each row node.
          * @returns Promise resolving to an array of displayed row nodes.
         */
        "getDisplayedRows": <T>() => Promise<IRowNode<T>[]>;
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager"?: boolean;
        /**
          * If true the table dropdown filters will not be added
         */
        "hide_dropdown_filters"?: boolean;
        /**
          * If true the table export menu will not be added
         */
        "hide_export_menu"?: boolean;
        /**
          * Label for the table, appears above the search input.
         */
        "label": string;
        /**
          * Default page size of the table
          * @default 10
         */
        "page_size"?: number;
        /**
          * Hint text displayed below the search label.
         */
        "search_hint": string;
        /**
          * Info text displayed in the search info tooltip.
         */
        "search_info_tooltip": string;
        /**
          * Label for the search input.
         */
        "search_label": string;
        /**
          * Table data passed to atui-table component.
         */
        "table_data": {
        items: any[];
        total: number;
    };
        /**
          * Updates the data of rows in the AG Grid based on their displayed row index.  Use this method when you need to programmatically update one or more specific rows in the grid, identified by their current displayed index. This is particularly useful when you want to perform partial updates (such as in-place cell editing, real-time updates, or upon receiving new data from a server), and want to reflect these changes immediately in the UI with optional visual feedback.
          * @template T - The data type of the row's underlying data structure.
          * @param rowUpdates - An array of objects specifying the row indices and the data updates to apply. - `index`: The displayed index of the row to update. - `update`: An object containing the updated data for the row.
          * @param options - Optional settings for the update operation. - `flash`: Whether to visually flash the updated rows after the data change (improves user visibility). - `forceRefresh`: Whether to force refresh the row cells after updating (useful for advanced rendering scenarios).
          * @example // Update row at displayed index 2 with new values and flash the change updateRowByIndex([{ index: 2, update: { status: 'Processed' }}], { flash: true });
          * @remarks - This function works with currently rendered rows; if rows are virtualized or paged out, ensure   the specified indices match the grid's current rendering context. - Recommended for cases where quick, UI-driven row data mutations are required (such as action buttons,   websocket pushes, or UI triggers).
         */
        "updateRowByIndex": <T>(rowUpdates: RowUpdate<T>[], options?: RowUpdateOptions) => Promise<void>;
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtuiSelect {
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default true
         */
        "autoclose"?: boolean;
        /**
          * Set the select input to be clearable. Only enabled on typeahead selects.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is valid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Set the input to appear valid.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Sets the options in the dropdown
         */
        "options": SelectOption[];
        /**
          * Placeholder for the select.
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to appear as a typeahead input.
          * @default false
         */
        "typeahead"?: boolean;
        /**
          * Value of the currently selected option
         */
        "value": string;
    }
    /**
     * @category Overlays
     * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
     */
    interface AtuiSidePanel {
        /**
          * Whether to show a backdrop behind the panel
          * @default false
         */
        "backdrop": boolean;
        /**
          * Closes the side panel
          * @returns Promise that resolves when the panel is closed
         */
        "closeSidePanel": () => Promise<void>;
        /**
          * Will close the sidepanel if clicked off when set
          * @default false
         */
        "close_backdrop": boolean;
        /**
          * If sidepanel should used fixed positioning (otherwise absolute)
          * @default true
         */
        "fixed": boolean;
        /**
          * Displays a close button if set
          * @default true
         */
        "has_close_button": boolean;
        /**
          * Puts a scrollbar on the sidepanel if set
          * @default true
         */
        "has_scrollbar": boolean;
        /**
          * Opens the side panel
          * @returns Promise that resolves when the panel is opened
         */
        "openSidePanel": () => Promise<void>;
        /**
          * Position of the side panel
          * @default 'right'
         */
        "origin": SidePanelDirection;
        /**
          * ID of the panel
         */
        "panel_id": string;
        /**
          * Subtitle displayed in the side panel
         */
        "panel_subtitle": string;
        /**
          * Title displayed in the side panel
         */
        "panel_title": string;
        /**
          * Size of the size panel
          * @default 'xs'
         */
        "size": SidePanelSize;
    }
    /**
     * @category Navigation
     * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
     */
    interface AtuiSidebar {
        /**
          * Size of the sidebar when collapsed.
          * @default 'icon'
         */
        "collapsible": Collapsible;
        /**
          * Opens the sidebar by default when set
          * @default true
         */
        "default_open"?: boolean;
        /**
          * Getter method for the open state of the sidebar
          * @returns The current open state of the sidebar
         */
        "getIsOpen": () => Promise<boolean>;
        /**
          * Position of the sidebar on the page
          * @default 'left'
         */
        "side": Side;
        /**
          * Toggles the sidebar's open state.
         */
        "toggleSidebar": () => Promise<void>;
        /**
          * Width of the sidebar
          * @default 'menu'
         */
        "width": Width;
    }
    /**
     * @category Navigation
     * @description 
     */
    interface AtuiSidebarMenu {
    }
    /**
     * @category Navigation
     * @description A sidebar menu item component for the sidebar.
     */
    interface AtuiSidebarMenuitem {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Navigation
     * @description Display nested sub-menus in the atui-sidebar.
     * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
     * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
     * Menu indent styling is supported up to 3 levels.
     */
    interface AtuiSidebarSubmenu {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label": string;
    }
    /**
     * @category Navigation
     * @description A sidebar trigger component for the sidebar.
     */
    interface AtuiSidebarTrigger {
        /**
          * Size of the button
          * @default 'lg'
         */
        "size": ButtonSize1;
    }
    /**
     * @category Utilities
     * @description A src-dest component for displaying source and destination information.
     */
    interface AtuiSrcDest {
        /**
          * Aligns the content to the left or center of the container
          * @default 'left'
         */
        "align": SrcDestAlign;
        /**
          * Subtitle displayed on the right
         */
        "dest_subtitle": string;
        /**
          * Text displayed on the right
         */
        "dest_text": string;
        /**
          * Title displayed on the right
         */
        "dest_title": string;
        /**
          * Subtitle displayed on the left
         */
        "src_subtitle": string;
        /**
          * Text displayed on the left
         */
        "src_text": string;
        /**
          * Title displayed on the left
         */
        "src_title": string;
    }
    /**
     * @category Data Tables
     * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
     */
    interface AtuiStaticTable {
        /**
          * Column definitions for the table
         */
        "col_defs": ColDef[];
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager": boolean;
        /**
          * Max number of items per page
          * @default 10
         */
        "page_size": number;
        /**
          * Data to go into the table
         */
        "table_data": {
        items: any[];
        total: number;
    };
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Data Visualization
     * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
     */
    interface AtuiStatusBar {
        /**
          * Disables the tooltip when hovered
         */
        "disable_tooltip"?: boolean;
        /**
          * Height of the status bar
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * List of segments that make up the status bar. Each segment implements the StatusBar interface.
          * @default []
         */
        "status_bar": StatusBar[];
    }
    /**
     * @category Navigation
     * @description A tab component for the tab selector.
     */
    interface AtuiTab {
        /**
          * Applies styling when active
         */
        "is_active": boolean;
        /**
          * Styling based on the layout of the tabs
          * @default 'horizontal'
         */
        "layout": Layout;
        /**
          * ID of the tab
         */
        "tab_id": string;
        /**
          * Title to be displayed in the tab
         */
        "tab_title": string;
    }
    /**
     * @category Navigation
     * @description A tab content component for the tab selector.
     */
    interface AtuiTabContent {
        /**
          * Determines if the tab content is active
          * @default false
         */
        "is_active": boolean;
        /**
          * ID of the tab
         */
        "tab_id": string;
    }
    /**
     * ### interface Tab
     * ```
     * {
     *   id: string;
     *   title: string;
     * }
     * ```
     * @category Navigation
     * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
     */
    interface AtuiTabSelector {
        /**
          * Sets the current active tab
         */
        "active_tab"?: string;
        /**
          * Gets the current active tab
          * @returns The current active_tab value
         */
        "getActiveTab": () => Promise<string>;
        /**
          * hide navigation when you want to provide custom controls
          * @default false
         */
        "hide_nav": boolean;
        /**
          * Layout of the tabs
          * @default 'horizontal'
         */
        "layout": Layout1;
        /**
          * Sets the current active tab
          * @param value - The tab id to set as active
         */
        "setActiveTab": (value: string) => Promise<void>;
        /**
          * List of tabs the selector will have
          * @default []
         */
        "tabs": Tab[];
    }
    /**
     * @category Data Tables
     * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
     */
    interface AtuiTable {
        /**
          * The AG Grid API
         */
        "ag_grid": GridApi;
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns": boolean;
        /**
          * Column definitions for the table
         */
        "col_defs": ColDef[];
        /**
          * Method used to initialize the table.
          * @returns The [AG Grid API](https://www.ag-grid.com/javascript-data-grid/grid-api/)
         */
        "createGrid": () => Promise<GridApi>;
        /**
          * If true, disables automatic grid initialization. When disabled, you must manually call createGrid(). Used when the table is controlled by a parent component.
          * @default false
         */
        "disable_auto_init": boolean;
        /**
          * Gets the AG Grid API instance
          * @returns The AG Grid API
         */
        "getGridApi": () => Promise<GridApi>;
        /**
          * Default page size of the table if pagination is activated
          * @default 10
         */
        "page_size": number;
        /**
          * Data provided to the table
         */
        "table_data": {
        items: any[];
        total: number;
    };
        /**
          * Disables the default pagination provided by agGrid. When using custom pagination, the default sorting provided by ag grid will not work correctly.
          * @default false
         */
        "use_custom_pagination": boolean;
        /**
          * Disables the default sorting provided by agGrid.
          * @default false
         */
        "use_custom_sorting": boolean;
    }
    /**
     * @category Data Tables
     * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
     */
    interface AtuiTableActions {
        /**
          * AG Grid Api (provided by atui-table createGrid method)
         */
        "ag_grid": GridApi;
    }
    /**
     * @category Data Tables
     * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
     */
    interface AtuiTableExportMenu {
    }
    /**
     * @category Data Tables
     * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
     */
    interface AtuiTableFilterMenu {
        /**
          * Column definitions used in your atui-table
         */
        "col_defs": ColDef[];
        /**
          * Currently selected filter columns
          * @default []
         */
        "selected": string[];
    }
    interface AtuiTableFilters {
        /**
          * Column definitions used in your atui-table
         */
        "col_defs": ColDef[];
        /**
          * Currently selected columns and filter values
          * @default []
         */
        "selected": { id: string; value: string }[];
    }
    /**
     * @category Data Tables
     * @description Optional component for use with ```<atui-table>```.
     * Provides controls for pagination if you would like to
     * have control of the table's pagination.
     */
    interface AtuiTablePagination {
        /**
          * Current page number
          * @default 1
         */
        "current_page": number;
        /**
          * Total number of pages
          * @default 1
         */
        "num_pages": number;
        /**
          * Options provided in dropdown for page sizes.
          * @default [         { value: '5' },         { value: '10' },         { value: '20' },         { value: '50' },         { value: '100' },     ]
         */
        "page_size_options": SelectOption[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a badge.
     */
    interface AtuiTextBadgeCell {
    }
    /**
     * @category Table Cell
     * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
     */
    interface AtuiTextCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
     */
    interface AtuiTextIconCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with an image.
     */
    interface AtuiTextImageCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a status.
     */
    interface AtuiTextStatusCell {
    }
    /**
     * @category Form Controls
     * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
     */
    interface AtuiTextarea {
        /**
          * Sets the 'autocomplete' attribute on the textarea
          * @default 'on'
         */
        "autocomplete": string;
        /**
          * Disables interaction with the textarea
         */
        "disabled": boolean;
        /**
          * Displayed when invalid is set
         */
        "error_text": string;
        /**
          * Short description or validation hint if required
         */
        "hint_text": string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text": string;
        /**
          * Displays then error text when set
         */
        "invalid": boolean;
        /**
          * Label to be displayed for the textarea
         */
        "label": string;
        /**
          * Maximum number of rows to expand to
          * @default 10
         */
        "max_rows": number;
        /**
          * Minimum number of rows to display
          * @default 1
         */
        "min_rows": number;
        /**
          * Placeholder in the textarea when no text is placed
         */
        "placeholder": string;
        /**
          * Makes the textarea read only
         */
        "readonly": boolean;
        /**
          * Adds a required * to the label
         */
        "required": boolean;
        /**
          * Sets the value of the textarea
         */
        "value": string;
    }
    /**
     * @category Form Controls
     * @description A time range component for selecting time periods.
     */
    interface AtuiTimeRange {
        /**
          * Custom error message to show when an invalid time is inputted.
          * @default null
         */
        "custom_error_message": any;
        /**
          * Enable range limit setting. If set to false, use Jan 1, 1985 as the lower limit of time range, ignoring the value of range limit.
          * @default true
         */
        "enable_range_limit": boolean;
        /**
          * Enable relative time selection.
          * @default true
         */
        "enable_relative_time": boolean;
        /**
          * Define the presets for the relative time ranges.
         */
        "presets": TimePresets[];
        /**
          * Lower limit of the time range.
          * @default 7
         */
        "range_limit": number;
        /**
          * Selected time range.
          * @default {         selected: {             unit: TimeUnit.HOURS,             value: 1,         },     }
         */
        "selected_time_range": SelectedTimeRangeExtended;
        /**
          * Enable all time selection.
          * @default false
         */
        "show_all_time": boolean;
    }
    /**
     * @category Form Controls
     * @description A time with unit component for selecting a time period.
     */
    interface AtuiTimeWithUnit {
        /**
          * Common time preset options to display
         */
        "common_options": TimePresets[];
        /**
          * Custom error message to display when validation fails
          * @default null
         */
        "custom_error_message": any;
        /**
          * Initial time selection value
         */
        "initial_selected_time": TimeWithUnit | TimeRangeDisplay.ALL;
        /**
          * Maximum number of seconds allowed for time selection
          * @default Number.MAX_SAFE_INTEGER
         */
        "max_seconds": number;
        /**
          * Minimum date constraint for time selection
          * @default null
         */
        "min_date": Date;
        /**
          * Minimum number of seconds allowed for time selection
          * @default 60
         */
        "min_seconds": number;
        /**
          * Whether to show the 'All Time' option
          * @default false
         */
        "show_all_time": boolean;
        /**
          * Available time units for selection
         */
        "units": TimeUnit[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle.
     */
    interface AtuiTitleSubtitleCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle with a date.
     */
    interface AtuiTitleSubtitleDateCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a toggle.
     */
    interface AtuiToggleCell {
    }
    /**
     * @category Form Controls
     * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
     */
    interface AtuiToggleSwitch {
        /**
          * Disable interaction with the toggle.
         */
        "disabled"?: boolean;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Label displayed alongside the toggle.
         */
        "label"?: string;
        /**
          * Position of the label, left or right of the toggle.
          * @default 'before'
         */
        "label_position": LabelPosition;
        /**
          * Show the toggle label.
          * @default true
         */
        "show_label"?: boolean;
        /**
          * Set the toggles state.
          * @default false
         */
        "value": boolean;
    }
    /**
     * @category **Overlays**
     * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
     */
    interface AtuiTooltip {
        /**
          * Alignment of opened tooltip element relative to trigger element.
          * @default 'center'
         */
        "align": TooltipAlign;
        /**
          * Closes the tooltip.
         */
        "closeTooltip": () => Promise<void>;
        /**
          * Delay before showing and hiding the tooltip when interacting with the trigger element.
          * @default 150
         */
        "delay"?: number;
        /**
          * Prevent opening tooltip
          * @default false
         */
        "disabled": boolean;
        /**
          * Offset in pixels from the edge of the trigger element
          * @default 8
         */
        "offset"?: number;
        /**
          * Opens the tooltip.
         */
        "openTooltip": () => Promise<void>;
        /**
          * Position of opened tooltip element relative to the trigger element.
          * @default 'top'
         */
        "position": TooltipPosition;
        /**
          * Maximum width constraint for the tooltip in pixels. Defaults to 300px for readability.
          * @default '200px'
         */
        "width"?: string;
    }
    /**
     * ### ```interface ItemNode```
     * ```
     *  id: string;
     *  displayName: string;
     *  children: ItemNode[];
     *  isSelected?: boolean;
     *  tooltip?: string;
     * ```
     */
    interface AtuiTree {
        /**
          * List of items to be displayed in the tree
         */
        "item_list": TreeNode[];
        /**
          * Set the size of the tree button, default sm
          * @default 'sm'
         */
        "size": ButtonSize1;
    }
    interface AtuiTreeItem {
        /**
          * Defines the indent of the tree item
         */
        "depth"?: number;
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Determines whether to add the arrow indicator icon
          * @default false
         */
        "has_children"?: boolean;
        /**
          * Label to be displayed within the button
         */
        "label": string;
        /**
          * Determines the direction of the indicator arrow
          * @default false
         */
        "selected"?: boolean;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size": TreeItemSize;
    }
}
export interface AtuiAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiAccordionItemElement;
}
export interface AtuiBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiBreadcrumbElement;
}
export interface AtuiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiButtonElement;
}
export interface AtuiButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiButtonGroupElement;
}
export interface AtuiButtonGroupOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiButtonGroupOptionElement;
}
export interface AtuiCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiCheckboxElement;
}
export interface AtuiCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiCheckboxGroupElement;
}
export interface AtuiChipListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiChipListElement;
}
export interface AtuiColumnManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiColumnManagerElement;
}
export interface AtuiCustomTimeRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiCustomTimeRangeElement;
}
export interface AtuiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiInputElement;
}
export interface AtuiInputNumericCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiInputNumericElement;
}
export interface AtuiInputRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiInputRangeElement;
}
export interface AtuiListSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiListSelectorElement;
}
export interface AtuiMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiMenuElement;
}
export interface AtuiMultiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiMultiSelectElement;
}
export interface AtuiPromptContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiPromptContainerElement;
}
export interface AtuiPromptInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiPromptInputElement;
}
export interface AtuiPromptMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiPromptMessageElement;
}
export interface AtuiPromptThreadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiPromptThreadElement;
}
export interface AtuiRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiRadioElement;
}
export interface AtuiRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiRadioGroupElement;
}
export interface AtuiSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiSearchElement;
}
export interface AtuiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiSelectElement;
}
export interface AtuiSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiSidebarElement;
}
export interface AtuiTabSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTabSelectorElement;
}
export interface AtuiTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTableElement;
}
export interface AtuiTableActionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTableActionsElement;
}
export interface AtuiTableExportMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTableExportMenuElement;
}
export interface AtuiTableFilterMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTableFilterMenuElement;
}
export interface AtuiTableFiltersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTableFiltersElement;
}
export interface AtuiTablePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTablePaginationElement;
}
export interface AtuiTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTextareaElement;
}
export interface AtuiTimeRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTimeRangeElement;
}
export interface AtuiTimeWithUnitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTimeWithUnitElement;
}
export interface AtuiToggleSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiToggleSwitchElement;
}
export interface AtuiTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTreeElement;
}
export interface AtuiTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtuiTreeItemElement;
}
declare global {
    /**
     * ### ```interface AccordionItem```
     * ```
     * item_id: string;
     * label: string;
     * content: string;
     * ```
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface HTMLAtuiAccordionElement extends Components.AtuiAccordion, HTMLStencilElement {
    }
    var HTMLAtuiAccordionElement: {
        prototype: HTMLAtuiAccordionElement;
        new (): HTMLAtuiAccordionElement;
    };
    interface HTMLAtuiAccordionItemElementEventMap {
        "atuiAccordionChange": boolean;
    }
    /**
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface HTMLAtuiAccordionItemElement extends Components.AtuiAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiAccordionItemElementEventMap>(type: K, listener: (this: HTMLAtuiAccordionItemElement, ev: AtuiAccordionItemCustomEvent<HTMLAtuiAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiAccordionItemElementEventMap>(type: K, listener: (this: HTMLAtuiAccordionItemElement, ev: AtuiAccordionItemCustomEvent<HTMLAtuiAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiAccordionItemElement: {
        prototype: HTMLAtuiAccordionItemElement;
        new (): HTMLAtuiAccordionItemElement;
    };
    interface HTMLAtuiAccordionTriggerElement extends Components.AtuiAccordionTrigger, HTMLStencilElement {
    }
    var HTMLAtuiAccordionTriggerElement: {
        prototype: HTMLAtuiAccordionTriggerElement;
        new (): HTMLAtuiAccordionTriggerElement;
    };
    /**
     * @category Decoration
     * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
     */
    interface HTMLAtuiAvatarElement extends Components.AtuiAvatar, HTMLStencilElement {
    }
    var HTMLAtuiAvatarElement: {
        prototype: HTMLAtuiAvatarElement;
        new (): HTMLAtuiAvatarElement;
    };
    /**
     * @category Feedback
     * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
     */
    interface HTMLAtuiBadgeElement extends Components.AtuiBadge, HTMLStencilElement {
    }
    var HTMLAtuiBadgeElement: {
        prototype: HTMLAtuiBadgeElement;
        new (): HTMLAtuiBadgeElement;
    };
    interface HTMLAtuiBreadcrumbElementEventMap {
        "atuiClick": number;
    }
    /**
     * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
     * Provides clickable path navigation with customizable separators and accessibility features.
     * @category Navigation
     */
    interface HTMLAtuiBreadcrumbElement extends Components.AtuiBreadcrumb, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiBreadcrumbElementEventMap>(type: K, listener: (this: HTMLAtuiBreadcrumbElement, ev: AtuiBreadcrumbCustomEvent<HTMLAtuiBreadcrumbElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiBreadcrumbElementEventMap>(type: K, listener: (this: HTMLAtuiBreadcrumbElement, ev: AtuiBreadcrumbCustomEvent<HTMLAtuiBreadcrumbElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiBreadcrumbElement: {
        prototype: HTMLAtuiBreadcrumbElement;
        new (): HTMLAtuiBreadcrumbElement;
    };
    /**
     * @category Navigation
     * @description A breadcrumb item component for the breadcrumb.
     */
    interface HTMLAtuiBreadcrumbItemElement extends Components.AtuiBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLAtuiBreadcrumbItemElement: {
        prototype: HTMLAtuiBreadcrumbItemElement;
        new (): HTMLAtuiBreadcrumbItemElement;
    };
    interface HTMLAtuiButtonElementEventMap {
        "atuiClick": AtuiEvent;
    }
    /**
     * @category Actions
     * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
     */
    interface HTMLAtuiButtonElement extends Components.AtuiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiButtonElementEventMap>(type: K, listener: (this: HTMLAtuiButtonElement, ev: AtuiButtonCustomEvent<HTMLAtuiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiButtonElementEventMap>(type: K, listener: (this: HTMLAtuiButtonElement, ev: AtuiButtonCustomEvent<HTMLAtuiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiButtonElement: {
        prototype: HTMLAtuiButtonElement;
        new (): HTMLAtuiButtonElement;
    };
    interface HTMLAtuiButtonGroupElementEventMap {
        "atuiIndexChange": number;
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
     */
    interface HTMLAtuiButtonGroupElement extends Components.AtuiButtonGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiButtonGroupElementEventMap>(type: K, listener: (this: HTMLAtuiButtonGroupElement, ev: AtuiButtonGroupCustomEvent<HTMLAtuiButtonGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiButtonGroupElementEventMap>(type: K, listener: (this: HTMLAtuiButtonGroupElement, ev: AtuiButtonGroupCustomEvent<HTMLAtuiButtonGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiButtonGroupElement: {
        prototype: HTMLAtuiButtonGroupElement;
        new (): HTMLAtuiButtonGroupElement;
    };
    interface HTMLAtuiButtonGroupOptionElementEventMap {
        "atuiClick": AtuiEvent;
    }
    /**
     * @category Form Controls
     * @description A button group option component for the button group.
     */
    interface HTMLAtuiButtonGroupOptionElement extends Components.AtuiButtonGroupOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiButtonGroupOptionElementEventMap>(type: K, listener: (this: HTMLAtuiButtonGroupOptionElement, ev: AtuiButtonGroupOptionCustomEvent<HTMLAtuiButtonGroupOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiButtonGroupOptionElementEventMap>(type: K, listener: (this: HTMLAtuiButtonGroupOptionElement, ev: AtuiButtonGroupOptionCustomEvent<HTMLAtuiButtonGroupOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiButtonGroupOptionElement: {
        prototype: HTMLAtuiButtonGroupOptionElement;
        new (): HTMLAtuiButtonGroupOptionElement;
    };
    /**
     * @category Layout
     * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
     */
    interface HTMLAtuiCardElement extends Components.AtuiCard, HTMLStencilElement {
    }
    var HTMLAtuiCardElement: {
        prototype: HTMLAtuiCardElement;
        new (): HTMLAtuiCardElement;
    };
    /**
     * ### ```interface PointStyles```
     * ```
     *  pointBackgroundColor: Color;
     *  pointBorderColor: Color;
     *  pointBorderWidth: number;
     *  pointHitRadius: number;
     *  pointHoverBackgroundColor: Color;
     *  pointHoverBorderColor: Color;
     *  pointHoverBorderWidth: number;
     *  pointHoverRadius: number;
     *  pointRadius: number;
     *  pointRotaion: number;
     *  pointStyle: PointStyle;
     * ```
     * ### ```interface Threshold```
     * ```
     *  label: string;
     *  data: (number | Point | [number, number] | BubbleDataPoint)[];
     *  color?: string;
     *  dashLine?: boolean;
     *  stepped?: boolean;
     * ```
     */
    interface HTMLAtuiChartBarLineElement extends Components.AtuiChartBarLine, HTMLStencilElement {
    }
    var HTMLAtuiChartBarLineElement: {
        prototype: HTMLAtuiChartBarLineElement;
        new (): HTMLAtuiChartBarLineElement;
    };
    /**
     * @category Data Visualization
     * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
     */
    interface HTMLAtuiChartDonutElement extends Components.AtuiChartDonut, HTMLStencilElement {
    }
    var HTMLAtuiChartDonutElement: {
        prototype: HTMLAtuiChartDonutElement;
        new (): HTMLAtuiChartDonutElement;
    };
    interface HTMLAtuiCheckboxElementEventMap {
        "atuiChange": boolean;
    }
    /**
     * @category Form Controls
     * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
     */
    interface HTMLAtuiCheckboxElement extends Components.AtuiCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiCheckboxElementEventMap>(type: K, listener: (this: HTMLAtuiCheckboxElement, ev: AtuiCheckboxCustomEvent<HTMLAtuiCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiCheckboxElementEventMap>(type: K, listener: (this: HTMLAtuiCheckboxElement, ev: AtuiCheckboxCustomEvent<HTMLAtuiCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiCheckboxElement: {
        prototype: HTMLAtuiCheckboxElement;
        new (): HTMLAtuiCheckboxElement;
    };
    /**
     * @category Table Cell
     * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
     */
    interface HTMLAtuiCheckboxCellElement extends Components.AtuiCheckboxCell, HTMLStencilElement {
    }
    var HTMLAtuiCheckboxCellElement: {
        prototype: HTMLAtuiCheckboxCellElement;
        new (): HTMLAtuiCheckboxCellElement;
    };
    interface HTMLAtuiCheckboxGroupElementEventMap {
        "atuiChange": string[];
    }
    /**
     * ### ```interface CheckboxOptions```
     * ```
     *  id: string;
     *  label?: string;
     *  hint_text?: string;
     *  value?: boolean;
     * ```
     * @category Form Controls
     * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
     */
    interface HTMLAtuiCheckboxGroupElement extends Components.AtuiCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLAtuiCheckboxGroupElement, ev: AtuiCheckboxGroupCustomEvent<HTMLAtuiCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLAtuiCheckboxGroupElement, ev: AtuiCheckboxGroupCustomEvent<HTMLAtuiCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiCheckboxGroupElement: {
        prototype: HTMLAtuiCheckboxGroupElement;
        new (): HTMLAtuiCheckboxGroupElement;
    };
    /**
     * @category Table Cell
     * @description A header component for displaying a checkbox.
     */
    interface HTMLAtuiCheckboxHeaderElement extends Components.AtuiCheckboxHeader, HTMLStencilElement {
    }
    var HTMLAtuiCheckboxHeaderElement: {
        prototype: HTMLAtuiCheckboxHeaderElement;
        new (): HTMLAtuiCheckboxHeaderElement;
    };
    interface HTMLAtuiChipListElementEventMap {
        "atuiRemoveChip": string[];
    }
    /**
     * @category Utilities
     * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
     */
    interface HTMLAtuiChipListElement extends Components.AtuiChipList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiChipListElementEventMap>(type: K, listener: (this: HTMLAtuiChipListElement, ev: AtuiChipListCustomEvent<HTMLAtuiChipListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiChipListElementEventMap>(type: K, listener: (this: HTMLAtuiChipListElement, ev: AtuiChipListCustomEvent<HTMLAtuiChipListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiChipListElement: {
        prototype: HTMLAtuiChipListElement;
        new (): HTMLAtuiChipListElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a list of chips.
     */
    interface HTMLAtuiChipListCellElement extends Components.AtuiChipListCell, HTMLStencilElement {
    }
    var HTMLAtuiChipListCellElement: {
        prototype: HTMLAtuiChipListCellElement;
        new (): HTMLAtuiChipListCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a color status indicator based on predefined types
     */
    interface HTMLAtuiColorStatusCellElement extends Components.AtuiColorStatusCell, HTMLStencilElement {
    }
    var HTMLAtuiColorStatusCellElement: {
        prototype: HTMLAtuiColorStatusCellElement;
        new (): HTMLAtuiColorStatusCellElement;
    };
    interface HTMLAtuiColumnManagerElementEventMap {
        "atuiChange": ColumnManagerChangeEvent;
    }
    interface HTMLAtuiColumnManagerElement extends Components.AtuiColumnManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiColumnManagerElementEventMap>(type: K, listener: (this: HTMLAtuiColumnManagerElement, ev: AtuiColumnManagerCustomEvent<HTMLAtuiColumnManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiColumnManagerElementEventMap>(type: K, listener: (this: HTMLAtuiColumnManagerElement, ev: AtuiColumnManagerCustomEvent<HTMLAtuiColumnManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiColumnManagerElement: {
        prototype: HTMLAtuiColumnManagerElement;
        new (): HTMLAtuiColumnManagerElement;
    };
    interface HTMLAtuiCustomTimeRangeElementEventMap {
        "atuiCancel": null;
        "atuiSubmit": DateRangeStrings;
    }
    interface HTMLAtuiCustomTimeRangeElement extends Components.AtuiCustomTimeRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiCustomTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtuiCustomTimeRangeElement, ev: AtuiCustomTimeRangeCustomEvent<HTMLAtuiCustomTimeRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiCustomTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtuiCustomTimeRangeElement, ev: AtuiCustomTimeRangeCustomEvent<HTMLAtuiCustomTimeRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiCustomTimeRangeElement: {
        prototype: HTMLAtuiCustomTimeRangeElement;
        new (): HTMLAtuiCustomTimeRangeElement;
    };
    /**
     * @category Overlays
     * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
     */
    interface HTMLAtuiDialogElement extends Components.AtuiDialog, HTMLStencilElement {
    }
    var HTMLAtuiDialogElement: {
        prototype: HTMLAtuiDialogElement;
        new (): HTMLAtuiDialogElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying and editing text.
     */
    interface HTMLAtuiEditTextCellElement extends Components.AtuiEditTextCell, HTMLStencilElement {
    }
    var HTMLAtuiEditTextCellElement: {
        prototype: HTMLAtuiEditTextCellElement;
        new (): HTMLAtuiEditTextCellElement;
    };
    /**
     * @category Form Controls
     * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
     */
    interface HTMLAtuiFormLabelElement extends Components.AtuiFormLabel, HTMLStencilElement {
    }
    var HTMLAtuiFormLabelElement: {
        prototype: HTMLAtuiFormLabelElement;
        new (): HTMLAtuiFormLabelElement;
    };
    /**
     * @category Layout
     * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
     */
    interface HTMLAtuiHeaderElement extends Components.AtuiHeader, HTMLStencilElement {
    }
    var HTMLAtuiHeaderElement: {
        prototype: HTMLAtuiHeaderElement;
        new (): HTMLAtuiHeaderElement;
    };
    interface HTMLAtuiInputElementEventMap {
        "atuiChange": string | number;
    }
    /**
     * @category Form Controls
     * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
     */
    interface HTMLAtuiInputElement extends Components.AtuiInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiInputElementEventMap>(type: K, listener: (this: HTMLAtuiInputElement, ev: AtuiInputCustomEvent<HTMLAtuiInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiInputElementEventMap>(type: K, listener: (this: HTMLAtuiInputElement, ev: AtuiInputCustomEvent<HTMLAtuiInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiInputElement: {
        prototype: HTMLAtuiInputElement;
        new (): HTMLAtuiInputElement;
    };
    interface HTMLAtuiInputNumericElementEventMap {
        "atuiChange": string | number;
    }
    /**
     * @category Form Controls
     * @description A numeric input component for entering numerical values.
     */
    interface HTMLAtuiInputNumericElement extends Components.AtuiInputNumeric, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiInputNumericElementEventMap>(type: K, listener: (this: HTMLAtuiInputNumericElement, ev: AtuiInputNumericCustomEvent<HTMLAtuiInputNumericElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiInputNumericElementEventMap>(type: K, listener: (this: HTMLAtuiInputNumericElement, ev: AtuiInputNumericCustomEvent<HTMLAtuiInputNumericElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiInputNumericElement: {
        prototype: HTMLAtuiInputNumericElement;
        new (): HTMLAtuiInputNumericElement;
    };
    interface HTMLAtuiInputRangeElementEventMap {
        "atuiChange": number;
    }
    /**
     * @category Form Controls
     * @description A range input component for selecting a value within a specified range.
     */
    interface HTMLAtuiInputRangeElement extends Components.AtuiInputRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiInputRangeElementEventMap>(type: K, listener: (this: HTMLAtuiInputRangeElement, ev: AtuiInputRangeCustomEvent<HTMLAtuiInputRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiInputRangeElementEventMap>(type: K, listener: (this: HTMLAtuiInputRangeElement, ev: AtuiInputRangeCustomEvent<HTMLAtuiInputRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiInputRangeElement: {
        prototype: HTMLAtuiInputRangeElement;
        new (): HTMLAtuiInputRangeElement;
    };
    /**
     * @category Layout
     * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
     */
    interface HTMLAtuiLayoutElement extends Components.AtuiLayout, HTMLStencilElement {
    }
    var HTMLAtuiLayoutElement: {
        prototype: HTMLAtuiLayoutElement;
        new (): HTMLAtuiLayoutElement;
    };
    /**
     * @category Layout
     * @description A list item component for the list.
     */
    interface HTMLAtuiListItemElement extends Components.AtuiListItem, HTMLStencilElement {
    }
    var HTMLAtuiListItemElement: {
        prototype: HTMLAtuiListItemElement;
        new (): HTMLAtuiListItemElement;
    };
    interface HTMLAtuiListSelectorElementEventMap {
        "atuiChange": ListSelectorItem;
        "atuiInfoButtonClick": AtuiEvent;
    }
    /**
     * @category Navigation
     * @description A list selector component for selecting an item from a list.
     */
    interface HTMLAtuiListSelectorElement extends Components.AtuiListSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiListSelectorElementEventMap>(type: K, listener: (this: HTMLAtuiListSelectorElement, ev: AtuiListSelectorCustomEvent<HTMLAtuiListSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiListSelectorElementEventMap>(type: K, listener: (this: HTMLAtuiListSelectorElement, ev: AtuiListSelectorCustomEvent<HTMLAtuiListSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiListSelectorElement: {
        prototype: HTMLAtuiListSelectorElement;
        new (): HTMLAtuiListSelectorElement;
    };
    /**
     * @category Navigation
     * @description A list selector item component for the list selector.
     */
    interface HTMLAtuiListSelectorItemElement extends Components.AtuiListSelectorItem, HTMLStencilElement {
    }
    var HTMLAtuiListSelectorItemElement: {
        prototype: HTMLAtuiListSelectorItemElement;
        new (): HTMLAtuiListSelectorItemElement;
    };
    /**
     * @category Feedback
     * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
     */
    interface HTMLAtuiLoadingElement extends Components.AtuiLoading, HTMLStencilElement {
    }
    var HTMLAtuiLoadingElement: {
        prototype: HTMLAtuiLoadingElement;
        new (): HTMLAtuiLoadingElement;
    };
    interface HTMLAtuiMenuElementEventMap {
        "atuiMenuStateChange": boolean;
    }
    interface HTMLAtuiMenuElement extends Components.AtuiMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiMenuElementEventMap>(type: K, listener: (this: HTMLAtuiMenuElement, ev: AtuiMenuCustomEvent<HTMLAtuiMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiMenuElementEventMap>(type: K, listener: (this: HTMLAtuiMenuElement, ev: AtuiMenuCustomEvent<HTMLAtuiMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiMenuElement: {
        prototype: HTMLAtuiMenuElement;
        new (): HTMLAtuiMenuElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a menu.
     */
    interface HTMLAtuiMenuCellElement extends Components.AtuiMenuCell, HTMLStencilElement {
    }
    var HTMLAtuiMenuCellElement: {
        prototype: HTMLAtuiMenuCellElement;
        new (): HTMLAtuiMenuCellElement;
    };
    interface HTMLAtuiMenuItemElement extends Components.AtuiMenuItem, HTMLStencilElement {
    }
    var HTMLAtuiMenuItemElement: {
        prototype: HTMLAtuiMenuItemElement;
        new (): HTMLAtuiMenuItemElement;
    };
    /**
     * @category Feedback
     * @description A message component for displaying notifications, alerts, or informational messages.
     */
    interface HTMLAtuiMessageElement extends Components.AtuiMessage, HTMLStencilElement {
    }
    var HTMLAtuiMessageElement: {
        prototype: HTMLAtuiMessageElement;
        new (): HTMLAtuiMessageElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying multiple buttons.
     */
    interface HTMLAtuiMultiBtnCellElement extends Components.AtuiMultiBtnCell, HTMLStencilElement {
    }
    var HTMLAtuiMultiBtnCellElement: {
        prototype: HTMLAtuiMultiBtnCellElement;
        new (): HTMLAtuiMultiBtnCellElement;
    };
    interface HTMLAtuiMultiSelectElementEventMap {
        "atuiChange": string[];
    }
    /**
     * @category Form Controls
     * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface HTMLAtuiMultiSelectElement extends Components.AtuiMultiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiMultiSelectElementEventMap>(type: K, listener: (this: HTMLAtuiMultiSelectElement, ev: AtuiMultiSelectCustomEvent<HTMLAtuiMultiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiMultiSelectElementEventMap>(type: K, listener: (this: HTMLAtuiMultiSelectElement, ev: AtuiMultiSelectCustomEvent<HTMLAtuiMultiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiMultiSelectElement: {
        prototype: HTMLAtuiMultiSelectElement;
        new (): HTMLAtuiMultiSelectElement;
    };
    /**
     * @category Feedback
     * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
     */
    interface HTMLAtuiPlaceholderElement extends Components.AtuiPlaceholder, HTMLStencilElement {
    }
    var HTMLAtuiPlaceholderElement: {
        prototype: HTMLAtuiPlaceholderElement;
        new (): HTMLAtuiPlaceholderElement;
    };
    interface HTMLAtuiPromptContainerElementEventMap {
        "atuiSubmit": string;
        "atuiStop": void;
        "atuiNewThread": void;
        "atuiMessageCopy": {
        messageId: string;
        content: string;
    };
        "atuiMessageRetry": { messageId: string };
        "atuiMessageEdit": {
        messageId: string;
        content: string;
    };
        "atuiMessageVote": {
        messageId: string;
        score: number;
    };
    }
    /**
     * @category Prompt
     * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
     */
    interface HTMLAtuiPromptContainerElement extends Components.AtuiPromptContainer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiPromptContainerElementEventMap>(type: K, listener: (this: HTMLAtuiPromptContainerElement, ev: AtuiPromptContainerCustomEvent<HTMLAtuiPromptContainerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiPromptContainerElementEventMap>(type: K, listener: (this: HTMLAtuiPromptContainerElement, ev: AtuiPromptContainerCustomEvent<HTMLAtuiPromptContainerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiPromptContainerElement: {
        prototype: HTMLAtuiPromptContainerElement;
        new (): HTMLAtuiPromptContainerElement;
    };
    interface HTMLAtuiPromptInputElementEventMap {
        "atuiChange": string;
        "atuiSubmit": string;
        "atuiStop": void;
        "atuiFocus": void;
    }
    /**
     * @category Prompt
     * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
     */
    interface HTMLAtuiPromptInputElement extends Components.AtuiPromptInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiPromptInputElementEventMap>(type: K, listener: (this: HTMLAtuiPromptInputElement, ev: AtuiPromptInputCustomEvent<HTMLAtuiPromptInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiPromptInputElementEventMap>(type: K, listener: (this: HTMLAtuiPromptInputElement, ev: AtuiPromptInputCustomEvent<HTMLAtuiPromptInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiPromptInputElement: {
        prototype: HTMLAtuiPromptInputElement;
        new (): HTMLAtuiPromptInputElement;
    };
    interface HTMLAtuiPromptMessageElementEventMap {
        "atuiCopy": string;
        "atuiVote": { messageId: string; score: number };
        "atuiRetry": void;
        "atuiEdit": string;
    }
    /**
     * @category Prompt
     * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
     */
    interface HTMLAtuiPromptMessageElement extends Components.AtuiPromptMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiPromptMessageElementEventMap>(type: K, listener: (this: HTMLAtuiPromptMessageElement, ev: AtuiPromptMessageCustomEvent<HTMLAtuiPromptMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiPromptMessageElementEventMap>(type: K, listener: (this: HTMLAtuiPromptMessageElement, ev: AtuiPromptMessageCustomEvent<HTMLAtuiPromptMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiPromptMessageElement: {
        prototype: HTMLAtuiPromptMessageElement;
        new (): HTMLAtuiPromptMessageElement;
    };
    interface HTMLAtuiPromptThreadElementEventMap {
        "atuiMessageCopy": {
        messageId: string;
        content: string;
    };
        "atuiMessageRetry": { messageId: string };
        "atuiMessageEdit": {
        messageId: string;
        content: string;
    };
        "atuiMessageVote": {
        messageId: string;
        score: number;
    };
    }
    /**
     * @category Prompt
     * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
     */
    interface HTMLAtuiPromptThreadElement extends Components.AtuiPromptThread, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiPromptThreadElementEventMap>(type: K, listener: (this: HTMLAtuiPromptThreadElement, ev: AtuiPromptThreadCustomEvent<HTMLAtuiPromptThreadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiPromptThreadElementEventMap>(type: K, listener: (this: HTMLAtuiPromptThreadElement, ev: AtuiPromptThreadCustomEvent<HTMLAtuiPromptThreadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiPromptThreadElement: {
        prototype: HTMLAtuiPromptThreadElement;
        new (): HTMLAtuiPromptThreadElement;
    };
    interface HTMLAtuiRadioElementEventMap {
        "atuiChange": boolean;
    }
    /**
     * @category Form Controls
     * @description A radio button component for selecting a single option from a predefined list.
     */
    interface HTMLAtuiRadioElement extends Components.AtuiRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiRadioElementEventMap>(type: K, listener: (this: HTMLAtuiRadioElement, ev: AtuiRadioCustomEvent<HTMLAtuiRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiRadioElementEventMap>(type: K, listener: (this: HTMLAtuiRadioElement, ev: AtuiRadioCustomEvent<HTMLAtuiRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiRadioElement: {
        prototype: HTMLAtuiRadioElement;
        new (): HTMLAtuiRadioElement;
    };
    interface HTMLAtuiRadioGroupElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
     */
    interface HTMLAtuiRadioGroupElement extends Components.AtuiRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiRadioGroupElementEventMap>(type: K, listener: (this: HTMLAtuiRadioGroupElement, ev: AtuiRadioGroupCustomEvent<HTMLAtuiRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiRadioGroupElementEventMap>(type: K, listener: (this: HTMLAtuiRadioGroupElement, ev: AtuiRadioGroupCustomEvent<HTMLAtuiRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiRadioGroupElement: {
        prototype: HTMLAtuiRadioGroupElement;
        new (): HTMLAtuiRadioGroupElement;
    };
    interface HTMLAtuiSearchElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A search component for filtering data.
     */
    interface HTMLAtuiSearchElement extends Components.AtuiSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiSearchElementEventMap>(type: K, listener: (this: HTMLAtuiSearchElement, ev: AtuiSearchCustomEvent<HTMLAtuiSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiSearchElementEventMap>(type: K, listener: (this: HTMLAtuiSearchElement, ev: AtuiSearchCustomEvent<HTMLAtuiSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiSearchElement: {
        prototype: HTMLAtuiSearchElement;
        new (): HTMLAtuiSearchElement;
    };
    /**
     * @category Data Tables
     * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
     */
    interface HTMLAtuiSearchTableElement extends Components.AtuiSearchTable, HTMLStencilElement {
    }
    var HTMLAtuiSearchTableElement: {
        prototype: HTMLAtuiSearchTableElement;
        new (): HTMLAtuiSearchTableElement;
    };
    interface HTMLAtuiSelectElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface HTMLAtuiSelectElement extends Components.AtuiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiSelectElementEventMap>(type: K, listener: (this: HTMLAtuiSelectElement, ev: AtuiSelectCustomEvent<HTMLAtuiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiSelectElementEventMap>(type: K, listener: (this: HTMLAtuiSelectElement, ev: AtuiSelectCustomEvent<HTMLAtuiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiSelectElement: {
        prototype: HTMLAtuiSelectElement;
        new (): HTMLAtuiSelectElement;
    };
    /**
     * @category Overlays
     * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
     */
    interface HTMLAtuiSidePanelElement extends Components.AtuiSidePanel, HTMLStencilElement {
    }
    var HTMLAtuiSidePanelElement: {
        prototype: HTMLAtuiSidePanelElement;
        new (): HTMLAtuiSidePanelElement;
    };
    interface HTMLAtuiSidebarElementEventMap {
        "atuiSidebarChange": any;
    }
    /**
     * @category Navigation
     * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
     */
    interface HTMLAtuiSidebarElement extends Components.AtuiSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiSidebarElementEventMap>(type: K, listener: (this: HTMLAtuiSidebarElement, ev: AtuiSidebarCustomEvent<HTMLAtuiSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiSidebarElementEventMap>(type: K, listener: (this: HTMLAtuiSidebarElement, ev: AtuiSidebarCustomEvent<HTMLAtuiSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiSidebarElement: {
        prototype: HTMLAtuiSidebarElement;
        new (): HTMLAtuiSidebarElement;
    };
    /**
     * @category Navigation
     * @description 
     */
    interface HTMLAtuiSidebarMenuElement extends Components.AtuiSidebarMenu, HTMLStencilElement {
    }
    var HTMLAtuiSidebarMenuElement: {
        prototype: HTMLAtuiSidebarMenuElement;
        new (): HTMLAtuiSidebarMenuElement;
    };
    /**
     * @category Navigation
     * @description A sidebar menu item component for the sidebar.
     */
    interface HTMLAtuiSidebarMenuitemElement extends Components.AtuiSidebarMenuitem, HTMLStencilElement {
    }
    var HTMLAtuiSidebarMenuitemElement: {
        prototype: HTMLAtuiSidebarMenuitemElement;
        new (): HTMLAtuiSidebarMenuitemElement;
    };
    /**
     * @category Navigation
     * @description Display nested sub-menus in the atui-sidebar.
     * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
     * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
     * Menu indent styling is supported up to 3 levels.
     */
    interface HTMLAtuiSidebarSubmenuElement extends Components.AtuiSidebarSubmenu, HTMLStencilElement {
    }
    var HTMLAtuiSidebarSubmenuElement: {
        prototype: HTMLAtuiSidebarSubmenuElement;
        new (): HTMLAtuiSidebarSubmenuElement;
    };
    /**
     * @category Navigation
     * @description A sidebar trigger component for the sidebar.
     */
    interface HTMLAtuiSidebarTriggerElement extends Components.AtuiSidebarTrigger, HTMLStencilElement {
    }
    var HTMLAtuiSidebarTriggerElement: {
        prototype: HTMLAtuiSidebarTriggerElement;
        new (): HTMLAtuiSidebarTriggerElement;
    };
    /**
     * @category Utilities
     * @description A src-dest component for displaying source and destination information.
     */
    interface HTMLAtuiSrcDestElement extends Components.AtuiSrcDest, HTMLStencilElement {
    }
    var HTMLAtuiSrcDestElement: {
        prototype: HTMLAtuiSrcDestElement;
        new (): HTMLAtuiSrcDestElement;
    };
    /**
     * @category Data Tables
     * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
     */
    interface HTMLAtuiStaticTableElement extends Components.AtuiStaticTable, HTMLStencilElement {
    }
    var HTMLAtuiStaticTableElement: {
        prototype: HTMLAtuiStaticTableElement;
        new (): HTMLAtuiStaticTableElement;
    };
    /**
     * @category Data Visualization
     * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
     */
    interface HTMLAtuiStatusBarElement extends Components.AtuiStatusBar, HTMLStencilElement {
    }
    var HTMLAtuiStatusBarElement: {
        prototype: HTMLAtuiStatusBarElement;
        new (): HTMLAtuiStatusBarElement;
    };
    /**
     * @category Navigation
     * @description A tab component for the tab selector.
     */
    interface HTMLAtuiTabElement extends Components.AtuiTab, HTMLStencilElement {
    }
    var HTMLAtuiTabElement: {
        prototype: HTMLAtuiTabElement;
        new (): HTMLAtuiTabElement;
    };
    /**
     * @category Navigation
     * @description A tab content component for the tab selector.
     */
    interface HTMLAtuiTabContentElement extends Components.AtuiTabContent, HTMLStencilElement {
    }
    var HTMLAtuiTabContentElement: {
        prototype: HTMLAtuiTabContentElement;
        new (): HTMLAtuiTabContentElement;
    };
    interface HTMLAtuiTabSelectorElementEventMap {
        "atuiChange": string;
    }
    /**
     * ### interface Tab
     * ```
     * {
     *   id: string;
     *   title: string;
     * }
     * ```
     * @category Navigation
     * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
     */
    interface HTMLAtuiTabSelectorElement extends Components.AtuiTabSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTabSelectorElementEventMap>(type: K, listener: (this: HTMLAtuiTabSelectorElement, ev: AtuiTabSelectorCustomEvent<HTMLAtuiTabSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTabSelectorElementEventMap>(type: K, listener: (this: HTMLAtuiTabSelectorElement, ev: AtuiTabSelectorCustomEvent<HTMLAtuiTabSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTabSelectorElement: {
        prototype: HTMLAtuiTabSelectorElement;
        new (): HTMLAtuiTabSelectorElement;
    };
    interface HTMLAtuiTableElementEventMap {
        "atuiSortChange": {
        colId: string;
        sortDirection: 'asc' | 'desc' | null;
    };
    }
    /**
     * @category Data Tables
     * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
     */
    interface HTMLAtuiTableElement extends Components.AtuiTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTableElementEventMap>(type: K, listener: (this: HTMLAtuiTableElement, ev: AtuiTableCustomEvent<HTMLAtuiTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTableElementEventMap>(type: K, listener: (this: HTMLAtuiTableElement, ev: AtuiTableCustomEvent<HTMLAtuiTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTableElement: {
        prototype: HTMLAtuiTableElement;
        new (): HTMLAtuiTableElement;
    };
    interface HTMLAtuiTableActionsElementEventMap {
        "atuiExportCsv": any;
        "atuiExportPdf": any;
        "atuiChange": any;
    }
    /**
     * @category Data Tables
     * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
     */
    interface HTMLAtuiTableActionsElement extends Components.AtuiTableActions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTableActionsElementEventMap>(type: K, listener: (this: HTMLAtuiTableActionsElement, ev: AtuiTableActionsCustomEvent<HTMLAtuiTableActionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTableActionsElementEventMap>(type: K, listener: (this: HTMLAtuiTableActionsElement, ev: AtuiTableActionsCustomEvent<HTMLAtuiTableActionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTableActionsElement: {
        prototype: HTMLAtuiTableActionsElement;
        new (): HTMLAtuiTableActionsElement;
    };
    interface HTMLAtuiTableExportMenuElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Data Tables
     * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
     */
    interface HTMLAtuiTableExportMenuElement extends Components.AtuiTableExportMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTableExportMenuElementEventMap>(type: K, listener: (this: HTMLAtuiTableExportMenuElement, ev: AtuiTableExportMenuCustomEvent<HTMLAtuiTableExportMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTableExportMenuElementEventMap>(type: K, listener: (this: HTMLAtuiTableExportMenuElement, ev: AtuiTableExportMenuCustomEvent<HTMLAtuiTableExportMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTableExportMenuElement: {
        prototype: HTMLAtuiTableExportMenuElement;
        new (): HTMLAtuiTableExportMenuElement;
    };
    interface HTMLAtuiTableFilterMenuElementEventMap {
        "atuiChange": string[];
    }
    /**
     * @category Data Tables
     * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
     */
    interface HTMLAtuiTableFilterMenuElement extends Components.AtuiTableFilterMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTableFilterMenuElementEventMap>(type: K, listener: (this: HTMLAtuiTableFilterMenuElement, ev: AtuiTableFilterMenuCustomEvent<HTMLAtuiTableFilterMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTableFilterMenuElementEventMap>(type: K, listener: (this: HTMLAtuiTableFilterMenuElement, ev: AtuiTableFilterMenuCustomEvent<HTMLAtuiTableFilterMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTableFilterMenuElement: {
        prototype: HTMLAtuiTableFilterMenuElement;
        new (): HTMLAtuiTableFilterMenuElement;
    };
    interface HTMLAtuiTableFiltersElementEventMap {
        "atuiChange": FilterEvent[];
    }
    interface HTMLAtuiTableFiltersElement extends Components.AtuiTableFilters, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTableFiltersElementEventMap>(type: K, listener: (this: HTMLAtuiTableFiltersElement, ev: AtuiTableFiltersCustomEvent<HTMLAtuiTableFiltersElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTableFiltersElementEventMap>(type: K, listener: (this: HTMLAtuiTableFiltersElement, ev: AtuiTableFiltersCustomEvent<HTMLAtuiTableFiltersElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTableFiltersElement: {
        prototype: HTMLAtuiTableFiltersElement;
        new (): HTMLAtuiTableFiltersElement;
    };
    interface HTMLAtuiTablePaginationElementEventMap {
        "atuiChange": number;
        "atuiPageSizeChange": number;
    }
    /**
     * @category Data Tables
     * @description Optional component for use with ```<atui-table>```.
     * Provides controls for pagination if you would like to
     * have control of the table's pagination.
     */
    interface HTMLAtuiTablePaginationElement extends Components.AtuiTablePagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTablePaginationElementEventMap>(type: K, listener: (this: HTMLAtuiTablePaginationElement, ev: AtuiTablePaginationCustomEvent<HTMLAtuiTablePaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTablePaginationElementEventMap>(type: K, listener: (this: HTMLAtuiTablePaginationElement, ev: AtuiTablePaginationCustomEvent<HTMLAtuiTablePaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTablePaginationElement: {
        prototype: HTMLAtuiTablePaginationElement;
        new (): HTMLAtuiTablePaginationElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a badge.
     */
    interface HTMLAtuiTextBadgeCellElement extends Components.AtuiTextBadgeCell, HTMLStencilElement {
    }
    var HTMLAtuiTextBadgeCellElement: {
        prototype: HTMLAtuiTextBadgeCellElement;
        new (): HTMLAtuiTextBadgeCellElement;
    };
    /**
     * @category Table Cell
     * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
     */
    interface HTMLAtuiTextCellElement extends Components.AtuiTextCell, HTMLStencilElement {
    }
    var HTMLAtuiTextCellElement: {
        prototype: HTMLAtuiTextCellElement;
        new (): HTMLAtuiTextCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
     */
    interface HTMLAtuiTextIconCellElement extends Components.AtuiTextIconCell, HTMLStencilElement {
    }
    var HTMLAtuiTextIconCellElement: {
        prototype: HTMLAtuiTextIconCellElement;
        new (): HTMLAtuiTextIconCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with an image.
     */
    interface HTMLAtuiTextImageCellElement extends Components.AtuiTextImageCell, HTMLStencilElement {
    }
    var HTMLAtuiTextImageCellElement: {
        prototype: HTMLAtuiTextImageCellElement;
        new (): HTMLAtuiTextImageCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a status.
     */
    interface HTMLAtuiTextStatusCellElement extends Components.AtuiTextStatusCell, HTMLStencilElement {
    }
    var HTMLAtuiTextStatusCellElement: {
        prototype: HTMLAtuiTextStatusCellElement;
        new (): HTMLAtuiTextStatusCellElement;
    };
    interface HTMLAtuiTextareaElementEventMap {
        "atuiChange": string;
    }
    /**
     * @category Form Controls
     * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
     */
    interface HTMLAtuiTextareaElement extends Components.AtuiTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTextareaElementEventMap>(type: K, listener: (this: HTMLAtuiTextareaElement, ev: AtuiTextareaCustomEvent<HTMLAtuiTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTextareaElementEventMap>(type: K, listener: (this: HTMLAtuiTextareaElement, ev: AtuiTextareaCustomEvent<HTMLAtuiTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTextareaElement: {
        prototype: HTMLAtuiTextareaElement;
        new (): HTMLAtuiTextareaElement;
    };
    interface HTMLAtuiTimeRangeElementEventMap {
        "atuiChange": SelectedTimeRangeExtended;
    }
    /**
     * @category Form Controls
     * @description A time range component for selecting time periods.
     */
    interface HTMLAtuiTimeRangeElement extends Components.AtuiTimeRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtuiTimeRangeElement, ev: AtuiTimeRangeCustomEvent<HTMLAtuiTimeRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTimeRangeElementEventMap>(type: K, listener: (this: HTMLAtuiTimeRangeElement, ev: AtuiTimeRangeCustomEvent<HTMLAtuiTimeRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTimeRangeElement: {
        prototype: HTMLAtuiTimeRangeElement;
        new (): HTMLAtuiTimeRangeElement;
    };
    interface HTMLAtuiTimeWithUnitElementEventMap {
        "atuiCancel": null;
        "atuiSubmit": TimeWithUnit | TimeRangeDisplay.ALL;
    }
    /**
     * @category Form Controls
     * @description A time with unit component for selecting a time period.
     */
    interface HTMLAtuiTimeWithUnitElement extends Components.AtuiTimeWithUnit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTimeWithUnitElementEventMap>(type: K, listener: (this: HTMLAtuiTimeWithUnitElement, ev: AtuiTimeWithUnitCustomEvent<HTMLAtuiTimeWithUnitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTimeWithUnitElementEventMap>(type: K, listener: (this: HTMLAtuiTimeWithUnitElement, ev: AtuiTimeWithUnitCustomEvent<HTMLAtuiTimeWithUnitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTimeWithUnitElement: {
        prototype: HTMLAtuiTimeWithUnitElement;
        new (): HTMLAtuiTimeWithUnitElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle.
     */
    interface HTMLAtuiTitleSubtitleCellElement extends Components.AtuiTitleSubtitleCell, HTMLStencilElement {
    }
    var HTMLAtuiTitleSubtitleCellElement: {
        prototype: HTMLAtuiTitleSubtitleCellElement;
        new (): HTMLAtuiTitleSubtitleCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle with a date.
     */
    interface HTMLAtuiTitleSubtitleDateCellElement extends Components.AtuiTitleSubtitleDateCell, HTMLStencilElement {
    }
    var HTMLAtuiTitleSubtitleDateCellElement: {
        prototype: HTMLAtuiTitleSubtitleDateCellElement;
        new (): HTMLAtuiTitleSubtitleDateCellElement;
    };
    /**
     * @category Table Cell
     * @description A cell component for displaying a toggle.
     */
    interface HTMLAtuiToggleCellElement extends Components.AtuiToggleCell, HTMLStencilElement {
    }
    var HTMLAtuiToggleCellElement: {
        prototype: HTMLAtuiToggleCellElement;
        new (): HTMLAtuiToggleCellElement;
    };
    interface HTMLAtuiToggleSwitchElementEventMap {
        "atuiChange": boolean;
    }
    /**
     * @category Form Controls
     * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
     */
    interface HTMLAtuiToggleSwitchElement extends Components.AtuiToggleSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiToggleSwitchElementEventMap>(type: K, listener: (this: HTMLAtuiToggleSwitchElement, ev: AtuiToggleSwitchCustomEvent<HTMLAtuiToggleSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiToggleSwitchElementEventMap>(type: K, listener: (this: HTMLAtuiToggleSwitchElement, ev: AtuiToggleSwitchCustomEvent<HTMLAtuiToggleSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiToggleSwitchElement: {
        prototype: HTMLAtuiToggleSwitchElement;
        new (): HTMLAtuiToggleSwitchElement;
    };
    /**
     * @category **Overlays**
     * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
     */
    interface HTMLAtuiTooltipElement extends Components.AtuiTooltip, HTMLStencilElement {
    }
    var HTMLAtuiTooltipElement: {
        prototype: HTMLAtuiTooltipElement;
        new (): HTMLAtuiTooltipElement;
    };
    interface HTMLAtuiTreeElementEventMap {
        "atuiClick": TreeNode;
    }
    /**
     * ### ```interface ItemNode```
     * ```
     *  id: string;
     *  displayName: string;
     *  children: ItemNode[];
     *  isSelected?: boolean;
     *  tooltip?: string;
     * ```
     */
    interface HTMLAtuiTreeElement extends Components.AtuiTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTreeElementEventMap>(type: K, listener: (this: HTMLAtuiTreeElement, ev: AtuiTreeCustomEvent<HTMLAtuiTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTreeElementEventMap>(type: K, listener: (this: HTMLAtuiTreeElement, ev: AtuiTreeCustomEvent<HTMLAtuiTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTreeElement: {
        prototype: HTMLAtuiTreeElement;
        new (): HTMLAtuiTreeElement;
    };
    interface HTMLAtuiTreeItemElementEventMap {
        "atuiClick": AtuiEvent;
    }
    interface HTMLAtuiTreeItemElement extends Components.AtuiTreeItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtuiTreeItemElementEventMap>(type: K, listener: (this: HTMLAtuiTreeItemElement, ev: AtuiTreeItemCustomEvent<HTMLAtuiTreeItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtuiTreeItemElementEventMap>(type: K, listener: (this: HTMLAtuiTreeItemElement, ev: AtuiTreeItemCustomEvent<HTMLAtuiTreeItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtuiTreeItemElement: {
        prototype: HTMLAtuiTreeItemElement;
        new (): HTMLAtuiTreeItemElement;
    };
    interface HTMLElementTagNameMap {
        "atui-accordion": HTMLAtuiAccordionElement;
        "atui-accordion-item": HTMLAtuiAccordionItemElement;
        "atui-accordion-trigger": HTMLAtuiAccordionTriggerElement;
        "atui-avatar": HTMLAtuiAvatarElement;
        "atui-badge": HTMLAtuiBadgeElement;
        "atui-breadcrumb": HTMLAtuiBreadcrumbElement;
        "atui-breadcrumb-item": HTMLAtuiBreadcrumbItemElement;
        "atui-button": HTMLAtuiButtonElement;
        "atui-button-group": HTMLAtuiButtonGroupElement;
        "atui-button-group-option": HTMLAtuiButtonGroupOptionElement;
        "atui-card": HTMLAtuiCardElement;
        "atui-chart-bar-line": HTMLAtuiChartBarLineElement;
        "atui-chart-donut": HTMLAtuiChartDonutElement;
        "atui-checkbox": HTMLAtuiCheckboxElement;
        "atui-checkbox-cell": HTMLAtuiCheckboxCellElement;
        "atui-checkbox-group": HTMLAtuiCheckboxGroupElement;
        "atui-checkbox-header": HTMLAtuiCheckboxHeaderElement;
        "atui-chip-list": HTMLAtuiChipListElement;
        "atui-chip-list-cell": HTMLAtuiChipListCellElement;
        "atui-color-status-cell": HTMLAtuiColorStatusCellElement;
        "atui-column-manager": HTMLAtuiColumnManagerElement;
        "atui-custom-time-range": HTMLAtuiCustomTimeRangeElement;
        "atui-dialog": HTMLAtuiDialogElement;
        "atui-edit-text-cell": HTMLAtuiEditTextCellElement;
        "atui-form-label": HTMLAtuiFormLabelElement;
        "atui-header": HTMLAtuiHeaderElement;
        "atui-input": HTMLAtuiInputElement;
        "atui-input-numeric": HTMLAtuiInputNumericElement;
        "atui-input-range": HTMLAtuiInputRangeElement;
        "atui-layout": HTMLAtuiLayoutElement;
        "atui-list-item": HTMLAtuiListItemElement;
        "atui-list-selector": HTMLAtuiListSelectorElement;
        "atui-list-selector-item": HTMLAtuiListSelectorItemElement;
        "atui-loading": HTMLAtuiLoadingElement;
        "atui-menu": HTMLAtuiMenuElement;
        "atui-menu-cell": HTMLAtuiMenuCellElement;
        "atui-menu-item": HTMLAtuiMenuItemElement;
        "atui-message": HTMLAtuiMessageElement;
        "atui-multi-btn-cell": HTMLAtuiMultiBtnCellElement;
        "atui-multi-select": HTMLAtuiMultiSelectElement;
        "atui-placeholder": HTMLAtuiPlaceholderElement;
        "atui-prompt-container": HTMLAtuiPromptContainerElement;
        "atui-prompt-input": HTMLAtuiPromptInputElement;
        "atui-prompt-message": HTMLAtuiPromptMessageElement;
        "atui-prompt-thread": HTMLAtuiPromptThreadElement;
        "atui-radio": HTMLAtuiRadioElement;
        "atui-radio-group": HTMLAtuiRadioGroupElement;
        "atui-search": HTMLAtuiSearchElement;
        "atui-search-table": HTMLAtuiSearchTableElement;
        "atui-select": HTMLAtuiSelectElement;
        "atui-side-panel": HTMLAtuiSidePanelElement;
        "atui-sidebar": HTMLAtuiSidebarElement;
        "atui-sidebar-menu": HTMLAtuiSidebarMenuElement;
        "atui-sidebar-menuitem": HTMLAtuiSidebarMenuitemElement;
        "atui-sidebar-submenu": HTMLAtuiSidebarSubmenuElement;
        "atui-sidebar-trigger": HTMLAtuiSidebarTriggerElement;
        "atui-src-dest": HTMLAtuiSrcDestElement;
        "atui-static-table": HTMLAtuiStaticTableElement;
        "atui-status-bar": HTMLAtuiStatusBarElement;
        "atui-tab": HTMLAtuiTabElement;
        "atui-tab-content": HTMLAtuiTabContentElement;
        "atui-tab-selector": HTMLAtuiTabSelectorElement;
        "atui-table": HTMLAtuiTableElement;
        "atui-table-actions": HTMLAtuiTableActionsElement;
        "atui-table-export-menu": HTMLAtuiTableExportMenuElement;
        "atui-table-filter-menu": HTMLAtuiTableFilterMenuElement;
        "atui-table-filters": HTMLAtuiTableFiltersElement;
        "atui-table-pagination": HTMLAtuiTablePaginationElement;
        "atui-text-badge-cell": HTMLAtuiTextBadgeCellElement;
        "atui-text-cell": HTMLAtuiTextCellElement;
        "atui-text-icon-cell": HTMLAtuiTextIconCellElement;
        "atui-text-image-cell": HTMLAtuiTextImageCellElement;
        "atui-text-status-cell": HTMLAtuiTextStatusCellElement;
        "atui-textarea": HTMLAtuiTextareaElement;
        "atui-time-range": HTMLAtuiTimeRangeElement;
        "atui-time-with-unit": HTMLAtuiTimeWithUnitElement;
        "atui-title-subtitle-cell": HTMLAtuiTitleSubtitleCellElement;
        "atui-title-subtitle-date-cell": HTMLAtuiTitleSubtitleDateCellElement;
        "atui-toggle-cell": HTMLAtuiToggleCellElement;
        "atui-toggle-switch": HTMLAtuiToggleSwitchElement;
        "atui-tooltip": HTMLAtuiTooltipElement;
        "atui-tree": HTMLAtuiTreeElement;
        "atui-tree-item": HTMLAtuiTreeItemElement;
    }
}
declare namespace LocalJSX {
    /**
     * ### ```interface AccordionItem```
     * ```
     * item_id: string;
     * label: string;
     * content: string;
     * ```
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtuiAccordion {
        /**
          * If set, all child accordions will be open by default.
          * @default false
         */
        "default_open"?: boolean;
        /**
          * Used to create accordion items.
          * @default []
         */
        "items"?: AccordionItem[];
    }
    /**
     * @category Layout
     * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
     */
    interface AtuiAccordionItem {
        /**
          * Puts a light gray separator below the accordion item
          * @default true
         */
        "border"?: boolean;
        /**
          * String content to display when the accordion is open
         */
        "content"?: string;
        /**
          * Used to identify the accordion item among the other accordion items
         */
        "item_id": string;
        /**
          * Provides an atui-accordion-trigger with this label if set
         */
        "label"?: string;
        /**
          * Emitted when the accordion item's open state changes
         */
        "onAtuiAccordionChange"?: (event: AtuiAccordionItemCustomEvent<boolean>) => void;
        /**
          * Used for setting if the accordion is open.
          * @default false
         */
        "open"?: boolean;
    }
    interface AtuiAccordionTrigger {
        /**
          * Text to display on the trigger for the accordion item.
         */
        "label"?: string;
    }
    /**
     * @category Decoration
     * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
     */
    interface AtuiAvatar {
        /**
          * Alt text for the avatar image
         */
        "alt"?: string;
        /**
          * Initials text to display when no image is provided
         */
        "initials"?: string;
        /**
          * Size of the avatar
          * @default 'md'
         */
        "size"?: AvatarSize;
        /**
          * URL for the avatar image  Recommended cropped image sizes for optimal display: - sm:24x24px - md:32x32px - lg:40x40px  Higher resolution images (2x display size) are recommended for crisp display on high-DPI screens.
         */
        "src"?: string;
        /**
          * Visual variant of the avatar
          * @default 'secondary'
         */
        "variant"?: AvatarVariant;
    }
    /**
     * @category Feedback
     * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
     */
    interface AtuiBadge {
        /**
          * Icon appearing to the left of the badge title. MUST use mat-icon name.
         */
        "icon"?: string;
        /**
          * Impact of the badge, changes the colours.
          * @default 'low'
         */
        "impact"?: BadgeContrast;
        /**
          * Title shown on the badge.
         */
        "label"?: string;
        /**
          * Boolean value to round the edges of the badge.
          * @default false
         */
        "rounded"?: boolean;
        /**
          * Size of the badge. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size"?: BadgeSize;
        /**
          * Type of the badge. Determines colour theming.
          * @default 'default'
         */
        "type"?: BadgeType;
    }
    /**
     * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
     * Provides clickable path navigation with customizable separators and accessibility features.
     * @category Navigation
     */
    interface AtuiBreadcrumb {
        /**
          * Function to get the prefix for breadcrumbs.
          * @default () => ''
         */
        "get_prefix"?: (idx: number) => string;
        /**
          * Emits when one of the breadcrumb-items is clicked, `event.detail` is the 0-based index of the breadcrumb-item
         */
        "onAtuiClick"?: (event: AtuiBreadcrumbCustomEvent<number>) => void;
        /**
          * Delimiter between the prefix and the prefix.
          * @default ''
         */
        "prefix_delimiter"?: string;
        /**
          * Used to place atui-breadcrumb-item(s) and atui-breadcrumb-separator(s) automatically with the string values given
         */
        "values"?: string[];
    }
    /**
     * @category Navigation
     * @description A breadcrumb item component for the breadcrumb.
     */
    interface AtuiBreadcrumbItem {
        /**
          * Applies different styling and makes the element non-clickable when set
         */
        "is_active"?: boolean;
        /**
          * Label for the breadcrumb item
         */
        "label": string;
    }
    /**
     * @category Actions
     * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
     */
    interface AtuiButton {
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Material icon to be displayed before the label within the button
         */
        "icon"?: string;
        /**
          * Material icon to be displayed after the label within the button
         */
        "icon_after"?: string;
        /**
          * When set, will display a loading spinner inside the button and hide all labels & icons
          * @default false
         */
        "in_progress"?: boolean;
        /**
          * Label to be displayed within the button
         */
        "label"?: string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtuiButtonCustomEvent<AtuiEvent>) => void;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size"?: ButtonSize;
        /**
          * Delay period on spinner
          * @default 1000
         */
        "spinner_delay_ms"?: number;
        /**
          * If set, will request submit from the closest form element when clicked
          * @default false
         */
        "submit"?: boolean;
        /**
          * Styling of the button
          * @default 'primary'
         */
        "type"?: ButtonType;
    }
    /**
     * @category Form Controls
     * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
     */
    interface AtuiButtonGroup {
        /**
          * Disables the button group and prevents interaction
         */
        "disabled"?: boolean;
        /**
          * Error text for invalid choices.
         */
        "error_text"?: string;
        /**
          * Hint for options.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description.  Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Label for button group.
         */
        "label"?: string;
        /**
          * When the active button is changed, this will emit the text value of the active button
         */
        "onAtuiChange"?: (event: AtuiButtonGroupCustomEvent<string>) => void;
        /**
          * When the active button is changed, this will emit the 0-based index of the active button
         */
        "onAtuiIndexChange"?: (event: AtuiButtonGroupCustomEvent<number>) => void;
        /**
          * List of options to be displayed on the button group.
          * @default []
         */
        "options"?: ButtonGroupOption[];
        /**
          * Sets the current active button
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A button group option component for the button group.
     */
    interface AtuiButtonGroupOption {
        /**
          * Will disable interaction if set
         */
        "disabled"?: boolean;
        /**
          * Icon to be displayed in the button
         */
        "icon"?: string;
        /**
          * Will apply active styling to the button
         */
        "is_active"?: boolean;
        /**
          * String to be displayed in the button
         */
        "label"?: string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtuiButtonGroupOptionCustomEvent<AtuiEvent>) => void;
        /**
          * ID of the button element and its option
         */
        "option_id"?: string;
    }
    /**
     * @category Layout
     * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
     */
    interface AtuiCard {
        /**
          * Title of the card.
         */
        "card_title"?: string;
        /**
          * Content of the card, placed below title, and subtitle.
         */
        "content"?: string;
        /**
          * Enables overflow on the content area. If false overflow will be applied on the host.
          * @default false
         */
        "overflow_content"?: boolean;
        /**
          * Apply or remove padding form the card content area.
          * @default true
         */
        "padding"?: boolean;
        /**
          * Box-shadow around card.
          * @default 'sm'
         */
        "shadow"?: 'none' | 'sm' | 'lg';
        /**
          * Display footer persistently at bottom of card.
          * @default true
         */
        "sticky_footer"?: boolean;
        /**
          * Display header persistently at top of card.
          * @default true
         */
        "sticky_header"?: boolean;
        /**
          * Subtitle of the card, placed below title.
         */
        "subtitle"?: string;
    }
    /**
     * ### ```interface PointStyles```
     * ```
     *  pointBackgroundColor: Color;
     *  pointBorderColor: Color;
     *  pointBorderWidth: number;
     *  pointHitRadius: number;
     *  pointHoverBackgroundColor: Color;
     *  pointHoverBorderColor: Color;
     *  pointHoverBorderWidth: number;
     *  pointHoverRadius: number;
     *  pointRadius: number;
     *  pointRotaion: number;
     *  pointStyle: PointStyle;
     * ```
     * ### ```interface Threshold```
     * ```
     *  label: string;
     *  data: (number | Point | [number, number] | BubbleDataPoint)[];
     *  color?: string;
     *  dashLine?: boolean;
     *  stepped?: boolean;
     * ```
     */
    interface AtuiChartBarLine {
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette"?: ChartColorPalette;
        /**
          * Data to go in the chart. ChartDataset properties found [here for line](https://www.chartjs.org/docs/latest/charts/line.html), and [here for bar](https://www.chartjs.org/docs/latest/charts/bar.html)
         */
        "data"?: {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Height of the chart.
          * @default 'md'
         */
        "height"?: Height;
        /**
          * Options for the legend
         */
        "legend_format"?: object;
        /**
          * Additional options to go into the 'options' seciont of the chart configuration
         */
        "options"?: object;
        /**
          * Styles for the points in the chart
         */
        "point_styles"?: PointStyles;
        /**
          * Thresholds to be displayed in the chart
         */
        "thresholds"?: Threshold[];
        /**
          * The time range that the chart is displayed in.
         */
        "time_range"?: SelectedTimeRangeExtended;
        /**
          * Options for the tooltips on the chart
         */
        "tooltip_options"?: object;
        /**
          * Type of the chart
         */
        "type"?: 'bar' | 'line';
        /**
          * X axis formatting to be applied to the chart. If you would like the default formatting provided by chart.js, set this to an empty object.
         */
        "x_axis_format"?: object;
        /**
          * Y axis formatting to be applied to the chart.
         */
        "y_axis_format"?: object;
    }
    /**
     * @category Data Visualization
     * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
     */
    interface AtuiChartDonut {
        /**
          * Animations added to the chart configuration
         */
        "animations"?: object;
        /**
          * Optional heading text to display in the center of the donut chart
         */
        "center_text"?: string;
        /**
          * Optional value text to display in the center of the donut chart
         */
        "center_value"?: string;
        /**
          * Colour palette to use for the chart. Preset options are provided ChartColourPalette: 'categorical' : For charts with data that have distinct labels and no natural order 'sequential' : For charts with data that is numeric or is naturally ordered. 'alert' : For charts that relate to health state. Note that data requires a specific order. 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.
          * @default ChartColorPalette.CATEGORICAL
         */
        "color_palette"?: ChartColorPalette;
        /**
          * Controls the thickness of the donut ring. Value between 0 and 100. 0 means no cutout (solid circle), 100 means maximum cutout (thin ring). Default is 70.
          * @default 70
         */
        "cutout"?: number;
        /**
          * Data to be shown in the chart. ChartDataset properties can be found [here](https://www.chartjs.org/docs/latest/charts/doughnut.html#dataset-properties)
         */
        "data"?: {
        labels: string[];
        datasets: ChartDataset[];
    };
        /**
          * Height of the chart
          * @default 'md'
         */
        "height"?: Height1;
        /**
          * Additional options for formatting the legend
          * @default {         labels: {             boxWidth: 10,             boxHeight: 10,             fontSize: 11,         },         onHover: (event): void => {             if (event.native) {                 (event.native.target as HTMLElement).style.cursor = 'pointer';             }         },         display: true,     }
         */
        "legend_format"?: object;
        /**
          * Additional options to be added to the chart configuration
         */
        "options"?: object;
        /**
          * Additional plugin options
         */
        "plugins"?: Plugin[];
        /**
          * Additional options for the tooltip
          * @default {         mode: 'index',         intersect: false,         position: 'nearest',     }
         */
        "tooltip_options"?: object;
    }
    /**
     * @category Form Controls
     * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtuiCheckbox {
        /**
          * Disables interaction with the checkbox
         */
        "disabled"?: boolean;
        /**
          * Subtitle of the checkbox component.
         */
        "hint_text"?: string;
        /**
          * Title of the checkbox component.
         */
        "label"?: string;
        /**
          * When the checkbox is toggled, this will emit true if the current value is checked, vice versa.
         */
        "onAtuiChange"?: (event: AtuiCheckboxCustomEvent<boolean>) => void;
        /**
          * Id of the checkbox.
         */
        "option_id"?: string;
        /**
          * State of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Table Cell
     * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
     */
    interface AtuiCheckboxCell {
    }
    /**
     * ### ```interface CheckboxOptions```
     * ```
     *  id: string;
     *  label?: string;
     *  hint_text?: string;
     *  value?: boolean;
     * ```
     * @category Form Controls
     * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
     */
    interface AtuiCheckboxGroup {
        /**
          * Disables interaction with the checkbox
         */
        "disabled"?: boolean;
        /**
          * Displayed when the input is invalid
         */
        "error_text"?: string;
        /**
          * Hint to be placed below the label
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label of the checkbox group.
         */
        "label"?: string;
        /**
          * Sets the layout of the checkbox-group
          * @default 'column'
         */
        "layout"?: CheckboxLayout;
        /**
          * Emits an event containing the 'selected' prop when changed
         */
        "onAtuiChange"?: (event: AtuiCheckboxGroupCustomEvent<string[]>) => void;
        /**
          * Options displayed in the checkbox group.
         */
        "options"?: CheckboxOptions[];
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A list of strings, containing the Id's of the currently selected checkboxes
          * @default []
         */
        "value"?: string[];
    }
    /**
     * @category Table Cell
     * @description A header component for displaying a checkbox.
     */
    interface AtuiCheckboxHeader {
    }
    /**
     * @category Utilities
     * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
     */
    interface AtuiChipList {
        /**
          * Items in the chip list.
         */
        "chips"?: string[];
        /**
          * Disables the list of chips. Prevents removing a chip.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the 'X' on a chip, or 'Clear All' is clicked.
         */
        "onAtuiRemoveChip"?: (event: AtuiChipListCustomEvent<string[]>) => void;
        /**
          * Disables the list of chips but keeps the text readable. Prevents removing a chip.
         */
        "readonly"?: boolean;
        /**
          * Shows the 'Clear All' button
          * @default true
         */
        "show_clear_all"?: boolean;
        /**
          * Size of the chips. Determines padding and font-size. For use in input chip lists.
          * @default 'lg'
         */
        "size"?: BadgeSize1;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a list of chips.
     */
    interface AtuiChipListCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a color status indicator based on predefined types
     */
    interface AtuiColorStatusCell {
    }
    interface AtuiColumnManager {
        /**
          * Column definitions used in your atui-table
         */
        "col_defs"?: ColDef[];
        /**
          * Custom event used by atui-table-actions to perform ag-grid logic  Emitted when checkbox is clicked
         */
        "onAtuiChange"?: (event: AtuiColumnManagerCustomEvent<ColumnManagerChangeEvent>) => void;
    }
    interface AtuiCustomTimeRange {
        /**
          * Whether time selection is enabled in addition to date selection
          * @default true
         */
        "can_set_time"?: boolean;
        /**
          * Default value for the from date
         */
        "default_from_date"?: Date;
        /**
          * Default value for the to date
         */
        "default_to_date"?: Date;
        /**
          * Current value of the from date
         */
        "from_date_value"?: Date;
        /**
          * Whether to lock the end date to the current time
          * @default false
         */
        "lock_end_date_to_now"?: boolean;
        /**
          * Maximum selectable date
          * @default new Date(Date.now())
         */
        "max_date"?: Date;
        /**
          * Minimum selectable date
          * @default MIN_DATE
         */
        "min_date"?: Date;
        /**
          * Minimum number of seconds for the time range
          * @default 60
         */
        "min_seconds"?: number;
        /**
          * Emitted when the user cancels the time range selection
         */
        "onAtuiCancel"?: (event: AtuiCustomTimeRangeCustomEvent<null>) => void;
        /**
          * Emitted when the user submits the time range selection
         */
        "onAtuiSubmit"?: (event: AtuiCustomTimeRangeCustomEvent<DateRangeStrings>) => void;
        /**
          * Current value of the to date
         */
        "to_date_value"?: Date;
    }
    /**
     * @category Overlays
     * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
     */
    interface AtuiDialog {
        /**
          * Whether to show a backdrop behind the dialog
          * @default false
         */
        "backdrop"?: boolean;
        /**
          * ID of the dialog element (used to open and close the modal)
         */
        "dialog_id"?: string;
        /**
          * Role of the dialog element. Can be either 'dialog' or 'alertdialog'
          * @default 'dialog'
         */
        "role"?: 'dialog' | 'alertdialog';
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying and editing text.
     */
    interface AtuiEditTextCell {
    }
    /**
     * @category Form Controls
     * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
     */
    interface AtuiFormLabel {
        /**
          * Placed in the 'for' attribute on the label element
         */
        "for"?: string;
        /**
          * The text to be contained in the tooltip.
         */
        "info_text"?: string;
        /**
          * Label that appears before the info icon.
         */
        "label"?: string;
        /**
          * When true, there will be a red star on the label.
         */
        "required"?: boolean;
    }
    /**
     * @category Layout
     * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
     */
    interface AtuiHeader {
        /**
          * Adds a border to the bottom of the header.
         */
        "border"?: boolean;
        /**
          * Title of the header.
         */
        "header_title"?: string;
        /**
          * Icon of header. Must use mat-icon name.
         */
        "icon"?: string;
        /**
          * Adds 16 pixels of padding to the header element
          * @default true
         */
        "padding"?: boolean;
        /**
          * Size of the header.
          * @default 'h1'
         */
        "size"?: HeaderSizes;
        /**
          * Subtitle of the header.
         */
        "subtitle"?: string;
    }
    /**
     * @category Form Controls
     * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
     */
    interface AtuiInput {
        /**
          * Sets the 'autocomplete' attribute on the input element
          * @default 'on'
         */
        "autocomplete"?: string;
        /**
          * Allows the input to be cleared with a 'x' at the end of the input element
         */
        "clearable"?: boolean;
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label above the input container
         */
        "label"?: string;
        /**
          * Emits an event containing the text string or number when the input's content is changed
         */
        "onAtuiChange"?: (event: AtuiInputCustomEvent<string | number>) => void;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder"?: string | number;
        /**
          * Makes the input read only
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the element
         */
        "required"?: boolean;
        /**
          * Type of the input
          * @default 'text'
         */
        "type"?: InputType;
        /**
          * The value of the input
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A numeric input component for entering numerical values.
     */
    interface AtuiInputNumeric {
        /**
          * Disables interaction with the input
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label above the input container
         */
        "label"?: string;
        /**
          * Max selectable value of the input.
          * @default 100
         */
        "max"?: number;
        /**
          * Min selectable value of the input.
          * @default 0
         */
        "min"?: number;
        /**
          * Emits an event containing the text string or number when the input's content is changed
         */
        "onAtuiChange"?: (event: AtuiInputNumericCustomEvent<string | number>) => void;
        /**
          * Placeholder text to be shown when no input is passed
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Makes the input read only
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the element
         */
        "required"?: boolean;
        /**
          * Show buttons inside input or outside
          * @default true
         */
        "show_buttons"?: boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * The value of the input
          * @default 0
         */
        "value"?: number;
    }
    /**
     * @category Form Controls
     * @description A range input component for selecting a value within a specified range.
     */
    interface AtuiInputRange {
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is invalid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Info icon with detailed tooltip description if required. Content is available via info icon tooltip.
         */
        "info_text"?: string;
        /**
          * Set the input to an invalid state.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Position of the numeric input, left or right of the slider.
          * @default 'after'
         */
        "label_position"?: InputPosition;
        /**
          * Max selectable value of the slider.
          * @default 100
         */
        "max"?: number;
        /**
          * Min selectable value of the slider.
          * @default 0
         */
        "min"?: number;
        /**
          * Emits an event containing the current value when the text input or slider input's content is changed
         */
        "onAtuiChange"?: (event: AtuiInputRangeCustomEvent<number>) => void;
        /**
          * Set the input to a readonly state.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Display numeric input with slider.
          * @default true
         */
        "show_input"?: boolean;
        /**
          * Display min and max text values.
          * @default true
         */
        "show_minmax"?: boolean;
        /**
          * Display step indicators.
          * @default true
         */
        "show_ticks"?: boolean;
        /**
          * Display order of input and slider.
          * @default true
         */
        "show_value"?: boolean;
        /**
          * Interval between selections.
          * @default 1
         */
        "step"?: number;
        /**
          * suffix message for the input.
         */
        "suffix"?: string;
        /**
          * Numeric value of the slider component.
         */
        "value"?: number;
        /**
          * Warning message for the input.
         */
        "warning_text"?: string;
    }
    /**
     * @category Layout
     * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
     */
    interface AtuiLayout {
        /**
          * If overflow is allowed on the detail in master-detail
          * @default true
         */
        "overflow"?: boolean;
        /**
          * Template used to display content
          * @default 'master-detail'
         */
        "template"?: Template;
    }
    /**
     * @category Layout
     * @description A list item component for the list.
     */
    interface AtuiListItem {
        /**
          * Border below the list item.
          * @default true
         */
        "border"?: boolean;
        /**
          * Content of the list item placed at the right of the item.
         */
        "content"?: string;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title"?: string;
        /**
          * Size of the list item.
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Navigation
     * @description A list selector component for selecting an item from a list.
     */
    interface AtuiListSelector {
        /**
          * Whether each item has a bottom border.
         */
        "has_border"?: boolean;
        /**
          * Emits an event when the selected item is changed, the `event.detail` is the ListSelectorItem
         */
        "onAtuiChange"?: (event: AtuiListSelectorCustomEvent<ListSelectorItem>) => void;
        /**
          * Emits when event when the info button of an item is clicked
         */
        "onAtuiInfoButtonClick"?: (event: AtuiListSelectorCustomEvent<AtuiEvent>) => void;
        /**
          * List of items.
          * @default []
         */
        "options"?: ListSelectorItem[];
        /**
          * The selected item.
         */
        "selected_item_id"?: string;
    }
    /**
     * @category Navigation
     * @description A list selector item component for the list selector.
     */
    interface AtuiListSelectorItem {
        /**
          * Border below the list item.
          * @default false
         */
        "has_border"?: boolean;
        /**
          * Optional icon shown to the left of the list item - use mat-icon name.
         */
        "icon"?: string;
        /**
          * Visual indication of the selected item.
         */
        "is_selected"?: boolean;
        /**
          * Id of the list item
         */
        "item_id"?: string;
        /**
          * Optional prefix.
         */
        "item_prefix"?: string;
        /**
          * Title of the list item.
         */
        "item_title"?: string;
        /**
          * Optional subtitle of the list item.
         */
        "subtitle"?: string;
    }
    /**
     * @category Feedback
     * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
     */
    interface AtuiLoading {
        /**
          * Size of the loading indicator
          * @default 'md'
         */
        "size"?: LoadingSize;
        /**
          * Custom text to display with text-based animations
          * @default 'Loading'
         */
        "text"?: string;
        /**
          * Visual type/color of the loading indicator
          * @default 'default'
         */
        "type"?: LoadingType;
        /**
          * Type of loading animation to display
          * @default 'spinner'
         */
        "variant"?: LoadingVariant;
    }
    interface AtuiMenu {
        /**
          * Alignment of opened menu element relative to trigger element.
          * @default 'start'
         */
        "align"?: Align;
        /**
          * Prevent closing of menu when options are selected. Used for multi-selection controls.
          * @default true
         */
        "autoclose"?: boolean;
        /**
          * Prevent opening menu
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Menu's x offset from edge in pixels. Only applied for origin_x = 'start' | 'end'
          * @default 0
         */
        "offset_x"?: number;
        /**
          * Menu's y offset from edge in pixels. Only applied for origin_y = 'top' | 'bottom'
          * @default 0
         */
        "offset_y"?: number;
        /**
          * Emits an event containing the open menu state.
         */
        "onAtuiMenuStateChange"?: (event: AtuiMenuCustomEvent<boolean>) => void;
        /**
          * Position of opened menu element relative to the trigger element.
          * @default 'bottom'
         */
        "position"?: Position;
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default 'menu'
         */
        "role"?: AriaRole;
        /**
          * Event type that triggers the menu open state. Click or Hover.
          * @default 'click'
         */
        "trigger"?: OpenOn;
        /**
          * String representing the 'width' style of the menu element ('auto' or 'NUMpx'). When not specified, defaults to trigger element width. To fit menu to content use width="fit-content" - Avoid width='auto' as this will result in 100% width.
         */
        "width"?: string;
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a menu.
     */
    interface AtuiMenuCell {
    }
    interface AtuiMenuItem {
        /**
          * Disables user interaction with the menu-item and updates visual style to appear inactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
          * @default false
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Feedback
     * @description A message component for displaying notifications, alerts, or informational messages.
     */
    interface AtuiMessage {
        /**
          * Content of the message.
         */
        "content"?: string;
        /**
          * An icon is provided for success, warning, error, or info types. You can provide a custom value to replace the default icon.  Must use material icon name.
         */
        "icon"?: string;
        /**
          * Theme of the message, either "light" or "default".
          * @default 'high'
         */
        "impact"?: 'low' | 'high';
        /**
          * Title of the app message.
         */
        "message_title"?: string;
        /**
          * Type of the message.
         */
        "type"?: 'error' | 'warning' | 'success' | 'info' | 'default';
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying multiple buttons.
     */
    interface AtuiMultiBtnCell {
    }
    /**
     * @category Form Controls
     * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtuiMultiSelect {
        /**
          * Set the select to be clearable.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error text for the select.
          * @default ''
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
          * @default ''
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
          * @default ''
         */
        "info_text"?: string;
        /**
          * Set the select to appear invalid.
         */
        "invalid"?: boolean;
        /**
          * Label of the select.
          * @default ''
         */
        "label"?: string;
        /**
          * Emits an event containing a list of the selected items when the selection changes.
         */
        "onAtuiChange"?: (event: AtuiMultiSelectCustomEvent<string[]>) => void;
        /**
          * Options displayed in the dropdown menu.
         */
        "options"?: SelectOption[];
        /**
          * Placeholder text for the select.
          * @default ''
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to enable typeahead search.
         */
        "typeahead"?: boolean;
        /**
          * The selected items
          * @default []
         */
        "value"?: string[];
    }
    /**
     * @category Feedback
     * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
     */
    interface AtuiPlaceholder {
        /**
          * Content to be displayed below the title
         */
        "content"?: string;
        /**
          * Material icon to be displayed in the center of the placeholder
         */
        "icon"?: string;
        /**
          * Title to be displayed below the icon
         */
        "placeholder_title"?: string;
        /**
          * Will show a loading spinner when set
         */
        "show_loading_spinner"?: boolean;
        /**
          * Size of the placeholder
          * @default 'md'
         */
        "size"?: PlaceholderSize;
    }
    /**
     * @category Prompt
     * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
     */
    interface AtuiPromptContainer {
        /**
          * Disables all interactions with the container
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy"?: boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit"?: boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote"?: boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text"?: string;
        /**
          * Title displayed in the header section
          * @default 'AI Assistant'
         */
        "header_title"?: string;
        /**
          * Shows loading state and disables input
          * @default false
         */
        "loading"?: boolean;
        /**
          * Maximum character length for input messages
          * @default 2000
         */
        "max_message_length"?: number;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages"?: PromptMessage[];
        /**
          * Emitted when a message copy action is requested
         */
        "onAtuiMessageCopy"?: (event: AtuiPromptContainerCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message edit action is requested
         */
        "onAtuiMessageEdit"?: (event: AtuiPromptContainerCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message retry action is requested
         */
        "onAtuiMessageRetry"?: (event: AtuiPromptContainerCustomEvent<{ messageId: string }>) => void;
        /**
          * Emitted when a message vote action is requested
         */
        "onAtuiMessageVote"?: (event: AtuiPromptContainerCustomEvent<{
        messageId: string;
        score: number;
    }>) => void;
        /**
          * Emitted when the "New Thread" button is clicked
         */
        "onAtuiNewThread"?: (event: AtuiPromptContainerCustomEvent<void>) => void;
        /**
          * Emits when the stop button is clicked
         */
        "onAtuiStop"?: (event: AtuiPromptContainerCustomEvent<void>) => void;
        /**
          * Emits when a message should be sent
         */
        "onAtuiSubmit"?: (event: AtuiPromptContainerCustomEvent<string>) => void;
        /**
          * Placeholder text for the input field
          * @default 'Type your message here...'
         */
        "placeholder"?: string;
        /**
          * Controls visibility of the header section
          * @default true
         */
        "show_header"?: boolean;
        /**
          * Controls visibility of the "New Thread" button in the header
          * @default true
         */
        "show_new_thread_button"?: boolean;
        /**
          * Subtitle displayed below the title in the header
         */
        "subtitle"?: string;
    }
    /**
     * @category Prompt
     * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
     */
    interface AtuiPromptInput {
        /**
          * Disable input interactions and apply visual indication
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Error text displayed when invalid is set via max length
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Controls whether the component is in progress (shows stop button) or ready to send (shows send button)
          * @default false
         */
        "in_progress"?: boolean;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Label above the input container
         */
        "label"?: string;
        /**
          * Maximum height in pixels for auto-resize
          * @default 240
         */
        "max_height"?: number;
        /**
          * Maximum character length with counter display
          * @default 2000
         */
        "max_length"?: number;
        /**
          * Emits when the value changes
         */
        "onAtuiChange"?: (event: AtuiPromptInputCustomEvent<string>) => void;
        /**
          * Emits when the input receives focus
         */
        "onAtuiFocus"?: (event: AtuiPromptInputCustomEvent<void>) => void;
        /**
          * Emits when the stop button is clicked
         */
        "onAtuiStop"?: (event: AtuiPromptInputCustomEvent<void>) => void;
        /**
          * Emits when a message should be sent
         */
        "onAtuiSubmit"?: (event: AtuiPromptInputCustomEvent<string>) => void;
        /**
          * Placeholder text to be shown when no input is passed
          * @default 'Enter your message...'
         */
        "placeholder"?: string;
        /**
          * The value of the input
          * @default ''
         */
        "value"?: string;
    }
    /**
     * @category Prompt
     * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
     */
    interface AtuiPromptMessage {
        /**
          * The message content text
          * @default ''
         */
        "content"?: string;
        /**
          * Display copy action for assistant messages - copies message content to clipboard
          * @default false
         */
        "enable_copy"?: boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit"?: boolean;
        /**
          * Display voting actions for assistant messages
          * @default false
         */
        "enable_vote"?: boolean;
        /**
          * Shows error state styling and enables retry action
          * @default false
         */
        "error"?: boolean;
        /**
          * Custom error message text (defaults to generic error message)
         */
        "error_message"?: string;
        /**
          * Shows loading state with animated placeholder content
          * @default false
         */
        "loading"?: boolean;
        /**
          * Unique identifier for the message
         */
        "message_id"?: string;
        /**
          * Display name for the message sender
         */
        "name"?: string;
        /**
          * Emitted when the copy action is triggered
         */
        "onAtuiCopy"?: (event: AtuiPromptMessageCustomEvent<string>) => void;
        /**
          * Emitted when the edit action is triggered (for user messages)
         */
        "onAtuiEdit"?: (event: AtuiPromptMessageCustomEvent<string>) => void;
        /**
          * Emitted when the retry action is triggered (for assistant messages with errors)
         */
        "onAtuiRetry"?: (event: AtuiPromptMessageCustomEvent<void>) => void;
        /**
          * Emitted when a vote action is triggered
         */
        "onAtuiVote"?: (event: AtuiPromptMessageCustomEvent<{ messageId: string; score: number }>) => void;
        /**
          * The role/type of the message sender (only 'user' and 'assistant' are supported)
          * @default 'user'
         */
        "role"?: Exclude<MessageRole1, 'system'>;
        /**
          * The current vote status of the message
          * @default VoteStatus.None
         */
        "vote_status"?: VoteStatus;
    }
    /**
     * @category Prompt
     * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
     */
    interface AtuiPromptThread {
        /**
          * Automatically scroll to the bottom when new messages are added
          * @default true
         */
        "auto_scroll"?: boolean;
        /**
          * Display name for chatbot/assistant messages
          * @default 'Assistant'
         */
        "chatbot_title"?: string;
        /**
          * Display copy action for assistant messages
          * @default true
         */
        "enable_copy"?: boolean;
        /**
          * Display edit action for user messages
          * @default false
         */
        "enable_edit"?: boolean;
        /**
          * Display voting actions for assistant messages
          * @default true
         */
        "enable_vote"?: boolean;
        /**
          * Shows a loading indicator for incoming messages
          * @default false
         */
        "loading"?: boolean;
        /**
          * Array of messages to display in the conversation thread
          * @default []
         */
        "messages"?: PromptMessage1[];
        /**
          * Emitted when a message copy action is requested
         */
        "onAtuiMessageCopy"?: (event: AtuiPromptThreadCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message edit action is requested
         */
        "onAtuiMessageEdit"?: (event: AtuiPromptThreadCustomEvent<{
        messageId: string;
        content: string;
    }>) => void;
        /**
          * Emitted when a message retry action is requested
         */
        "onAtuiMessageRetry"?: (event: AtuiPromptThreadCustomEvent<{ messageId: string }>) => void;
        /**
          * Emitted when a message vote action is requested
         */
        "onAtuiMessageVote"?: (event: AtuiPromptThreadCustomEvent<{
        messageId: string;
        score: number;
    }>) => void;
    }
    /**
     * @category Form Controls
     * @description A radio button component for selecting a single option from a predefined list.
     */
    interface AtuiRadio {
        /**
          * Disables interaction with the radio
         */
        "disabled"?: boolean;
        /**
          * Name of radio group. Buttons sharing a name are associated with the same radio group.
         */
        "group"?: string;
        /**
          * Subtitle of the radio component.
         */
        "hint_text"?: string;
        /**
          * Title of the radio component.
         */
        "label"?: string;
        /**
          * Emits the current state of the radio when clicked.
         */
        "onAtuiChange"?: (event: AtuiRadioCustomEvent<boolean>) => void;
        /**
          * ID of the radio button element and its option
         */
        "option_id"?: string;
        /**
          * Disables the radio option but keeps the text readable. Used for global readonly form state.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Sets the value of the checkbox
         */
        "value"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
     */
    interface AtuiRadioGroup {
        /**
          * Disables the radio options but keeps the text readable. Use for global readonly form state.
         */
        "disabled"?: boolean;
        /**
          * Shown when 'invalid' prop is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Shows the error text
         */
        "invalid"?: boolean;
        /**
          * Label of the radio group.
         */
        "label"?: string;
        /**
          * Direction that the radio elements are placed
          * @default 'column'
         */
        "layout"?: RadioLayout;
        /**
          * Emits an event when active radio element changes. `event.detail` is the ID of the active radio
         */
        "onAtuiChange"?: (event: AtuiRadioGroupCustomEvent<string>) => void;
        /**
          * Options displayed in the radio group.
         */
        "options"?: RadioOption[];
        /**
          * Disables interaction with atui-radio elements when set
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * A string containing the Id of the currently selected radio
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A search component for filtering data.
     */
    interface AtuiSearch {
        /**
          * Hint text for the input, appears below the search bar.
         */
        "hint_text"?: string;
        /**
          * Tooltip description.
         */
        "info_text"?: string;
        /**
          * Label text above the search bar.
         */
        "label"?: string;
        /**
          * String content of the search.
         */
        "model"?: string;
        /**
          * Emits an event when the input is changed. Used by atui-table.
         */
        "onAtuiChange"?: (event: AtuiSearchCustomEvent<string>) => void;
        /**
          * Placeholder text inside the search component.
         */
        "placeholder"?: string;
    }
    /**
     * @category Data Tables
     * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
     */
    interface AtuiSearchTable {
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns"?: boolean;
        /**
          * Column definitions passed to atui-table component.
         */
        "col_defs"?: ColDef[];
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager"?: boolean;
        /**
          * If true the table dropdown filters will not be added
         */
        "hide_dropdown_filters"?: boolean;
        /**
          * If true the table export menu will not be added
         */
        "hide_export_menu"?: boolean;
        /**
          * Label for the table, appears above the search input.
         */
        "label"?: string;
        /**
          * Default page size of the table
          * @default 10
         */
        "page_size"?: number;
        /**
          * Hint text displayed below the search label.
         */
        "search_hint"?: string;
        /**
          * Info text displayed in the search info tooltip.
         */
        "search_info_tooltip"?: string;
        /**
          * Label for the search input.
         */
        "search_label"?: string;
        /**
          * Table data passed to atui-table component.
         */
        "table_data"?: {
        items: any[];
        total: number;
    };
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
     */
    interface AtuiSelect {
        /**
          * Close the menu when the user clicks within the menu panel. Default for single selection menus.
          * @default true
         */
        "autoclose"?: boolean;
        /**
          * Set the select input to be clearable. Only enabled on typeahead selects.
         */
        "clearable"?: boolean;
        /**
          * Disable user interaction. Disabled state should be applied via form control.
         */
        "disabled"?: boolean;
        /**
          * Error message visible when input is valid.
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description. Displayed at right of label.
         */
        "info_text"?: string;
        /**
          * Set the input to appear valid.
         */
        "invalid"?: boolean;
        /**
          * Label of the input.
         */
        "label"?: string;
        /**
          * Emits an event containing the selected value when changed.
         */
        "onAtuiChange"?: (event: AtuiSelectCustomEvent<string>) => void;
        /**
          * Sets the options in the dropdown
         */
        "options"?: SelectOption[];
        /**
          * Placeholder for the select.
         */
        "placeholder"?: string;
        /**
          * Set input to readonly mode, allows users to select any active values.
         */
        "readonly"?: boolean;
        /**
          * Indicated form field is required.
         */
        "required"?: boolean;
        /**
          * Set the select to appear as a typeahead input.
          * @default false
         */
        "typeahead"?: boolean;
        /**
          * Value of the currently selected option
         */
        "value"?: string;
    }
    /**
     * @category Overlays
     * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
     */
    interface AtuiSidePanel {
        /**
          * Whether to show a backdrop behind the panel
          * @default false
         */
        "backdrop"?: boolean;
        /**
          * Will close the sidepanel if clicked off when set
          * @default false
         */
        "close_backdrop"?: boolean;
        /**
          * If sidepanel should used fixed positioning (otherwise absolute)
          * @default true
         */
        "fixed"?: boolean;
        /**
          * Displays a close button if set
          * @default true
         */
        "has_close_button"?: boolean;
        /**
          * Puts a scrollbar on the sidepanel if set
          * @default true
         */
        "has_scrollbar"?: boolean;
        /**
          * Position of the side panel
          * @default 'right'
         */
        "origin"?: SidePanelDirection;
        /**
          * ID of the panel
         */
        "panel_id"?: string;
        /**
          * Subtitle displayed in the side panel
         */
        "panel_subtitle"?: string;
        /**
          * Title displayed in the side panel
         */
        "panel_title"?: string;
        /**
          * Size of the size panel
          * @default 'xs'
         */
        "size"?: SidePanelSize;
    }
    /**
     * @category Navigation
     * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
     */
    interface AtuiSidebar {
        /**
          * Size of the sidebar when collapsed.
          * @default 'icon'
         */
        "collapsible"?: Collapsible;
        /**
          * Opens the sidebar by default when set
          * @default true
         */
        "default_open"?: boolean;
        /**
          * Emits an even when the sidebar is toggled, with `event.detail` being true if the sidebar is now open
         */
        "onAtuiSidebarChange"?: (event: AtuiSidebarCustomEvent<any>) => void;
        /**
          * Position of the sidebar on the page
          * @default 'left'
         */
        "side"?: Side;
        /**
          * Width of the sidebar
          * @default 'menu'
         */
        "width"?: Width;
    }
    /**
     * @category Navigation
     * @description 
     */
    interface AtuiSidebarMenu {
    }
    /**
     * @category Navigation
     * @description A sidebar menu item component for the sidebar.
     */
    interface AtuiSidebarMenuitem {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label"?: string;
    }
    /**
     * @category Navigation
     * @description Display nested sub-menus in the atui-sidebar.
     * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
     * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
     * Menu indent styling is supported up to 3 levels.
     */
    interface AtuiSidebarSubmenu {
        /**
          * Alert badge for the menu item
         */
        "badge"?: string;
        /**
          * Icon to be displayed with the label
         */
        "icon"?: string;
        /**
          * Will change the styling of the menuitem when set
         */
        "is_active"?: boolean;
        /**
          * Label to be displayed for the menu item
         */
        "label": string;
    }
    /**
     * @category Navigation
     * @description A sidebar trigger component for the sidebar.
     */
    interface AtuiSidebarTrigger {
        /**
          * Size of the button
          * @default 'lg'
         */
        "size"?: ButtonSize1;
    }
    /**
     * @category Utilities
     * @description A src-dest component for displaying source and destination information.
     */
    interface AtuiSrcDest {
        /**
          * Aligns the content to the left or center of the container
          * @default 'left'
         */
        "align"?: SrcDestAlign;
        /**
          * Subtitle displayed on the right
         */
        "dest_subtitle"?: string;
        /**
          * Text displayed on the right
         */
        "dest_text"?: string;
        /**
          * Title displayed on the right
         */
        "dest_title"?: string;
        /**
          * Subtitle displayed on the left
         */
        "src_subtitle"?: string;
        /**
          * Text displayed on the left
         */
        "src_text"?: string;
        /**
          * Title displayed on the left
         */
        "src_title"?: string;
    }
    /**
     * @category Data Tables
     * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
     */
    interface AtuiStaticTable {
        /**
          * Column definitions for the table
         */
        "col_defs"?: ColDef[];
        /**
          * If true the column manager will not be added
         */
        "hide_column_manager"?: boolean;
        /**
          * Max number of items per page
          * @default 10
         */
        "page_size"?: number;
        /**
          * Data to go into the table
         */
        "table_data"?: {
        items: any[];
        total: number;
    };
        /**
          * If true, disables pagination on the table and shows all data at once. Useful for server-side pagination where you want to control pagination externally.
          * @default false
         */
        "use_custom_pagination"?: boolean;
    }
    /**
     * @category Data Visualization
     * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
     */
    interface AtuiStatusBar {
        /**
          * Disables the tooltip when hovered
         */
        "disable_tooltip"?: boolean;
        /**
          * Height of the status bar
          * @default 'sm'
         */
        "size"?: Size;
        /**
          * List of segments that make up the status bar. Each segment implements the StatusBar interface.
          * @default []
         */
        "status_bar"?: StatusBar[];
    }
    /**
     * @category Navigation
     * @description A tab component for the tab selector.
     */
    interface AtuiTab {
        /**
          * Applies styling when active
         */
        "is_active"?: boolean;
        /**
          * Styling based on the layout of the tabs
          * @default 'horizontal'
         */
        "layout"?: Layout;
        /**
          * ID of the tab
         */
        "tab_id"?: string;
        /**
          * Title to be displayed in the tab
         */
        "tab_title"?: string;
    }
    /**
     * @category Navigation
     * @description A tab content component for the tab selector.
     */
    interface AtuiTabContent {
        /**
          * Determines if the tab content is active
          * @default false
         */
        "is_active"?: boolean;
        /**
          * ID of the tab
         */
        "tab_id"?: string;
    }
    /**
     * ### interface Tab
     * ```
     * {
     *   id: string;
     *   title: string;
     * }
     * ```
     * @category Navigation
     * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
     */
    interface AtuiTabSelector {
        /**
          * Sets the current active tab
         */
        "active_tab"?: string;
        /**
          * hide navigation when you want to provide custom controls
          * @default false
         */
        "hide_nav"?: boolean;
        /**
          * Layout of the tabs
          * @default 'horizontal'
         */
        "layout"?: Layout1;
        /**
          * Emits the id of the tab when a new active_tab is set
         */
        "onAtuiChange"?: (event: AtuiTabSelectorCustomEvent<string>) => void;
        /**
          * List of tabs the selector will have
          * @default []
         */
        "tabs"?: Tab[];
    }
    /**
     * @category Data Tables
     * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
     */
    interface AtuiTable {
        /**
          * The AG Grid API
         */
        "ag_grid"?: GridApi;
        /**
          * If true, enables automatic column resizing to fit available space. Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.
          * @default true
         */
        "auto_size_columns"?: boolean;
        /**
          * Column definitions for the table
         */
        "col_defs"?: ColDef[];
        /**
          * If true, disables automatic grid initialization. When disabled, you must manually call createGrid(). Used when the table is controlled by a parent component.
          * @default false
         */
        "disable_auto_init"?: boolean;
        /**
          * Emits an event when a column's sorting state changes. Used to perform sorting outside of agGrid, when use_custom_sorting is set. Data in the table should be updated using the agGrid api: ```agGrid.setGridOption("rowData", yourNewData)```
         */
        "onAtuiSortChange"?: (event: AtuiTableCustomEvent<{
        colId: string;
        sortDirection: 'asc' | 'desc' | null;
    }>) => void;
        /**
          * Default page size of the table if pagination is activated
          * @default 10
         */
        "page_size"?: number;
        /**
          * Data provided to the table
         */
        "table_data"?: {
        items: any[];
        total: number;
    };
        /**
          * Disables the default pagination provided by agGrid. When using custom pagination, the default sorting provided by ag grid will not work correctly.
          * @default false
         */
        "use_custom_pagination"?: boolean;
        /**
          * Disables the default sorting provided by agGrid.
          * @default false
         */
        "use_custom_sorting"?: boolean;
    }
    /**
     * @category Data Tables
     * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
     */
    interface AtuiTableActions {
        /**
          * AG Grid Api (provided by atui-table createGrid method)
         */
        "ag_grid"?: GridApi;
        /**
          * Emits an event when filters change
         */
        "onAtuiChange"?: (event: AtuiTableActionsCustomEvent<any>) => void;
        /**
          * Emits an event when 'Export CSV' is pressed on provided atui-table-export-menu
         */
        "onAtuiExportCsv"?: (event: AtuiTableActionsCustomEvent<any>) => void;
        /**
          * Emits an event when 'Export PDF' is pressed on provided atui-table-export-menu
         */
        "onAtuiExportPdf"?: (event: AtuiTableActionsCustomEvent<any>) => void;
    }
    /**
     * @category Data Tables
     * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
     */
    interface AtuiTableExportMenu {
        /**
          * Emits id of the clicked button, either 'CSV' or 'PDF'.
         */
        "onAtuiChange"?: (event: AtuiTableExportMenuCustomEvent<string>) => void;
    }
    /**
     * @category Data Tables
     * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
     */
    interface AtuiTableFilterMenu {
        /**
          * Column definitions used in your atui-table
         */
        "col_defs"?: ColDef[];
        /**
          * Emits selected columns when checkbox selection changes
         */
        "onAtuiChange"?: (event: AtuiTableFilterMenuCustomEvent<string[]>) => void;
        /**
          * Currently selected filter columns
          * @default []
         */
        "selected"?: string[];
    }
    interface AtuiTableFilters {
        /**
          * Column definitions used in your atui-table
         */
        "col_defs"?: ColDef[];
        /**
          * Emits id of column and filter value on change.
         */
        "onAtuiChange"?: (event: AtuiTableFiltersCustomEvent<FilterEvent[]>) => void;
        /**
          * Currently selected columns and filter values
          * @default []
         */
        "selected"?: { id: string; value: string }[];
    }
    /**
     * @category Data Tables
     * @description Optional component for use with ```<atui-table>```.
     * Provides controls for pagination if you would like to
     * have control of the table's pagination.
     */
    interface AtuiTablePagination {
        /**
          * Current page number
          * @default 1
         */
        "current_page"?: number;
        /**
          * Total number of pages
          * @default 1
         */
        "num_pages"?: number;
        /**
          * Emits event with ```event.detail``` as the new page number
         */
        "onAtuiChange"?: (event: AtuiTablePaginationCustomEvent<number>) => void;
        /**
          * Emits event with ```event.detail``` as the new page size
         */
        "onAtuiPageSizeChange"?: (event: AtuiTablePaginationCustomEvent<number>) => void;
        /**
          * Options provided in dropdown for page sizes.
          * @default [         { value: '5' },         { value: '10' },         { value: '20' },         { value: '50' },         { value: '100' },     ]
         */
        "page_size_options"?: SelectOption[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a badge.
     */
    interface AtuiTextBadgeCell {
    }
    /**
     * @category Table Cell
     * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
     */
    interface AtuiTextCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
     */
    interface AtuiTextIconCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with an image.
     */
    interface AtuiTextImageCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a text with a status.
     */
    interface AtuiTextStatusCell {
    }
    /**
     * @category Form Controls
     * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
     */
    interface AtuiTextarea {
        /**
          * Sets the 'autocomplete' attribute on the textarea
          * @default 'on'
         */
        "autocomplete"?: string;
        /**
          * Disables interaction with the textarea
         */
        "disabled"?: boolean;
        /**
          * Displayed when invalid is set
         */
        "error_text"?: string;
        /**
          * Short description or validation hint if required
         */
        "hint_text"?: string;
        /**
          * Optional info icon with detailed tooltip description
         */
        "info_text"?: string;
        /**
          * Displays then error text when set
         */
        "invalid"?: boolean;
        /**
          * Label to be displayed for the textarea
         */
        "label"?: string;
        /**
          * Maximum number of rows to expand to
          * @default 10
         */
        "max_rows"?: number;
        /**
          * Minimum number of rows to display
          * @default 1
         */
        "min_rows"?: number;
        /**
          * Emits an event containing the text string when the textarea's content is changed
         */
        "onAtuiChange"?: (event: AtuiTextareaCustomEvent<string>) => void;
        /**
          * Placeholder in the textarea when no text is placed
         */
        "placeholder"?: string;
        /**
          * Makes the textarea read only
         */
        "readonly"?: boolean;
        /**
          * Adds a required * to the label
         */
        "required"?: boolean;
        /**
          * Sets the value of the textarea
         */
        "value"?: string;
    }
    /**
     * @category Form Controls
     * @description A time range component for selecting time periods.
     */
    interface AtuiTimeRange {
        /**
          * Custom error message to show when an invalid time is inputted.
          * @default null
         */
        "custom_error_message"?: any;
        /**
          * Enable range limit setting. If set to false, use Jan 1, 1985 as the lower limit of time range, ignoring the value of range limit.
          * @default true
         */
        "enable_range_limit"?: boolean;
        /**
          * Enable relative time selection.
          * @default true
         */
        "enable_relative_time"?: boolean;
        /**
          * Emits an event containing the selected time range when it changes
         */
        "onAtuiChange"?: (event: AtuiTimeRangeCustomEvent<SelectedTimeRangeExtended>) => void;
        /**
          * Define the presets for the relative time ranges.
         */
        "presets"?: TimePresets[];
        /**
          * Lower limit of the time range.
          * @default 7
         */
        "range_limit"?: number;
        /**
          * Selected time range.
          * @default {         selected: {             unit: TimeUnit.HOURS,             value: 1,         },     }
         */
        "selected_time_range"?: SelectedTimeRangeExtended;
        /**
          * Enable all time selection.
          * @default false
         */
        "show_all_time"?: boolean;
    }
    /**
     * @category Form Controls
     * @description A time with unit component for selecting a time period.
     */
    interface AtuiTimeWithUnit {
        /**
          * Common time preset options to display
         */
        "common_options"?: TimePresets[];
        /**
          * Custom error message to display when validation fails
          * @default null
         */
        "custom_error_message"?: any;
        /**
          * Initial time selection value
         */
        "initial_selected_time"?: TimeWithUnit | TimeRangeDisplay.ALL;
        /**
          * Maximum number of seconds allowed for time selection
          * @default Number.MAX_SAFE_INTEGER
         */
        "max_seconds"?: number;
        /**
          * Minimum date constraint for time selection
          * @default null
         */
        "min_date"?: Date;
        /**
          * Minimum number of seconds allowed for time selection
          * @default 60
         */
        "min_seconds"?: number;
        /**
          * Emitted when the user cancels the time selection
         */
        "onAtuiCancel"?: (event: AtuiTimeWithUnitCustomEvent<null>) => void;
        /**
          * Emitted when the user submits the time selection
         */
        "onAtuiSubmit"?: (event: AtuiTimeWithUnitCustomEvent<TimeWithUnit | TimeRangeDisplay.ALL>) => void;
        /**
          * Whether to show the 'All Time' option
          * @default false
         */
        "show_all_time"?: boolean;
        /**
          * Available time units for selection
         */
        "units"?: TimeUnit[];
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle.
     */
    interface AtuiTitleSubtitleCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a title and subtitle with a date.
     */
    interface AtuiTitleSubtitleDateCell {
    }
    /**
     * @category Table Cell
     * @description A cell component for displaying a toggle.
     */
    interface AtuiToggleCell {
    }
    /**
     * @category Form Controls
     * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
     */
    interface AtuiToggleSwitch {
        /**
          * Disable interaction with the toggle.
         */
        "disabled"?: boolean;
        /**
          * Short description or validation hint if required.
         */
        "hint_text"?: string;
        /**
          * Label displayed alongside the toggle.
         */
        "label"?: string;
        /**
          * Position of the label, left or right of the toggle.
          * @default 'before'
         */
        "label_position"?: LabelPosition;
        /**
          * Emits an event when toggled with `event.detail` being true if the switch is enabled
         */
        "onAtuiChange"?: (event: AtuiToggleSwitchCustomEvent<boolean>) => void;
        /**
          * Show the toggle label.
          * @default true
         */
        "show_label"?: boolean;
        /**
          * Set the toggles state.
          * @default false
         */
        "value"?: boolean;
    }
    /**
     * @category **Overlays**
     * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
     */
    interface AtuiTooltip {
        /**
          * Alignment of opened tooltip element relative to trigger element.
          * @default 'center'
         */
        "align"?: TooltipAlign;
        /**
          * Delay before showing and hiding the tooltip when interacting with the trigger element.
          * @default 150
         */
        "delay"?: number;
        /**
          * Prevent opening tooltip
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Offset in pixels from the edge of the trigger element
          * @default 8
         */
        "offset"?: number;
        /**
          * Position of opened tooltip element relative to the trigger element.
          * @default 'top'
         */
        "position"?: TooltipPosition;
        /**
          * Maximum width constraint for the tooltip in pixels. Defaults to 300px for readability.
          * @default '200px'
         */
        "width"?: string;
    }
    /**
     * ### ```interface ItemNode```
     * ```
     *  id: string;
     *  displayName: string;
     *  children: ItemNode[];
     *  isSelected?: boolean;
     *  tooltip?: string;
     * ```
     */
    interface AtuiTree {
        /**
          * List of items to be displayed in the tree
         */
        "item_list"?: TreeNode[];
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtuiTreeCustomEvent<TreeNode>) => void;
        /**
          * Set the size of the tree button, default sm
          * @default 'sm'
         */
        "size"?: ButtonSize1;
    }
    interface AtuiTreeItem {
        /**
          * Defines the indent of the tree item
         */
        "depth"?: number;
        /**
          * When set the button's styling will change and will no longer be interactive
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Determines whether to add the arrow indicator icon
          * @default false
         */
        "has_children"?: boolean;
        /**
          * Label to be displayed within the button
         */
        "label": string;
        /**
          * Emits when the button is clicked
         */
        "onAtuiClick"?: (event: AtuiTreeItemCustomEvent<AtuiEvent>) => void;
        /**
          * Determines the direction of the indicator arrow
          * @default false
         */
        "selected"?: boolean;
        /**
          * Size of the button
          * @default 'lg'
         */
        "size"?: TreeItemSize;
    }
    interface IntrinsicElements {
        "atui-accordion": AtuiAccordion;
        "atui-accordion-item": AtuiAccordionItem;
        "atui-accordion-trigger": AtuiAccordionTrigger;
        "atui-avatar": AtuiAvatar;
        "atui-badge": AtuiBadge;
        "atui-breadcrumb": AtuiBreadcrumb;
        "atui-breadcrumb-item": AtuiBreadcrumbItem;
        "atui-button": AtuiButton;
        "atui-button-group": AtuiButtonGroup;
        "atui-button-group-option": AtuiButtonGroupOption;
        "atui-card": AtuiCard;
        "atui-chart-bar-line": AtuiChartBarLine;
        "atui-chart-donut": AtuiChartDonut;
        "atui-checkbox": AtuiCheckbox;
        "atui-checkbox-cell": AtuiCheckboxCell;
        "atui-checkbox-group": AtuiCheckboxGroup;
        "atui-checkbox-header": AtuiCheckboxHeader;
        "atui-chip-list": AtuiChipList;
        "atui-chip-list-cell": AtuiChipListCell;
        "atui-color-status-cell": AtuiColorStatusCell;
        "atui-column-manager": AtuiColumnManager;
        "atui-custom-time-range": AtuiCustomTimeRange;
        "atui-dialog": AtuiDialog;
        "atui-edit-text-cell": AtuiEditTextCell;
        "atui-form-label": AtuiFormLabel;
        "atui-header": AtuiHeader;
        "atui-input": AtuiInput;
        "atui-input-numeric": AtuiInputNumeric;
        "atui-input-range": AtuiInputRange;
        "atui-layout": AtuiLayout;
        "atui-list-item": AtuiListItem;
        "atui-list-selector": AtuiListSelector;
        "atui-list-selector-item": AtuiListSelectorItem;
        "atui-loading": AtuiLoading;
        "atui-menu": AtuiMenu;
        "atui-menu-cell": AtuiMenuCell;
        "atui-menu-item": AtuiMenuItem;
        "atui-message": AtuiMessage;
        "atui-multi-btn-cell": AtuiMultiBtnCell;
        "atui-multi-select": AtuiMultiSelect;
        "atui-placeholder": AtuiPlaceholder;
        "atui-prompt-container": AtuiPromptContainer;
        "atui-prompt-input": AtuiPromptInput;
        "atui-prompt-message": AtuiPromptMessage;
        "atui-prompt-thread": AtuiPromptThread;
        "atui-radio": AtuiRadio;
        "atui-radio-group": AtuiRadioGroup;
        "atui-search": AtuiSearch;
        "atui-search-table": AtuiSearchTable;
        "atui-select": AtuiSelect;
        "atui-side-panel": AtuiSidePanel;
        "atui-sidebar": AtuiSidebar;
        "atui-sidebar-menu": AtuiSidebarMenu;
        "atui-sidebar-menuitem": AtuiSidebarMenuitem;
        "atui-sidebar-submenu": AtuiSidebarSubmenu;
        "atui-sidebar-trigger": AtuiSidebarTrigger;
        "atui-src-dest": AtuiSrcDest;
        "atui-static-table": AtuiStaticTable;
        "atui-status-bar": AtuiStatusBar;
        "atui-tab": AtuiTab;
        "atui-tab-content": AtuiTabContent;
        "atui-tab-selector": AtuiTabSelector;
        "atui-table": AtuiTable;
        "atui-table-actions": AtuiTableActions;
        "atui-table-export-menu": AtuiTableExportMenu;
        "atui-table-filter-menu": AtuiTableFilterMenu;
        "atui-table-filters": AtuiTableFilters;
        "atui-table-pagination": AtuiTablePagination;
        "atui-text-badge-cell": AtuiTextBadgeCell;
        "atui-text-cell": AtuiTextCell;
        "atui-text-icon-cell": AtuiTextIconCell;
        "atui-text-image-cell": AtuiTextImageCell;
        "atui-text-status-cell": AtuiTextStatusCell;
        "atui-textarea": AtuiTextarea;
        "atui-time-range": AtuiTimeRange;
        "atui-time-with-unit": AtuiTimeWithUnit;
        "atui-title-subtitle-cell": AtuiTitleSubtitleCell;
        "atui-title-subtitle-date-cell": AtuiTitleSubtitleDateCell;
        "atui-toggle-cell": AtuiToggleCell;
        "atui-toggle-switch": AtuiToggleSwitch;
        "atui-tooltip": AtuiTooltip;
        "atui-tree": AtuiTree;
        "atui-tree-item": AtuiTreeItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * ### ```interface AccordionItem```
             * ```
             * item_id: string;
             * label: string;
             * content: string;
             * ```
             * @category Layout
             * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
             */
            "atui-accordion": LocalJSX.AtuiAccordion & JSXBase.HTMLAttributes<HTMLAtuiAccordionElement>;
            /**
             * @category Layout
             * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.
             */
            "atui-accordion-item": LocalJSX.AtuiAccordionItem & JSXBase.HTMLAttributes<HTMLAtuiAccordionItemElement>;
            "atui-accordion-trigger": LocalJSX.AtuiAccordionTrigger & JSXBase.HTMLAttributes<HTMLAtuiAccordionTriggerElement>;
            /**
             * @category Decoration
             * @description Purely decorative avatar component that displays user profile images or initials. Accessibility attributes should be added to the parent element if needed.
             */
            "atui-avatar": LocalJSX.AtuiAvatar & JSXBase.HTMLAttributes<HTMLAtuiAvatarElement>;
            /**
             * @category Feedback
             * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.
             */
            "atui-badge": LocalJSX.AtuiBadge & JSXBase.HTMLAttributes<HTMLAtuiBadgeElement>;
            /**
             * A navigation breadcrumb component showing the user's current location in a hierarchical structure.
             * Provides clickable path navigation with customizable separators and accessibility features.
             * @category Navigation
             */
            "atui-breadcrumb": LocalJSX.AtuiBreadcrumb & JSXBase.HTMLAttributes<HTMLAtuiBreadcrumbElement>;
            /**
             * @category Navigation
             * @description A breadcrumb item component for the breadcrumb.
             */
            "atui-breadcrumb-item": LocalJSX.AtuiBreadcrumbItem & JSXBase.HTMLAttributes<HTMLAtuiBreadcrumbItemElement>;
            /**
             * @category Actions
             * @description A versatile button component for user interactions with multiple styling variants, sizes, and loading states. Supports icons, custom content through slots, and accessibility features.
             */
            "atui-button": LocalJSX.AtuiButton & JSXBase.HTMLAttributes<HTMLAtuiButtonElement>;
            /**
             * @category Form Controls
             * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.
             */
            "atui-button-group": LocalJSX.AtuiButtonGroup & JSXBase.HTMLAttributes<HTMLAtuiButtonGroupElement>;
            /**
             * @category Form Controls
             * @description A button group option component for the button group.
             */
            "atui-button-group-option": LocalJSX.AtuiButtonGroupOption & JSXBase.HTMLAttributes<HTMLAtuiButtonGroupOptionElement>;
            /**
             * @category Layout
             * @description A flexible container component for organizing content with header, body, and footer sections. Features sticky headers/footers, configurable padding, shadows, and overflow handling.
             */
            "atui-card": LocalJSX.AtuiCard & JSXBase.HTMLAttributes<HTMLAtuiCardElement>;
            /**
             * ### ```interface PointStyles```
             * ```
             *  pointBackgroundColor: Color;
             *  pointBorderColor: Color;
             *  pointBorderWidth: number;
             *  pointHitRadius: number;
             *  pointHoverBackgroundColor: Color;
             *  pointHoverBorderColor: Color;
             *  pointHoverBorderWidth: number;
             *  pointHoverRadius: number;
             *  pointRadius: number;
             *  pointRotaion: number;
             *  pointStyle: PointStyle;
             * ```
             * ### ```interface Threshold```
             * ```
             *  label: string;
             *  data: (number | Point | [number, number] | BubbleDataPoint)[];
             *  color?: string;
             *  dashLine?: boolean;
             *  stepped?: boolean;
             * ```
             */
            "atui-chart-bar-line": LocalJSX.AtuiChartBarLine & JSXBase.HTMLAttributes<HTMLAtuiChartBarLineElement>;
            /**
             * @category Data Visualization
             * @description A donut chart component for visualizing proportional data with customizable colors and legends. Built on Chart.js with responsive design and interactive hover effects.
             */
            "atui-chart-donut": LocalJSX.AtuiChartDonut & JSXBase.HTMLAttributes<HTMLAtuiChartDonutElement>;
            /**
             * @category Form Controls
             * @description A checkbox component for selecting a single option from a predefined list. Provides validation, labeling, and accessibility features for checkbox collections.
             */
            "atui-checkbox": LocalJSX.AtuiCheckbox & JSXBase.HTMLAttributes<HTMLAtuiCheckboxElement>;
            /**
             * @category Table Cell
             * @description A checkbox cell component for table row selection and boolean data display. Provides accessible selection controls within data tables.
             */
            "atui-checkbox-cell": LocalJSX.AtuiCheckboxCell & JSXBase.HTMLAttributes<HTMLAtuiCheckboxCellElement>;
            /**
             * ### ```interface CheckboxOptions```
             * ```
             *  id: string;
             *  label?: string;
             *  hint_text?: string;
             *  value?: boolean;
             * ```
             * @category Form Controls
             * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.
             */
            "atui-checkbox-group": LocalJSX.AtuiCheckboxGroup & JSXBase.HTMLAttributes<HTMLAtuiCheckboxGroupElement>;
            /**
             * @category Table Cell
             * @description A header component for displaying a checkbox.
             */
            "atui-checkbox-header": LocalJSX.AtuiCheckboxHeader & JSXBase.HTMLAttributes<HTMLAtuiCheckboxHeaderElement>;
            /**
             * @category Utilities
             * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.
             */
            "atui-chip-list": LocalJSX.AtuiChipList & JSXBase.HTMLAttributes<HTMLAtuiChipListElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a list of chips.
             */
            "atui-chip-list-cell": LocalJSX.AtuiChipListCell & JSXBase.HTMLAttributes<HTMLAtuiChipListCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a color status indicator based on predefined types
             */
            "atui-color-status-cell": LocalJSX.AtuiColorStatusCell & JSXBase.HTMLAttributes<HTMLAtuiColorStatusCellElement>;
            "atui-column-manager": LocalJSX.AtuiColumnManager & JSXBase.HTMLAttributes<HTMLAtuiColumnManagerElement>;
            "atui-custom-time-range": LocalJSX.AtuiCustomTimeRange & JSXBase.HTMLAttributes<HTMLAtuiCustomTimeRangeElement>;
            /**
             * @category Overlays
             * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.
             */
            "atui-dialog": LocalJSX.AtuiDialog & JSXBase.HTMLAttributes<HTMLAtuiDialogElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying and editing text.
             */
            "atui-edit-text-cell": LocalJSX.AtuiEditTextCell & JSXBase.HTMLAttributes<HTMLAtuiEditTextCellElement>;
            /**
             * @category Form Controls
             * @description A form label component that provides accessible labeling with optional required indicators and info tooltips. Designed for use with form inputs.
             */
            "atui-form-label": LocalJSX.AtuiFormLabel & JSXBase.HTMLAttributes<HTMLAtuiFormLabelElement>;
            /**
             * @category Layout
             * @description A header component for page and section titles with optional subtitle support. Provides consistent typography and spacing for content headers.
             */
            "atui-header": LocalJSX.AtuiHeader & JSXBase.HTMLAttributes<HTMLAtuiHeaderElement>;
            /**
             * @category Form Controls
             * @description A comprehensive text input component with label, validation, hints, and accessibility features. Supports multiple input types, clearable functionality, and integrates with form validation.
             */
            "atui-input": LocalJSX.AtuiInput & JSXBase.HTMLAttributes<HTMLAtuiInputElement>;
            /**
             * @category Form Controls
             * @description A numeric input component for entering numerical values.
             */
            "atui-input-numeric": LocalJSX.AtuiInputNumeric & JSXBase.HTMLAttributes<HTMLAtuiInputNumericElement>;
            /**
             * @category Form Controls
             * @description A range input component for selecting a value within a specified range.
             */
            "atui-input-range": LocalJSX.AtuiInputRange & JSXBase.HTMLAttributes<HTMLAtuiInputRangeElement>;
            /**
             * @category Layout
             * @description A base layout component for structuring page content with flexible sections and responsive behavior. Provides foundation for consistent page layouts.
             */
            "atui-layout": LocalJSX.AtuiLayout & JSXBase.HTMLAttributes<HTMLAtuiLayoutElement>;
            /**
             * @category Layout
             * @description A list item component for the list.
             */
            "atui-list-item": LocalJSX.AtuiListItem & JSXBase.HTMLAttributes<HTMLAtuiListItemElement>;
            /**
             * @category Navigation
             * @description A list selector component for selecting an item from a list.
             */
            "atui-list-selector": LocalJSX.AtuiListSelector & JSXBase.HTMLAttributes<HTMLAtuiListSelectorElement>;
            /**
             * @category Navigation
             * @description A list selector item component for the list selector.
             */
            "atui-list-selector-item": LocalJSX.AtuiListSelectorItem & JSXBase.HTMLAttributes<HTMLAtuiListSelectorItemElement>;
            /**
             * @category Feedback
             * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.
             */
            "atui-loading": LocalJSX.AtuiLoading & JSXBase.HTMLAttributes<HTMLAtuiLoadingElement>;
            "atui-menu": LocalJSX.AtuiMenu & JSXBase.HTMLAttributes<HTMLAtuiMenuElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a menu.
             */
            "atui-menu-cell": LocalJSX.AtuiMenuCell & JSXBase.HTMLAttributes<HTMLAtuiMenuCellElement>;
            "atui-menu-item": LocalJSX.AtuiMenuItem & JSXBase.HTMLAttributes<HTMLAtuiMenuItemElement>;
            /**
             * @category Feedback
             * @description A message component for displaying notifications, alerts, or informational messages.
             */
            "atui-message": LocalJSX.AtuiMessage & JSXBase.HTMLAttributes<HTMLAtuiMessageElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying multiple buttons.
             */
            "atui-multi-btn-cell": LocalJSX.AtuiMultiBtnCell & JSXBase.HTMLAttributes<HTMLAtuiMultiBtnCellElement>;
            /**
             * @category Form Controls
             * @description A multi-selection dropdown component for choosing multiple values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
             */
            "atui-multi-select": LocalJSX.AtuiMultiSelect & JSXBase.HTMLAttributes<HTMLAtuiMultiSelectElement>;
            /**
             * @category Feedback
             * @description A placeholder component for displaying empty states, skeleton loading, or temporary content. Useful for indicating missing data or content that is still loading.
             */
            "atui-placeholder": LocalJSX.AtuiPlaceholder & JSXBase.HTMLAttributes<HTMLAtuiPlaceholderElement>;
            /**
             * @category Prompt
             * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.
             */
            "atui-prompt-container": LocalJSX.AtuiPromptContainer & JSXBase.HTMLAttributes<HTMLAtuiPromptContainerElement>;
            /**
             * @category Prompt
             * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.
             */
            "atui-prompt-input": LocalJSX.AtuiPromptInput & JSXBase.HTMLAttributes<HTMLAtuiPromptInputElement>;
            /**
             * @category Prompt
             * @description A message component for displaying individual chat messages with different roles (user, assistant). Supports optional avatars, loading states, error states, and interactive actions like copy, edit, and retry.
             */
            "atui-prompt-message": LocalJSX.AtuiPromptMessage & JSXBase.HTMLAttributes<HTMLAtuiPromptMessageElement>;
            /**
             * @category Prompt
             * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.
             */
            "atui-prompt-thread": LocalJSX.AtuiPromptThread & JSXBase.HTMLAttributes<HTMLAtuiPromptThreadElement>;
            /**
             * @category Form Controls
             * @description A radio button component for selecting a single option from a predefined list.
             */
            "atui-radio": LocalJSX.AtuiRadio & JSXBase.HTMLAttributes<HTMLAtuiRadioElement>;
            /**
             * @category Form Controls
             * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.
             */
            "atui-radio-group": LocalJSX.AtuiRadioGroup & JSXBase.HTMLAttributes<HTMLAtuiRadioGroupElement>;
            /**
             * @category Form Controls
             * @description A search component for filtering data.
             */
            "atui-search": LocalJSX.AtuiSearch & JSXBase.HTMLAttributes<HTMLAtuiSearchElement>;
            /**
             * @category Data Tables
             * @description A searchable data table component that combines table functionality with integrated search capabilities. Provides real-time filtering and search result highlighting.
             */
            "atui-search-table": LocalJSX.AtuiSearchTable & JSXBase.HTMLAttributes<HTMLAtuiSearchTableElement>;
            /**
             * @category Form Controls
             * @description A dropdown selection component for choosing single values from a list of options. Features search functionality, keyboard navigation, and accessibility support.
             */
            "atui-select": LocalJSX.AtuiSelect & JSXBase.HTMLAttributes<HTMLAtuiSelectElement>;
            /**
             * @category Overlays
             * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.
             */
            "atui-side-panel": LocalJSX.AtuiSidePanel & JSXBase.HTMLAttributes<HTMLAtuiSidePanelElement>;
            /**
             * @category Navigation
             * @description A collapsible sidebar navigation component with menu support and responsive behavior. Features animation, auto-collapse, and keyboard navigation.
             */
            "atui-sidebar": LocalJSX.AtuiSidebar & JSXBase.HTMLAttributes<HTMLAtuiSidebarElement>;
            /**
             * @category Navigation
             * @description 
             */
            "atui-sidebar-menu": LocalJSX.AtuiSidebarMenu & JSXBase.HTMLAttributes<HTMLAtuiSidebarMenuElement>;
            /**
             * @category Navigation
             * @description A sidebar menu item component for the sidebar.
             */
            "atui-sidebar-menuitem": LocalJSX.AtuiSidebarMenuitem & JSXBase.HTMLAttributes<HTMLAtuiSidebarMenuitemElement>;
            /**
             * @category Navigation
             * @description Display nested sub-menus in the atui-sidebar.
             * Sub-menu's can be collapsed via atui-accordion-item when the parent sidebar is expanded.
             * Submenu content is collapsed and hidden when the parent sidebar is collapsed.
             * Menu indent styling is supported up to 3 levels.
             */
            "atui-sidebar-submenu": LocalJSX.AtuiSidebarSubmenu & JSXBase.HTMLAttributes<HTMLAtuiSidebarSubmenuElement>;
            /**
             * @category Navigation
             * @description A sidebar trigger component for the sidebar.
             */
            "atui-sidebar-trigger": LocalJSX.AtuiSidebarTrigger & JSXBase.HTMLAttributes<HTMLAtuiSidebarTriggerElement>;
            /**
             * @category Utilities
             * @description A src-dest component for displaying source and destination information.
             */
            "atui-src-dest": LocalJSX.AtuiSrcDest & JSXBase.HTMLAttributes<HTMLAtuiSrcDestElement>;
            /**
             * @category Data Tables
             * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.
             */
            "atui-static-table": LocalJSX.AtuiStaticTable & JSXBase.HTMLAttributes<HTMLAtuiStaticTableElement>;
            /**
             * @category Data Visualization
             * @description A status bar component for displaying progress, completion, or state information with customizable colors and labels.
             */
            "atui-status-bar": LocalJSX.AtuiStatusBar & JSXBase.HTMLAttributes<HTMLAtuiStatusBarElement>;
            /**
             * @category Navigation
             * @description A tab component for the tab selector.
             */
            "atui-tab": LocalJSX.AtuiTab & JSXBase.HTMLAttributes<HTMLAtuiTabElement>;
            /**
             * @category Navigation
             * @description A tab content component for the tab selector.
             */
            "atui-tab-content": LocalJSX.AtuiTabContent & JSXBase.HTMLAttributes<HTMLAtuiTabContentElement>;
            /**
             * ### interface Tab
             * ```
             * {
             *   id: string;
             *   title: string;
             * }
             * ```
             * @category Navigation
             * @description A tab selector component for switching between different content sections. Provides keyboard navigation and accessible tab panel management.
             */
            "atui-tab-selector": LocalJSX.AtuiTabSelector & JSXBase.HTMLAttributes<HTMLAtuiTabSelectorElement>;
            /**
             * @category Data Tables
             * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.
             */
            "atui-table": LocalJSX.AtuiTable & JSXBase.HTMLAttributes<HTMLAtuiTableElement>;
            /**
             * @category Data Tables
             * @description A container component for table actions, including search, export, and column management. Provides a unified interface for managing table interactions and data export.
             */
            "atui-table-actions": LocalJSX.AtuiTableActions & JSXBase.HTMLAttributes<HTMLAtuiTableActionsElement>;
            /**
             * @category Data Tables
             * @description A menu component for exporting table data in CSV or PDF formats. Provides a user-friendly interface for exporting data from tables.
             */
            "atui-table-export-menu": LocalJSX.AtuiTableExportMenu & JSXBase.HTMLAttributes<HTMLAtuiTableExportMenuElement>;
            /**
             * @category Data Tables
             * @description A menu component for filtering table data. Provides a user-friendly interface for filtering data from tables.
             */
            "atui-table-filter-menu": LocalJSX.AtuiTableFilterMenu & JSXBase.HTMLAttributes<HTMLAtuiTableFilterMenuElement>;
            "atui-table-filters": LocalJSX.AtuiTableFilters & JSXBase.HTMLAttributes<HTMLAtuiTableFiltersElement>;
            /**
             * @category Data Tables
             * @description Optional component for use with ```<atui-table>```.
             * Provides controls for pagination if you would like to
             * have control of the table's pagination.
             */
            "atui-table-pagination": LocalJSX.AtuiTablePagination & JSXBase.HTMLAttributes<HTMLAtuiTablePaginationElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with a badge.
             */
            "atui-text-badge-cell": LocalJSX.AtuiTextBadgeCell & JSXBase.HTMLAttributes<HTMLAtuiTextBadgeCellElement>;
            /**
             * @category Table Cell
             * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.
             */
            "atui-text-cell": LocalJSX.AtuiTextCell & JSXBase.HTMLAttributes<HTMLAtuiTextCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.
             */
            "atui-text-icon-cell": LocalJSX.AtuiTextIconCell & JSXBase.HTMLAttributes<HTMLAtuiTextIconCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with an image.
             */
            "atui-text-image-cell": LocalJSX.AtuiTextImageCell & JSXBase.HTMLAttributes<HTMLAtuiTextImageCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a text with a status.
             */
            "atui-text-status-cell": LocalJSX.AtuiTextStatusCell & JSXBase.HTMLAttributes<HTMLAtuiTextStatusCellElement>;
            /**
             * @category Form Controls
             * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.
             */
            "atui-textarea": LocalJSX.AtuiTextarea & JSXBase.HTMLAttributes<HTMLAtuiTextareaElement>;
            /**
             * @category Form Controls
             * @description A time range component for selecting time periods.
             */
            "atui-time-range": LocalJSX.AtuiTimeRange & JSXBase.HTMLAttributes<HTMLAtuiTimeRangeElement>;
            /**
             * @category Form Controls
             * @description A time with unit component for selecting a time period.
             */
            "atui-time-with-unit": LocalJSX.AtuiTimeWithUnit & JSXBase.HTMLAttributes<HTMLAtuiTimeWithUnitElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a title and subtitle.
             */
            "atui-title-subtitle-cell": LocalJSX.AtuiTitleSubtitleCell & JSXBase.HTMLAttributes<HTMLAtuiTitleSubtitleCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a title and subtitle with a date.
             */
            "atui-title-subtitle-date-cell": LocalJSX.AtuiTitleSubtitleDateCell & JSXBase.HTMLAttributes<HTMLAtuiTitleSubtitleDateCellElement>;
            /**
             * @category Table Cell
             * @description A cell component for displaying a toggle.
             */
            "atui-toggle-cell": LocalJSX.AtuiToggleCell & JSXBase.HTMLAttributes<HTMLAtuiToggleCellElement>;
            /**
             * @category Form Controls
             * @description A toggle switch component for binary on/off selections. Provides accessible alternative to checkboxes with visual toggle behavior.
             */
            "atui-toggle-switch": LocalJSX.AtuiToggleSwitch & JSXBase.HTMLAttributes<HTMLAtuiToggleSwitchElement>;
            /**
             * @category **Overlays**
             * @description **A tooltip popover component that displays contextual information when hovering over or focusing on an element.**
             */
            "atui-tooltip": LocalJSX.AtuiTooltip & JSXBase.HTMLAttributes<HTMLAtuiTooltipElement>;
            /**
             * ### ```interface ItemNode```
             * ```
             *  id: string;
             *  displayName: string;
             *  children: ItemNode[];
             *  isSelected?: boolean;
             *  tooltip?: string;
             * ```
             */
            "atui-tree": LocalJSX.AtuiTree & JSXBase.HTMLAttributes<HTMLAtuiTreeElement>;
            "atui-tree-item": LocalJSX.AtuiTreeItem & JSXBase.HTMLAttributes<HTMLAtuiTreeItemElement>;
        }
    }
}
