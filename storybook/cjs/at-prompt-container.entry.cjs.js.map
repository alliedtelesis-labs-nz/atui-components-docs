{"version":3,"file":"at-prompt-container.entry.cjs.js","sources":["src/components/prompt-components/at-prompt-container/at-prompt-container.tsx"],"sourcesContent":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    State,\n    Listen,\n    Method,\n    Element,\n} from '@stencil/core';\nimport {\n    type PromptMessage,\n    PromptUserRole,\n    PromptResponseAnimation,\n} from '../../../types';\nimport { fetchTranslations } from '../../../utils/translation';\n\n/**\n * @category Prompt\n * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.\n * @slot prompt-container-header - Custom content displayed above the message thread\n * @slot prompt-container-footer - Custom content displayed below the message input\n */\n@Component({\n    tag: 'at-prompt-container',\n    shadow: false,\n})\nexport class AtPromptContainer {\n    @Element() el: HTMLElement;\n\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop({ mutable: true }) messages: PromptMessage[] = [];\n\n    /**\n     * Placeholder text for the input field\n     */\n    @Prop() placeholder: string = 'Type your message here...';\n\n    /**\n     * Error text displayed when invalid is set via max length\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Shows loading state and disables input\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Disables all interactions with the container\n     */\n    @Prop() disabled: boolean = false;\n\n    /**\n     * Controls visibility of the \"New Thread\" button in the header\n     */\n    @Prop() show_new_thread_button: boolean = true;\n\n    /**\n     * Maximum character length for input messages\n     */\n    @Prop() max_message_length: number = 2000;\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    /**\n     * Enable streaming text animations for system/assistant messages\n     * - 'none': No animation\n     * - 'fade': Fade in the entire message\n     * - 'words': Animate words appearing sequentially like ChatGPT\n     */\n    @Prop() response_animation: PromptResponseAnimation = 'words';\n\n    @State() currentInput: string = '';\n    @State() inputInvalid: boolean = false;\n    @State() inputError: string = '';\n    @State() isSendEnabled: boolean = true;\n    @State() translations: any = {};\n\n    /**\n     * Emits when a message should be sent\n     */\n    @Event()\n    atSubmit: EventEmitter<string>;\n\n    /**\n     * Emits when the stop button is clicked\n     */\n    @Event()\n    atStop: EventEmitter<void>;\n\n    /**\n     * Emitted when the \"New Thread\" button is clicked\n     */\n    @Event() atNewThread: EventEmitter<void>;\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    private inputComponent: HTMLAtPromptInputElement;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    @Listen('atSubmit')\n    handleInputSubmit(event: CustomEvent<string>) {\n        const content = event.detail.trim();\n        if (content && this.isSendEnabled && !this.disabled && !this.loading) {\n            this.handleSubmit(content);\n        }\n    }\n\n    @Listen('atMessageCopy')\n    handleMessageCopy(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageCopy.emit(event.detail);\n    }\n\n    @Listen('atMessageRetry')\n    handleMessageRetry(event: CustomEvent<{ messageId: string }>) {\n        this.atMessageRetry.emit(event.detail);\n    }\n\n    @Listen('atMessageEdit')\n    async handleMessageEdit(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageEdit.emit(event.detail);\n        if (this.inputComponent) {\n            this.inputComponent.value = event.detail.content;\n            await this.focusInput();\n        }\n    }\n\n    @Listen('atMessageVote')\n    handleMessageVote(\n        event: CustomEvent<{ messageId: string; score: number }>,\n    ) {\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                score: event.detail.score,\n            };\n            this.messages = updatedMessages;\n            this.atMessageVote.emit(event.detail);\n        }\n\n        this.atMessageVote.emit(event.detail);\n    }\n\n    /**\n     * Programmatically add a message to the conversation thread\n     * @param role - The message role\n     * @param content - The message content\n     */\n    @Method()\n    async addMessage(role: PromptUserRole, content: string): Promise<void> {\n        const message: PromptMessage = {\n            id: Date.now().toString(),\n            role,\n            content,\n        };\n        this.messages = [...this.messages, message];\n    }\n\n    /**\n     * Append content to the last message in the thread (useful for streaming responses)\n     * @param content - The content to append\n     * @returns Promise<boolean> - Returns true if successful, false if no messages exist or last message is not from assistant\n     */\n    @Method()\n    async appendToLastMessage(content: string): Promise<boolean> {\n        if (this.messages.length === 0) return false;\n\n        const lastMessage = this.messages[this.messages.length - 1];\n        if (lastMessage.role !== 'assistant') return false;\n\n        lastMessage.content += content;\n        this.messages = [...this.messages];\n        return true;\n    }\n\n    /**\n     * Start a new conversation thread by clearing all messages and resetting state\n     */\n    @Method()\n    async newThread(): Promise<void> {\n        this.messages = [];\n        this.currentInput = '';\n        this.isSendEnabled = true;\n        this.atNewThread.emit();\n        setTimeout(() => this.focusInput(), 100);\n    }\n\n    /**\n     * Control the send button state programmatically\n     * @param enabled - Whether the send functionality should be enabled\n     */\n    @Method()\n    async setSendEnabled(enabled: boolean): Promise<void> {\n        this.isSendEnabled = enabled;\n    }\n\n    /**\n     * Programmatically focus the input field\n     */\n    @Method()\n    async focusInput(): Promise<void> {\n        if (this.inputComponent) {\n            setTimeout(() => {\n                this.inputComponent.focus();\n            }, 0);\n        }\n    }\n\n    private handleSubmit = async (content: string) => {\n        if (!content || this.disabled || this.loading || !this.isSendEnabled) {\n            return;\n        }\n\n        this.isSendEnabled = false;\n\n        await this.addMessage('user', content);\n        this.atSubmit.emit(content);\n    };\n\n    private handleStop = () => {\n        this.atStop.emit();\n    };\n\n    private handleNewThread = async () => {\n        await this.newThread();\n    };\n\n    private renderHeader() {\n        if (!this.show_new_thread_button) return null;\n\n        const newThreadText =\n            this.translations?.ATUI?.PROMPT?.NEW_THREAD || 'New Thread';\n\n        return (\n            <div class=\"flex justify-end pb-16\">\n                <at-button\n                    slot=\"actions\"\n                    size=\"md\"\n                    type=\"primaryOutline\"\n                    onClick={this.handleNewThread}\n                    disabled={this.loading}\n                    data-name=\"new-thread-button\"\n                >\n                    {newThreadText}\n                </at-button>\n            </div>\n        );\n    }\n\n    private renderFooter() {\n        return (\n            <div class=\"p-4\">\n                <at-prompt-input\n                    ref={(el) => (this.inputComponent = el)}\n                    placeholder={this.placeholder}\n                    in_progress={this.loading}\n                    max_length={this.max_message_length}\n                    error_text={this.error_text}\n                    data-name=\"prompt-container-input\"\n                    onAtSubmit={(event) => this.handleSubmit(event.detail)}\n                    onAtStop={() => this.handleStop()}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Host\n                class=\"flex h-full w-full flex-col overflow-hidden\"\n                data-name=\"prompt-container\"\n            >\n                {this.renderHeader()}\n                <slot name=\"prompt-container-header\" />\n                <div\n                    class=\"min-h-0 flex-1\"\n                    data-name=\"thread-wrapper\"\n                >\n                    <at-prompt-thread\n                        messages={this.messages}\n                        loading={this.loading}\n                        auto_scroll={true}\n                        enable_vote={this.enable_vote}\n                        enable_copy={this.enable_copy}\n                        enable_edit={this.enable_edit}\n                        response_animation={this.response_animation}\n                        data-name=\"container-thread\"\n                    />\n                </div>\n                <div class=\"flex flex-col gap-4\">\n                    {this.renderFooter()}\n                    <slot name=\"prompt-container-footer\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"names":["fetchTranslations","h","Host"],"mappings":"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"}