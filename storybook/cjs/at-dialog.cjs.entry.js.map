{"file":"at-dialog.entry.cjs.js","mappings":"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","names":["h"],"sources":["src/components/at-dialog/at-dialog.scss?tag=at-dialog","src/components/at-dialog/at-dialog.tsx"],"sourcesContent":["@use '../../styles/shared/backdrop';\n\n.c-atui-dialog {\n    position: fixed;\n    inset: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    max-height: calc(100dvh - 48px);\n    overflow: hidden;\n    border: 0;\n    padding: 0;\n    background: transparent;\n    z-index: var(--token-z-index-modal);\n    transform-origin: center;\n    opacity: 0;\n    scale: 0.95;\n    box-shadow: var(--token-shadow-3);\n    transition:\n        translate 0.3s ease,\n        scale 0.3s ease,\n        opacity 0.3s ease,\n        visibility 0s linear 0.3s;\n    visibility: hidden;\n\n    &::backdrop {\n        background: none;\n    }\n\n    .backdrop-content {\n        display: flex;\n        max-height: calc(100dvh - 48px);\n    }\n\n    &[open] {\n        translate: 0 0;\n        scale: 1;\n        opacity: 1;\n        visibility: visible;\n        transition:\n            translate 0.3s ease,\n            scale 0.3s ease,\n            opacity 0.3s ease,\n            visibility 0s linear;\n\n        @starting-style {\n            opacity: 0;\n            scale: 1.15;\n        }\n    }\n\n    &:not([open]) {\n        scale: 0.95;\n        opacity: 0;\n        visibility: hidden;\n    }\n}\n","import { Component, Prop, h, Element, Method, State } from '@stencil/core';\n\n/**\n * @category Overlays\n * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.\n *\n * @slot - Content placed inside of the dialog box\n */\n@Component({\n    tag: 'at-dialog',\n    styleUrl: 'at-dialog.scss',\n    shadow: false,\n})\nexport class AtDialogComponent {\n    @Element() el!: HTMLAtDialogElement;\n\n    /**\n     * ID of the dialog element (used to open and close the modal)\n     */\n    @Prop()\n    dialog_id: string;\n\n    /**\n     * Role of the dialog element. Can be either 'dialog' or 'alertdialog'\n     */\n    @Prop()\n    role: 'dialog' | 'alertdialog' = 'dialog';\n\n    /**\n     * Whether to show a backdrop behind the dialog\n     */\n    @Prop()\n    backdrop: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.\n     */\n    @Prop() trigger_id?: string;\n\n    /**\n     * Internal state to track if dialog is open\n     */\n    @State()\n    isOpen: boolean = false;\n\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the dialog modal between open and closed states\n     * @returns Promise that resolves when the dialog state is toggled\n     */\n    @Method()\n    async toggleDialog(): Promise<void> {\n        if (this.isOpen) {\n            await this.closeDialog();\n        } else {\n            await this.openDialog();\n        }\n    }\n\n    /**\n     * Opens the dialog modal\n     * @returns Promise that resolves when the dialog is opened\n     */\n    @Method()\n    async openDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && !this.isOpen) {\n            dialog.showModal();\n            this.isOpen = true;\n            if (this.backdrop) {\n                dialog.classList.add('backdrop');\n            }\n        }\n    }\n\n    /**\n     * Closes the dialog modal\n     * @returns Promise that resolves when the dialog is closed\n     */\n    @Method()\n    async closeDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && this.isOpen) {\n            dialog.close();\n            this.isOpen = false;\n            dialog.removeAttribute('open');\n            dialog.classList.remove('backdrop');\n        }\n    }\n\n    private handleDialogClose = (event: Event) => {\n        event.preventDefault();\n        if (this.isOpen) {\n            this.closeDialog();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isOpen) {\n            event.preventDefault();\n            this.closeDialog();\n        }\n    };\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-id=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-dialog: No elements found with data-id=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleDialog();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleDialog();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <dialog\n                class={`c-atui-dialog ${this.backdrop ? 'backdrop' : ''}`}\n                id={this.dialog_id}\n                data-name=\"dialog\"\n                role={this.role}\n                aria-modal=\"true\"\n                onClose={this.handleDialogClose}\n                onKeyDown={this.handleKeyDown}\n            >\n                <div class=\"backdrop-content\">\n                    <slot />\n                </div>\n            </dialog>\n        );\n    }\n}\n"],"version":3}