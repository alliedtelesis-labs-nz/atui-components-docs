{"file":"atui-chart-bar-line.entry.cjs.js","mappings":"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","names":["ChartColorPalette","Chart","LinearScale","BarController","CategoryScale","BarElement","TimeScale","LineController","LineElement","PointElement","Colors","Legend","Tooltip","Filler","getChartColors","TimeDateUtil","h","Host"],"sources":["src/components/atui-chart-bar-line/atui-chart-bar-line.tsx"],"sourcesContent":["import { Component, h, Host, Method, Prop } from '@stencil/core';\nimport {\n    BarController,\n    BarElement,\n    CategoryScale,\n    Chart,\n    LinearScale,\n    LineController,\n    LineElement,\n    TimeScale,\n    Legend,\n    Tooltip,\n    PointElement,\n    Filler,\n    ChartConfiguration,\n    PointStyle,\n    Colors,\n    ChartDataset,\n    Point,\n    BubbleDataPoint,\n    Color,\n} from 'chart.js';\nimport 'chartjs-adapter-moment';\nimport type { TimeWithUnit } from '../../types';\nimport { TimeDateUtil } from '../../utils/time-date.util';\nimport { SelectedTimeRangeExtended } from '../../components';\nimport { Height } from '../atui-chart-donut/atui-chart-donut';\nimport { ChartColorPalette } from '../../types/chart-color';\nimport { getChartColors } from '../../utils/chart-color';\n\n/*\n * NOTES:\n *\n * The exported class contains a function from chart.js called useOffsetPos.\n * This isn't allowed by react (because it starts with the word 'use'), so the\n * build script runs\n *\n *  sed -i 's/useOffsetPos/offsetPos/g' dist/components/atui-chart-bar-line.js\n *\n * to replace all occurences of useOffsetPos with offsetPos.\n */\nexport interface PointStyles {\n    pointBackgroundColor: Color;\n    pointBorderColor: Color;\n    pointBorderWidth: number;\n    pointHitRadius: number;\n    pointHoverBackgroundColor: Color;\n    pointHoverBorderColor: Color;\n    pointHoverBorderWidth: number;\n    pointHoverRadius: number;\n    pointRadius: number;\n    pointRotaion: number;\n    pointStyle: PointStyle;\n}\n\nexport interface Threshold {\n    label: string;\n    data: (number | Point | [number, number] | BubbleDataPoint)[];\n    color?: string;\n    dashLine?: boolean;\n    stepped?: boolean;\n}\n\nconst heightVariants = {\n    xs: 'h-[70px]',\n    sm: 'h-[160px]',\n    md: 'h-[235px]',\n    lg: 'h-[330px]',\n    xl: 'h-[440px]',\n    auto: 'h-full',\n};\n\n/**\n * @category Data Visualization\n * @description A flexible chart component for displaying bar and line charts with extensive customization options. Supports multiple data series, thresholds, time-based data, and various color palettes.\n */\n/**\n * ### ```interface PointStyles```\n * ```\n *  pointBackgroundColor: Color;\n *  pointBorderColor: Color;\n *  pointBorderWidth: number;\n *  pointHitRadius: number;\n *  pointHoverBackgroundColor: Color;\n *  pointHoverBorderColor: Color;\n *  pointHoverBorderWidth: number;\n *  pointHoverRadius: number;\n *  pointRadius: number;\n *  pointRotaion: number;\n *  pointStyle: PointStyle;\n * ```\n * ### ```interface Threshold```\n * ```\n *  label: string;\n *  data: (number | Point | [number, number] | BubbleDataPoint)[];\n *  color?: string;\n *  dashLine?: boolean;\n *  stepped?: boolean;\n * ```\n */\n@Component({\n    tag: 'atui-chart-bar-line',\n    shadow: false,\n})\nexport class AtuiChartBarLine {\n    /**\n     * Type of the chart\n     */\n    @Prop()\n    type: 'bar' | 'line';\n\n    /**\n     * Data to go in the chart. ChartDataset properties found\n     * [here for line](https://www.chartjs.org/docs/latest/charts/line.html),\n     * and [here for bar](https://www.chartjs.org/docs/latest/charts/bar.html)\n     */\n    @Prop({ mutable: true })\n    data: {\n        labels: string[];\n        datasets: ChartDataset[];\n    };\n\n    /**\n     * X axis formatting to be applied to the chart.\n     * If you would like the default formatting provided by chart.js, set this to an empty object.\n     */\n    @Prop()\n    x_axis_format: object;\n\n    /**\n     * Y axis formatting to be applied to the chart.\n     */\n    @Prop()\n    y_axis_format?: object;\n\n    /**\n     * Additional options to go into the 'options' seciont of the chart configuration\n     */\n    @Prop()\n    options?: object;\n\n    /**\n     * Options for the tooltips on the chart\n     */\n    @Prop()\n    tooltip_options?: object;\n\n    /**\n     * Options for the legend\n     */\n    @Prop()\n    legend_format?: object;\n\n    /**\n     * Thresholds to be displayed in the chart\n     */\n    @Prop()\n    thresholds?: Threshold[];\n\n    /**\n     * Styles for the points in the chart\n     */\n    @Prop()\n    point_styles?: PointStyles;\n\n    /**\n     * The time range that the chart is displayed in.\n     */\n    @Prop()\n    time_range?: SelectedTimeRangeExtended;\n\n    /**\n     * Height of the chart.\n     */\n    @Prop()\n    height?: Height = 'md';\n    canvasEl: HTMLCanvasElement;\n    config: ChartConfiguration;\n\n    /**\n     * Colour palette to use for the chart. Preset options are provided ChartColourPalette:\n     * 'categorical' : For charts with data that have distinct labels and no natural order\n     * 'sequential' : For charts with data that is numeric or is naturally ordered.\n     * 'alert' : For charts that relate to health state. Note that data requires a specific order.\n     * 'custom' : Use colors defined in data. If none are provided, the ChartJS default will be used.\n     */\n    @Prop()\n    color_palette: ChartColorPalette = ChartColorPalette.CATEGORICAL;\n\n    /**\n     * Getter method for the chart's configuration object\n     * @returns Configuration of the chart\n     */\n    @Method()\n    async getConfig(): Promise<object> {\n        return this.config;\n    }\n\n    initChart() {\n        Chart.register(\n            LinearScale,\n            BarController,\n            CategoryScale,\n            BarElement,\n            TimeScale,\n            LineController,\n            LineElement,\n            PointElement,\n            Colors,\n            Legend,\n            Tooltip,\n            Filler,\n        );\n\n        const colors = getChartColors(this.color_palette);\n\n        if (colors) {\n            this.applyPresetPalette(colors);\n        }\n\n        if (this.point_styles) {\n            this.pointStylesSetup();\n        }\n\n        this.config = {\n            type: this.type,\n            data: {\n                labels: this.data.labels,\n                datasets: [...this.data.datasets, ...this.formatThresholds()],\n            },\n            options: {\n                devicePixelRatio: 2,\n                maintainAspectRatio: false,\n                scales: {\n                    y: this.y_axis_format || {\n                        beginAtZero: true,\n                        type: 'linear',\n                        min: 0,\n                    },\n                    x: this.x_axis_format || {\n                        type: 'time',\n                        time: {\n                            displayFormats: {\n                                day: 'ddd',\n                                minute: 'MMM D H:mm',\n                                hour: 'MMM D H:mm',\n                            },\n                        },\n                        ticks: {\n                            font: {\n                                size: 11,\n                            },\n                            autoSkip: true,\n                            align: 'center',\n                            maxRotation: 0,\n                            minRotation: 0,\n                        },\n                    },\n                },\n                ...this.options,\n                plugins: {\n                    tooltip: this.tooltip_options || {\n                        mode: 'index',\n                        intersect: false,\n                        position: 'nearest',\n                        animation: {\n                            duration: 150,\n                        },\n                    },\n                    legend: this.legend_format || {\n                        labels: {\n                            boxWidth: 8,\n                            boxHeight: 8,\n                            fontSize: 10,\n                            borderRadius: 2,\n                        },\n                        onHover: (event): void => {\n                            if (event.native) {\n                                (\n                                    event.native.target as HTMLElement\n                                ).style.cursor = 'pointer';\n                            }\n                        },\n                        display: true,\n                    },\n                },\n                clip: false,\n                elements: {\n                    line: {\n                        tension: 0,\n                        borderWidth: 2,\n                    },\n                },\n            },\n        };\n\n        if (this.time_range) {\n            const dates = this.getMinMaxDateStrings(this.time_range);\n            this.config.options.scales.x['min'] = dates.min;\n            this.config.options.scales.x['max'] = dates.max;\n        }\n\n        new Chart(this.canvasEl, this.config);\n        this.canvasEl.style.width = '';\n        this.canvasEl.style.height = '';\n    }\n\n    componentDidUpdate() {\n        if (this.data && this.data.datasets.length) {\n            this.initChart();\n        }\n    }\n\n    /**\n     * componentDidLoad will be run, but if the props haven't been passed to it yet,\n     * it will throw an error. So we catch this, and wait for the props to be passed\n     * to the component where it will run componentDidUpdtae.\n     */\n    componentDidLoad() {\n        if (this.data && this.data.datasets.length) {\n            this.initChart();\n        }\n    }\n\n    pointStylesSetup(): void {\n        this.data.datasets = this.data.datasets.map((dataset) => {\n            return {\n                ...dataset,\n                ...(this.point_styles as object),\n            };\n        });\n    }\n\n    applyPresetPalette(colors: string[]): void {\n        if (this.color_palette === ChartColorPalette.CUSTOM) {\n            return;\n        }\n\n        this.data.datasets = this.data.datasets.map((dataset, index) => {\n            const color = colors[index % colors.length];\n            return {\n                ...dataset,\n                backgroundColor: color,\n                borderColor: color,\n            };\n        });\n    }\n\n    getMinMaxDateStrings(timeRange: SelectedTimeRangeExtended): {\n        min: string;\n        max: string;\n    } {\n        const timeWithUnit = timeRange.selected as TimeWithUnit;\n        const custom = timeRange.custom\n            ? TimeDateUtil.getAbsoluteDateRange(timeRange.custom)\n            : null;\n        const { startDate, endDate } = TimeDateUtil.getDateRange(\n            custom,\n            timeWithUnit,\n            null,\n        );\n        return { min: startDate.toString(), max: endDate.toString() };\n    }\n\n    formatThresholds = () => {\n        if (!this.thresholds) {\n            return [];\n        }\n        const datasets: ChartDataset[] = [];\n        this.thresholds.forEach((threshold) => {\n            datasets.push({\n                type: 'line',\n                label: threshold.label,\n                borderColor: threshold.color,\n                borderCapStyle: 'butt',\n                backgroundColor: 'white',\n                fill: false,\n                data: threshold.data,\n                pointRadius: 0,\n                borderDash: threshold.dashLine ? [6, 3] : undefined,\n                tension: 0,\n                stepped: threshold.stepped,\n                order: 1,\n            });\n        });\n        return datasets;\n    };\n\n    render() {\n        return (\n            <Host style={{ height: '100%', width: '100%' }}>\n                <section class={`min-w-100 ${heightVariants[this.height]}`}>\n                    <canvas ref={(el) => (this.canvasEl = el)} />\n                </section>\n            </Host>\n        );\n    }\n}\n"],"version":3}