{"version":3,"file":"atui-accordion.entry.cjs.js","sources":["src/components/atui-accordion/atui-accordion.tsx"],"sourcesContent":["import { Prop, Element, Method, h, Host, Component } from '@stencil/core';\n\nexport interface AccordionItem {\n    item_id: string;\n    label?: string;\n    content?: string;\n}\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot - Content is placed within the accordion wrapper. Used for placing atui-accordion-items if not using items prop.\n */\n\n/**\n * ### ```interface AccordionItem```\n * ```\n * item_id: string;\n * label: string;\n * content: string;\n * ```\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot - Content is placed within the accordion wrapper. Used for placing atui-accordion-items if not using items prop.\n */\n@Component({\n    tag: 'atui-accordion',\n    shadow: false,\n})\nexport class AtuiAccordionComponent {\n    @Element() el: HTMLElement;\n\n    /**\n     * Used to create accordion items.\n     */\n    @Prop() items: AccordionItem[] = [];\n\n    /**\n     * If set, all child accordions will be open by default.\n     */\n    @Prop() default_open: boolean = false;\n\n    accordionItems: HTMLAtuiAccordionItemElement[] = [];\n\n    async componentDidLoad() {\n        this.accordionItems = Array.from(\n            this.el.querySelectorAll('atui-accordion-item'),\n        );\n        if (this.default_open) {\n            await this.openAll();\n        }\n    }\n\n    /**\n     * Toggles the open state of a specific accordion item\n     * @param value Id of element to be toggled\n     */\n    @Method()\n    async toggleById(value: string): Promise<void> {\n        this.accordionItems.forEach((item) => {\n            if (item.item_id === value) {\n                if (item.open) {\n                    item.closeAccordion();\n                } else {\n                    item.openAccordion();\n                }\n            }\n        });\n    }\n\n    /**\n     * Opens all accordion items\n     */\n    @Method()\n    async openAll(): Promise<void> {\n        this.accordionItems.forEach((item) => {\n            item.openAccordion();\n        });\n    }\n\n    /**\n     * Closes all accordion items.\n     */\n    @Method()\n    async closeAll(): Promise<void> {\n        this.accordionItems.forEach((item) => {\n            item.closeAccordion();\n        });\n    }\n\n    /**\n     * Toggles all accordion item's open state.\n     */\n    @Method()\n    async toggleAll(): Promise<void> {\n        this.accordionItems.forEach((item) => {\n            if (item.open) {\n                item.closeAccordion();\n            } else {\n                item.openAccordion();\n            }\n        });\n    }\n\n    private accordionId = `accordion-${Math.random().toString(36).substring(2, 11)}`;\n\n    render() {\n        return (\n            <Host class=\"flex flex-col gap-2\">\n                <slot></slot>\n                {this.items &&\n                    this.items.map((item) => {\n                        return (\n                            <atui-accordion-item\n                                item_id={`${this.accordionId}-${item.item_id}`}\n                                label={item.label}\n                                content={item.content}\n                            />\n                        );\n                    })}\n            </Host>\n        );\n    }\n}\n"],"names":["h","Host"],"mappings":";;;;MA+Ba,sBAAsB,GAAA,MAAA;AAJnC,IAAA,WAAA,CAAA,OAAA,EAAA;;AAOI;;AAEG;AACK,QAAA,IAAK,CAAA,KAAA,GAAoB,EAAE;AAEnC;;AAEG;AACK,QAAA,IAAY,CAAA,YAAA,GAAY,KAAK;AAErC,QAAA,IAAc,CAAA,cAAA,GAAmC,EAAE;QA8D3C,IAAA,CAAA,WAAW,GAAG,CAAA,UAAA,EAAa,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA,CAAE;AAmBnF;AA/EG,IAAA,MAAM,gBAAgB,GAAA;AAClB,QAAA,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,IAAI,CAC5B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAClD;AACD,QAAA,IAAI,IAAI,CAAC,YAAY,EAAE;AACnB,YAAA,MAAM,IAAI,CAAC,OAAO,EAAE;;;AAI5B;;;AAGG;IAEH,MAAM,UAAU,CAAC,KAAa,EAAA;QAC1B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;AACjC,YAAA,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;AACxB,gBAAA,IAAI,IAAI,CAAC,IAAI,EAAE;oBACX,IAAI,CAAC,cAAc,EAAE;;qBAClB;oBACH,IAAI,CAAC,aAAa,EAAE;;;AAGhC,SAAC,CAAC;;AAGN;;AAEG;AAEH,IAAA,MAAM,OAAO,GAAA;QACT,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;YACjC,IAAI,CAAC,aAAa,EAAE;AACxB,SAAC,CAAC;;AAGN;;AAEG;AAEH,IAAA,MAAM,QAAQ,GAAA;QACV,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;YACjC,IAAI,CAAC,cAAc,EAAE;AACzB,SAAC,CAAC;;AAGN;;AAEG;AAEH,IAAA,MAAM,SAAS,GAAA;QACX,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;AACjC,YAAA,IAAI,IAAI,CAAC,IAAI,EAAE;gBACX,IAAI,CAAC,cAAc,EAAE;;iBAClB;gBACH,IAAI,CAAC,aAAa,EAAE;;AAE5B,SAAC,CAAC;;IAKN,MAAM,GAAA;AACF,QAAA,QACIA,OAAC,CAAAC,UAAI,EAAC,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,qBAAqB,EAAA,EAC7BD,OAAa,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,EACZ,IAAI,CAAC,KAAK;YACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AACpB,gBAAA,QACIA,OACI,CAAA,qBAAA,EAAA,EAAA,OAAO,EAAE,CAAA,EAAG,IAAI,CAAC,WAAW,CAAA,CAAA,EAAI,IAAI,CAAC,OAAO,CAAE,CAAA,EAC9C,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,OAAO,EACvB,CAAA;aAET,CAAC,CACH;;;;;;;"}