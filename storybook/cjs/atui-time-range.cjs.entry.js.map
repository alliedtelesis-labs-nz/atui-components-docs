{"file":"atui-time-range.entry.cjs.js","mappings":"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","names":["TimeUnit","fetchTranslations","moment","TimeDateUtil","MIN_DATE","Duration","TimeRangeDisplay","h","Host"],"sources":["src/models/atui-time-range.models.ts","src/components/atui-time-range/atui-time-range.tsx"],"sourcesContent":["import { TimeUnit, TimeWithUnit } from '../types/time';\nimport { DateRangeStrings, TimeRangeDisplay } from '../types/date';\n\nexport type TimePresets =\n    | {\n          unit: TimeUnit.MINUTES;\n          value: 5;\n      }\n    | {\n          unit: TimeUnit.MINUTES;\n          value: 30;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 1;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 6;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 12;\n      }\n    | {\n          unit: TimeUnit.HOURS;\n          value: 24;\n      }\n    | {\n          unit: TimeUnit.DAYS;\n          value: 7;\n      }\n    | {\n          unit: TimeUnit.MONTHS;\n          value: 1;\n      }\n    | {\n          unit: TimeUnit.MONTHS;\n          value: 6;\n      }\n    | {\n          unit: TimeUnit.YEARS;\n          value: 1;\n      }\n    | {\n          unit: TimeUnit.YEARS;\n          value: 5;\n      };\n\nexport enum AbreviatedTimeUnits {\n    SECONDS = 's',\n    MINUTES = 'min',\n    HOURS = 'hr',\n    DAYS = 'd',\n    WEEKS = 'w',\n    MONTHS = 'm',\n    YEARS = 'yr',\n}\n\nexport enum FullTimeUnits {\n    SECONDS = 'SECONDS',\n    MINUTES = 'MINUTES',\n    HOURS = 'HOURS',\n    DAYS = 'DAYS',\n    WEEKS = 'WEEKS',\n    MONTHS = 'MONTHS',\n    YEARS = 'YEARS',\n}\n\n/**\n * @deprecated please use onChange to receive SelectedTimeRangeExtended event\n */\nexport interface SelectedTimeRange {\n    selected: TimeWithUnit | TimeRangeDisplay.CUSTOM;\n    custom?: DateRangeStrings;\n}\n\ntype SelectedAllTimeRange = {\n    selected: TimeRangeDisplay.ALL;\n    custom?: undefined;\n};\n\nexport type SelectedTimeRangeExtended =\n    | SelectedTimeRange\n    | SelectedAllTimeRange;\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Host,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport {\n    AbreviatedTimeUnits,\n    FullTimeUnits,\n    SelectedTimeRangeExtended,\n    TimePresets,\n} from '../../models/atui-time-range.models';\nimport {\n    DateRange,\n    DateRangeStrings,\n    Duration,\n    MIN_DATE,\n    TimeRangeDisplay,\n    TimeUnit,\n    TimeWithUnit,\n} from '../../types';\nimport { TimeDateUtil } from '../../utils/time-date.util';\nimport moment from 'moment';\nimport { fetchTranslations } from '../../utils/translation';\n\n/**\n * @category Form Controls\n * @description A time range component for selecting time periods.\n */\n\n@Component({\n    tag: 'atui-time-range',\n    shadow: false,\n})\nexport class AtuiTimeRangeComponent {\n    /**\n     * Selected time range.\n     */\n    @Prop()\n    selected_time_range: SelectedTimeRangeExtended = {\n        selected: {\n            unit: TimeUnit.HOURS,\n            value: 1,\n        },\n    };\n\n    /**\n     * Lower limit of the time range.\n     */\n    @Prop()\n    range_limit = 7;\n\n    /**\n     * Define the presets for the relative time ranges.\n     */\n    @Prop()\n    presets: TimePresets[];\n\n    /**\n     * Enable relative time selection.\n     */\n    @Prop()\n    enable_relative_time = true;\n\n    /**\n     * Custom error message to show when an invalid time is inputted.\n     */\n    @Prop()\n    custom_error_message = null;\n\n    /**\n     * Enable all time selection.\n     */\n    @Prop()\n    show_all_time = false;\n\n    /**\n     * Enable range limit setting. If set to false, use Jan 1, 1985 as the lower limit of time range, ignoring\n     * the value of range limit.\n     */\n    @Prop()\n    enable_range_limit = true;\n\n    @State() today: Date;\n    @State() lowerLimit;\n    @State() defaultFromDate;\n    @State() translations: any;\n    @State() relativeTimeMenuEl;\n    @State() absoluteTimeMenuEl;\n    @Element() el;\n\n    units = [\n        TimeUnit.MINUTES,\n        TimeUnit.HOURS,\n        TimeUnit.DAYS,\n        TimeUnit.WEEKS,\n        TimeUnit.MONTHS,\n        TimeUnit.YEARS,\n    ];\n    minSeconds = 300;\n\n    async componentWillLoad(): Promise<void> {\n        this.translations = await fetchTranslations(this.el);\n        this.today = new Date();\n    }\n\n    componentWillRender() {\n        this.lowerLimit = this.enable_range_limit\n            ? moment().subtract(this.range_limit, 'day').toDate()\n            : TimeDateUtil.floorDateByTimeUnit(MIN_DATE, Duration.HOURS);\n        this.defaultFromDate = moment(this.today).subtract(1, 'hours').toDate();\n    }\n\n    getLongUnitDisplay(time: SelectedTimeRangeExtended): string {\n        if (time.custom || !time.selected) {\n            return;\n        }\n        return FullTimeUnits[time.selected['unit']];\n    }\n\n    getRelativeDate(time: SelectedTimeRangeExtended): DateRange {\n        if (time.custom || !time.selected) {\n            return;\n        }\n        return TimeDateUtil.getRelativeDateRange(time.selected as TimeWithUnit);\n    }\n\n    getCustomStartAndEndDate(selectedTime: SelectedTimeRangeExtended): {\n        fromDate: Date;\n        toDate: Date;\n    } {\n        if (!selectedTime.custom) {\n            return;\n        }\n\n        const { from, to } = selectedTime.custom;\n        const fromDate = moment(from).toDate();\n        const toDate = moment(to).toDate();\n        return { fromDate, toDate };\n    }\n\n    getShortUnitDisplay(time: TimeWithUnit): string {\n        return AbreviatedTimeUnits[time.unit];\n    }\n\n    /**\n     * Emits an event containing the selected time range when it changes\n     */\n    @Event()\n    atuiChange: EventEmitter<SelectedTimeRangeExtended>;\n\n    onChangeCustomTime(customTime: DateRangeStrings): void {\n        this.selected_time_range = {\n            selected: TimeRangeDisplay.CUSTOM,\n            custom: customTime,\n        };\n\n        this.atuiChange.emit({ ...this.selected_time_range });\n    }\n\n    onChangeRelativeTime(time: TimeWithUnit | TimeRangeDisplay.ALL): void {\n        this.selected_time_range = {\n            selected: time,\n        };\n\n        this.atuiChange.emit({ ...this.selected_time_range });\n    }\n\n    get buttonGroupOptions() {\n        const output = [];\n        if (this.selected_time_range.selected === TimeRangeDisplay.ALL) {\n            output.push({\n                value: (\n                    <div class=\"flex items-center gap-4 font-normal text-dark\">\n                        <span class=\"font-medium\">\n                            {this.translations.ATUI.TIME.ALL_TIME_LABEL}\n                        </span>\n                    </div>\n                ),\n            });\n        } else if (this.selected_time_range.custom) {\n            output.push({\n                value: [\n                    <div class=\"flex items-center gap-4 font-normal text-dark\">\n                        <span>\n                            {this.getCustomStartAndEndDate(\n                                this.selected_time_range,\n                            )?.fromDate.toLocaleString()}\n                        </span>\n                        <span class=\"icon-md material-icons text-light\">\n                            arrow_forward\n                        </span>\n                        <span>\n                            {this.selected_time_range.custom.lockEndDateToNow\n                                ? 'NOW'\n                                : this.getCustomStartAndEndDate(\n                                      this.selected_time_range,\n                                  )?.toDate.toLocaleString()}\n                        </span>\n                    </div>,\n                ],\n            });\n        } else {\n            output.push({\n                value: (\n                    <div class=\"flex items-center gap-4 font-normal text-dark\">\n                        <span class=\"font-medium\">\n                            {this.translations.ATUI.TIME.LAST}\n                            {` `}\n                            {this.selected_time_range.selected['value']}\n                            {` `}\n                            {\n                                this.translations.ATUI.TIME[\n                                    this.getLongUnitDisplay(\n                                        this.selected_time_range,\n                                    )\n                                ]\n                            }{' '}\n                            :\n                        </span>\n                        <span>\n                            {this.getRelativeDate(\n                                this.selected_time_range,\n                            ).startDate.toLocaleString()}\n                        </span>\n                        <span class=\"icon-md material-icons text-light\">\n                            arrow_forward\n                        </span>\n                        <span>NOW</span>\n                    </div>\n                ),\n            });\n        }\n        output.push({\n            value: (\n                <div class=\"flex items-center\">\n                    <span class=\"icon-md material-icons text-light\">\n                        date_range\n                    </span>\n                </div>\n            ),\n        });\n        return output;\n    }\n\n    get predefinedTimeRanges() {\n        const output = [];\n        this.presets.forEach((timerange) => {\n            output.push({\n                value: (\n                    <span>\n                        {timerange.value}\n                        {this.getShortUnitDisplay(timerange)}\n                    </span>\n                ),\n            });\n        });\n        output.push({\n            value: (\n                <div class=\"flex items-center\">\n                    <span class=\"material-icons text-body text-light\">\n                        date_range\n                    </span>\n                </div>\n            ),\n        });\n        return output;\n    }\n\n    render() {\n        return (\n            <Host class=\"relative flex justify-center gap-8\">\n                {this.enable_relative_time && (\n                    <atui-button-group\n                        options={this.buttonGroupOptions}\n                        onAtuiIndexChange={(event) =>\n                            (event.detail === 0 &&\n                                this.relativeTimeMenuEl.focus()) ||\n                            (event.detail === 1 &&\n                                this.absoluteTimeMenuEl.focus())\n                        }\n                    />\n                )}\n                {!this.enable_relative_time && (\n                    <atui-button-group\n                        options={this.predefinedTimeRanges}\n                        onAtuiIndexChange={(event) => {\n                            if (event.detail < this.presets.length) {\n                                this.onChangeRelativeTime(\n                                    this.presets[event.detail],\n                                );\n                            } else if (\n                                event.detail ===\n                                this.predefinedTimeRanges.length - 1\n                            ) {\n                                this.absoluteTimeMenuEl.focus();\n                            }\n                        }}\n                    />\n                )}\n                <div\n                    ref={(el) => (this.relativeTimeMenuEl = el)}\n                    class=\"absolute top-[42px] z-10 h-0 overflow-hidden bg-white focus-within:h-fit focus-within:overflow-visible focus:h-fit\"\n                    tabindex={0}\n                    onChange={(event) => event.stopPropagation()}\n                >\n                    <atui-time-with-unit\n                        units={this.units}\n                        common_options={this.presets}\n                        min_date={this.lowerLimit}\n                        min_seconds={this.minSeconds}\n                        initial_selected_time={\n                            this.selected_time_range.selected ===\n                            TimeRangeDisplay.CUSTOM\n                                ? TimeRangeDisplay.ALL\n                                : this.selected_time_range.selected\n                        }\n                        custom_error_message={this.custom_error_message}\n                        show_all_time={this.show_all_time}\n                        onAtuiSubmit={(event) =>\n                            this.onChangeRelativeTime(\n                                (event as CustomEvent).detail,\n                            )\n                        }\n                        onAtuiCancel={() => {\n                            this.relativeTimeMenuEl.focus();\n                            this.relativeTimeMenuEl.blur();\n                        }}\n                    />\n                </div>\n                <div\n                    ref={(el) => (this.absoluteTimeMenuEl = el)}\n                    class=\"absolute top-[42px] z-10 h-0 overflow-hidden bg-white focus-within:h-fit focus-within:overflow-visible focus:h-fit\"\n                    tabindex={0}\n                    onChange={(event) => event.stopPropagation()}\n                >\n                    <atui-custom-time-range\n                        min_date={this.lowerLimit}\n                        default_to_date={this.today}\n                        default_from_date={this.defaultFromDate}\n                        from_date_value={\n                            this.getCustomStartAndEndDate(\n                                this.selected_time_range,\n                            )?.fromDate\n                        }\n                        to_date_value={\n                            this.getCustomStartAndEndDate(\n                                this.selected_time_range,\n                            )?.toDate\n                        }\n                        lock_end_date_to_now={\n                            this.selected_time_range.custom?.lockEndDateToNow\n                        }\n                        onAtuiSubmit={(event) =>\n                            this.onChangeCustomTime(\n                                (event as CustomEvent).detail,\n                            )\n                        }\n                        onAtuiCancel={() => {\n                            this.absoluteTimeMenuEl.focus();\n                            this.absoluteTimeMenuEl.blur();\n                        }}\n                    />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"version":3}