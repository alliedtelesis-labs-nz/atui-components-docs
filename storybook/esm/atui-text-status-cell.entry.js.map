{"version":3,"file":"atui-text-status-cell.entry.js","sources":["src/components/table-components/cell-components/atui-text-status-cell/atui-text-status-cell.tsx"],"sourcesContent":["import { Component, h, State, Element, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ITooltipCell } from '../../../../types';\nimport { BadgeType } from '../../../atui-badge/atui-badge';\n\nexport interface TextStatusCellData {\n    value: 'active' | 'warning' | 'error' | 'default' | string;\n    tooltip?: string;\n}\n\nexport interface ITextStatusCellParams extends ITooltipCell {\n    mapValueToText?: (value: any) => string;\n    mapValueToStatus?: (value: any) => string | 'default';\n    showSimpleText?: boolean;\n    checkShouldShowSimpleText?: (value: any) => boolean; // can either show status span or plain text\n\n    // This is a function where you want to transform a text into something\n    // I have a situation where the value is a number, and i need to compare\n    // that number first to something, apply some things and now transform it\n    // into a certain string. e.g value: 50, textTransformed to '50ms'\n    textTransform?: (params: ICellRendererParams, value: string) => string;\n    useIconHeaderTooltip?: boolean;\n}\n\nexport interface TextStatusValueParam {\n    status: string;\n}\n\ninterface InitParams extends ITextStatusCellParams, ICellRendererParams {}\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with a status.\n */\n\n@Component({\n    tag: 'atui-text-status-cell',\n    shadow: false,\n})\nexport class AtuiTextStatusCellComponent implements ICellRendererComp {\n    @Element() el;\n    @State() params: InitParams;\n    @State() text: string;\n    @State() type: BadgeType = 'default';\n    @State() showSimpleText = false;\n\n    init(params: InitParams) {\n        const { value } = params;\n\n        if (!value) return;\n\n        this.setCellData(params, value);\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(_: InitParams): boolean {\n        return true;\n    }\n\n    private setCellData(params: InitParams, value: string) {\n        this.params = params;\n        const badgeType = this.mapValueToBadgeType(params, value as BadgeType);\n\n        this.text = params.mapValueToText\n            ? params.mapValueToText(value)\n            : value;\n        if (params.checkShouldShowSimpleText)\n            this.showSimpleText = params.checkShouldShowSimpleText(value);\n\n        this.type = badgeType as BadgeType;\n    }\n\n    private mapValueToBadgeType(params: InitParams, value: BadgeType) {\n        const badgeType =\n            params.mapValueToStatus && params.mapValueToStatus(value);\n        return badgeType || 'default';\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                {this.showSimpleText && this.params && (\n                    <span class=\"truncate text-sm\">{this.text}</span>\n                )}\n                {!this.showSimpleText &&\n                    this.params &&\n                    (this.params.generateTooltip ? (\n                        <atui-tooltip position=\"right\">\n                            <atui-badge\n                                slot=\"tooltip-trigger\"\n                                type={this.type}\n                                label={this.text}\n                            />\n                            <span\n                                class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                            >\n                                {this.params.generateTooltip(this.params)}\n                            </span>\n                        </atui-tooltip>\n                    ) : (\n                        <atui-badge\n                            type={this.type}\n                            label={this.text}\n                        />\n                    ))}\n            </Host>\n        );\n    }\n}\n"],"names":[],"mappings":";;MAsCa,2BAA2B,GAAA,MAAA;AAJxC,IAAA,WAAA,CAAA,OAAA,EAAA;;AAQa,QAAA,IAAI,CAAA,IAAA,GAAc,SAAS;AAC3B,QAAA,IAAc,CAAA,cAAA,GAAG,KAAK;AAmElC;AAjEG,IAAA,IAAI,CAAC,MAAkB,EAAA;AACnB,QAAA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM;AAExB,QAAA,IAAI,CAAC,KAAK;YAAE;AAEZ,QAAA,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC;;IAGnC,MAAM,GAAA;QACF,OAAO,IAAI,CAAC,EAAE;;AAGlB,IAAA,OAAO,CAAC,CAAa,EAAA;AACjB,QAAA,OAAO,IAAI;;IAGP,WAAW,CAAC,MAAkB,EAAE,KAAa,EAAA;AACjD,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;QACpB,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,KAAkB,CAAC;AAEtE,QAAA,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;AACf,cAAE,MAAM,CAAC,cAAc,CAAC,KAAK;cAC3B,KAAK;QACX,IAAI,MAAM,CAAC,yBAAyB;YAChC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,yBAAyB,CAAC,KAAK,CAAC;AAEjE,QAAA,IAAI,CAAC,IAAI,GAAG,SAAsB;;IAG9B,mBAAmB,CAAC,MAAkB,EAAE,KAAgB,EAAA;AAC5D,QAAA,MAAM,SAAS,GACX,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC;QAC7D,OAAO,SAAS,IAAI,SAAS;;IAGjC,MAAM,GAAA;;QACF,QACI,CAAC,CAAA,IAAI,EAAC,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,0BAA0B,EAAA,EACjC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,MAAM,KAC/B,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,kBAAkB,EAAA,EAAE,IAAI,CAAC,IAAI,CAAQ,CACpD,EACA,CAAC,IAAI,CAAC,cAAc;AACjB,YAAA,IAAI,CAAC,MAAM;aACV,IAAI,CAAC,MAAM,CAAC,eAAe,IACxB,CAAA,CAAA,cAAA,EAAA,EAAc,QAAQ,EAAC,OAAO,EAAA,EAC1B,CAAA,CAAA,YAAA,EAAA,EACI,IAAI,EAAC,iBAAiB,EACtB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,IAAI,EAClB,CAAA,EACF,CACI,CAAA,MAAA,EAAA,EAAA,KAAK,EAAE,CAAA,EAAG,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,CAAC,YAAY,MAAA,IAAA,IAAA,EAAA,KAAA,MAAA,GAAA,EAAA,GAAI,EAAE,CAAiB,eAAA,CAAA,EAAA,EAExD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CACtC,CACI,KAEf,CACI,CAAA,YAAA,EAAA,EAAA,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,IAAI,GAClB,CACL,CAAC,CACH;;;;;;;"}