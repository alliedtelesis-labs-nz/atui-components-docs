{"version":3,"file":"at-prompt-input.at-prompt-thread.entry.js","sources":["src/components/prompt-components/at-prompt-input/at-prompt-input.tsx","src/components/prompt-components/at-prompt-thread/at-prompt-thread.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { classlist } from '../../../utils/classlist';\n\nconst promptInputContainerVariants = classlist(\n    'relative flex flex-col items-end gap-2 rounded-lg border border-solid p-8 transition-[background-color,color,box-shadow] duration-300 ease-in-out',\n    {\n        variants: {\n            invalid: {\n                true: 'border-destructive focus-within:border-destructive focus-within:ring-destructive/30 focus-within:ring-2',\n                false: 'border-med focus-within:border-active-foreground focus-within:ring-active-foreground/30 focus-within:ring-2',\n            },\n            disabled: {\n                true: 'bg-surface-1 pointer-events-none',\n                false: 'bg-white',\n            },\n        },\n        compoundVariants: [\n            {\n                disabled: true,\n                class: 'focus-within:ring-0',\n            },\n        ],\n        defaultVariants: {\n            invalid: false,\n            disabled: false,\n        },\n    },\n);\n\nconst promptInputVariants = classlist(\n    'text-body text-dark w-full resize-none border-none bg-transparent break-words whitespace-pre-wrap shadow-none outline-none focus-visible:ring-0 focus-visible:ring-offset-0',\n    {\n        variants: {\n            invalid: {\n                true: 'border-destructive-foreground',\n                false: 'border-med',\n            },\n            disabled: {\n                true: 'bg-surface-1 pointer-events-none',\n                false: 'bg-disableD-LIGHT',\n            },\n        },\n        defaultVariants: {\n            invalid: false,\n            disabled: false,\n        },\n    },\n);\n\n/**\n * @category Prompt\n * @description A specialized input component optimized for AI prompt-components interfaces. Supports both single-line and multi-line variants with auto-resize, character counting, send/stop functionality, and enhanced UX for conversational interfaces.\n * @slot label -  Custom label content (alternative to using the label prop)\n * @slot actions-left - Custom content displayed at bottom left of input\n * @slot actions-right - Custom content displayed at bottom right of input\n * @slot footer - Custom content displayed below input\n */\n@Component({\n    tag: 'at-prompt-input',\n    shadow: false,\n})\nexport class AtPromptInputComponent {\n    /**\n     * Label above the input container\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * Short description or validation hint if required\n     */\n    @Prop()\n    hint_text: string;\n\n    /**\n     * Optional info icon with detailed tooltip description\n     */\n    @Prop()\n    info_text: string;\n\n    /**\n     * Error text displayed when invalid is set via max length\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Placeholder text to be shown when no input is passed\n     */\n    @Prop()\n    placeholder: string = 'Enter your message...';\n\n    /**\n     * Maximum height in pixels for auto-resize\n     */\n    @Prop()\n    max_height: number = 240;\n\n    /**\n     * Maximum character length with counter display\n     */\n    @Prop()\n    max_length: number = 2000;\n\n    /**\n     * Controls whether the component is in progress (shows stop button) or ready to send (shows send button)\n     */\n    @Prop()\n    in_progress: boolean = false;\n\n    /**\n     * The value of the input\n     */\n    @Prop({ mutable: true })\n    value: string = '';\n\n    /**\n     * Disable input interactions and apply visual indication\n     */\n    @Prop()\n    disabled?: boolean = false;\n\n    @State() textareaEl: HTMLTextAreaElement;\n    @State() translations: any;\n    @State() invalid: boolean = false;\n    @Element() el: HTMLElement;\n\n    /**\n     * Emits when the value changes\n     */\n    @Event()\n    atChange: EventEmitter<string>;\n\n    /**\n     * Emits when a message should be sent\n     */\n    @Event()\n    atSubmit: EventEmitter<string>;\n\n    /**\n     * Emits when the stop button is clicked\n     */\n    @Event()\n    atStop: EventEmitter<void>;\n\n    /**\n     * Emits when the input receives focus\n     */\n    @Event()\n    atFocus: EventEmitter<void>;\n\n    /**\n     * @slot label - Custom label content (alternative to using the label prop)\n     */\n\n    private inputId = `prompt-input-${Math.random().toString(36).substring(2, 11)}`;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    private focusInput(): void {\n        if (this.textareaEl) {\n            this.textareaEl.focus();\n            this.atFocus.emit();\n        }\n    }\n\n    handleInput(event: Event): void {\n        event.stopPropagation();\n        this.value = (event.target as HTMLTextAreaElement).value;\n\n        if (this.max_length && this.value.length > this.max_length) {\n            this.invalid = true;\n        } else {\n            this.invalid = false;\n        }\n\n        this.atChange.emit(this.value);\n        this.autoResize();\n    }\n\n    private autoResize(): void {\n        if (this.textareaEl) {\n            this.textareaEl.style.height = 'auto';\n            const scrollHeight = this.textareaEl.scrollHeight;\n            const newHeight = Math.max(\n                44,\n                Math.min(scrollHeight, this.max_height),\n            );\n            this.textareaEl.style.height = `${newHeight}px`;\n        }\n    }\n\n    componentDidLoad(): void {\n        setTimeout(() => {\n            this.autoResize();\n        }, 0);\n    }\n\n    handleKeyDown(event: KeyboardEvent): void {\n        if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n            this.sendMessage();\n        }\n    }\n\n    sendMessage(): void {\n        if (this.in_progress) {\n            this.atStop.emit();\n        } else if (this.value && this.value.trim() !== '' && !this.invalid) {\n            this.atSubmit.emit(this.value.trim());\n            this.value = '';\n            this.invalid = false; // Reset invalid state when message is sent\n            setTimeout(() => {\n                this.autoResize();\n                this.focusInput();\n            }, 0);\n        }\n    }\n\n    render() {\n        const canSend =\n            !this.disabled &&\n            !this.invalid &&\n            (this.in_progress || (this.value && this.value.trim() !== ''));\n\n        const containerClass = promptInputContainerVariants({\n            invalid: this.invalid,\n            disabled: this.disabled,\n        });\n\n        const inputClass = promptInputVariants({\n            invalid: this.invalid,\n            disabled: this.disabled,\n        });\n        return (\n            <Host\n                tabindex=\"-1\"\n                id={this.inputId + '-container'}\n                class=\"w-full px-16\"\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.info_text) && (\n                        <at-form-label\n                            label={this.label}\n                            for={this.inputId}\n                            info_text={this.info_text}\n                            data-name=\"prompt-input-label\"\n                        />\n                    )}\n\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"prompt-input-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <div class={containerClass}>\n                    <textarea\n                        class={inputClass}\n                        disabled={this.disabled}\n                        id={this.inputId}\n                        placeholder={this.placeholder}\n                        onInput={(event) => this.handleInput(event)}\n                        onKeyDown={(event) => this.handleKeyDown(event)}\n                        value={this.value}\n                        ref={(el) => (this.textareaEl = el)}\n                        style={{\n                            minHeight: '44px',\n                            maxHeight: this.max_height + 'px',\n                            overflow: 'hidden',\n                        }}\n                        data-name=\"prompt-input\"\n                    />\n\n                    <div class=\"flex w-full items-center justify-between gap-1\">\n                        <div class=\"flex items-center gap-4\">\n                            <slot name=\"actions-left\" />\n                        </div>\n\n                        <div class=\"flex items-center gap-4 self-end\">\n                            <slot name=\"actions-right\" />\n                            <at-button\n                                class=\"rounded-lg\"\n                                size=\"sm\"\n                                type=\"secondary\"\n                                icon={\n                                    this.in_progress ? 'stop' : 'arrow_upward'\n                                }\n                                disabled={!canSend}\n                                onClick={() => this.sendMessage()}\n                                onKeyDown={(event) => {\n                                    if (\n                                        event.key === 'Enter' ||\n                                        event.key === ' '\n                                    ) {\n                                        this.sendMessage();\n                                    }\n                                }}\n                                data-name=\"prompt-send-button\"\n                            />\n                        </div>\n                    </div>\n                </div>\n                <slot name=\"footer\" />\n                {this.invalid && (\n                    <span\n                        class=\"text-error-dark text-xs\"\n                        data-name=\"error-text\"\n                    >\n                        {this.error_text\n                            ? this.error_text\n                            : this.translations.ATUI.PROMPT.ERROR_MESSAGE}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n","import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Listen,\n    Method,\n} from '@stencil/core';\nimport type { PromptMessage } from '../../../types';\nimport { VoteStatus } from '../at-prompt-message/at-prompt-message';\n\n/**\n * @category Prompt\n * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.\n * @slot thread-empty-state - Content is placed within the empty state wrapper. Used for placing custom empty state content.\n * @slot thread-messages - Content is placed within the messages wrapper. Used for placing custom messages content.\n */\n@Component({\n    tag: 'at-prompt-thread',\n    shadow: false,\n})\nexport class AtPromptThread {\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop() messages: PromptMessage[] = [];\n\n    /**\n     * Shows a loading indicator for incoming messages\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Automatically scroll to the bottom when new messages are added\n     */\n    @Prop() auto_scroll: boolean = true;\n\n    /**\n     * Display name for chatbot/assistant messages\n     */\n    @Prop() chatbot_title: string = 'Assistant';\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    /**\n     * @slot messages - Custom message content (alternative to using the messages prop)\n     */\n\n    private scrollContainer: HTMLElement;\n\n    componentDidUpdate() {\n        if (this.auto_scroll && this.scrollContainer) {\n            this.scrollToBottom();\n        }\n    }\n\n    /**\n     * Scrolls the thread to the bottom with smooth animation\n     */\n    @Method()\n    async scrollToBottom(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            requestAnimationFrame(() => {\n                if (this.scrollContainer) {\n                    this.scrollContainer.scrollTo({\n                        top: this.scrollContainer.scrollHeight,\n                        behavior: 'smooth',\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Scrolls the last user message to the top of the viewport\n     */\n    @Method()\n    async scrollLastMessageToTop(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            requestAnimationFrame(() => {\n                if (!this.scrollContainer) {\n                    resolve();\n                    return;\n                }\n\n                const userMessages =\n                    this.scrollContainer.querySelectorAll('[data-role=\"user\"]');\n                if (!userMessages.length) {\n                    resolve();\n                    return;\n                }\n\n                const lastUserMessage = userMessages[\n                    userMessages.length - 1\n                ] as HTMLElement;\n                lastUserMessage.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start',\n                });\n                resolve();\n            });\n        });\n    }\n\n    @Listen('atuiVote')\n    handleVote(event: CustomEvent<{ messageId: string; score: number }>) {\n        event.stopPropagation();\n\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                vote_status: event.detail.score,\n            };\n            this.messages = updatedMessages;\n\n            this.atMessageVote.emit(event.detail);\n        }\n    }\n\n    @Listen('atuiCopy')\n    handleMessageCopy(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atMessageCopy.emit({\n                messageId: this.messages[messageIndex].id,\n                content: event.detail,\n            });\n        }\n    }\n\n    @Listen('atuiRetry')\n    handleMessageRetry(event: CustomEvent<void>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atMessageRetry.emit({\n                messageId: this.messages[messageIndex].id,\n            });\n        }\n    }\n\n    @Listen('atuiEdit')\n    handleMessageEdit(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atMessageEdit.emit({\n                messageId: this.messages[messageIndex].id,\n                content: event.detail,\n            });\n        }\n    }\n\n    private getMessageIndexFromEvent(event: CustomEvent): number {\n        const target = event.target as HTMLElement;\n        const messageContainer = target.closest(\n            '[data-message-index]',\n        ) as HTMLElement;\n        return messageContainer\n            ? parseInt(messageContainer.dataset.messageIndex || '-1', 10)\n            : -1;\n    }\n\n    private renderLoadingIndicator() {\n        if (!this.loading) return null;\n\n        return (\n            <div\n                class=\"flex flex-col gap-16\"\n                data-name=\"loading-container\"\n            >\n                <at-prompt-message\n                    role=\"assistant\"\n                    content=\"Typing...\"\n                    name={this.chatbot_title}\n                    loading={true}\n                    data-name=\"loading-message\"\n                />\n            </div>\n        );\n    }\n\n    private renderMessage(message: PromptMessage, index: number) {\n        const role = message.role === 'system' ? 'assistant' : message.role;\n        const name =\n            message.role === 'user'\n                ? message.name\n                : message.name || this.chatbot_title;\n\n        return (\n            <at-prompt-message\n                role={role}\n                content={message.content}\n                name={name}\n                loading={message.loading}\n                error={message.error}\n                error_message={message.error_message}\n                vote_status={message.vote_status || VoteStatus.None}\n                message_id={message.id}\n                enable_vote={this.enable_vote}\n                enable_copy={this.enable_copy}\n                enable_edit={this.enable_edit}\n                data-name={`message-${index}`}\n                data-message-index={index}\n            />\n        );\n    }\n\n    private renderMessages() {\n        return this.messages.map((message, index) =>\n            this.renderMessage(message, index),\n        );\n    }\n\n    render() {\n        const hasMessages = this.messages && this.messages.length > 0;\n\n        return (\n            <Host\n                class=\"block h-full\"\n                data-name=\"thread-container\"\n            >\n                <div\n                    class=\"flex h-full flex-col gap-16 overflow-y-auto scroll-smooth\"\n                    ref={(el) => (this.scrollContainer = el)}\n                    data-name=\"scroll-container\"\n                >\n                    {!hasMessages ? (\n                        <slot name=\"thread-empty-state\" />\n                    ) : (\n                        <div\n                            data-name=\"thread-messages-container\"\n                            class=\"flex flex-col gap-16\"\n                        >\n                            {this.renderMessages()}\n                            {this.renderLoadingIndicator()}\n                        </div>\n                    )}\n                    <slot name=\"thread-messages\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"],"names":[],"mappings":"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"}