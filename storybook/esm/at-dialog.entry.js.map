{"version":3,"file":"at-dialog.entry.js","sources":["src/components/at-dialog/at-dialog.scss?tag=at-dialog&encapsulation=scoped","src/components/at-dialog/at-dialog.tsx"],"sourcesContent":["@use '../../styles/shared/backdrop';\n\n:host {\n    display: contents;\n\n    dialog {\n        position: fixed;\n        inset: 0;\n        margin: auto;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        max-height: calc(100dvh - 48px);\n        overflow: hidden;\n        border: 0;\n        padding: 0;\n        background: transparent;\n        z-index: var(--token-z-index-modal);\n        transform-origin: center;\n        opacity: 0;\n        scale: 0.95;\n        box-shadow: var(--token-shadow-3);\n        transition:\n            translate 0.3s ease,\n            scale 0.3s ease,\n            opacity 0.3s ease,\n            visibility 0s linear 0.3s;\n        visibility: hidden;\n\n        &.backdrop {\n            display: flex;\n            max-height: calc(100dvh - 48px);\n        }\n\n        &[open] {\n            translate: 0 0;\n            scale: 1;\n            opacity: 1;\n            visibility: visible;\n            transition:\n                translate 0.3s ease,\n                scale 0.3s ease,\n                opacity 0.3s ease,\n                visibility 0s linear;\n\n            @starting-style {\n                opacity: 0;\n                scale: 1.15;\n            }\n        }\n\n        &:not([open]) {\n            scale: 0.95;\n            opacity: 0;\n            visibility: hidden;\n        }\n    }\n}\n","import {\n    Component,\n    Prop,\n    h,\n    Element,\n    Method,\n    State,\n    Event,\n    Host,\n    EventEmitter,\n    Listen,\n} from '@stencil/core';\n\n/**\n * @category Overlays\n * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.\n *\n * @Event - atuiDialogChange: Emitted when dialog is opened/closed.\n *\n * @slot - Display content within the dialog\n *\n */\n@Component({\n    tag: 'at-dialog',\n    styleUrl: 'at-dialog.scss',\n    scoped: true,\n})\nexport class AtDialogComponent {\n    @Element() el!: HTMLAtDialogElement;\n\n    /**\n     * Role of the dialog element. Can be either 'dialog' or 'alertdialog'\n     */\n    @Prop()\n    role: 'dialog' | 'alertdialog' = 'dialog';\n\n    /**\n     * Whether to show a backdrop behind the panel, prevents any interaction with background UI.\n     */\n    @Prop({ reflect: true })\n    backdrop: boolean = true;\n\n    /**\n     * Will close the dialog if clicked\n     */\n    @Prop({ reflect: true })\n    close_backdrop: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.\n     */\n    @Prop() trigger_id?: string;\n\n    /**\n     * Internal state to track if dialog is open\n     */\n    @State()\n    isOpen: boolean = false;\n\n    /**\n     * Emits an event when the dialog is toggled, with `event.detail` being true if the dialog is now open\n     */\n    @Event()\n    atuiDialogChange: EventEmitter;\n\n    private dialog: HTMLDialogElement;\n    private dialogWrapper: HTMLElement;\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the dialog modal between open and closed states\n     * @returns Promise that resolves when the dialog state is toggled\n     */\n    @Method()\n    async toggleDialog(): Promise<void> {\n        if (this.isOpen) {\n            await this.closeDialog();\n        } else {\n            await this.openDialog();\n        }\n    }\n\n    /**\n     * Opens the dialog modal\n     * @returns Promise that resolves when the dialog is opened\n     */\n    @Method()\n    async openDialog(): Promise<void> {\n        if (this.dialog && !this.isOpen) {\n            if (this.backdrop === true) {\n                this.dialog.showModal();\n            } else {\n                this.dialog.show();\n            }\n\n            this.isOpen = true;\n            this.atuiDialogChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Closes the dialog modal\n     * @returns Promise that resolves when the dialog is closed\n     */\n    @Method()\n    async closeDialog(): Promise<void> {\n        if (this.dialog && this.isOpen) {\n            this.dialog.close();\n            this.isOpen = false;\n            this.atuiDialogChange.emit(this.isOpen);\n            this.dialog.removeAttribute('open');\n        }\n    }\n\n    /**\n     * Getter method for the open state of the dialog\n     * @returns The current open state of the dialog\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.isOpen;\n    }\n\n    private handleDialogClose = () => {\n        if (this.isOpen) {\n            this.closeDialog();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isOpen) {\n            event.preventDefault();\n            this.closeDialog();\n        }\n    };\n\n    @Listen('mousedown', { target: 'document' })\n    offClickHandler(event: any) {\n        if (!this.close_backdrop || !this.dialog?.open) return;\n        if (!this.dialogWrapper?.contains(event.target)) {\n            this.handleDialogClose();\n        }\n    }\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-dialog=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-dialog: No elements found with data-dialog=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleDialog();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleDialog();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <Host data-open={this.isOpen}>\n                <dialog\n                    ref={(el) => (this.dialog = el)}\n                    data-name=\"dialog\"\n                    class={`${this.backdrop ? 'backdrop' : ''}`}\n                    role={this.role}\n                    aria-modal=\"true\"\n                    onClose={this.handleDialogClose}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    <div\n                        data-name=\"content\"\n                        ref={(el) => (this.dialogWrapper = el)}\n                    >\n                        <slot />\n                    </div>\n                </dialog>\n            </Host>\n        );\n    }\n}\n"],"names":[],"mappings":"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"}