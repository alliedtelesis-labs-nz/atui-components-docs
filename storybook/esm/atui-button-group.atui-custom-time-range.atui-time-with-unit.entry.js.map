{"version":3,"file":"atui-button-group.atui-custom-time-range.atui-time-with-unit.entry.js","sources":["src/components/atui-button-group/atui-button-group.tsx","src/components/atui-time-range/atui-custom-time-range/atui-custom-time-range.tsx","src/components/atui-time-range/atui-time-with-unit/atui-time-with-unit.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Host,\n    Element,\n} from '@stencil/core';\n\nexport interface ButtonGroupOption {\n    option_id: string;\n    label?: string;\n    icon?: string;\n    is_active?: string;\n    disabled?: boolean;\n    readonly?: boolean;\n}\n\n/**\n * @category Form Controls\n * @description A button group component that allows single or multiple selection from a set of toggle options. Provides a cohesive way to group related action buttons with shared styling and behavior.\n *\n * @slot - used to place your own atui-button-group-options if 'options' prop isn't set. Button changing logic will not apply.\n */\n@Component({\n    tag: 'atui-button-group',\n    shadow: false,\n})\nexport class AtuiButtonGroup {\n    /**\n     * Label for button group.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Optional info icon with detailed tooltip description.\n     *\n     * Displayed at right of label.\n     */\n    @Prop()\n    info_text?: string;\n\n    /**\n     * Hint for options.\n     */\n    @Prop()\n    hint_text?: string;\n\n    /**\n     * Error text for invalid choices.\n     */\n    @Prop()\n    error_text?: string;\n\n    /**\n     * List of options to be displayed on the button group.\n     */\n    @Prop()\n    options: ButtonGroupOption[] = [];\n\n    /**\n     * Sets the current active button\n     */\n    @Prop({ mutable: true })\n    value: string;\n\n    /**\n     * Disables the button group and prevents interaction\n     */\n    @Prop()\n    disabled?: boolean;\n\n    @Element() el: HTMLAtuiButtonGroupElement;\n    private buttonGroupId = `buttonGroup-${Math.random().toString(36).substring(2, 11)}`;\n\n    /**\n     * When the active button is changed, this will emit the 0-based index of the active button\n     */\n    @Event()\n    atuiIndexChange: EventEmitter<number>;\n\n    /**\n     * When the active button is changed, this will emit the text value of the active button\n     */\n    @Event()\n    atuiChange: EventEmitter<string>;\n\n    private buttonRefs: HTMLElement[] = [];\n\n    componentDidLoad() {\n        this.setInitialActiveButton();\n    }\n\n    handleChange(value: string, index: number): void {\n        this.value = value;\n        this.atuiChange.emit(value);\n        this.atuiIndexChange.emit(index);\n    }\n\n    private setInitialActiveButton() {\n        const activeOption = this.options.find(\n            (option) => option.option_id === this.value,\n        );\n        if (activeOption) {\n            this.value = activeOption.option_id;\n        } else if (this.options.length > 0) {\n            this.value = this.options[0].option_id;\n        }\n    }\n\n    render() {\n        return (\n            <Host\n                role=\"radiogroup\"\n                aria-labelledby={this.buttonGroupId}\n                class={'flex flex-col items-start'}\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.info_text) && (\n                        <atui-form-label\n                            id={this.buttonGroupId}\n                            label={this.label}\n                            info_text={this.info_text}\n                        />\n                    )}\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"button-group-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n                <div class=\"border-med relative rounded-lg border bg-white inset-shadow-xs\">\n                    <ul\n                        class=\"relative z-20 m-[3px] flex flex-row\"\n                        data-name=\"button-group-options\"\n                    >\n                        {this.renderOptions()}\n                        <slot />\n                    </ul>\n                </div>\n\n                {this.error_text && (\n                    <span\n                        class=\"text-error text-xs font-medium\"\n                        data-name=\"button-group-error-text\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n\n    renderOptions() {\n        return this.options.map((option, index) => (\n            <li\n                class={`relative z-10 mr-[-1px] ${this.disabled ? 'pointer-events-none' : ''}`}\n                ref={(el) => (this.buttonRefs[index] = el as HTMLElement)}\n            >\n                <atui-button-group-option\n                    option_id={option.option_id}\n                    label={option.label}\n                    is_active={this.value === option.option_id}\n                    disabled={option.disabled}\n                    onAtuiClick={() =>\n                        this.handleChange(option.option_id, index)\n                    }\n                    onKeyDown={(event) => {\n                        if (event.key === 'Enter' || event.key === ' ') {\n                            this.handleChange(option.option_id, index);\n                            event.preventDefault();\n                        }\n                    }}\n                />\n            </li>\n        ));\n    }\n}\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Watch,\n    EventEmitter,\n    Event,\n} from '@stencil/core';\nimport {\n    DateFormat,\n    DateRangeStrings,\n    Duration,\n    MIN_DATE,\n} from '../../../types';\nimport { TimeDateUtil } from '../../../utils/time-date.util';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { TimeDatePresentationUtil } from '../../../utils/time-date-presentation.util';\nimport moment from 'moment';\nimport { SelectOption } from '../../../types/select';\n\n@Component({\n    tag: 'atui-custom-time-range',\n    shadow: false,\n})\nexport class AtuiCustomTimeRangeComponent {\n    /**\n     * Whether time selection is enabled in addition to date selection\n     */\n    @Prop()\n    can_set_time: boolean = true;\n\n    /**\n     * Minimum number of seconds for the time range\n     */\n    @Prop()\n    min_seconds: number = 60;\n\n    /**\n     * Minimum selectable date\n     */\n    @Prop({ mutable: true }) min_date: Date = MIN_DATE;\n    @Watch('min_date')\n    validateMinDate(newValue: Date, oldValue: Date) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.min_date = this.floorMinDate(newValue);\n    }\n\n    /**\n     * Maximum selectable date\n     */\n    @Prop({ mutable: true }) max_date: Date = new Date(Date.now());\n    @Watch('max_date')\n    validateMaxDate(newValue: Date, oldValue: Date) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.max_date = this.ceilingMaxDate(newValue);\n    }\n\n    /**\n     * Default value for the from date\n     */\n    @Prop({ mutable: true }) default_from_date: Date;\n    @Watch('default_from_date')\n    validateDefaultFromDate(newValue: Date, oldValue: Date) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.default_from_date = this.floorMinDate(newValue);\n        this.from_date_value = this.default_from_date;\n    }\n\n    /**\n     * Default value for the to date\n     */\n    @Prop({ mutable: true }) default_to_date: Date;\n    @Watch('default_to_date')\n    validateDefaultToDate(newValue: Date | null, oldValue: Date | null) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        this.default_to_date = this.ceilingMaxDate(newValue);\n        this.to_date_value = this.default_to_date\n            ? this.default_to_date\n            : this.max_date;\n    }\n\n    /**\n     * Current value of the from date\n     */\n    @Prop({ mutable: true }) from_date_value: Date;\n    @Watch('from_date_value')\n    validateFromDateValue(newValue: Date | null, oldValue: Date | null) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n        if (this.from_date_value === undefined)\n            this.from_date_value = new Date();\n        if (\n            this.from_date_value.toISOString() !==\n            this.floorMinDate(newValue).toISOString()\n        ) {\n            this.from_date_value = newValue && this.floorMinDate(newValue);\n        }\n        this.setFromDateAndTime(this.from_date_value);\n        this.updateMinMaxFlags();\n    }\n\n    /**\n     * Current value of the to date\n     */\n    @Prop({ mutable: true }) to_date_value: Date;\n    @Watch('to_date_value')\n    validateToDateValue(newValue: Date | null, oldValue: Date | null) {\n        if (newValue && oldValue && newValue.getTime() === oldValue.getTime())\n            return;\n\n        if (this.to_date_value === undefined) this.to_date_value = new Date();\n        if (\n            this.to_date_value.toISOString() !==\n            this.ceilingMaxDate(newValue).toISOString()\n        ) {\n            this.to_date_value = newValue && this.ceilingMaxDate(newValue);\n        }\n        this.setToDateAndTime(this.to_date_value);\n        this.updateMinMaxFlags();\n    }\n\n    /**\n     * Whether to lock the end date to the current time\n     */\n    @Prop({ mutable: true }) lock_end_date_to_now = false;\n\n    @State() isFromMinDay = true;\n    @State() isToMaxDay = true;\n    @State() isFromMaxDay = false;\n    @State() isToMinDay = false;\n    @State() toDate: string;\n    @State() toTime: string;\n    @State() fromDate: string;\n    @State() fromTime: string;\n    @State() translations: any;\n    @State() setDateNowSwitch: HTMLAtuiToggleSwitchElement;\n    @State() toDatePickerEl: HTMLInputElement;\n    @State() toTimePickerEl: HTMLAtuiSelectElement;\n    @Element() el;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    componentWillRender() {\n        if (!this.fromDate && !this.fromTime) {\n            this.from_date_value = this.default_from_date\n                ? this.default_from_date\n                : this.min_date;\n        }\n        if (!this.toDate && !this.toTime) {\n            this.to_date_value = this.default_to_date\n                ? this.default_to_date\n                : this.max_date;\n        }\n    }\n\n    clearSelection(): void {\n        this.from_date_value = this.default_from_date\n            ? this.default_from_date\n            : this.min_date;\n        this.to_date_value = this.default_to_date\n            ? this.default_to_date\n            : this.max_date;\n    }\n\n    private ceilingMaxDate(date: Date): Date {\n        return TimeDateUtil.ceilingDateByTimeUnit(date, Duration.HOURS);\n    }\n\n    private floorMinDate(date: Date): Date {\n        return TimeDateUtil.floorDateByTimeUnit(date, Duration.HOURS);\n    }\n\n    private getCustomToDateTime(): Date {\n        return TimeDatePresentationUtil.buildDateFromStrings(\n            this.toDate,\n            this.toTime,\n        );\n    }\n\n    private getCustomFromDateTime(): Date {\n        return TimeDatePresentationUtil.buildDateFromStrings(\n            this.fromDate,\n            this.fromTime,\n        );\n    }\n\n    private updateMinMaxFlags(): void {\n        const to = this.getCustomToDateTime();\n        this.isToMinDay = TimeDateUtil.isSameDateByUnit(\n            to,\n            this.min_date,\n            Duration.DAYS,\n        );\n        this.isToMaxDay = TimeDateUtil.isSameDateByUnit(\n            to,\n            this.max_date,\n            Duration.DAYS,\n        );\n\n        const from = this.getCustomFromDateTime();\n        this.isFromMinDay = TimeDateUtil.isSameDateByUnit(\n            from,\n            this.min_date,\n            Duration.DAYS,\n        );\n        this.isFromMaxDay = TimeDateUtil.isSameDateByUnit(\n            from,\n            this.max_date,\n            Duration.DAYS,\n        );\n    }\n\n    protected setDateNow(): void {\n        const toggleValue = this.setDateNowSwitch.value;\n        if (toggleValue) {\n            this.lock_end_date_to_now = true;\n            const date = this.ceilingMaxDate(new Date(Date.now()));\n            this.to_date_value = date;\n        } else {\n            this.lock_end_date_to_now = false;\n        }\n    }\n\n    private setToDateAndTime(toDate: Date) {\n        this.toDate = TimeDatePresentationUtil.getFormattedDate(\n            toDate,\n            'YYYY-MM-DD' as DateFormat,\n        );\n        this.toTime = TimeDatePresentationUtil.getFormattedDate(\n            toDate,\n            'hh:mm a' as DateFormat,\n        );\n    }\n\n    private setFromDateAndTime(fromDate: Date) {\n        this.fromDate = TimeDatePresentationUtil.getFormattedDate(\n            fromDate,\n            'YYYY-MM-DD' as DateFormat,\n        );\n        this.fromTime = TimeDatePresentationUtil.getFormattedDate(\n            fromDate,\n            'hh:mm a' as DateFormat,\n        );\n    }\n\n    get getFromTimes() {\n        this.updateMinMaxFlags();\n\n        if (this.isFromMinDay) {\n            return TimeDatePresentationUtil.getTimeOptions(\n                TimeDatePresentationUtil.getFormattedDate(\n                    this.min_date,\n                    DateFormat.HOURS_ONLY,\n                ),\n            );\n        } else if (this.isFromMaxDay) {\n            const fromMaxTime = TimeDatePresentationUtil.getFormattedDate(\n                TimeDateUtil.shiftDateByUnit(this.max_date, -1, Duration.HOURS),\n                DateFormat.HOURS_ONLY,\n            );\n            return TimeDatePresentationUtil.getTimeOptions(\n                undefined,\n                fromMaxTime,\n            );\n        } else {\n            return TimeDatePresentationUtil.getTimeOptions();\n        }\n    }\n\n    get getToTimes(): SelectOption[] {\n        this.updateMinMaxFlags();\n\n        if (this.isToMinDay) {\n            const toMaxTime = TimeDatePresentationUtil.getFormattedDate(\n                TimeDateUtil.shiftDateByUnit(this.min_date, 1, Duration.HOURS),\n                DateFormat.HOURS_ONLY,\n            );\n            return TimeDatePresentationUtil.getTimeOptions(toMaxTime);\n        } else if (this.isToMaxDay) {\n            return TimeDatePresentationUtil.getTimeOptions(\n                undefined,\n                TimeDatePresentationUtil.getFormattedDate(\n                    this.max_date,\n                    DateFormat.HOURS_ONLY,\n                ),\n            );\n        } else {\n            return TimeDatePresentationUtil.getTimeOptions();\n        }\n    }\n\n    /**\n     * Emitted when the user cancels the time range selection\n     */\n    @Event() atuiCancel: EventEmitter<null>;\n    /**\n     * Emitted when the user submits the time range selection\n     */\n    @Event() atuiSubmit: EventEmitter<DateRangeStrings>;\n\n    handleCancel(): void {\n        this.atuiCancel.emit();\n    }\n\n    handleSubmit() {\n        if (moment(this.from_date_value).isBefore(moment(this.to_date_value))) {\n            this.atuiSubmit.emit({\n                from: TimeDatePresentationUtil.buildDateFromStrings(\n                    this.fromDate,\n                    this.fromTime,\n                ).toISOString(),\n                to: TimeDatePresentationUtil.buildDateFromStrings(\n                    this.toDate,\n                    this.toTime,\n                ).toISOString(),\n                lockEndDateToNow: this.lock_end_date_to_now,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div class=\"flex w-fit flex-col gap-8 border border-gray-300\">\n                <h5 class=\"text-h5 text-dark p-12 font-medium\">\n                    {this.translations.ATUI.TIME.SELECT_ABSOLUTE_TIME}\n                </h5>\n                <div class=\"flex flex-row gap-16 px-12\">\n                    <div class=\"flex-fill flex flex-col gap-8\">\n                        <div>\n                            <label>\n                                {this.translations.ATUI.TIME.FROM_DATE}\n                            </label>\n                            <div>\n                                <input\n                                    type=\"date\"\n                                    name=\"fromDp\"\n                                    class=\"cursor-pointer\"\n                                    min={TimeDatePresentationUtil.getFormattedDate(\n                                        this.min_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    max={TimeDatePresentationUtil.getFormattedDate(\n                                        this.max_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    value={this.fromDate}\n                                    onChange={(event) => {\n                                        this.from_date_value =\n                                            TimeDatePresentationUtil.buildDateFromStrings(\n                                                (\n                                                    event.target as HTMLInputElement\n                                                ).value,\n                                                this.fromTime,\n                                            );\n                                        this.setToDateAndTime(\n                                            this.to_date_value,\n                                        );\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        {this.can_set_time && (\n                            <div>\n                                <label>\n                                    {this.translations.ATUI.TIME.FROM_TIME}\n                                </label>\n                                <div>\n                                    <atui-select\n                                        options={this.getFromTimes}\n                                        value={this.fromTime}\n                                        onAtuiChange={(event) => {\n                                            this.from_date_value =\n                                                TimeDatePresentationUtil.buildDateFromStrings(\n                                                    this.fromDate,\n                                                    event.detail,\n                                                );\n                                        }}\n                                    ></atui-select>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <div class=\"flex-fill flex flex-col gap-8\">\n                        <div>\n                            <label>{this.translations.ATUI.TIME.TO_DATE}</label>\n                            <div>\n                                <input\n                                    type=\"date\"\n                                    name=\"toDp\"\n                                    class=\"cursor-pointer\"\n                                    disabled={this.lock_end_date_to_now}\n                                    min={TimeDatePresentationUtil.getFormattedDate(\n                                        this.min_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    max={TimeDatePresentationUtil.getFormattedDate(\n                                        this.max_date,\n                                        'YYYY-MM-DD' as DateFormat,\n                                    )}\n                                    value={this.toDate}\n                                    ref={(el) => (this.toDatePickerEl = el)}\n                                    onChange={(event) => {\n                                        this.to_date_value =\n                                            TimeDatePresentationUtil.buildDateFromStrings(\n                                                (\n                                                    event.target as HTMLInputElement\n                                                ).value,\n                                                this.toTime,\n                                            );\n                                        this.setToDateAndTime(\n                                            this.to_date_value,\n                                        );\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        {this.can_set_time && (\n                            <div>\n                                <label>\n                                    {this.translations.ATUI.TIME.TO_TIME}\n                                </label>\n                                <div>\n                                    <atui-select\n                                        options={this.getToTimes}\n                                        value={this.toTime}\n                                        disabled={this.lock_end_date_to_now}\n                                        ref={(el) => (this.toTimePickerEl = el)}\n                                        onAtuiChange={(event) => {\n                                            this.to_date_value =\n                                                TimeDatePresentationUtil.buildDateFromStrings(\n                                                    this.toDate,\n                                                    event.detail,\n                                                );\n                                        }}\n                                    ></atui-select>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                <div class=\"align-center my-8 flex flex-row justify-between gap-8 rounded-md px-12\">\n                    <div class=\"flex flex-col\">\n                        <label class=\"c-form__label\">\n                            {\n                                this.translations.ATUI.TIME\n                                    .SET_END_DATE_AND_TIME_TO_NOW\n                            }\n                        </label>\n                        <span class=\"text-med text-xs\">\n                            {\n                                this.translations.ATUI.TIME\n                                    .SET_END_DATE_AND_TIME_TO_NOW_DESCRIPTION\n                            }\n                        </span>\n                    </div>\n                    <atui-toggle-switch\n                        value={this.lock_end_date_to_now}\n                        onChange={() => this.setDateNow()}\n                        ref={(el) => (this.setDateNowSwitch = el)}\n                    ></atui-toggle-switch>\n                </div>\n                <div class=\"flex flex-row justify-between p-8\">\n                    <atui-button\n                        type=\"secondaryOutline\"\n                        data-name=\"custom-time-range-clear\"\n                        label={this.translations.ATUI.CLEAR_SELECTION}\n                        onClick={() => this.clearSelection()}\n                    ></atui-button>\n                    <div class=\"flex flex-row gap-8\">\n                        <atui-button\n                            type=\"secondaryOutline\"\n                            data-name=\"custom-time-range-cancel\"\n                            label={this.translations.ATUI.CANCEL}\n                            onClick={() => this.handleCancel()}\n                        ></atui-button>\n                        <atui-button\n                            data-name=\"custom-time-range-apply\"\n                            label={this.translations.ATUI.APPLY}\n                            onClick={() => this.handleSubmit()}\n                        ></atui-button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import {\n    Component,\n    h,\n    Prop,\n    State,\n    Element,\n    Watch,\n    Event,\n    EventEmitter,\n    Fragment,\n} from '@stencil/core';\nimport { TimeExtraOptions, TimeUnit, TimeWithUnit } from '../../../types/time';\nimport { TimePresets } from '../../../models/atui-time-range.models';\nimport { DateRange, TimeRangeDisplay } from '../../../types/date';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { TimeDateUtil } from '../../../utils/time-date.util';\n\n/**\n * @category Form Controls\n * @description A time with unit component for selecting a time period.\n */\n\n@Component({\n    tag: 'atui-time-with-unit',\n    shadow: false,\n})\nexport class AtuiTimeWithUnitComponent {\n    /**\n     * Available time units for selection\n     */\n    @Prop()\n    units: TimeUnit[];\n\n    /**\n     * Common time preset options to display\n     */\n    @Prop()\n    common_options: TimePresets[];\n\n    /**\n     * Minimum date constraint for time selection\n     */\n    @Prop()\n    min_date: Date = null;\n\n    /**\n     * Minimum number of seconds allowed for time selection\n     */\n    @Prop()\n    min_seconds = 60;\n\n    /**\n     * Maximum number of seconds allowed for time selection\n     */\n    @Prop()\n    max_seconds: number = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Initial time selection value\n     */\n    @Prop()\n    initial_selected_time: TimeWithUnit | TimeRangeDisplay.ALL;\n\n    /**\n     * Custom error message to display when validation fails\n     */\n    @Prop()\n    custom_error_message = null;\n\n    /**\n     * Whether to show the 'All Time' option\n     */\n    @Prop()\n    show_all_time = false;\n\n    @State() errorText: string = '';\n    @State() secondaryErrorText: string = '';\n    @State() translations: any;\n    @State() dropdownOptions: (TimeUnit | TimeExtraOptions)[];\n    @State() timeValue: number;\n    @Watch('timeValue')\n    watchTimeValue() {\n        this.updateSelectedTime(this.timeValue);\n    }\n    @State() timeUnit: TimeUnit | TimeExtraOptions;\n    @Watch('timeUnit')\n    watchTimeUnit() {\n        this.updateSelectedTime(this.timeValue);\n    }\n    @State() selectedTime: TimeWithUnit | TimeRangeDisplay.ALL;\n    @State() startDate;\n    @Element() el;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    componentWillRender() {\n        if (!this.selectedTime) {\n            this.initSelectedTime(this.initial_selected_time);\n            this.initDropdownOptions();\n        }\n    }\n\n    private initDropdownOptions(): void {\n        this.dropdownOptions = this.show_all_time\n            ? [TimeExtraOptions.ALL, ...this.units]\n            : this.units;\n    }\n\n    private initSelectedTime(\n        initialTimeRange: TimeWithUnit | TimeRangeDisplay.ALL,\n    ): void {\n        const unit =\n            typeof initialTimeRange === 'object'\n                ? TimeDateUtil.getCurrentOrDefaultUnit(\n                      initialTimeRange.unit,\n                      this.units,\n                  )\n                : TimeExtraOptions.ALL;\n        const value =\n            typeof initialTimeRange === 'object'\n                ? initialTimeRange.value\n                : null;\n\n        this.timeUnit = unit;\n        this.timeValue = value;\n        this.selectedTime = initialTimeRange;\n        this.startDate = this.getRelativeDate()?.startDate;\n    }\n\n    updateSelectedTime(value: number): void {\n        const unit = this.timeUnit;\n\n        if (unit !== TimeExtraOptions.ALL) {\n            this.selectedTime = { unit, value };\n        } else {\n            this.selectedTime = TimeRangeDisplay.ALL;\n            if (this.timeValue) {\n                this.timeValue = null;\n            }\n        }\n        this.validateInput();\n        this.startDate = this.getRelativeDate()?.startDate;\n    }\n\n    validateInput() {\n        if (this.selectedTime !== TimeRangeDisplay.ALL) {\n            const maxSeconds = this.min_date\n                ? TimeDateUtil.getSecondsAgoFromDate(this.min_date)\n                : this.max_seconds;\n            const maxTimeValue = TimeDateUtil.convertSecondsToUnit(\n                maxSeconds,\n                this.timeUnit,\n                0,\n                true,\n            );\n            const minTimeValue = TimeDateUtil.convertSecondsToUnit(\n                this.min_seconds,\n                this.timeUnit,\n                0,\n                false,\n            );\n            if (this.timeValue > maxTimeValue)\n                this.errorText = this.translations\n                    ? this.translations.ATUI.TIME.VALIDATION.MAX_NUMBER.replace(\n                          '{lowerThanValue}',\n                          `${maxTimeValue + 1} ${this.timeUnit}`,\n                      )\n                    : `Please enter a value lower than ${maxTimeValue} ${this.timeUnit}`;\n            else if (this.timeValue < minTimeValue)\n                this.errorText = this.translations\n                    ? this.translations.ATUI.TIME.VALIDATION.MIN_NUMBER.replace(\n                          '{min}',\n                          `${maxTimeValue} ${this.timeUnit}`,\n                      )\n                    : `Please enter a value larger than ${minTimeValue} ${this.timeUnit}`;\n            else this.errorText = '';\n            if (this.errorText && this.custom_error_message) {\n                this.secondaryErrorText = this.custom_error_message;\n            }\n        }\n    }\n\n    updateSelectedRange(value: TimeWithUnit): void {\n        this.timeUnit = value.unit;\n        this.timeValue = value.value;\n        this.selectedTime = value;\n    }\n\n    getRelativeDate(): DateRange {\n        if (typeof this.selectedTime === 'object') {\n            return TimeDateUtil.getRelativeDateRange(this.selectedTime);\n        }\n    }\n\n    clearSelection(): void {\n        if (typeof this.initial_selected_time === 'object') {\n            this.timeValue = this.initial_selected_time.value;\n            this.timeUnit = this.initial_selected_time.unit;\n        } else {\n            this.timeValue = null;\n            this.timeUnit = TimeExtraOptions.ALL;\n        }\n    }\n\n    /**\n     * Emitted when the user cancels the time selection\n     */\n    @Event() atuiCancel: EventEmitter<null>;\n    /**\n     * Emitted when the user submits the time selection\n     */\n    @Event() atuiSubmit: EventEmitter<TimeWithUnit | TimeRangeDisplay.ALL>;\n\n    handleCancel(): void {\n        this.atuiCancel.emit();\n    }\n\n    handleSubmit(): void {\n        if (this.errorText === '') {\n            this.atuiSubmit.emit(this.selectedTime);\n        }\n    }\n\n    handleSelectChange(event: CustomEvent): void {\n        const timeTranslationObject = this.translations.ATUI.TIME;\n        const newValue = event.detail;\n        this.timeUnit = (\n            this.translations\n                ? Object.keys(timeTranslationObject).find(\n                      (key) => timeTranslationObject[key] === newValue,\n                  )\n                : newValue\n        ) as TimeUnit;\n    }\n\n    render() {\n        return (\n            <div\n                class=\"w-panel-sm flex flex-col gap-16 border border-gray-300\"\n                onKeyUp={(event) =>\n                    (event.key === 'Enter' || event.key === ' ') &&\n                    this.handleSubmit()\n                }\n                tabindex={0}\n            >\n                <div class=\"flex flex-col gap-8 p-12\">\n                    <h5 class=\"text-h5 text-dark font-medium\">\n                        {this.translations.ATUI.TIME.SELECT_RELATIVE_TIME}\n                    </h5>\n                    <div class=\"flex flex-col gap-8\">\n                        <atui-input-numeric\n                            value={this.timeValue}\n                            onAtuiChange={(event) =>\n                                (this.timeValue = event.detail as number)\n                            }\n                        ></atui-input-numeric>\n                        <atui-select\n                            class=\"flex-fill\"\n                            value={this.translations.ATUI.TIME[this.timeUnit]}\n                            options={\n                                this.dropdownOptions\n                                    ? this.dropdownOptions.map(\n                                          (option) =>\n                                              this.translations.ATUI.TIME[\n                                                  option\n                                              ],\n                                      )\n                                    : null\n                            }\n                            onAtuiChange={(event) =>\n                                this.handleSelectChange(event)\n                            }\n                        />\n                    </div>\n\n                    {this.errorText ? (\n                        <Fragment>\n                            <span\n                                class=\"text-error text-sm\"\n                                data-name=\"time-with-unit-error\"\n                            >\n                                {this.errorText}\n                            </span>\n                            {this.secondaryErrorText && (\n                                <span\n                                    class=\"text-error text-sm\"\n                                    data-name=\"time-with-unit-error-secondary\"\n                                >\n                                    {this.secondaryErrorText}\n                                </span>\n                            )}\n                        </Fragment>\n                    ) : this.selectedTime !== TimeRangeDisplay.ALL ? (\n                        this.timeValue &&\n                        this.selectedTime?.unit && (\n                            <span class=\"text-med text-sm font-normal\">\n                                {this.startDate.toLocaleString()} ⁠— NOW\n                            </span>\n                        )\n                    ) : (\n                        this.selectedTime === TimeRangeDisplay.ALL && (\n                            <span class=\"text-med text-sm font-normal\">\n                                {this.translations.ATUI.TIME.ALL_TIME_LABEL}\n                            </span>\n                        )\n                    )}\n                </div>\n                {this.common_options && (\n                    <div class=\"flex flex-col gap-8 px-12\">\n                        <h5 class=\"text-h5 text-dark font-medium\">\n                            {this.translations.ATUI.TIME.COMMONLY_USED}\n                        </h5>\n                        <div\n                            class=\"columns-2\"\n                            data-name=\"time-with-unit-common-options\"\n                        >\n                            {this.common_options &&\n                                this.common_options.map((timerange) => (\n                                    <div\n                                        onClick={() =>\n                                            this.updateSelectedRange(timerange)\n                                        }\n                                        onKeyDown={(event) => {\n                                            event.stopPropagation();\n                                            if (\n                                                event.key === 'Enter' ||\n                                                event.key === ' '\n                                            )\n                                                this.updateSelectedRange(\n                                                    timerange,\n                                                );\n                                        }}\n                                        tabindex={0}\n                                        class={`${this.selectedTime !== TimeRangeDisplay.ALL && this.selectedTime?.value === timerange.value && this.selectedTime?.unit === timerange.unit ? 'bg-active-light px-4' : ''} cursor-pointer`}\n                                    >\n                                        <small>\n                                            {this.translations.ATUI.TIME.LAST}{' '}\n                                            {timerange.value}{' '}\n                                            {\n                                                this.translations.ATUI.TIME[\n                                                    timerange.unit\n                                                ]\n                                            }\n                                        </small>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>\n                )}\n                <footer class=\"flex justify-between p-8\">\n                    <atui-button\n                        type=\"secondaryOutline\"\n                        data-name=\"clear\"\n                        label={this.translations.ATUI.RESET}\n                        onAtuiClick={() => this.clearSelection()}\n                    ></atui-button>\n\n                    <div class=\"flex gap-8\">\n                        <atui-button\n                            type=\"secondaryOutline\"\n                            data-name=\"cancel\"\n                            label={this.translations.ATUI.CANCEL}\n                            onAtuiClick={() => this.handleCancel()}\n                        ></atui-button>\n                        <atui-button\n                            data-name=\"apply\"\n                            label={this.translations.ATUI.APPLY}\n                            onAtuiClick={() => this.handleSubmit()}\n                        ></atui-button>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\n"],"names":["moment"],"mappings":"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"}