{"file":"p-DcFWgjJQ.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/cell-components/at-text-image-cell/at-text-image-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport type { ITooltipCell } from '../../../../types';\n\nexport interface TextImageCellData {\n    text: string;\n    image: string;\n    tooltip?: string;\n}\n\nexport interface ITextImageCellParams\n    extends ICellRendererParams,\n        ITooltipCell {\n    text?: (data: any) => string;\n    imageSource: (data: any) => string;\n    imageHeight?: number;\n    imageWidth?: number;\n    imageClass?: string;\n    imagePosition?: 'before' | 'after';\n}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with an image.\n */\n@Component({\n    tag: 'at-text-image-cell',\n    shadow: false,\n})\nexport class AtTextImageCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n\n    private params: ITextImageCellParams;\n\n    @State() text: string = '';\n\n    private imageHeight: number = 24;\n    private imageWidth?: number;\n    private imageClass?: string;\n    private imagePosition: 'before' | 'after' = 'before';\n\n    init(params: ICellRendererParams): void {\n        this.params = params as ITextImageCellParams;\n\n        this.imageHeight = this.params.imageHeight ?? this.imageHeight;\n        this.imageWidth = this.params.imageWidth;\n        this.imageClass = this.params.imageClass;\n        this.imagePosition = this.params.imagePosition ?? 'before';\n\n        this.updateTextAndImage();\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.params = params as ITextImageCellParams;\n        this.updateTextAndImage();\n        return true;\n    }\n\n    private updateTextAndImage() {\n        this.text = this.params.text\n            ? this.params.text(this.params.data)\n            : (this.params.value ?? '');\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    private get imageSource() {\n        return this.params.imageSource(this.params.data);\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                <at-tooltip\n                    position=\"right\"\n                    disabled={!this.params?.generateTooltip}\n                >\n                    <div\n                        class=\"flex items-center gap-8\"\n                        slot=\"tooltip-trigger\"\n                    >\n                        {this.imagePosition === 'before' &&\n                            this.imageSource && (\n                                <img\n                                    src={this.imageSource}\n                                    style={{\n                                        height: `${this.imageHeight}px`,\n                                        width: this.imageWidth\n                                            ? `${this.imageWidth}px`\n                                            : undefined,\n                                    }}\n                                    class={this.imageClass && this.imageClass}\n                                    alt=\"\"\n                                />\n                            )}\n\n                        {this.text && <span class=\"truncate\">{this.text}</span>}\n\n                        {this.imagePosition === 'after' && this.imageSource && (\n                            <img\n                                src={this.imageSource}\n                                style={{\n                                    height: `${this.imageHeight}px`,\n                                    width: this.imageWidth\n                                        ? `${this.imageWidth}px`\n                                        : undefined,\n                                }}\n                                class={this.imageClass && this.imageClass}\n                                alt=\"\"\n                            />\n                        )}\n                    </div>\n\n                    {this.params?.generateTooltip && (\n                        <span>{this.params.generateTooltip(this.params)}</span>\n                    )}\n                </at-tooltip>\n            </Host>\n        );\n    }\n}\n"],"version":3}