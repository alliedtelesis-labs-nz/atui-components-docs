{"file":"p-ZLP3JFl_.js","mappings":";;AAaA,MAAM,aAAa,GAAG;AAClB,IAAA,IAAI,EAAE,8EAA8E;AACpF,IAAA,OAAO,EAAE,cAAc;AACvB,IAAA,QAAQ,EAAE;AACN,QAAA,GAAG,EAAE;AACD,YAAA,OAAO,EAAE,yBAAyB;AAClC,YAAA,OAAO,EAAE,oCAAoC;AAC7C,YAAA,OAAO,EAAE,oCAAoC;AAC7C,YAAA,KAAK,EAAE,4CAA4C;AACnD,YAAA,IAAI,EAAE,8BAA8B;AACpC,YAAA,QAAQ,EAAE,2BAA2B;AACxC,SAAA;AACD,QAAA,IAAI,EAAE;AACF,YAAA,OAAO,EAAE,yBAAyB;AAClC,YAAA,OAAO,EAAE,mCAAmC;AAC5C,YAAA,OAAO,EAAE,mCAAmC;AAC5C,YAAA,KAAK,EAAE,uCAAuC;AAC9C,YAAA,IAAI,EAAE,gCAAgC;AACtC,YAAA,QAAQ,EAAE,2BAA2B;AACxC,SAAA;AACJ,KAAA;AACD,IAAA,IAAI,EAAE;AACF,QAAA,EAAE,EAAE,uBAAuB;AAC3B,QAAA,EAAE,EAAE,mBAAmB;AAC1B,KAAA;CACJ;MAaY,kBAAkB,iBAAAA,kBAAA,CAAA,MAAA,kBAAA,SAAAC,CAAA,CAAA;AAJ/B,IAAA,WAAA,GAAA;;;AAiBI;;AAEG;AAEH,QAAA,IAAI,CAAA,IAAA,GAAc,SAAS;AAE3B;;AAEG;AAEH,QAAA,IAAI,CAAA,IAAA,GAAc,IAAI;AAEtB;;AAEG;AAEH,QAAA,IAAM,CAAA,MAAA,GAAkB,KAAK;AAE7B;;AAEG;AAEH,QAAA,IAAO,CAAA,OAAA,GAAG,KAAK;AAgClB;AA9BG,IAAA,IAAI,WAAW,GAAA;AACX,QAAA,OAAO,GAAG,aAAa,CAAC,IAAI,CAAI,CAAA,EAAA,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,GAAG,EAAE,EAAE;;AAG/E,IAAA,IAAI,cAAc,GAAA;AACd,QAAA,OAAO,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;;AAGzD,IAAA,IAAI,WAAW,GAAA;QACX,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;IAGxC,MAAM,GAAA;AACF,QAAA,QACI,CAAC,CAAA,IAAI,qDACD,KAAK,EAAE,CAAG,EAAA,IAAI,CAAC,WAAW,CAAA,CAAA,EAAI,IAAI,CAAC,cAAc,CAAI,CAAA,EAAA,IAAI,CAAC,WAAW,CAAA,CAAE,EAAA,EAEtE,IAAI,CAAC,IAAI,KACN,0DACI,KAAK,EAAC,gEAAgE,EAAA,WAAA,EAC5D,YAAY,EAErB,EAAA,IAAI,CAAC,IAAI,CACV,CACP,EACD,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,WAAA,EAAgB,aAAa,EAAA,EAAE,IAAI,CAAC,KAAK,CAAQ,EACjD,CAAQ,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,CACL;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/atui-badge/atui-badge.tsx"],"sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\n\nexport type BadgeType =\n    | 'default'\n    | 'info'\n    | 'success'\n    | 'warning'\n    | 'error'\n    | 'disabled';\nexport type BadgeContrast = 'high' | 'low';\n\nexport type BadgeSize = 'lg' | 'sm';\n\nconst badgeVariants = {\n    base: 'inline-block rounded-[4px] font-normal whitespace-nowrap leading-[0.9286rem]',\n    rounded: 'rounded-full',\n    contrast: {\n        low: {\n            default: 'text-light bg-surface-2',\n            success: 'text-success-foreground bg-success',\n            warning: 'text-warning-foreground bg-warning',\n            error: 'text-destructive-foreground bg-destructive',\n            info: 'text-info-foreground bg-info',\n            disabled: 'text-disabled bg-disabled',\n        },\n        high: {\n            default: 'text-impact bg-gray-600',\n            success: 'text-impact bg-success-foreground',\n            warning: 'text-impact bg-warning-foreground',\n            error: 'text-impact bg-destructive-foreground',\n            info: 'text-impact bg-info-foreground',\n            disabled: 'text-disabled bg-disabled',\n        },\n    },\n    size: {\n        lg: 'py-4 px-[6px] text-sm',\n        sm: 'py-2 px-4 text-xs',\n    },\n};\n\n/**\n * @category Feedback\n * @description A badge component for displaying status indicators, counts, or labels with various styling variants. Supports different sizes, colors, and can be used for notifications or categorization.\n *\n * @slot - Content placed after the label\n */\n\n@Component({\n    tag: 'atui-badge',\n    shadow: false,\n})\nexport class AtuiBadgeComponent {\n    /**\n     * Icon appearing to the left of the badge title. MUST use mat-icon name.\n     */\n    @Prop()\n    icon?: string;\n\n    /**\n     * Title shown on the badge.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Type of the badge. Determines colour theming.\n     */\n    @Prop()\n    type: BadgeType = 'default';\n\n    /**\n     * Size of the badge. Determines padding and font-size. For use in input chip lists.\n     */\n    @Prop()\n    size: BadgeSize = 'lg';\n\n    /**\n     * Impact of the badge, changes the colours.\n     */\n    @Prop()\n    impact: BadgeContrast = 'low';\n\n    /**\n     * Boolean value to round the edges of the badge.\n     */\n    @Prop()\n    rounded = false;\n\n    get baseClasses(): string {\n        return `${badgeVariants.base} ${this.rounded ? badgeVariants.rounded : ''}`;\n    }\n\n    get variantClasses(): string {\n        return badgeVariants.contrast[this.impact][this.type];\n    }\n\n    get sizeClasses(): string {\n        return badgeVariants.size[this.size];\n    }\n\n    render() {\n        return (\n            <Host\n                class={`${this.baseClasses} ${this.variantClasses} ${this.sizeClasses}`}\n            >\n                {this.icon && (\n                    <i\n                        class=\"material-icons icon-sm relative my-2 h-[14px] w-[14px] text-sm\"\n                        data-name=\"badge-icon\"\n                    >\n                        {this.icon}\n                    </i>\n                )}\n                <span data-name=\"badge-label\">{this.label}</span>\n                <slot />\n            </Host>\n        );\n    }\n}\n"],"version":3}