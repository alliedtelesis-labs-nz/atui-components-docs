{"file":"p-CprlMDhJ.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/cell-components/at-text-cell/at-text-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport type { InitTextCellParams, ITooltipCell } from '../../../../types';\nimport { CSSProperties } from '../../../../types/styles';\n\nexport interface TextCellData {\n    text: string;\n    tooltip?: string;\n}\n\nexport interface ITextCellParams extends ICellRendererParams, ITooltipCell {\n    text?: (data: TextCellData) => string;\n    color?: string;\n    textStyles?: any | ((params: ICellRendererParams) => any);\n    textClass?: string;\n    textTransform?: (data: any, value: any) => string;\n}\n\n/**\n * @category Table Cell\n * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.\n */\n@Component({\n    tag: 'at-text-cell',\n    shadow: false,\n})\nexport class AtTextCellComponent implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() containerStyles: CSSProperties;\n    @State() textStyles: CSSProperties;\n    @State() textClass: string;\n    @State() textValue: string;\n    @State() params: InitTextCellParams;\n\n    init(params: InitTextCellParams): void {\n        const {\n            size,\n            color,\n            textStyles,\n            containerStyles,\n            textClass,\n            textTransform,\n        } = params;\n\n        this.textClass = textClass;\n        this.containerStyles = containerStyles;\n        this.params = params;\n\n        if (typeof textStyles == 'function') {\n            this.textStyles = textStyles(params);\n        } else {\n            this.textStyles = {\n                fontSize: size || null,\n                color: color || null,\n                ...textStyles,\n            };\n        }\n\n        this.textValue = this.getTextValue(params);\n\n        if (textTransform) {\n            this.textValue = textTransform(params.data, params.value);\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitTextCellParams): boolean {\n        this.textValue = this.getTextValue(params);\n        return true;\n    }\n\n    // If you are using objects for the value, they will appear as [object Object].\n    // This indicates that you may need to use a valueGetter (see ag-grid API),\n    // with a different cell type - this one is designed for displaying a single string value.\n    private getTextValue(params: ICellRendererParams): string {\n        const { value } = params;\n\n        if (value === '') {\n            return '-';\n        }\n        if (value.constructor === Array) {\n            return this.transferArrayValueToString(value);\n        }\n\n        return String(value);\n    }\n\n    private transferArrayValueToString(value: Array<string | number>): string {\n        const compactValue = value.filter((val) => !!val);\n        if (!compactValue.length) {\n            return '-';\n        }\n        const textVal: string | number = compactValue.reduce((acc, current) => {\n            acc = acc ? `${acc},${current}` : `${current}`;\n            return acc;\n        });\n        return String(textVal);\n    }\n\n    render() {\n        return (\n            <Host class=\"align-center flex h-full\">\n                <at-tooltip\n                    position=\"right\"\n                    disabled={!this.params.generateTooltip}\n                >\n                    <span\n                        slot=\"tooltip-trigger\"\n                        data-index={`column-${this.params.rowIndex}-data`}\n                        style={this.textStyles}\n                        class={`${this.textClass ?? ''} truncate`}\n                        onClick={() => {\n                            if (this.params.click)\n                                this.params.click(this.params);\n                        }}\n                    >\n                        {this.textValue}\n                    </span>\n                    {this.params.generateTooltip && (\n                        <span\n                            class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                        >\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </at-tooltip>\n            </Host>\n        );\n    }\n}\n"],"version":3}