{"file":"p-BlpGYRIn.js","mappings":";;;;;MAoBa,UAAU,iBAAAA,kBAAA,CAAA,MAAA,UAAA,SAAAC,CAAA,CAAA;;;;;;;;AACnB;;AAEG;AAEH,IAAA,KAAK;AAEL;;AAEG;AAEH,IAAA,QAAQ;AAER;;AAEG;AAEH,IAAA,QAAQ;AAER;;AAEG;IAEH,cAAc,GAAY,IAAI;AAE9B;;AAEG;IAEH,IAAI,GAAc,IAAI;AAEtB;;AAEG;AAOH,IAAA,cAAc;IAEd,cAAc,CAAC,KAAoB,EAAE,aAAuB,EAAA;AACxD,QAAA,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;YAC5C,KAAK,CAAC,cAAc,EAAE;AACtB,YAAA,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC;;;AAI7C,IAAA,iBAAiB,CAAC,aAAuB,EAAA;AACrC,QAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC;AACvC,QAAA,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1B,YAAA,IAAI,CAAC,KAAK,GAAG,EAAE;;aACZ;YACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC;;;AAI3E,IAAA,IAAI,QAAQ,GAAA;AACR,QAAA,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACb,YAAA,OAAO,EAAE;;AAGb,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,MACvB,CACI,CAAA,UAAA,EAAA,EAAA,KAAK,EAAE,CAAA,mCAAA,CAAqC,EAC5C,OAAO,EAAE,IAAI,EAAA,WAAA,EACH,MAAM,EAChB,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,SAAS,EAC5C,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,EAAA,EAEV,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,KAC7B,CAAA,CAAA,GAAA,EAAA,EACI,KAAK,EAAC,8IAA8I,EAC1I,WAAA,EAAA,aAAa,EACvB,QAAQ,EAAE,CAAC,EACX,OAAO,EAAE,MAAK;AACV,gBAAA,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC;aACjC,EACD,SAAS,EAAE,CAAC,KAAK,KACb,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,aAItC,CACP,CACM,CACd,CAAC;;IAGN,MAAM,GAAA;QACF,QACI,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAK,KAAK,EAAC,0CAA0C,EAAA,EAChD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,EAE3B,CAAC,IAAI,CAAC,QAAQ;AACX,YAAA,IAAI,CAAC,KAAK;AACV,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;AACrB,YAAA,IAAI,CAAC,cAAc,KACf,kEACI,IAAI,EAAC,IAAI,EACT,IAAI,EAAC,eAAe,EACpB,KAAK,EAAC,WAAW,EAAA,WAAA,EACP,WAAW,EACrB,WAAW,EAAE,MAAK;AACd,gBAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC;AACtC,aAAC,GACQ,CAChB,EACL,CAAQ,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,CACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/at-chip-list/at-chip-list.tsx"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    h,\n    Prop,\n    Event as StencilEvent,\n} from '@stencil/core';\n\nexport type BadgeSize = 'lg' | 'sm';\n\n/**\n * @category Utilities\n * @description A chip list component for displaying collections of tags, filters, or selectable items. Supports removal, selection, and interactive chip management.\n *\n * @slot - Placed after the chips & the 'clear all' button\n */\n@Component({\n    tag: 'at-chip-list',\n    shadow: false,\n})\nexport class AtChipList {\n    /**\n     * Items in the chip list.\n     */\n    @Prop({ mutable: true })\n    chips: string[];\n\n    /**\n     * Disables the list of chips. Prevents removing a chip.\n     */\n    @Prop()\n    disabled: boolean;\n\n    /**\n     * Disables the list of chips but keeps the text readable. Prevents removing a chip.\n     */\n    @Prop()\n    readonly: boolean;\n\n    /**\n     * Shows the 'Clear All' button\n     */\n    @Prop()\n    show_clear_all: boolean = true;\n\n    /**\n     * Size of the chips. Determines padding and font-size. For use in input chip lists.\n     */\n    @Prop()\n    size: BadgeSize = 'lg';\n\n    /**\n     * Emitted when the 'X' on a chip, or 'Clear All' is clicked.\n     */\n    @StencilEvent({\n        eventName: 'atRemoveChip',\n        bubbles: true,\n        composed: true,\n        cancelable: false,\n    })\n    atuiRemoveChip: EventEmitter<string[]>;\n\n    keyDownHandler(event: KeyboardEvent, chipsToRemove: string[]) {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            this.removeChipHandler(chipsToRemove);\n        }\n    }\n\n    removeChipHandler(chipsToRemove: string[]): void {\n        this.atuiRemoveChip.emit(chipsToRemove);\n        if (chipsToRemove.length > 1) {\n            this.chips = [];\n        } else {\n            this.chips = this.chips.filter((chip) => chip !== chipsToRemove[0]);\n        }\n    }\n\n    get getChips(): any {\n        if (!this.chips) {\n            return '';\n        }\n\n        return this.chips.map((chip) => (\n            <at-badge\n                class={`flex items-center gap-4 text-center`}\n                rounded={true}\n                data-name=\"chip\"\n                type={this.disabled ? 'disabled' : 'default'}\n                size={this.size}\n                label={chip}\n            >\n                {!this.disabled && !this.readonly && (\n                    <i\n                        class=\"material-icons text-icon-md text-light hover:text-med relative flex h-[16px] w-[16px] cursor-pointer items-center justify-center text-center\"\n                        data-name=\"chip-remove\"\n                        tabIndex={0}\n                        onClick={() => {\n                            this.removeChipHandler([chip]);\n                        }}\n                        onKeyDown={(event) =>\n                            this.keyDownHandler(event, [chip])\n                        }\n                    >\n                        cancel\n                    </i>\n                )}\n            </at-badge>\n        ));\n    }\n\n    render() {\n        return (\n            <div class=\"flex h-full flex-wrap items-center gap-4\">\n                {this.chips && this.getChips}\n\n                {!this.disabled &&\n                    this.chips &&\n                    this.chips.length > 1 &&\n                    this.show_clear_all && (\n                        <at-button\n                            size=\"sm\"\n                            type=\"secondaryText\"\n                            label=\"Clear All\"\n                            data-name=\"clear-all\"\n                            onAtuiClick={() => {\n                                this.removeChipHandler(this.chips);\n                            }}\n                        ></at-button>\n                    )}\n                <slot />\n            </div>\n        );\n    }\n}\n"],"version":3}