{"file":"p-CXBBKKuC.js","mappings":"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","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/atui-column-manager/atui-column-manager.tsx"],"sourcesContent":["import {\n    Component,\n    h,\n    Element,\n    State,\n    Prop,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { fetchTranslations } from '../../../utils/translation';\nimport { ColDef } from 'ag-grid-community';\n\nexport interface ColumnManagerChangeEvent {\n    id: string;\n    checked: boolean;\n}\n\n@Component({\n    tag: 'atui-column-manager',\n    shadow: false,\n})\nexport class AtuiColumnManagerComponent {\n    /**\n     * Column definitions used in your atui-table\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    @Element() el: HTMLElement;\n    @State() translations: any;\n    @State() checkedColumns: string[] = [];\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n        this.initializeCheckedColumns();\n    }\n\n    @Watch('col_defs')\n    colDefsChanged() {\n        this.initializeCheckedColumns();\n    }\n\n    private initializeCheckedColumns() {\n        if (this.col_defs) {\n            this.checkedColumns = this.col_defs\n                .filter((colDef) => colDef.hide !== true)\n                .map((colDef) => colDef.field);\n        }\n    }\n\n    /**\n     * Custom event used by atui-table-actions to perform ag-grid logic\n     *\n     * Emitted when checkbox is clicked\n     */\n    @Event({ eventName: 'atuiChange' })\n    atuiChange: EventEmitter<ColumnManagerChangeEvent>;\n\n    changeHandler(event: CustomEvent<string[]>) {\n        const selectedColumns = event.detail || [];\n\n        const previousColumns = new Set(this.checkedColumns);\n        const currentColumns = new Set(selectedColumns);\n\n        selectedColumns.forEach((columnId) => {\n            if (!previousColumns.has(columnId)) {\n                this.atuiChange.emit({\n                    id: columnId,\n                    checked: true,\n                });\n            }\n        });\n\n        Array.from(previousColumns).forEach((columnId) => {\n            if (!currentColumns.has(columnId)) {\n                this.atuiChange.emit({\n                    id: columnId,\n                    checked: false,\n                });\n            }\n        });\n\n        this.checkedColumns = selectedColumns;\n    }\n\n    render() {\n        return (\n            <atui-menu\n                autoclose={false}\n                width=\"auto\"\n                align=\"end\"\n                portal={true}\n            >\n                <div slot=\"menu-trigger\">\n                    <atui-tooltip position=\"top\">\n                        <atui-button\n                            slot=\"tooltip-trigger\"\n                            type=\"secondaryText\"\n                            icon=\"graphic_eq\"\n                        />\n                        <span slot=\"tooltip-content\">\n                            {this.translations.ATUI.TABLE.MANAGE_COLUMNS}\n                        </span>\n                    </atui-tooltip>\n                </div>\n                <atui-checkbox-group\n                    slot=\"menu-content\"\n                    options={\n                        this.col_defs\n                            ? this.col_defs.map((colDef) => {\n                                  return {\n                                      option_id: colDef.field,\n                                      label: colDef.field,\n                                  };\n                              })\n                            : []\n                    }\n                    value={this.checkedColumns}\n                    onAtuiChange={(event) => this.changeHandler(event)}\n                />\n            </atui-menu>\n        );\n    }\n}\n"],"version":3}