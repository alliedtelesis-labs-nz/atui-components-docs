{"file":"p-DdE_bxtd.js","mappings":";;;MAgCa,cAAc,iBAAAA,kBAAA,CAAA,MAAA,cAAA,SAAAC,CAAA,CAAA;;;;;;;;IAEd,IAAI,GAAW,EAAE;AAElB,IAAA,MAAM;AAEN,IAAA,MAAM,CAAC,MAAkB,EAAA;AAC7B,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM;AACpB,QAAA,IAAI,MAAM,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;;aACjC;YACH,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;;;AAIlD,IAAA,IAAI,CAAC,MAAkB,EAAA;AACnB,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;;IAGvB,MAAM,GAAA;QACF,OAAO,IAAI,CAAC,EAAE;;AAGlB,IAAA,OAAO,CAAC,MAAkB,EAAA;AACtB,QAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AACnB,QAAA,OAAO,IAAI;;IAGP,WAAW,GAAA;QACf,QACI,CAAA,CAAC,QAAQ,EAAA,IAAA,EACJ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,MAC1B,CAAA,CAAA,YAAA,EAAA,EACI,QAAQ,EAAC,OAAO,EAChB,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,EAAA,EAEvB,CAAK,CAAA,KAAA,EAAA,EAAA,IAAI,EAAC,iBAAiB,EAAA,EACvB,CAAA,CAAA,GAAA,EAAA,EACI,KAAK,EAAE,CAAA,gDAAA,EAAmD,IAAI,CAAC,SAAS,IAAI,EAAE,CAAA,CAAE,EAE/E,EAAA,IAAI,CAAC,QAAQ,CACd,CACF,EACL,IAAI,CAAC,OAAO,KACT,CAAM,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,gBAAgB,EAAA,EAAE,IAAI,CAAC,OAAO,CAAQ,CACrD,CACQ,CAChB,CAAC,CACK;;IAInB,MAAM,GAAA;QACF,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,EAAE,YAAY,IAAI,QAAQ;QAE1D,QACI,CAAC,CAAA,IAAI,EAAC,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,+DAA+D,EAAA,EACtE,YAAY,KAAK,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,EAChD,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,KAAK,EAAC,UAAU,IAAE,IAAI,CAAC,IAAI,CAAQ,EACxC,YAAY,KAAK,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE,CAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/table-components/cell-components/at-text-icon-cell/at-text-icon-cell.tsx"],"sourcesContent":["import { Component, h, Element, State, Host, Fragment } from '@stencil/core';\nimport { ICellRendererComp } from 'ag-grid-community';\nimport type { IconTextCellParams, ITooltipCell } from '../../../../types';\n\nexport interface IconConfig {\n    iconName: string;\n    iconClass?: string;\n    tooltip?: string;\n}\n\nexport interface TextIconCellData {\n    text?: string;\n    icons: IconConfig[];\n}\n\nexport interface ITextIconCellParams extends IconTextCellParams, ITooltipCell {\n    text?: (data: any) => string;\n    iconPosition?: 'before' | 'after';\n    icons: () => IconConfig[];\n}\n\ntype InitParams = ITextIconCellParams;\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.\n */\n\n@Component({\n    tag: 'at-text-icon-cell',\n    shadow: false,\n})\nexport class AtTextIconCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() text: string = '';\n\n    private params: InitParams;\n\n    private update(params: InitParams) {\n        this.params = params;\n        if (params.text) {\n            this.text = params.text(params.data);\n        } else {\n            this.text = params.value?.toString() || '';\n        }\n    }\n\n    init(params: InitParams): void {\n        this.update(params);\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.update(params);\n        return true;\n    }\n\n    private renderIcons() {\n        return (\n            <Fragment>\n                {this.params.icons().map((icon) => (\n                    <at-tooltip\n                        position=\"right\"\n                        disabled={!icon.tooltip}\n                    >\n                        <div slot=\"tooltip-trigger\">\n                            <i\n                                class={`material-icons text-icon-md mt-4 cursor-pointer ${icon.iconClass || ''}`}\n                            >\n                                {icon.iconName}\n                            </i>\n                        </div>\n                        {icon.tooltip && (\n                            <span class=\"leading-normal\">{icon.tooltip}</span>\n                        )}\n                    </at-tooltip>\n                ))}\n            </Fragment>\n        );\n    }\n\n    render() {\n        const iconPosition = this.params?.iconPosition || 'before';\n\n        return (\n            <Host class=\"flex h-full items-center gap-4 overflow-hidden leading-normal\">\n                {iconPosition === 'before' && this.renderIcons()}\n                <span class=\"truncate\">{this.text}</span>\n                {iconPosition === 'after' && this.renderIcons()}\n            </Host>\n        );\n    }\n}\n"],"version":3}