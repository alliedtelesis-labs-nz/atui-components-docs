{"file":"p-C75v68Jh.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,EAAA,CAAC,UAAU,IAAI,EAAE,OAAO,EAAE;MAIkB;AAC5C;AACA;AACA,UAAQ,IAAI;AACZ,cAAY,MAAiB,CAAA,OAAA,GAAA,OAAO,CAAC,UAAiB,CAAC;WAC9C,CAAC,OAAO,CAAC,EAAE;AACpB;AACA;AACA,cAAY,iBAAiB,OAAO;AACpC;AACA;;MAEI,IAAI,IAAI,EAAE;AACd;AACA,UAAQ,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,OAAO;AACrF;AACA,GAAC,EAAEA,oBAAI,EAAE,UAAU,MAAM,EAAE;AAC3B;AACA;AACA;AACA;AACA;MACI,IAAI,mBAAmB,GAAG,KAAK;;AAEnC;AACA;AACA;AACA;AACA;MACI,IAAI,2BAA2B,GAAG,KAAK;;AAE3C;AACA;AACA;AACA;AACA;AACA;MACI,IAAI,qBAAqB,GAAG,KAAK;;AAErC;AACA;AACA;AACA;AACA;AACA;MACI,IAAI,6BAA6B,GAAG,KAAK;;AAE7C;MACI,IAAI,KAAK,GAAG,2EAA2E,CAAC,KAAK,CAAC,GAAG,CAAC;;MAElG,IAAI,OAAO,GAAG;UACV;cACI,IAAI,EAAE,SAAS;AAC3B,cAAY,OAAO,EAAE;kBACL,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE;kBAC9B,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;kBAC9B,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;kBAC9B,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE;kBAChC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE;AAClD,kBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ;AAChD;WACS;UACD;cACI,IAAI,EAAE,SAAS;AAC3B,cAAY,OAAO,EAAE;kBACL,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE;kBAC5B,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE;kBAC7B,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;kBAC/B,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;AAChD,kBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM;AAC9C;WACS;UACD;cACI,IAAI,EAAE,OAAO;AACzB,cAAY,OAAO,EAAE;kBACL,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE;kBAC3B,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;kBAC7B,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE;AAC9C,kBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI;AAC5C;WACS;UACD;cACI,IAAI,EAAE,MAAM;AACxB,cAAY,OAAO,EAAE;kBACL,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;kBAC3B,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE;AAC7C,kBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG;AAC3C;WACS;UACD;cACI,IAAI,EAAE,QAAQ;AAC1B,cAAY,OAAO,EAAE;AACrB,kBAAgB,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;AAC1C;AACA;OACK;;AAEL;AACA,MAAI,SAAS,cAAc,CAAC,GAAG,EAAE,MAAM,EAAE;UACjC,IAAI,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE;AACxC,YAAU,OAAO,KAAK;AACtB;;UAEQ,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;AACzC;;AAEA;AACA;AACA;AACA,MAAI,SAAS,UAAU,CAAC,GAAG,EAAE;UACrB,IAAI,MAAM,GAAG,EAAE;;UAEf,OAAO,GAAG,EAAE;cACR,MAAM,IAAI,GAAG;cACb,GAAG,IAAI,CAAC;AACpB;;AAEA,UAAQ,OAAO,MAAM;AACrB;;AAEA,MAAI,SAAS,WAAW,CAAC,MAAM,EAAE;UACzB,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE;UAC5C,IAAI,CAAC,GAAG,CAAC;UACT,IAAI,KAAK,GAAG,IAAI;;UAEhB,OAAO,KAAK,IAAI,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE;cACpC,IAAI,CAAC,EAAE;AACnB,kBAAgB,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AAC5C,sBAAoB,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG;AACxC,mBAAiB,MAAM;AACvB,sBAAoB,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE;sBAC9D,KAAK,GAAG,KAAK;AACjC;AACA,eAAa,MAAM;AACnB,kBAAgB,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE;sBAClC,KAAK,GAAG,KAAK;AACjC;;AAEA,kBAAgB,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG;AACpC;;cAEY,CAAC,IAAI,CAAC;AAClB;;UAEQ,IAAI,KAAK,EAAE;AACnB,cAAY,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;AACjC;;UAEQ,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA,MAAI,SAAS,kBAAkB,CAAC,MAAM,EAAE,OAAO,EAAE;AACjD;AACA;UACQ,IAAI,aAAa,GAAG,GAAG;AAC/B,cAAY,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;cACpB,SAAS,GAAG,EAAE;kBACV,OAAO,GAAG,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AAC/C;AACA,WAAS,CAAC,IAAI,CAAC,GAAG,CAAC;;AAEnB;AACA,UAAQ,IAAI,QAAQ,GAAG,MAAM,GAAG,GAAG,GAAG,aAAa;;AAEnD;UACQ,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AACjD,cAAY,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;AACnF;;AAEA;AACA,UAAQ,OAAO,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC;AACjD;AACA,MAAI,kBAAkB,CAAC,KAAK,GAAG,EAAE;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI,SAAS,YAAY,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE;AACvD,UAAQ,IAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB;AACzD,UAAQ,IAAI,WAAW,GAAG,OAAO,CAAC,WAAW;UACrC,IAAI,QAAQ,GAAG,WAAW,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE;AAC9D,UAAQ,IAAI,wBAAwB,GAAG,OAAO,CAAC,wBAAwB;AACvE,UAAQ,IAAI,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,IAAI,CAAC;AACpE,UAAQ,IAAI,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,CAAC;AACxD,UAAQ,IAAI,iBAAiB,GAAG,OAAO,CAAC,iBAAiB;AACzD,UAAQ,IAAI,gBAAgB,GAAG,OAAO,CAAC,gBAAgB;;AAEvD,UAAQ,IAAI,iBAAiB,IAAI,UAAU,EAAE;cACjC,IAAI,mBAAmB,GAAG;kBACtB,oBAAoB,EAAE,oBAAoB;AAC1D,kBAAgB,WAAW,EAAE;eAChB;;cAED,IAAI,cAAc,EAAE;AAChC,kBAAgB,mBAAmB,CAAC,qBAAqB,GAAG,cAAc;AAC1E,kBAAgB,mBAAmB,CAAC,qBAAqB,GAAG,cAAc;AAC1E;;AAEA;AACA;AACA,cAAY,IAAI,wBAAwB,IAAI,MAAM,GAAG,CAAC,EAAE;AACxD,kBAAgB,mBAAmB,CAAC,wBAAwB,GAAG,wBAAwB;AACvF;;cAEY,IAAI,qBAAqB,EAAE;kBACvB,IAAI,CAAC,6BAA6B,EAAE;sBAChC,IAAI,eAAe,GAAG,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC;AAC7D,sBAAoB,eAAe,CAAC,WAAW,GAAG,KAAK;AACvD,sBAAoB,eAAe,CAAC,gBAAgB,GAAG,GAAG;AAC1D,sBAAoB,MAAM,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE,EAAE,CAAC;AAClF;;kBAEgB,OAAO,kBAAkB,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AACzF,eAAa,MAAM;kBACH,IAAI,CAAC,2BAA2B,EAAE;sBAC9B,IAAI,eAAe,GAAG,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC;AAC7D,sBAAoB,eAAe,CAAC,WAAW,GAAG,KAAK;AACvD,sBAAoB,eAAe,CAAC,gBAAgB,GAAG,GAAG;AAC1D,sBAAoB,MAAM,GAAG,UAAU,CAAC,YAAY,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE,EAAE,CAAC;AAClF;;kBAEgB,OAAO,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,mBAAmB,CAAC;AAC7E;AACA;;AAEA,UAAQ,IAAI,YAAY;;AAExB;UACQ,IAAI,wBAAwB,EAAE;cAC1B,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,wBAAwB,GAAG,CAAC,CAAC;AAC3E,WAAS,MAAM;cACH,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;AAC7D;;AAEA,UAAQ,IAAI,aAAa;AACzB,UAAQ,IAAI,cAAc;AAC1B,UAAQ,IAAI,cAAc;;UAElB,IAAI,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC;;AAE1C,UAAQ,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;;UAE9B,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;;AAEjC,UAAQ,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;AACtC,UAAQ,aAAa,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAQ,IAAI,aAAa,GAAG,aAAa,CAAC,MAAM;AAChD,UAAQ,IAAI,cAAc,GAAG,cAAc,CAAC,MAAM;AAClD,UAAQ,IAAI,UAAU,GAAG,aAAa,GAAG,cAAc;AACvD,UAAQ,IAAI,MAAM,GAAG,aAAa,GAAG,cAAc;;AAEnD,UAAQ,IAAI,wBAAwB,IAAI,UAAU,MAAM,wBAAwB,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,IAAI,cAAc,MAAM,cAAc,GAAG,CAAC,CAAC,EAAE;AAC/J;AACA,cAAY,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;;cAE5B,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU,GAAG,CAAC,EAAE;AAClD,kBAAgB,aAAa,GAAG,aAAa,GAAG,CAAC;AACjD;;AAEA;cACY,IAAI,cAAc,EAAE;kBAChB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAC5C;;AAEA;cACY,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC;AAC1D,cAAY,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;AACxD;;AAEA;AACA;UACQ,IAAI,wBAAwB,EAAE;cAC1B,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAC9D;;AAEA;UACQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,cAAc,EAAE,EAAE,CAAC;;AAEnD,UAAQ,IAAI,QAAQ,GAAG,CAAC,EAAE;AAC1B,cAAY,IAAI,cAAc,CAAC,MAAM,IAAI,QAAQ,EAAE;kBACnC,cAAc,GAAG,cAAc,GAAG,UAAU,CAAC,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC;;AAE9F,kBAAgB,aAAa,GAAG,aAAa,GAAG,cAAc;kBAC9C,cAAc,GAAG,EAAE;AACnC,eAAa,MAAM;kBACH,aAAa,GAAG,aAAa,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC;AACjF,kBAAgB,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/D;AACA,WAAS,MAAM,IAAI,QAAQ,GAAG,CAAC,EAAE;AACjC,cAAY,cAAc,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,aAAa,GAAG,cAAc,CAAC;;cAEzG,aAAa,GAAG,GAAG;AAC/B;;UAEQ,IAAI,CAAC,wBAAwB,EAAE;AACvC;cACY,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC;;AAEpE,cAAY,IAAI,cAAc,CAAC,MAAM,GAAG,cAAc,EAAE;kBACxC,cAAc,GAAG,cAAc,GAAG,UAAU,CAAC,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC;AACpG;;AAEA;AACA;AACA,cAAY,IAAI,aAAa,CAAC,MAAM,GAAG,oBAAoB,EAAE;kBAC7C,aAAa,GAAG,UAAU,CAAC,oBAAoB,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,aAAa;AACvG;AACA;;UAEQ,IAAI,eAAe,GAAG,EAAE;;AAEhC;UACQ,IAAI,WAAW,EAAE;cACb,IAAI,GAAG,aAAa;AAChC,cAAY,IAAI,KAAK;;AAErB,cAAY,OAAO,IAAI,CAAC,MAAM,EAAE;AAChC,kBAAgB,IAAI,QAAQ,CAAC,MAAM,EAAE;AACrC,sBAAoB,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE;AAC5C;;kBAEgB,IAAI,eAAe,EAAE;AACrC,sBAAoB,eAAe,GAAG,iBAAiB,GAAG,eAAe;AACzE;;kBAEgB,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,eAAe;;kBAEtD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;AAC5C;AACA,WAAS,MAAM;cACH,eAAe,GAAG,aAAa;AAC3C;;AAEA;UACQ,IAAI,cAAc,EAAE;AAC5B,cAAY,eAAe,GAAG,eAAe,GAAG,gBAAgB,GAAG,cAAc;AACjF;;AAEA,UAAQ,OAAO,eAAe;AAC9B;;AAEA;AACA,MAAI,SAAS,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAE;AACxC,UAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;cACjC,OAAO,EAAE;AACrB;;AAEA,UAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;AAC7C,cAAY,OAAO,CAAC;AACpB;;AAEA;AACA,UAAQ,OAAO,CAAC;AAChB;;AAEA;AACA,MAAI,SAAS,iBAAiB,CAAC,KAAK,EAAE,UAAU,EAAE;UAC1C,IAAI,MAAM,GAAG,EAAE;;UAEf,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,UAAU,aAAa,EAAE;cAC5C,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,iBAAiB,EAAE;kBAClD;AAChB;;cAEY,IAAI,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE;;AAEjE,cAAY,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EAAE,UAAU,QAAQ,EAAE;kBACtD,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;sBAChC,MAAM,CAAC,IAAI,CAAC;0BACR,IAAI,EAAE,SAAS;0BACf,GAAG,EAAE,QAAQ;AACrC,0BAAwB,KAAK,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC,QAAQ;AACjE,uBAAqB,CAAC;AACtB;AACA,eAAa,CAAC;AACd,WAAS,CAAC;;AAEV,UAAQ,OAAO,MAAM;AACrB;;AAEA;MACI,SAAS,iBAAiB,CAAC,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE;AAClE;UACQ,IAAI,YAAY,KAAK,CAAC,IAAI,YAAY,KAAK,IAAI,EAAE;AACzD,cAAY,OAAO,KAAK;AACxB;;UAEQ,OAAO,KAAK,GAAG,KAAK;AAC5B;;MAEI,IAAI,SAAS,GAAG;AACpB,UAAQ,sBAAsB,EAAE;cACpB,CAAC,EAAE,aAAa;cAChB,EAAE,EAAE,cAAc;cAClB,CAAC,EAAE,QAAQ;cACX,EAAE,EAAE,SAAS;cACb,CAAC,EAAE,QAAQ;cACX,EAAE,EAAE,SAAS;cACb,CAAC,EAAE,MAAM;cACT,EAAE,EAAE,OAAO;cACX,CAAC,EAAE,KAAK;cACR,EAAE,EAAE,MAAM;cACV,CAAC,EAAE,MAAM;cACT,EAAE,EAAE,OAAO;cACX,CAAC,EAAE,OAAO;cACV,EAAE,EAAE,QAAQ;cACZ,CAAC,EAAE,MAAM;AACrB,cAAY,EAAE,EAAE;WACP;AACT,UAAQ,mBAAmB,EAAE;cACjB,CAAC,EAAE,MAAM;cACT,EAAE,EAAE,OAAO;cACX,CAAC,EAAE,KAAK;cACR,EAAE,EAAE,MAAM;cACV,CAAC,EAAE,KAAK;cACR,EAAE,EAAE,MAAM;cACV,CAAC,EAAE,IAAI;cACP,EAAE,EAAE,KAAK;cACT,CAAC,EAAE,IAAI;cACP,EAAE,EAAE,KAAK;cACT,CAAC,EAAE,IAAI;cACP,EAAE,EAAE,KAAK;cACT,CAAC,EAAE,IAAI;cACP,EAAE,EAAE,KAAK;cACT,CAAC,EAAE,IAAI;AACnB,cAAY,EAAE,EAAE;WACP;AACT,UAAQ,qBAAqB,EAAE;cACnB,GAAG,EAAE,SAAS;cACd,EAAE,EAAE,MAAM;AACtB,cAAY,EAAE,EAAE;WACP;AACT,UAAQ,kBAAkB,EAAE;cAChB,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE;AAC9C,cAAY,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG;WAC/B;AACT,UAAQ,iBAAiB,EAAE;OACtB;;AAEL;AACA,MAAI,SAAS,OAAO,CAAC,KAAK,EAAE;AAC5B,UAAQ,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,gBAAgB;AACzE;;AAEA;AACA,MAAI,SAAS,QAAQ,CAAC,GAAG,EAAE;AAC3B,UAAQ,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB;AACxE;;AAEA;AACA,MAAI,SAAS,QAAQ,CAAC,KAAK,EAAE,QAAQ,EAAE;AACvC,UAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM;;AAEhC,UAAQ,OAAO,KAAK,IAAI,CAAC,EAAE;AAC3B,cAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;AAC9D;AACA;;AAEA;AACA,MAAI,SAAS,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE;UAC3B,IAAI,KAAK,GAAG,CAAC;;UAEb,IAAI,GAAG,GAAG,KAAK,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;;AAE5C,UAAQ,IAAI,KAAK;;AAEjB,UAAQ,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;cAChC,KAAK,GAAG,QAAQ;AAC5B,cAAY,QAAQ,GAAG,UAAU,IAAI,EAAE;kBACvB,OAAO,IAAI,KAAK,KAAK;eACxB;AACb;;AAEA,UAAQ,OAAO,KAAK,GAAG,GAAG,EAAE;AAC5B,cAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;cAClD,KAAK,IAAI,CAAC;AACtB;AACA;;AAEA;AACA,MAAI,SAAS,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE;UAC3B,IAAI,KAAK,GAAG,CAAC;AACrB,cAAY,GAAG,GAAG,KAAK,CAAC,MAAM;;UAEtB,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO;;AAErC,UAAQ,OAAO,KAAK,GAAG,GAAG,EAAE;AAC5B,cAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,KAAK,KAAK,EAAE,EAAE,OAAO;cACtD,KAAK,IAAI,CAAC;AACtB;AACA;;AAEA;AACA,MAAI,SAAS,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE;UAC1B,IAAI,KAAK,GAAG,CAAC;AACrB,cAAY,GAAG,GAAG,KAAK,CAAC,MAAM;cAClB,GAAG,GAAG,EAAE;;UAEZ,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,GAAG,CAAC;;AAEzC,UAAQ,OAAO,KAAK,GAAG,GAAG,EAAE;AAC5B,cAAY,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC;cAC1C,KAAK,IAAI,CAAC;AACtB;;AAEA,UAAQ,OAAO,GAAG;AAClB;;AAEA;AACA,MAAI,SAAS,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE;AAChC,UAAQ,OAAO,GAAG,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;AAC1C,cAAY,OAAO,IAAI,CAAC,IAAI,CAAC;AAC7B,WAAS,CAAC;AACV;;AAEA;AACA,MAAI,SAAS,OAAO,CAAC,KAAK,EAAE;UACpB,IAAI,GAAG,GAAG,EAAE;;AAEpB,UAAQ,IAAI,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;cACxB,IAAI,IAAI,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvC,WAAS,CAAC;;AAEV,UAAQ,OAAO,GAAG;AAClB;;AAEA;AACA,MAAI,SAAS,MAAM,CAAC,KAAK,EAAE;UACnB,IAAI,GAAG,GAAG,EAAE;;AAEpB,UAAQ,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;AAClC,cAAY,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC/C,WAAS,CAAC;;AAEV,UAAQ,OAAO,GAAG;AAClB;;AAEA;AACA,MAAI,SAAS,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE;UACxB,IAAI,GAAG,GAAG,EAAE;;AAEpB,UAAQ,IAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE;AAC9B,cAAY,IAAI,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE;AAClC,kBAAgB,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9C,eAAa,CAAC;AACd,WAAS,CAAC;;AAEV,UAAQ,OAAO,MAAM,CAAC,GAAG,CAAC;AAC1B;;AAEA;AACA,MAAI,SAAS,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE;UAC3B,IAAI,GAAG,GAAG,EAAE;;UAEZ,IAAI,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE;AAC3C,cAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AACjC,kBAAgB,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;AACxC,kBAAgB,OAAO,KAAK;AAC5B;AACA,WAAS,CAAC;;AAEV,UAAQ,OAAO,GAAG;AAClB;;AAEA;AACA,MAAI,SAAS,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE;UAC9B,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE;;UAEtC,OAAO,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE;AACjD;;AAEA;AACA,MAAI,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;AAC1B,UAAQ,KAAK,IAAI,GAAG,IAAI,CAAC,EAAE;AAC3B,cAAY,IAAI,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACzD;;AAEA,UAAQ,OAAO,CAAC;AAChB;;AAEA;AACA,MAAI,SAAS,IAAI,CAAC,CAAC,EAAE;UACb,IAAI,GAAG,GAAG,EAAE;;AAEpB,UAAQ,KAAK,IAAI,GAAG,IAAI,CAAC,EAAE;AAC3B,cAAY,IAAI,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvD;;AAEA,UAAQ,OAAO,GAAG;AAClB;;AAEA;AACA,MAAI,SAAS,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE;UAC1B,IAAI,KAAK,GAAG,CAAC;AACrB,cAAY,GAAG,GAAG,KAAK,CAAC,MAAM;;UAEtB,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,KAAK,CAAC;;AAE3C,UAAQ,OAAO,KAAK,GAAG,GAAG,EAAE;AAC5B,cAAY,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE,EAAE,OAAO,IAAI,CAAC;cAC1D,KAAK,IAAI,CAAC;AACtB;;AAEA,UAAQ,OAAO,KAAK;AACpB;;AAEA;AACA,MAAI,SAAS,OAAO,CAAC,KAAK,EAAE;UACpB,IAAI,GAAG,GAAG,EAAE;;AAEpB,UAAQ,IAAI,CAAC,KAAK,EAAE,SAAS,KAAK,EAAE;AACpC,cAAY,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;AACnC,WAAS,CAAC;;AAEV,UAAQ,OAAO,GAAG;AAClB;;MAEI,SAAS,6BAA6B,GAAG;AAO7C,UAAQ,OAAO,KAAK;AACpB;;AAEA,MAAI,SAAS,4BAA4B,CAAC,SAAS,EAAE;AACrD,UAAQ,OAAO,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE;cACzB,WAAW,EAAE,KAAK;cAClB,oBAAoB,EAAE,CAAC;cACvB,qBAAqB,EAAE,CAAC;AACpC,cAAY,qBAAqB,EAAE;WAC1B,CAAC,KAAK,KAAK;AACpB;;AAEA,MAAI,SAAS,oBAAoB,CAAC,SAAS,EAAE;UACrC,IAAI,MAAM,GAAG,IAAI;;AAEzB;AACA,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,CAAC,KAAK,GAAG;AAClF,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI;AACnF,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,oBAAoB,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK;AACpF,UAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,KAAK,CAAC;;AAEpC;UACQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,qBAAqB,EAAE,CAAC,EAAE,qBAAqB,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK;UAC3G,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,qBAAqB,EAAE,CAAC,EAAE,qBAAqB,EAAE,CAAC,EAAE,CAAC,KAAK,OAAO;UAC7G,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,qBAAqB,EAAE,CAAC,EAAE,qBAAqB,EAAE,CAAC,EAAE,CAAC,KAAK,OAAO;UAC7G,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,qBAAqB,EAAE,CAAC,EAAE,qBAAqB,EAAE,CAAC,EAAE,CAAC,KAAK,QAAQ;AACtH,UAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,KAAK,CAAC;;AAEpC;AACA,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,wBAAwB,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK;AAC5F,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,wBAAwB,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK;AAC5F,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,wBAAwB,EAAE,CAAC,EAAE,CAAC,KAAK,KAAK;AAC5F,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,wBAAwB,EAAE,CAAC,EAAE,CAAC,KAAK,OAAO;AAC9F,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,wBAAwB,EAAE,CAAC,EAAE,CAAC,KAAK,OAAO;AAC9F,UAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,KAAK,CAAC;;AAEpC;AACA,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,KAAK,OAAO;AACnF,UAAQ,MAAM,GAAG,MAAM,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,KAAK,MAAM;AACnF,UAAQ,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,KAAK,CAAC;;AAEpC,UAAQ,OAAO,IAAI;AACnB;;AAEA;MACI,SAAS,eAAe,GAAG;UACvB,IAAI,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;UACnC,IAAI,QAAQ,GAAG,EAAE;AACzB,UAAQ,IAAI,SAAS;;AAErB;UACQ,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,KAAK,EAAE;cAC7B,IAAI,CAAC,KAAK,EAAE;AACxB,kBAAgB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACnC,sBAAoB,MAAM,0DAA0D;AACpF;;kBAEgB,SAAS,GAAG,GAAG;AAC/B;;cAEY,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;AACtE,kBAAgB,QAAQ,CAAC,QAAQ,GAAG,GAAG;kBACvB;AAChB;;AAEA,cAAY,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACzC,kBAAgB,QAAQ,CAAC,SAAS,GAAG,GAAG;kBACxB;AAChB;;AAEA,cAAY,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;AAC/B,kBAAgB,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC;AACrC;AACA,WAAS,CAAC;;UAEF,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AAC7C,cAAY,OAAO,EAAE;AACrB;;AAEA,UAAQ,QAAQ,CAAC,iBAAiB,GAAG,IAAI;;UAEjC,IAAI,kBAAkB,GAAG,GAAG,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE;AAC/D,cAAY,OAAO,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;AACvC,WAAS,CAAC;;AAEV;AACA,UAAQ,IAAI,WAAW,GAAG,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;;AAEjG,UAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO;;UAE9B,IAAI,OAAO,EAAE;cACT,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC;AACvD;;AAEA,UAAQ,QAAQ,CAAC,iBAAiB,GAAG,KAAK;AAC1C,UAAQ,QAAQ,CAAC,WAAW,GAAG,WAAW;;AAE1C,UAAQ,OAAO,GAAG,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE;AAC7C,cAAY,OAAO,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;AACvC,WAAS,CAAC;AACV;;AAEA;MACI,SAAS,cAAc,GAAG;;UAEtB,IAAI,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;AAC3C,UAAQ,IAAI,QAAQ,GAAG,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;;AAEvD;AACA;AACA;AACA,UAAQ,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE;AAClD,UAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE;;AAEtC;AACA,UAAQ,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,UAAU,IAAI,IAAI,CAAC,OAAO,EAAE,KAAK,KAAK,EAAE;cAChE,cAAc,GAAG,CAAC;cAClB,QAAQ,GAAG,CAAC;AACxB;;AAEA,UAAQ,IAAI,UAAU,GAAG,cAAc,GAAG,CAAC;;AAE3C;AACA;AACA,UAAQ,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,cAAc,CAAC;AACjF,UAAQ,IAAI,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC;;AAE3E;AACA,UAAQ,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE;cACtB,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;AACtE,kBAAgB,QAAQ,CAAC,QAAQ,GAAG,GAAG;kBACvB;AAChB;;AAEA,cAAY,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACzC,kBAAgB,QAAQ,CAAC,SAAS,GAAG,GAAG;kBACxB;AAChB;;AAEA,cAAY,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;AAC/B,kBAAgB,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC;AACrC;AACA,WAAS,CAAC;;UAEF,IAAI,YAAY,GAAG;cACf,KAAK,EAAE,GAAG;cACV,MAAM,EAAE,GAAG;cACX,KAAK,EAAE,GAAG;cACV,IAAI,EAAE,GAAG;cACT,KAAK,EAAE,GAAG;cACV,OAAO,EAAE,GAAG;cACZ,OAAO,EAAE,GAAG;AACxB,cAAY,YAAY,EAAE;WACjB;;UAED,IAAI,SAAS,GAAG;cACZ,MAAM,EAAE,WAAW;cACnB,KAAK,EAAE,UAAU;cACjB,MAAM,EAAE,OAAO;cACf,KAAK,EAAE,UAAU;cACjB,IAAI,EAAE,UAAU;cAChB,KAAK,EAAE,UAAU;cACjB,OAAO,EAAE,OAAO;cAChB,OAAO,EAAE,OAAO;cAChB,YAAY,EAAE,OAAO;AACjC,cAAY,OAAO,EAAE;WACZ;;AAET;AACA,UAAQ,QAAQ,CAAC,KAAK,GAAG,KAAK;;AAE9B,UAAQ,IAAI,OAAO,GAAG,UAAU,KAAK,EAAE;AACvC,cAAY,OAAO,IAAI,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;kBAC/B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AAClD,eAAa,CAAC;WACL;;AAET,UAAQ,IAAI,SAAS,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE;AAC9D,cAAY,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM;WAChC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;;AAE1B;AACA,UAAQ,QAAQ,CAAC,QAAQ,GAAG,IAAI;;AAEhC;UACQ,IAAI,QAAQ,GAAG,OAAO,QAAQ,CAAC,QAAQ,KAAK,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,QAAQ;;AAEtH;;AAEA;AACA;AACA;AACA,UAAQ,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW;;AAE9C;AACA;AACA,UAAQ,IAAI,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB;;AAE1D,UAAQ,IAAI,OAAO,GAAG,QAAQ,CAAC,OAAO;;AAEtC;UACQ,IAAI,QAAQ,GAAG,EAAE;;UAEjB,IAAI,CAAC,WAAW,EAAE;AAC1B,cAAY,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;kBAC5B,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;AAC9D;;AAEA;AACA,cAAY,IAAI,QAAQ,CAAC,QAAQ,EAAE;AACnC,kBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,UAAU,KAAK,EAAE;AAC1E,sBAAoB,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;;sBAEzB,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,SAAS,EAAE;0BACzC;AACxB;;AAEA,sBAAoB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;AACvC,mBAAiB,CAAC;AAClB;AACA;;AAEA;AACA,UAAQ,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,EAAE;;UAEpC,IAAI,CAAC,UAAU,EAAE;cACb,UAAU,GAAG,EAAE;AAC3B;;AAEA;UACQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,UAAU,GAAG,EAAE;cACjC,IAAI,OAAO,SAAS,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;AACtD,kBAAgB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;sBAClB,UAAU,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;AACpD;;kBAEgB;AAChB;;cAEY,IAAI,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;kBACxB,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;AACtD;AACA,WAAS,CAAC;;AAEV;AACA;UACQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE,UAAU,IAAI,EAAE;AACtE,cAAY,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,EAAE,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;AAClG,WAAS,CAAC;;AAEV;UACQ,IAAI,UAAU,GAAG,QAAQ,CAAC,UAAU,IAAI,MAAM,CAAC,MAAM,EAAE;;AAE/D,UAAQ,IAAI,YAAY,GAAG,QAAQ,CAAC,YAAY;AAChD,UAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS;AAC1C,UAAQ,IAAI,SAAS,GAAG,QAAQ,CAAC,SAAS;AAC1C,UAAQ,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW;AAC9C,UAAQ,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW;AAC9C,UAAQ,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK;;AAElC;UACQ,IAAI,oBAAoB,GAAG,QAAQ,CAAC,oBAAoB,IAAI,SAAS,GAAG,CAAC;UACzE,IAAI,iBAAiB,GAAG,oBAAoB,GAAG,QAAQ,CAAC,SAAS,GAAG,CAAC;UACrE,IAAI,sBAAsB,GAAG,iBAAiB;;AAEtD,UAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ;UAChC,IAAI,UAAU,GAAG,KAAK;;AAE9B,UAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ;UAChC,IAAI,UAAU,GAAG,KAAK;;AAE9B;AACA,UAAQ,IAAI,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB;AAC1D,UAAQ,IAAI,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB;AAC1D,UAAQ,IAAI,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB;AACxD,UAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ;;AAExC,UAAQ,iBAAiB,GAAG,iBAAiB,KAAK,mBAAmB,IAAI,qBAAqB,CAAC;;AAE/F;AACA,UAAQ,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI;;AAEhC,UAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AAC3B,cAAY,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACjC;;UAEQ,IAAI,IAAI,KAAK,IAAI,KAAK,OAAO,IAAI,QAAQ,IAAI,oBAAoB,CAAC,EAAE;cAChE,IAAI,GAAG,KAAK;AACxB;;AAEA,UAAQ,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI,KAAK,OAAO,EAAE;cACvE,IAAI,GAAG,OAAO;AAC1B;;AAEA,UAAQ,IAAI,IAAI,KAAK,KAAK,EAAE;cAChB,IAAI,GAAG,EAAE;AACrB;;AAEA,UAAQ,IAAI,YAAY,GAAG,UAAU,IAAI,EAAE;AAC3C,cAAY,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;WACzB;;UAED,IAAI,MAAM,GAAG,OAAO;UACpB,IAAI,MAAM,GAAG,OAAO;UACpB,IAAI,KAAK,GAAG,MAAM;UAClB,IAAI,IAAI,GAAG,KAAK;UAChB,IAAI,IAAI,GAAG,eAAe;UAC1B,IAAI,MAAM,GAAG,OAAO;;AAE5B,UAAQ,IAAI,SAAS,GAAG,OAAO,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,YAAY,CAAC;AAC/E,UAAQ,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,YAAY,CAAC;AAChE,UAAQ,IAAI,OAAO,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,YAAY,CAAC;AACrD,UAAQ,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,YAAY,CAAC;;AAEzD;AACA,UAAQ,IAAI,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,UAAU,KAAK,EAAE,KAAK,EAAE;AAC/E,cAAY,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;;cAEzB,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;AAC3C,kBAAgB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;kBAEtB,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,SAAS,EAAE;AAC7D,sBAAoB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;AACvC;AACA;;AAEA,cAAY,OAAO;kBACH,KAAK,EAAE,KAAK;AAC5B,kBAAgB,MAAM,EAAE,KAAK,CAAC,MAAM;kBACpB,IAAI,EAAE,EAAE;;AAExB;AACA,kBAAgB,KAAK,GAAG,IAAI,KAAK,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC;;AAE1F;AACA,kBAAgB,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,GAAG,IAAI;eACjE;AACb,WAAS,CAAC;;AAEV;UACQ,IAAI,YAAY,GAAG;cACf,KAAK,EAAE,CAAC;cACR,MAAM,EAAE,CAAC;cACT,KAAK,EAAE,EAAE;cACT,IAAI,EAAE,EAAE;AACpB,cAAY,IAAI,EAAE;WACT;;UAED,IAAI,MAAM,GAAG,EAAE;;UAEf,IAAI,YAAY,EAAE;cACd,SAAS,CAAC,OAAO,EAAE;AAC/B;;AAEA,UAAQ,IAAI,CAAC,SAAS,EAAE,UAAU,KAAK,EAAE;AACzC,cAAY,IAAI,KAAK,CAAC,IAAI,EAAE;kBACZ,IAAI,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,EAAE;AAC5D,sBAAoB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;AAC7C;;kBAEgB,YAAY,GAAG,KAAK;;kBAEpB;AAChB;;cAEY,IAAI,YAAY,EAAE;kBACd,YAAY,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,GAAG,YAAY,CAAC,IAAI;AACnE,eAAa,MAAM;AACnB,kBAAgB,YAAY,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK;AAChD;AACA,WAAS,CAAC;;UAEF,IAAI,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,EAAE;AACpD,cAAY,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;AACrC;;UAEQ,IAAI,YAAY,EAAE;cACd,MAAM,CAAC,OAAO,EAAE;AAC5B;;AAEA;AACA;AACA,UAAQ,IAAI,WAAW,GAAG,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;;AAErF;AACA,UAAQ,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;cACrB,OAAO,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;AACjD;;AAEA;AACA;AACA;AACA;UACQ,WAAW,GAAG,GAAG,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE,KAAK,EAAE;AACpE;cACY,IAAI,UAAU,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC;;AAEjE;AACA,cAAY,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC;;AAEpC;AACA,cAAY,IAAI,QAAQ;;cAEZ,IAAI,UAAU,KAAK,OAAO,IAAI,UAAU,KAAK,QAAQ,EAAE;AACnE,kBAAgB,QAAQ,GAAG,eAAe,CAAC,EAAE,CAAC,UAAU,CAAC;AACzD,eAAa,MAAM;AACnB,kBAAgB,QAAQ,GAAG,SAAS,CAAC,EAAE,CAAC,UAAU,CAAC;AACnD;;cAEY,IAAI,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;AACjD,cAAY,IAAI,YAAY,GAAG,QAAQ,GAAG,UAAU;;cAExC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AACtD,kBAAgB,OAAO,UAAU,KAAK,KAAK,CAAC,IAAI;AAChD,eAAa,CAAC;;cAEF,IAAI,SAAS,IAAI,QAAQ,IAAI,QAAQ,GAAG,QAAQ,EAAE;kBAC9C,UAAU,GAAG,IAAI;AACjC;;cAEY,IAAI,UAAU,IAAI,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,QAAQ,EAAE;kBACjF,UAAU,GAAG,IAAI;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAY,IAAI,SAAS,IAAI,WAAW,KAAK,IAAI,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;kBACvD,WAAW,GAAG,IAAI;AAClC;;AAEA;AACA,cAAY,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC;AACtD,cAAY,eAAe,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC;;AAE5D,cAAY,OAAO;kBACH,QAAQ,EAAE,QAAQ;kBAClB,UAAU,EAAE,UAAU;AACtC;AACA;AACA,kBAAgB,YAAY,EAAE,UAAU,GAAG,YAAY,GAAG,CAAC;kBAC3C,UAAU,EAAE,UAAU;kBACtB,SAAS,EAAE,SAAS;kBACpB,IAAI,EAAE,UAAU;AAChC;AACA;kBACgB,WAAW,EAAE,KAAK,CAAC;eACtB;AACb,WAAS,CAAC;;UAEF,IAAI,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;AACzD,UAAQ,IAAI,QAAQ,GAAG,UAAU,KAAK,EAAE,MAAM,EAAE;cACpC,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC;cACjC,OAAO,WAAW,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,MAAM;WAC9C;;UAED,IAAI,UAAU,GAAG,KAAK;UACtB,IAAI,OAAO,GAAG,KAAK;;AAE3B,UAAQ,IAAI,WAAW,GAAG,UAAU,UAAU,EAAE,KAAK,EAAE;cAC3C,IAAI,aAAa,GAAG;kBAChB,WAAW,EAAE,WAAW;kBACxB,iBAAiB,EAAE,iBAAiB;kBACpC,gBAAgB,EAAE,gBAAgB;kBAClC,QAAQ,EAAE,QAAQ;AAClC,kBAAgB,iBAAiB,EAAE;eACtB;;cAED,IAAI,oBAAoB,EAAE;AACtC,kBAAgB,IAAI,iBAAiB,IAAI,CAAC,EAAE;AAC5C,sBAAoB,UAAU,CAAC,QAAQ,GAAG,CAAC;AAC3C,sBAAoB,UAAU,CAAC,UAAU,GAAG,CAAC;AAC7C,sBAAoB,UAAU,CAAC,YAAY,GAAG,CAAC;AAC/C,mBAAiB,MAAM;AACvB,sBAAoB,aAAa,CAAC,wBAAwB,GAAG,iBAAiB;AAC9E,sBAAoB,UAAU,CAAC,iBAAiB,GAAG,iBAAiB;AACpE;AACA;;AAEA,cAAY,IAAI,UAAU,IAAI,CAAC,OAAO,EAAE;AACxC,kBAAgB,IAAI,UAAU,CAAC,SAAS,EAAE;AAC1C,sBAAoB,UAAU,CAAC,UAAU,GAAG,QAAQ;AACpD,sBAAoB,UAAU,CAAC,YAAY,GAAG,CAAC;AAC/C,mBAAiB,MAAM;AACvB,sBAAoB,UAAU,CAAC,UAAU,GAAG,CAAC;AAC7C,sBAAoB,UAAU,CAAC,YAAY,GAAG,CAAC;AAC/C;AACA;;AAEA,cAAY,IAAI,UAAU,IAAI,CAAC,OAAO,EAAE;AACxC,kBAAgB,IAAI,UAAU,CAAC,UAAU,EAAE;AAC3C,sBAAoB,UAAU,CAAC,UAAU,GAAG,QAAQ;AACpD,sBAAoB,UAAU,CAAC,YAAY,GAAG,CAAC;AAC/C,mBAAiB,MAAM;AACvB,sBAAoB,UAAU,CAAC,UAAU,GAAG,CAAC;AAC7C,sBAAoB,UAAU,CAAC,YAAY,GAAG,CAAC;AAC/C;AACA;;cAEY,IAAI,UAAU,CAAC,UAAU,IAAI,UAAU,CAAC,iBAAiB,IAAI,UAAU,CAAC,iBAAiB,GAAG,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,CAAC,EAAE;AACtJ;AACA,kBAAgB,IAAI,SAAS,GAAG,CAAC,EAAE;sBACf,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,CAAC;AACjF,mBAAiB,MAAM,IAAI,SAAS,KAAK,CAAC,EAAE;AAC5C,sBAAoB,UAAU,CAAC,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC;AACnG,mBAAiB,MAAM;sBACH,IAAI,oBAAoB,EAAE;0BACtB,IAAI,KAAK,EAAE;8BACP,UAAU,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,iBAAiB,GAAG,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;AACzI,2BAAyB,MAAM;AAC/B,8BAA4B,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ;AAClE;;AAEA,0BAAwB,IAAI,UAAU,CAAC,UAAU,EAAE;8BACvB,iBAAiB,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,MAAM;AACxF;AACA,uBAAqB,MAAM;AAC3B,0BAAwB,aAAa,CAAC,cAAc,GAAG,SAAS;;0BAExC,IAAI,KAAK,EAAE;AACnC,8BAA4B,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC;AACnH,2BAAyB,MAAM;8BACH,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,YAAY;AAC9F;AACA;AACA;AACA,eAAa,MAAM;AACnB,kBAAgB,IAAI,oBAAoB,IAAI,UAAU,CAAC,UAAU,EAAE;AACnE;sBACoB,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,iBAAiB,GAAG,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC;;sBAEtI,iBAAiB,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,MAAM;AAChF,mBAAiB,MAAM;AACvB,sBAAoB,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,UAAU;AAC5D;AACA;;cAEY,IAAI,UAAU,CAAC,WAAW,GAAG,CAAC,KAAK,WAAW,IAAI,UAAU,CAAC,EAAE;AAC3E,kBAAgB,aAAa,CAAC,oBAAoB,GAAG,UAAU,CAAC,WAAW;;kBAE3D,IAAI,OAAO,IAAI,aAAa,CAAC,wBAAwB,GAAG,UAAU,CAAC,WAAW,EAAE;sBAC5E,OAAO,aAAa,CAAC,wBAAwB;AACjE;AACA;;AAEA,cAAY,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,EAAE,sBAAsB,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;kBACjJ,UAAU,GAAG,IAAI;AACjC;;AAEA,cAAY,UAAU,CAAC,cAAc,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,EAAE,aAAa,EAAE,UAAU,CAAC;;AAEjG,cAAY,aAAa,CAAC,WAAW,GAAG,KAAK;AAC7C,cAAY,aAAa,CAAC,gBAAgB,GAAG,GAAG;AAChD,cAAY,UAAU,CAAC,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC;;AAE7F,cAAY,IAAI,UAAU,CAAC,WAAW,KAAK,CAAC,IAAI,UAAU,CAAC,IAAI,KAAK,cAAc,EAAE;kBACpE,UAAU,CAAC,gBAAgB,GAAG,YAAY,CAAC,UAAU,CAAC,KAAK,EAAE;sBACzD,oBAAoB,EAAE,CAAC;AAC3C,sBAAoB,WAAW,EAAE;mBAChB,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AACpC;;AAEA,cAAY,OAAO,UAAU;WACpB;;AAET;AACA,UAAQ,WAAW,GAAG,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC;AACnD,UAAQ,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;;AAE1C;AACA,UAAQ,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;AACpC,cAAY,IAAI,QAAQ,GAAG,UAAU,IAAI,EAAE;AAC3C,kBAAgB,OAAO,IAAI,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AAC/D,sBAAoB,OAAO,UAAU,CAAC,IAAI,KAAK,IAAI;AACnD,mBAAiB,CAAC;eACL;;AAEb,cAAY,IAAI,WAAW,GAAG,UAAU,MAAM,EAAE;kBAChC,IAAI,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;;kBAE5C,IAAI,CAAC,gBAAgB,EAAE;sBACnB;AACpB;;kBAEgB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,MAAM,EAAE;sBACnC,IAAI,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;;sBAE5C,IAAI,CAAC,gBAAgB,EAAE;0BACnB;AACxB;;AAEA,sBAAoB,IAAI,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,EAAE,CAAC,KAAK,MAAM,CAAC,KAAK,EAAE;AAC1F,0BAAwB,gBAAgB,CAAC,QAAQ,GAAG,CAAC;AACrD,0BAAwB,gBAAgB,CAAC,UAAU,GAAG,CAAC;AACvD,0BAAwB,gBAAgB,CAAC,YAAY,GAAG,CAAC;AACzD,0BAAwB,gBAAgB,CAAC,QAAQ,IAAI,CAAC;AACtD,0BAAwB,gBAAgB,CAAC,UAAU,IAAI,CAAC;AACxD,0BAAwB,gBAAgB,CAAC,YAAY,GAAG,CAAC;0BACjC,gBAAgB,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,UAAU,CAAC,QAAQ,EAAE;0BAC1E,OAAO,GAAG,IAAI;AACtC;AACA,mBAAiB,CAAC;eACL;;AAEb,cAAY,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;AACtC;;AAEA;UACQ,IAAI,OAAO,EAAE;cACT,UAAU,GAAG,KAAK;cAClB,iBAAiB,GAAG,sBAAsB;AACtD,cAAY,WAAW,GAAG,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC;AACvD,cAAY,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AAC9C;;UAEQ,IAAI,WAAW,IAAI,EAAE,UAAU,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;cAChD,WAAW,GAAG,GAAG,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACjE,kBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AAC5D,sBAAoB,OAAO,UAAU,CAAC,IAAI,KAAK,UAAU;AACzD,mBAAiB,CAAC,EAAE;AACpB,sBAAoB,OAAO,UAAU;AACrC;;AAEA,kBAAgB,OAAO,IAAI;AAC3B,eAAa,CAAC;;AAEd,cAAY,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AAC9C,WAAS,MAAM;AACf;cACY,IAAI,SAAS,EAAE;kBACX,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACtE;AACA;AACA;AACA;AACA,sBAAoB,OAAO,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC;AAC/G,mBAAiB,CAAC;AAClB;;AAEA;AACA,cAAY,IAAI,OAAO,IAAI,WAAW,CAAC,MAAM,EAAE;kBAC/B,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC;AAC3D;;AAEA;cACY,IAAI,SAAS,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;kBACrC,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACzE;AACA;AACA;AACA;AACA,sBAAoB,OAAO,CAAC,UAAU,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS;AAC9G,mBAAiB,CAAC;AAClB;;AAEA;cACY,IAAI,OAAO,EAAE;kBACT,WAAW,GAAG,GAAG,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE,KAAK,EAAE;AAC5E,sBAAoB,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;AAC/F,0BAAwB,OAAO,IAAI;AACnC;;AAEA,sBAAoB,OAAO,UAAU;AACrC,mBAAiB,CAAC;;AAElB,kBAAgB,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AAClD;;AAEA;AACA,cAAY,IAAI,SAAS,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,CAAC,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC,EAAE;kBACrJ,WAAW,GAAG,EAAE;AAChC;AACA;;UAEQ,IAAI,iBAAiB,EAAE;AAC/B,cAAY,OAAO,WAAW;AAC9B;;AAEA;AACA,UAAQ,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;cAC1B,IAAI,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;;cAElC,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACrE,kBAAgB,OAAO,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;AACrD,eAAa,CAAC;;AAEd,cAAY,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE;kBACrB;AAChB;;cAEY,IAAI,MAAM,GAAG,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC;;AAE/D,cAAY,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;;AAE/C,cAAY,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;AAC3B,kBAAgB,MAAM,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAC5D,eAAa,MAAM;AACnB,kBAAgB,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;AAChC;;AAEA,cAAY,IAAI,SAAS,GAAG,UAAU,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;;cAEvE,IAAI,MAAM,GAAG,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC;;cAE/C,IAAI,aAAa,GAAG,KAAK;;cAEzB,IAAI,gBAAgB,GAAG,EAAE;;AAErC;cACY,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,UAAU,SAAS,EAAE;kBACtD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AAC1D,sBAAoB,OAAO,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS;AACnF,mBAAiB,CAAC;;kBAEF,IAAI,KAAK,EAAE;sBACP,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK;;sBAE1C,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,EAAE;AACtE,0BAAwB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC;0BAC9D,aAAa,GAAG,IAAI;AAC5C;AACA;AACA,eAAa,CAAC;;AAEd;AACA,cAAY,IAAI,SAAS,IAAI,CAAC,aAAa,EAAE;AAC7C,kBAAgB,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;;AAEjD,kBAAgB,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;sBAC1B,IAAI,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,KAAK,EAAE;0BAC9C,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE;AACrE;AACA;AACA,8BAA4B,OAAO,KAAK;AACxC;;AAEA;AACA;0BACwB;AACxB;;sBAEoB,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE;AACjE;0BACwB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAClG,0BAAwB,OAAO,KAAK;AACpC;AACA,mBAAiB,CAAC;AAClB;AACA,WAAS,CAAC;;AAEV;UACQ,MAAM,GAAG,GAAG,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AAC9C,cAAY,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;kBACb,OAAO,KAAK,CAAC,IAAI;AACjC;;cAEY,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACrE,kBAAgB,OAAO,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;AACrD,eAAa,CAAC;;cAEF,IAAI,CAAC,UAAU,EAAE;AAC7B,kBAAgB,OAAO,EAAE;AACzB;;cAEY,IAAI,GAAG,GAAG,EAAE;;cAEZ,IAAI,YAAY,EAAE;AAC9B,kBAAgB,GAAG,IAAI,KAAK,CAAC,IAAI;AACjC;;cAEY,IAAI,UAAU,IAAI,UAAU,IAAI,CAAC,UAAU,IAAI,UAAU,EAAE;kBACvD,GAAG,IAAI,IAAI;kBACX,UAAU,GAAG,KAAK;kBAClB,UAAU,GAAG,KAAK;AAClC;;cAEY,IAAI,UAAU,IAAI,UAAU,IAAI,CAAC,UAAU,IAAI,UAAU,EAAE;kBACvD,GAAG,IAAI,IAAI;kBACX,UAAU,GAAG,KAAK;kBAClB,UAAU,GAAG,KAAK;AAClC;;AAEA,cAAY,IAAI,UAAU,KAAK,UAAU,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;kBAC9H,GAAG,IAAI,GAAG;kBACV,UAAU,GAAG,KAAK;AAClC;;cAEY,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,IAAI,UAAU,CAAC,gBAAgB,EAAE;AAC9E,kBAAgB,GAAG,IAAI,UAAU,CAAC,gBAAgB;AAClD,eAAa,MAAM;AACnB,kBAAgB,GAAG,IAAI,UAAU,CAAC,cAAc;AAChD;;cAEY,IAAI,CAAC,YAAY,EAAE;AAC/B,kBAAgB,GAAG,IAAI,KAAK,CAAC,IAAI;AACjC;;AAEA,cAAY,OAAO,GAAG;AACtB,WAAS,CAAC;;AAEV;UACQ,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC;AACtF;;AAEA;MACI,SAAS,qBAAqB,GAAG;AACrC,UAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ;;AAE/B,UAAQ,IAAI,QAAQ,GAAG,SAAS,QAAQ,CAAC,IAAI,EAAE;AAC/C,cAAY,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;WACzB;;UAED,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC;;UAE1C,IAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC;;AAErD;AACA,UAAQ,QAAQ,SAAS;AACzB,cAAY,KAAK,cAAc;AAC/B,kBAAgB,OAAO,MAAM;cACjB,KAAK,SAAS,CAAC;AAC3B,cAAY,KAAK,SAAS;AAC1B,kBAAgB,OAAO,OAAO;AAC9B,cAAY,KAAK,OAAO;AACxB,kBAAgB,OAAO,OAAO;AAC9B,cAAY,KAAK,MAAM;AACvB,kBAAgB,IAAI,SAAS,KAAK,QAAQ,EAAE;AAC5C,sBAAoB,OAAO,MAAM;AACjC;AACA,cAAY,KAAK,OAAO;AACxB,kBAAgB,IAAI,SAAS,KAAK,QAAQ,EAAE;AAC5C,sBAAoB,OAAO,MAAM;AACjC;;AAEA,kBAAgB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;AACxC,sBAAoB,IAAI,CAAC,IAAI,GAAG,MAAM;AACtC;;AAEA,kBAAgB,OAAO,kBAAkB;AACzC,cAAY,KAAK,QAAQ;AACzB,kBAAgB,IAAI,SAAS,KAAK,QAAQ,EAAE;AAC5C,sBAAoB,OAAO,MAAM;AACjC;AACA,cAAY,KAAK,OAAO;AACxB,kBAAgB,IAAI,SAAS,KAAK,QAAQ,EAAE;AAC5C,sBAAoB,OAAO,MAAM;AACjC;;AAEA,kBAAgB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;AACxC,sBAAoB,IAAI,CAAC,IAAI,GAAG,MAAM;AACtC;;AAEA,kBAAgB,OAAO,kBAAkB;cAC7B;AACZ,kBAAgB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;AACxC,sBAAoB,IAAI,CAAC,IAAI,GAAG,MAAM;AACtC;;AAEA,kBAAgB,OAAO,8BAA8B;AACrD;AACA;;AAEA;AACA,MAAI,SAAS,IAAI,CAAC,OAAO,EAAE;UACnB,IAAI,CAAC,OAAO,EAAE;AACtB,cAAY,MAAM,0DAA0D;AAC5E;;AAEA,UAAQ,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,eAAe;UACzC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,GAAG,cAAc;;UAE3C,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,GAAG;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;cACY,IAAI,EAAE,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA;cACY,QAAQ,EAAE,IAAI;;AAE1B;AACA;AACA;AACA;AACA;cACY,OAAO,EAAE,IAAI;;AAEzB;AACA;AACA;AACA;cACY,QAAQ,EAAE,IAAI;;AAE1B;AACA;AACA;AACA;cACY,QAAQ,EAAE,IAAI;;AAE1B;AACA;AACA;AACA;AACA;AACA;cACY,SAAS,EAAE,CAAC;;AAExB;AACA;AACA;AACA;cACY,KAAK,EAAE,KAAK;;AAExB;AACA;AACA;cACY,WAAW,EAAE,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;cACY,UAAU,EAAE,IAAI;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;cACY,SAAS,EAAE,IAAI;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;cACY,YAAY,EAAE,KAAK;;AAE/B;AACA;cACY,WAAW,EAAE,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;cACY,oBAAoB,EAAE,KAAK;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;cACY,QAAQ,EAAE,qBAAqB;;AAE3C;AACA;AACA;AACA;cACY,iBAAiB,EAAE,IAAI;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;cACY,iBAAiB,EAAE,GAAG;;AAElC;AACA;AACA;cACY,gBAAgB,EAAE,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;cACY,QAAQ,EAAE,CAAC,CAAC;WACf;;AAET,UAAQ,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC;AAC7C;;AAEA;MACI,IAAI,uBAAuB,GAAG,SAAS,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE;UAC5D,OAAO,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC;OAChD;;MAED,mBAAmB,GAAG,6BAA6B,EAAE,IAAI,oBAAoB,CAAC,uBAAuB,CAAC;AAC1G,MAAI,2BAA2B,GAAG,mBAAmB,IAAI,4BAA4B,CAAC,uBAAuB,CAAC;;AAE9G;MACI,IAAI,yBAAyB,GAAG,SAAS,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE;AACtE,UAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;AAChG,cAAY,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;AAC3E;OACK;;AAEL,MAAI,qBAAqB,GAAG,oBAAoB,CAAC,yBAAyB,CAAC;AAC3E,MAAI,6BAA6B,GAAG,qBAAqB,IAAI,4BAA4B,CAAC,yBAAyB,CAAC;;AAEpH;MACI,IAAI,CAAC,MAAM,CAAC;;AAEhB;AACA;AACA,MAAI,OAAO,IAAI;AACf,GAAC,CAAC,CAAA;;;;;;;;ACzrDF,yBAAyB,CAACC,KAAM,CAAC;MAEpB,wBAAwB,CAAA;AAiBjC,IAAA,OAAO,oBAAoB,CAAC,QAAgB,EAAE,QAAgB,EAAA;QAC1D,MAAM,aAAa,GAAW,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;AACxD,QAAA,OAAOA,KAAM,CACT,CAAG,EAAA,aAAa,CAAI,CAAA,EAAA,QAAQ,CAAE,CAAA,EAC9B,kBAAkB,CACrB,CAAC,MAAM,EAAE;;IAGN,OAAO,WAAW,CAAC,UAAkB,EAAA;AACzC,QAAA,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;AACjC,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE;AAC1B,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;AAE/B,QAAA,OAAO,GAAG,KAAK,CAAA,CAAA,EAAI,GAAG,CAAI,CAAA,EAAA,IAAI,EAAE;;AAGpC,IAAA,OAAO,mBAAmB,CACtB,YAAgC,EAChC,MAAkB,EAAA;QAElB,IAAI,CAAC,YAAY,EAAE;YACf;;AACG,aAAA,IAAI,wBAAwB,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE;YAC7D,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,YAAY,CAAC,MAAM;AACxC,YAAA,OAAO,GAAG,wBAAwB,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,wBAAwB,CAAC,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE;;aAC3H;YACH,MAAM,IAAI,GAAG,iBAAiB,CAAC,YAAY,CAAC,QAAQ,CAAC;YACrD,MAAM,SAAS,GAAGA,KAAM,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC;YACzC,MAAM,YAAY,GAAGA,KAAM;AACtB,iBAAA,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK;iBAC7B,MAAM,CAAC,MAAM,CAAC;AACnB,YAAA,OAAO,CAAG,EAAA,YAAY,CAAM,GAAA,EAAA,SAAS,EAAE;;;IAI/C,OAAO,sBAAsB,CAAC,SAA6B,EAAA;QAMvD,IAAI,CAAC,SAAS,EAAE;YACZ;;AAGJ,QAAA,IAAI,wBAAwB,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;YACnD,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM;YACrC,MAAM,QAAQ,GAAGA,KAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;YACtC,MAAM,MAAM,GAAGA,KAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE;AAClC,YAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE;;;IAInC,OAAO,cAAc,CACjB,SAAS,GAAG,UAAU,EACtB,OAAO,GAAG,UAAU,EAAA;AAEpB,QAAA,MAAM,QAAQ,GAAa,IAAI,CAAC,cAAc,EAAE;QAChD,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACnD,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC;AAEnD,QAAA,OAAO,QAAQ,CAAC,KAAK,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,MAAM;AAC/D,YAAA,KAAK,EAAE,IAAI;AACd,SAAA,CAAC,CAAC;;AAGC,IAAA,OAAO,cAAc,GAAA;QACzB,MAAM,IAAI,GAAa,EAAE;AACzB,QAAA,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;AAC9B,YAAA,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,CAAA,EAAG,IAAI,CAAI,CAAA,EAAA,IAAI,CAAE,CAAA,CAAC;;;AAGpC,QAAA,OAAO,IAAI;;AAGP,IAAA,OAAO,eAAe,GAAA;AAC1B,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE;QACtC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,KAAI;AACvC,YAAA,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;AAChB,YAAA,OAAO,GAAG;SACb,EAAE,EAAE,CAAC;;IAGF,OAAO,YAAY,CAAC,IAAY,EAAA;AACpC,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE;AACpC,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC;;IAGtB,OAAO,gBAAgB,CAAC,SAA6B,EAAA;AAIjD,QAAA,IAAI,wBAAwB,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;YACnD,OAAO;gBACH,KAAK,EAAEA,KAAM,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;gBAC7C,GAAG,EAAEA,KAAM,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE;aAC5C;;AACE,aAAA,IAAI,SAAS,CAAC,QAAQ,EAAE;YAC3B,OAAO;gBACH,KAAK,EAAEA,KAAM;qBACR,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,MAAM;AACtD,qBAAA,MAAM,EAAE;AACb,gBAAA,GAAG,EAAEA,KAAM,EAAE,CAAC,MAAM,EAAE;aACzB;;;IAIT,OAAO,wBAAwB,CAAC,SAA6B,EAAA;AAIzD,QAAA,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;AACvD,QAAA,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE;;IAGzD,OAAO,oCAAoC,CACvC,SAA6B,EAAA;AAE7B,QAAA,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAChB,wBAAwB,CAAC,gBAAgB,CAAC,SAAS,CAAC;QACxD,OAAO,YAAY,CAAC,kCAAkC,CAAC,KAAK,EAAE,GAAG,CAAC;;IAGtE,OAAO,gBAAgB,CACnB,IAAmB,EACnB,UAAyB,GAAA,UAAU,CAAC,QAAQ,EAAA;AAE5C,QAAA,OAAO,IAAI,GAAGA,KAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;;IAG9C,OAAO,uBAAuB,CAClC,YAAiB,EAAA;QAEjB,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG;QAC3D,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI;QAE7D,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI;QAC7D,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK;QAE/D,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG;QAC9D,MAAM,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI;QAEhE,OAAO;AACH,YAAA,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE;AACvC,YAAA,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE;AACzC,YAAA;AACI,gBAAA,IAAI,EAAE,IAAI;AACV,gBAAA,WAAW,EAAE,UAAU;AAC1B,aAAA;AACD,YAAA,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE;AACzC,YAAA,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,YAAY,EAAE;AAC1C,YAAA;AACI,gBAAA,IAAI,EAAE,MAAM;AACZ,gBAAA,WAAW,EAAE,aAAa;AAC7B,aAAA;SACJ;;AAGL,IAAA,OAAO,uBAAuB,CAC1B,QAAgB,EAChB,YAAiB,EAAA;QAEjB,MAAM,WAAW,GACb,wBAAwB,CAAC,uBAAuB,CAAC,YAAY,CAAC;QAClE,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;QAEzC,MAAM,mBAAmB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,KAAI;YACvD,IAAI,kBAAkB,GAAG,QAAQ;AACjC,YAAA,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;gBAC1B,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;oBACrC,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC;AACzC,oBAAA,kBAAkB,GAAGC,qBAAO,CACxB,QAAQ,EACR,IAAI,EACJ,GAAG,GAAG,KAAK,CAAC,WAAW,CAC1B;;AAET,aAAC,CAAC;AACF,YAAA,OAAO,kBAAkB;AAC7B,SAAC,CAAC;AAEF,QAAA,OAAO,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC;;AAGxC,IAAA,OAAO,iBAAiB,CACpB,KAAW,EACX,GAAS,EACT,YAAiB,EAAA;AAEjB,QAAA,MAAM,YAAY,GAAGD,KAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAACA,KAAM,CAAC,KAAK,CAAC,CAAC;AAEpD,QAAA,MAAM,cAAc,GAAS,CACzBA,KAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,cAAc,CAAC,EAC9C,MAAM,CAAC,4BAA4B,CAAC;QAEvC,OAAO,wBAAwB,CAAC,uBAAuB,CACnD,cAAc,EACd,YAAY,CACf;;IAGL,OAAO,yBAAyB,CAAC,UAAqB,EAAA;AAClD,QAAA,MAAM,uBAAuB,GACzB,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE;QACjE,MAAM,QAAQ,GAAGA,KAAM,CAAC,QAAQ,CAAC,uBAAuB,CAAC;AACzD,QAAA,OAAO,QAAQ,CAAC,MAAM,EAAE;;IAG5B,OAAO,yBAAyB,CAC5B,SAA6B,EAAA;QAE7B,IAAI,SAAS,CAAC,QAAQ,IAAI,gBAAgB,CAAC,MAAM,EAAE;AAC/C,YAAA,IAAI,SAAS,CAAC,MAAM,EAAE;gBAClB,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;gBACxC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;AAC5C,gBAAA,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,GAAG,IAAI,CAAC;;;aAEvD;AACH,YAAA,OAAO,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC;;;;;IAMpD,OAAO,aAAa,CAAC,SAA6B,EAAA;QAC9C,IAAI,SAAS,CAAC,QAAQ,KAAK,gBAAgB,CAAC,MAAM,EAAE;AAChD,YAAA,MAAM,WAAW,GAAqB,SAAS,CAAC,MAAM;AACtD,YAAA,QACI,CAACE,qBAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE;;;;AAtP5D,wBAAA,CAAA,KAAK,GAAG;IACnB,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;CACV;AACc,wBAAA,CAAA,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;;;;","names":["this","moment","replace","isEmpty"],"sources":["../node_modules/moment-duration-format/lib/moment-duration-format.js","src/utils/time-date-presentation.util.ts"],"sourcesContent":["/*! Moment Duration Format v2.2.2\n *  https://github.com/jsmreese/moment-duration-format\n *  Date: 2018-02-16\n *\n *  Duration format plugin function for the Moment.js library\n *  http://momentjs.com/\n *\n *  Copyright 2018 John Madhavan-Reese\n *  Released under the MIT license\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['moment'], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but only CommonJS-like\n        // enviroments that support module.exports, like Node.\n        try {\n            module.exports = factory(require('moment'));\n        } catch (e) {\n            // If moment is not available, leave the setup up to the user.\n            // Like when using moment-timezone or similar moment-based package.\n            module.exports = factory;\n        }\n    }\n\n    if (root) {\n        // Globals.\n        root.momentDurationFormatSetup = root.moment ? factory(root.moment) : factory;\n    }\n})(this, function (moment) {\n    // `Number#tolocaleString` is tested on plugin initialization.\n    // If the feature test passes, `toLocaleStringWorks` will be set to `true` and the\n    // native function will be used to generate formatted output. If the feature\n    // test fails, the fallback format function internal to this plugin will be\n    // used.\n    var toLocaleStringWorks = false;\n\n    // `Number#toLocaleString` rounds incorrectly for select numbers in Microsoft\n    // environments (Edge, IE11, Windows Phone) and possibly other environments.\n    // If the rounding test fails and `toLocaleString` will be used for formatting,\n    // the plugin will \"pre-round\" number values using the fallback number format\n    // function before passing them to `toLocaleString` for final formatting.\n    var toLocaleStringRoundingWorks = false;\n\n    // `Intl.NumberFormat#format` is tested on plugin initialization.\n    // If the feature test passes, `intlNumberFormatRoundingWorks` will be set to\n    // `true` and the native function will be used to generate formatted output.\n    // If the feature test fails, either `Number#tolocaleString` (if\n    // `toLocaleStringWorks` is `true`), or the fallback format function internal\n    //  to this plugin will be used.\n    var intlNumberFormatWorks = false;\n\n    // `Intl.NumberFormat#format` rounds incorrectly for select numbers in Microsoft\n    // environments (Edge, IE11, Windows Phone) and possibly other environments.\n    // If the rounding test fails and `Intl.NumberFormat#format` will be used for\n    // formatting, the plugin will \"pre-round\" number values using the fallback number\n    // format function before passing them to `Intl.NumberFormat#format` for final\n    // formatting.\n    var intlNumberFormatRoundingWorks = false;\n\n    // Token type names in order of descending magnitude.\n    var types = \"escape years months weeks days hours minutes seconds milliseconds general\".split(\" \");\n\n    var bubbles = [\n        {\n            type: \"seconds\",\n            targets: [\n                { type: \"minutes\", value: 60 },\n                { type: \"hours\", value: 3600 },\n                { type: \"days\", value: 86400 },\n                { type: \"weeks\", value: 604800 },\n                { type: \"months\", value: 2678400 },\n                { type: \"years\", value: 31536000 }\n            ]\n        },\n        {\n            type: \"minutes\",\n            targets: [\n                { type: \"hours\", value: 60 },\n                { type: \"days\", value: 1440 },\n                { type: \"weeks\", value: 10080 },\n                { type: \"months\", value: 44640 },\n                { type: \"years\", value: 525600 }\n            ]\n        },\n        {\n            type: \"hours\",\n            targets: [\n                { type: \"days\", value: 24 },\n                { type: \"weeks\", value: 168 },\n                { type: \"months\", value: 744 },\n                { type: \"years\", value: 8760 }\n            ]\n        },\n        {\n            type: \"days\",\n            targets: [\n                { type: \"weeks\", value: 7 },\n                { type: \"months\", value: 31 },\n                { type: \"years\", value: 365 }\n            ]\n        },\n        {\n            type: \"months\",\n            targets: [\n                { type: \"years\", value: 12 }\n            ]\n        }\n    ];\n\n    // stringIncludes\n    function stringIncludes(str, search) {\n        if (search.length > str.length) {\n          return false;\n        }\n\n        return str.indexOf(search) !== -1;\n    }\n\n    // repeatZero(qty)\n    // Returns \"0\" repeated `qty` times.\n    // `qty` must be a integer >= 0.\n    function repeatZero(qty) {\n        var result = \"\";\n\n        while (qty) {\n            result += \"0\";\n            qty -= 1;\n        }\n\n        return result;\n    }\n\n    function stringRound(digits) {\n        var digitsArray = digits.split(\"\").reverse();\n        var i = 0;\n        var carry = true;\n\n        while (carry && i < digitsArray.length) {\n            if (i) {\n                if (digitsArray[i] === \"9\") {\n                    digitsArray[i] = \"0\";\n                } else {\n                    digitsArray[i] = (parseInt(digitsArray[i], 10) + 1).toString();\n                    carry = false;\n                }\n            } else {\n                if (parseInt(digitsArray[i], 10) < 5) {\n                    carry = false;\n                }\n\n                digitsArray[i] = \"0\";\n            }\n\n            i += 1;\n        }\n\n        if (carry) {\n            digitsArray.push(\"1\");\n        }\n\n        return digitsArray.reverse().join(\"\");\n    }\n\n    // cachedNumberFormat\n    // Returns an `Intl.NumberFormat` instance for the given locale and configuration.\n    // On first use of a particular configuration, the instance is cached for fast\n    // repeat access.\n    function cachedNumberFormat(locale, options) {\n        // Create a sorted, stringified version of `options`\n        // for use as part of the cache key\n        var optionsString = map(\n            keys(options).sort(),\n            function(key) {\n                return key + ':' + options[key];\n            }\n        ).join(',');\n\n        // Set our cache key\n        var cacheKey = locale + '+' + optionsString;\n\n        // If we don't have this configuration cached, configure and cache it\n        if (!cachedNumberFormat.cache[cacheKey]) {\n            cachedNumberFormat.cache[cacheKey] = Intl.NumberFormat(locale, options);\n        }\n\n        // Return the cached version of this configuration\n        return cachedNumberFormat.cache[cacheKey];\n    }\n    cachedNumberFormat.cache = {};\n\n    // formatNumber\n    // Formats any number greater than or equal to zero using these options:\n    // - userLocale\n    // - useToLocaleString\n    // - useGrouping\n    // - grouping\n    // - maximumSignificantDigits\n    // - minimumIntegerDigits\n    // - fractionDigits\n    // - groupingSeparator\n    // - decimalSeparator\n    //\n    // `useToLocaleString` will use `Intl.NumberFormat` or `toLocaleString` for formatting.\n    // `userLocale` option is passed through to the formatting function.\n    // `fractionDigits` is passed through to `maximumFractionDigits` and `minimumFractionDigits`\n    // Using `maximumSignificantDigits` will override `minimumIntegerDigits` and `fractionDigits`.\n    function formatNumber(number, options, userLocale) {\n        var useToLocaleString = options.useToLocaleString;\n        var useGrouping = options.useGrouping;\n        var grouping = useGrouping && options.grouping.slice();\n        var maximumSignificantDigits = options.maximumSignificantDigits;\n        var minimumIntegerDigits = options.minimumIntegerDigits || 1;\n        var fractionDigits = options.fractionDigits || 0;\n        var groupingSeparator = options.groupingSeparator;\n        var decimalSeparator = options.decimalSeparator;\n\n        if (useToLocaleString && userLocale) {\n            var localeStringOptions = {\n                minimumIntegerDigits: minimumIntegerDigits,\n                useGrouping: useGrouping\n            };\n\n            if (fractionDigits) {\n                localeStringOptions.maximumFractionDigits = fractionDigits;\n                localeStringOptions.minimumFractionDigits = fractionDigits;\n            }\n\n            // toLocaleString output is \"0.0\" instead of \"0\" for HTC browsers\n            // when maximumSignificantDigits is set. See #96.\n            if (maximumSignificantDigits && number > 0) {\n                localeStringOptions.maximumSignificantDigits = maximumSignificantDigits;\n            }\n\n            if (intlNumberFormatWorks) {\n                if (!intlNumberFormatRoundingWorks) {\n                    var roundingOptions = extend({}, options);\n                    roundingOptions.useGrouping = false;\n                    roundingOptions.decimalSeparator = \".\";\n                    number = parseFloat(formatNumber(number, roundingOptions), 10);\n                }\n\n                return cachedNumberFormat(userLocale, localeStringOptions).format(number);\n            } else {\n                if (!toLocaleStringRoundingWorks) {\n                    var roundingOptions = extend({}, options);\n                    roundingOptions.useGrouping = false;\n                    roundingOptions.decimalSeparator = \".\";\n                    number = parseFloat(formatNumber(number, roundingOptions), 10);\n                }\n\n                return number.toLocaleString(userLocale, localeStringOptions);\n            }\n        }\n\n        var numberString;\n\n        // Add 1 to digit output length for floating point errors workaround. See below.\n        if (maximumSignificantDigits) {\n            numberString = number.toPrecision(maximumSignificantDigits + 1);\n        } else {\n            numberString = number.toFixed(fractionDigits + 1);\n        }\n\n        var integerString;\n        var fractionString;\n        var exponentString;\n\n        var temp = numberString.split(\"e\");\n\n        exponentString = temp[1] || \"\";\n\n        temp = temp[0].split(\".\");\n\n        fractionString = temp[1] || \"\";\n        integerString = temp[0] || \"\";\n\n        // Workaround for floating point errors in `toFixed` and `toPrecision`.\n        // (3.55).toFixed(1); --> \"3.5\"\n        // (123.55 - 120).toPrecision(2); --> \"3.5\"\n        // (123.55 - 120); --> 3.549999999999997\n        // (123.55 - 120).toFixed(2); --> \"3.55\"\n        // Round by examing the string output of the next digit.\n\n        // *************** Implement String Rounding here ***********************\n        // Check integerString + fractionString length of toPrecision before rounding.\n        // Check length of fractionString from toFixed output before rounding.\n        var integerLength = integerString.length;\n        var fractionLength = fractionString.length;\n        var digitCount = integerLength + fractionLength;\n        var digits = integerString + fractionString;\n\n        if (maximumSignificantDigits && digitCount === (maximumSignificantDigits + 1) || !maximumSignificantDigits && fractionLength === (fractionDigits + 1)) {\n            // Round digits.\n            digits = stringRound(digits);\n\n            if (digits.length === digitCount + 1) {\n                integerLength = integerLength + 1;\n            }\n\n            // Discard final fractionDigit.\n            if (fractionLength) {\n                digits = digits.slice(0, -1);\n            }\n\n            // Separate integer and fraction.\n            integerString = digits.slice(0, integerLength);\n            fractionString = digits.slice(integerLength);\n        }\n\n        // Trim trailing zeroes from fractionString because toPrecision outputs\n        // precision, not significant digits.\n        if (maximumSignificantDigits) {\n            fractionString = fractionString.replace(/0*$/, \"\");\n        }\n\n        // Handle exponent.\n        var exponent = parseInt(exponentString, 10);\n\n        if (exponent > 0) {\n            if (fractionString.length <= exponent) {\n                fractionString = fractionString + repeatZero(exponent - fractionString.length);\n\n                integerString = integerString + fractionString;\n                fractionString = \"\";\n            } else {\n                integerString = integerString + fractionString.slice(0, exponent);\n                fractionString = fractionString.slice(exponent);\n            }\n        } else if (exponent < 0) {\n            fractionString = (repeatZero(Math.abs(exponent) - integerString.length) + integerString + fractionString);\n\n            integerString = \"0\";\n        }\n\n        if (!maximumSignificantDigits) {\n            // Trim or pad fraction when not using maximumSignificantDigits.\n            fractionString = fractionString.slice(0, fractionDigits);\n\n            if (fractionString.length < fractionDigits) {\n                fractionString = fractionString + repeatZero(fractionDigits - fractionString.length);\n            }\n\n            // Pad integer when using minimumIntegerDigits\n            // and not using maximumSignificantDigits.\n            if (integerString.length < minimumIntegerDigits) {\n                integerString = repeatZero(minimumIntegerDigits - integerString.length) + integerString;\n            }\n        }\n\n        var formattedString = \"\";\n\n        // Handle grouping.\n        if (useGrouping) {\n            temp = integerString;\n            var group;\n\n            while (temp.length) {\n                if (grouping.length) {\n                    group = grouping.shift();\n                }\n\n                if (formattedString) {\n                    formattedString = groupingSeparator + formattedString;\n                }\n\n                formattedString = temp.slice(-group) + formattedString;\n\n                temp = temp.slice(0, -group);\n            }\n        } else {\n            formattedString = integerString;\n        }\n\n        // Add decimalSeparator and fraction.\n        if (fractionString) {\n            formattedString = formattedString + decimalSeparator + fractionString;\n        }\n\n        return formattedString;\n    }\n\n    // durationLabelCompare\n    function durationLabelCompare(a, b) {\n        if (a.label.length > b.label.length) {\n            return -1;\n        }\n\n        if (a.label.length < b.label.length) {\n            return 1;\n        }\n\n        // a must be equal to b\n        return 0;\n    }\n\n    // durationGetLabels\n    function durationGetLabels(token, localeData) {\n        var labels = [];\n\n        each(keys(localeData), function (localeDataKey) {\n            if (localeDataKey.slice(0, 15) !== \"_durationLabels\") {\n                return;\n            }\n\n            var labelType = localeDataKey.slice(15).toLowerCase();\n\n            each(keys(localeData[localeDataKey]), function (labelKey) {\n                if (labelKey.slice(0, 1) === token) {\n                    labels.push({\n                        type: labelType,\n                        key: labelKey,\n                        label: localeData[localeDataKey][labelKey]\n                    });\n                }\n            });\n        });\n\n        return labels;\n    }\n\n    // durationPluralKey\n    function durationPluralKey(token, integerValue, decimalValue) {\n        // Singular for a value of `1`, but not for `1.0`.\n        if (integerValue === 1 && decimalValue === null) {\n            return token;\n        }\n\n        return token + token;\n    }\n\n    var engLocale = {\n        durationLabelsStandard: {\n            S: 'millisecond',\n            SS: 'milliseconds',\n            s: 'second',\n            ss: 'seconds',\n            m: 'minute',\n            mm: 'minutes',\n            h: 'hour',\n            hh: 'hours',\n            d: 'day',\n            dd: 'days',\n            w: 'week',\n            ww: 'weeks',\n            M: 'month',\n            MM: 'months',\n            y: 'year',\n            yy: 'years'\n        },\n        durationLabelsShort: {\n            S: 'msec',\n            SS: 'msecs',\n            s: 'sec',\n            ss: 'secs',\n            m: 'min',\n            mm: 'mins',\n            h: 'hr',\n            hh: 'hrs',\n            d: 'dy',\n            dd: 'dys',\n            w: 'wk',\n            ww: 'wks',\n            M: 'mo',\n            MM: 'mos',\n            y: 'yr',\n            yy: 'yrs'\n        },\n        durationTimeTemplates: {\n            HMS: 'h:mm:ss',\n            HM: 'h:mm',\n            MS: 'm:ss'\n        },\n        durationLabelTypes: [\n            { type: \"standard\", string: \"__\" },\n            { type: \"short\", string: \"_\" }\n        ],\n        durationPluralKey: durationPluralKey\n    };\n\n    // isArray\n    function isArray(array) {\n        return Object.prototype.toString.call(array) === \"[object Array]\";\n    }\n\n    // isObject\n    function isObject(obj) {\n        return Object.prototype.toString.call(obj) === \"[object Object]\";\n    }\n\n    // findLast\n    function findLast(array, callback) {\n        var index = array.length;\n\n        while (index -= 1) {\n            if (callback(array[index])) { return array[index]; }\n        }\n    }\n\n    // find\n    function find(array, callback) {\n        var index = 0;\n\n        var max = array && array.length || 0;\n\n        var match;\n\n        if (typeof callback !== \"function\") {\n            match = callback;\n            callback = function (item) {\n                return item === match;\n            };\n        }\n\n        while (index < max) {\n            if (callback(array[index])) { return array[index]; }\n            index += 1;\n        }\n    }\n\n    // each\n    function each(array, callback) {\n        var index = 0,\n            max = array.length;\n\n        if (!array || !max) { return; }\n\n        while (index < max) {\n            if (callback(array[index], index) === false) { return; }\n            index += 1;\n        }\n    }\n\n    // map\n    function map(array, callback) {\n        var index = 0,\n            max = array.length,\n            ret = [];\n\n        if (!array || !max) { return ret; }\n\n        while (index < max) {\n            ret[index] = callback(array[index], index);\n            index += 1;\n        }\n\n        return ret;\n    }\n\n    // pluck\n    function pluck(array, prop) {\n        return map(array, function (item) {\n            return item[prop];\n        });\n    }\n\n    // compact\n    function compact(array) {\n        var ret = [];\n\n        each(array, function (item) {\n            if (item) { ret.push(item); }\n        });\n\n        return ret;\n    }\n\n    // unique\n    function unique(array) {\n        var ret = [];\n\n        each(array, function (_a) {\n            if (!find(ret, _a)) { ret.push(_a); }\n        });\n\n        return ret;\n    }\n\n    // intersection\n    function intersection(a, b) {\n        var ret = [];\n\n        each(a, function (_a) {\n            each(b, function (_b) {\n                if (_a === _b) { ret.push(_a); }\n            });\n        });\n\n        return unique(ret);\n    }\n\n    // rest\n    function rest(array, callback) {\n        var ret = [];\n\n        each(array, function (item, index) {\n            if (!callback(item)) {\n                ret = array.slice(index);\n                return false;\n            }\n        });\n\n        return ret;\n    }\n\n    // initial\n    function initial(array, callback) {\n        var reversed = array.slice().reverse();\n\n        return rest(reversed, callback).reverse();\n    }\n\n    // extend\n    function extend(a, b) {\n        for (var key in b) {\n            if (b.hasOwnProperty(key)) { a[key] = b[key]; }\n        }\n\n        return a;\n    }\n\n    // keys\n    function keys(a) {\n        var ret = [];\n\n        for (var key in a) {\n            if (a.hasOwnProperty(key)) { ret.push(key); }\n        }\n\n        return ret;\n    }\n\n    // any\n    function any(array, callback) {\n        var index = 0,\n            max = array.length;\n\n        if (!array || !max) { return false; }\n\n        while (index < max) {\n            if (callback(array[index], index) === true) { return true; }\n            index += 1;\n        }\n\n        return false;\n    }\n\n    // flatten\n    function flatten(array) {\n        var ret = [];\n\n        each(array, function(child) {\n            ret = ret.concat(child);\n        });\n\n        return ret;\n    }\n\n    function toLocaleStringSupportsLocales() {\n        var number = 0;\n        try {\n            number.toLocaleString('i');\n        } catch (e) {\n            return e.name === 'RangeError';\n        }\n        return false;\n    }\n\n    function featureTestFormatterRounding(formatter) {\n        return formatter(3.55, \"en\", {\n            useGrouping: false,\n            minimumIntegerDigits: 1,\n            minimumFractionDigits: 1,\n            maximumFractionDigits: 1\n        }) === \"3.6\";\n    }\n\n    function featureTestFormatter(formatter) {\n        var passed = true;\n\n        // Test minimumIntegerDigits.\n        passed = passed && formatter(1, \"en\", { minimumIntegerDigits: 1 }) === \"1\";\n        passed = passed && formatter(1, \"en\", { minimumIntegerDigits: 2 }) === \"01\";\n        passed = passed && formatter(1, \"en\", { minimumIntegerDigits: 3 }) === \"001\";\n        if (!passed) { return false; }\n\n        // Test maximumFractionDigits and minimumFractionDigits.\n        passed = passed && formatter(99.99, \"en\", { maximumFractionDigits: 0, minimumFractionDigits: 0 }) === \"100\";\n        passed = passed && formatter(99.99, \"en\", { maximumFractionDigits: 1, minimumFractionDigits: 1 }) === \"100.0\";\n        passed = passed && formatter(99.99, \"en\", { maximumFractionDigits: 2, minimumFractionDigits: 2 }) === \"99.99\";\n        passed = passed && formatter(99.99, \"en\", { maximumFractionDigits: 3, minimumFractionDigits: 3 }) === \"99.990\";\n        if (!passed) { return false; }\n\n        // Test maximumSignificantDigits.\n        passed = passed && formatter(99.99, \"en\", { maximumSignificantDigits: 1 }) === \"100\";\n        passed = passed && formatter(99.99, \"en\", { maximumSignificantDigits: 2 }) === \"100\";\n        passed = passed && formatter(99.99, \"en\", { maximumSignificantDigits: 3 }) === \"100\";\n        passed = passed && formatter(99.99, \"en\", { maximumSignificantDigits: 4 }) === \"99.99\";\n        passed = passed && formatter(99.99, \"en\", { maximumSignificantDigits: 5 }) === \"99.99\";\n        if (!passed) { return false; }\n\n        // Test grouping.\n        passed = passed && formatter(1000, \"en\", { useGrouping: true }) === \"1,000\";\n        passed = passed && formatter(1000, \"en\", { useGrouping: false }) === \"1000\";\n        if (!passed) { return false; }\n\n        return true;\n    }\n\n    // durationsFormat(durations [, template] [, precision] [, settings])\n    function durationsFormat() {\n        var args = [].slice.call(arguments);\n        var settings = {};\n        var durations;\n\n        // Parse arguments.\n        each(args, function (arg, index) {\n            if (!index) {\n                if (!isArray(arg)) {\n                    throw \"Expected array as the first argument to durationsFormat.\";\n                }\n\n                durations = arg;\n            }\n\n            if (typeof arg === \"string\" || typeof arg === \"function\") {\n                settings.template = arg;\n                return;\n            }\n\n            if (typeof arg === \"number\") {\n                settings.precision = arg;\n                return;\n            }\n\n            if (isObject(arg)) {\n                extend(settings, arg);\n            }\n        });\n\n        if (!durations || !durations.length) {\n            return [];\n        }\n\n        settings.returnMomentTypes = true;\n\n        var formattedDurations = map(durations, function (dur) {\n            return dur.format(settings);\n        });\n\n        // Merge token types from all durations.\n        var outputTypes = intersection(types, unique(pluck(flatten(formattedDurations), \"type\")));\n\n        var largest = settings.largest;\n\n        if (largest) {\n            outputTypes = outputTypes.slice(0, largest);\n        }\n\n        settings.returnMomentTypes = false;\n        settings.outputTypes = outputTypes;\n\n        return map(durations, function (dur) {\n            return dur.format(settings);\n        });\n    }\n\n    // durationFormat([template] [, precision] [, settings])\n    function durationFormat() {\n\n        var args = [].slice.call(arguments);\n        var settings = extend({}, this.format.defaults);\n\n        // Keep a shadow copy of this moment for calculating remainders.\n        // Perform all calculations on positive duration value, handle negative\n        // sign at the very end.\n        var asMilliseconds = this.asMilliseconds();\n        var asMonths = this.asMonths();\n\n        // Treat invalid durations as having a value of 0 milliseconds.\n        if (typeof this.isValid === \"function\" && this.isValid() === false) {\n            asMilliseconds = 0;\n            asMonths = 0;\n        }\n\n        var isNegative = asMilliseconds < 0;\n\n        // Two shadow copies are needed because of the way moment.js handles\n        // duration arithmetic for years/months and for weeks/days/hours/minutes/seconds.\n        var remainder = moment.duration(Math.abs(asMilliseconds), \"milliseconds\");\n        var remainderMonths = moment.duration(Math.abs(asMonths), \"months\");\n\n        // Parse arguments.\n        each(args, function (arg) {\n            if (typeof arg === \"string\" || typeof arg === \"function\") {\n                settings.template = arg;\n                return;\n            }\n\n            if (typeof arg === \"number\") {\n                settings.precision = arg;\n                return;\n            }\n\n            if (isObject(arg)) {\n                extend(settings, arg);\n            }\n        });\n\n        var momentTokens = {\n            years: \"y\",\n            months: \"M\",\n            weeks: \"w\",\n            days: \"d\",\n            hours: \"h\",\n            minutes: \"m\",\n            seconds: \"s\",\n            milliseconds: \"S\"\n        };\n\n        var tokenDefs = {\n            escape: /\\[(.+?)\\]/,\n            years: /\\*?[Yy]+/,\n            months: /\\*?M+/,\n            weeks: /\\*?[Ww]+/,\n            days: /\\*?[Dd]+/,\n            hours: /\\*?[Hh]+/,\n            minutes: /\\*?m+/,\n            seconds: /\\*?s+/,\n            milliseconds: /\\*?S+/,\n            general: /.+?/\n        };\n\n        // Types array is available in the template function.\n        settings.types = types;\n\n        var typeMap = function (token) {\n            return find(types, function (type) {\n                return tokenDefs[type].test(token);\n            });\n        };\n\n        var tokenizer = new RegExp(map(types, function (type) {\n            return tokenDefs[type].source;\n        }).join(\"|\"), \"g\");\n\n        // Current duration object is available in the template function.\n        settings.duration = this;\n\n        // Eval template function and cache template string.\n        var template = typeof settings.template === \"function\" ? settings.template.apply(settings) : settings.template;\n\n        // outputTypes and returnMomentTypes are settings to support durationsFormat().\n\n        // outputTypes is an array of moment token types that determines\n        // the tokens returned in formatted output. This option overrides\n        // trim, largest, stopTrim, etc.\n        var outputTypes = settings.outputTypes;\n\n        // returnMomentTypes is a boolean that sets durationFormat to return\n        // the processed momentTypes instead of formatted output.\n        var returnMomentTypes = settings.returnMomentTypes;\n\n        var largest = settings.largest;\n\n        // Setup stopTrim array of token types.\n        var stopTrim = [];\n\n        if (!outputTypes) {\n            if (isArray(settings.stopTrim)) {\n                settings.stopTrim = settings.stopTrim.join(\"\");\n            }\n\n            // Parse stopTrim string to create token types array.\n            if (settings.stopTrim) {\n                each(settings.stopTrim.match(tokenizer), function (token) {\n                    var type = typeMap(token);\n\n                    if (type === \"escape\" || type === \"general\") {\n                        return;\n                    }\n\n                    stopTrim.push(type);\n                });\n            }\n        }\n\n        // Cache moment's locale data.\n        var localeData = moment.localeData();\n\n        if (!localeData) {\n            localeData = {};\n        }\n\n        // Fall back to this plugin's `eng` extension.\n        each(keys(engLocale), function (key) {\n            if (typeof engLocale[key] === \"function\") {\n                if (!localeData[key]) {\n                    localeData[key] = engLocale[key];\n                }\n\n                return;\n            }\n\n            if (!localeData[\"_\" + key]) {\n                localeData[\"_\" + key] = engLocale[key];\n            }\n        });\n\n        // Replace Duration Time Template strings.\n        // For locale `eng`: `_HMS_`, `_HM_`, and `_MS_`.\n        each(keys(localeData._durationTimeTemplates), function (item) {\n            template = template.replace(\"_\" + item + \"_\", localeData._durationTimeTemplates[item]);\n        });\n\n        // Determine user's locale.\n        var userLocale = settings.userLocale || moment.locale();\n\n        var useLeftUnits = settings.useLeftUnits;\n        var usePlural = settings.usePlural;\n        var precision = settings.precision;\n        var forceLength = settings.forceLength;\n        var useGrouping = settings.useGrouping;\n        var trunc = settings.trunc;\n\n        // Use significant digits only when precision is greater than 0.\n        var useSignificantDigits = settings.useSignificantDigits && precision > 0;\n        var significantDigits = useSignificantDigits ? settings.precision : 0;\n        var significantDigitsCache = significantDigits;\n\n        var minValue = settings.minValue;\n        var isMinValue = false;\n\n        var maxValue = settings.maxValue;\n        var isMaxValue = false;\n\n        // formatNumber fallback options.\n        var useToLocaleString = settings.useToLocaleString;\n        var groupingSeparator = settings.groupingSeparator;\n        var decimalSeparator = settings.decimalSeparator;\n        var grouping = settings.grouping;\n\n        useToLocaleString = useToLocaleString && (toLocaleStringWorks || intlNumberFormatWorks);\n\n        // Trim options.\n        var trim = settings.trim;\n\n        if (isArray(trim)) {\n            trim = trim.join(\" \");\n        }\n\n        if (trim === null && (largest || maxValue || useSignificantDigits)) {\n            trim = \"all\";\n        }\n\n        if (trim === null || trim === true || trim === \"left\" || trim === \"right\") {\n            trim = \"large\";\n        }\n\n        if (trim === false) {\n            trim = \"\";\n        }\n\n        var trimIncludes = function (item) {\n            return item.test(trim);\n        };\n\n        var rLarge = /large/;\n        var rSmall = /small/;\n        var rBoth = /both/;\n        var rMid = /mid/;\n        var rAll = /^all|[^sm]all/;\n        var rFinal = /final/;\n\n        var trimLarge = largest > 0 || any([rLarge, rBoth, rAll], trimIncludes);\n        var trimSmall = any([rSmall, rBoth, rAll], trimIncludes);\n        var trimMid = any([rMid, rAll], trimIncludes);\n        var trimFinal = any([rFinal, rAll], trimIncludes);\n\n        // Parse format string to create raw tokens array.\n        var rawTokens = map(template.match(tokenizer), function (token, index) {\n            var type = typeMap(token);\n\n            if (token.slice(0, 1) === \"*\") {\n                token = token.slice(1);\n\n                if (type !== \"escape\" && type !== \"general\") {\n                    stopTrim.push(type);\n                }\n            }\n\n            return {\n                index: index,\n                length: token.length,\n                text: \"\",\n\n                // Replace escaped tokens with the non-escaped token text.\n                token: (type === \"escape\" ? token.replace(tokenDefs.escape, \"$1\") : token),\n\n                // Ignore type on non-moment tokens.\n                type: ((type === \"escape\" || type === \"general\") ? null : type)\n            };\n        });\n\n        // Associate text tokens with moment tokens.\n        var currentToken = {\n            index: 0,\n            length: 0,\n            token: \"\",\n            text: \"\",\n            type: null\n        };\n\n        var tokens = [];\n\n        if (useLeftUnits) {\n            rawTokens.reverse();\n        }\n\n        each(rawTokens, function (token) {\n            if (token.type) {\n                if (currentToken.type || currentToken.text) {\n                    tokens.push(currentToken);\n                }\n\n                currentToken = token;\n\n                return;\n            }\n\n            if (useLeftUnits) {\n                currentToken.text = token.token + currentToken.text;\n            } else {\n                currentToken.text += token.token;\n            }\n        });\n\n        if (currentToken.type || currentToken.text) {\n            tokens.push(currentToken);\n        }\n\n        if (useLeftUnits) {\n            tokens.reverse();\n        }\n\n        // Find unique moment token types in the template in order of\n        // descending magnitude.\n        var momentTypes = intersection(types, unique(compact(pluck(tokens, \"type\"))));\n\n        // Exit early if there are no moment token types.\n        if (!momentTypes.length) {\n            return pluck(tokens, \"text\").join(\"\");\n        }\n\n        // Calculate values for each moment type in the template.\n        // For processing the settings, values are associated with moment types.\n        // Values will be assigned to tokens at the last step in order to\n        // assume nothing about frequency or order of tokens in the template.\n        momentTypes = map(momentTypes, function (momentType, index) {\n            // Is this the least-magnitude moment token found?\n            var isSmallest = ((index + 1) === momentTypes.length);\n\n            // Is this the greatest-magnitude moment token found?\n            var isLargest = (!index);\n\n            // Get the raw value in the current units.\n            var rawValue;\n\n            if (momentType === \"years\" || momentType === \"months\") {\n                rawValue = remainderMonths.as(momentType);\n            } else {\n                rawValue = remainder.as(momentType);\n            }\n\n            var wholeValue = Math.floor(rawValue);\n            var decimalValue = rawValue - wholeValue;\n\n            var token = find(tokens, function (token) {\n                return momentType === token.type;\n            });\n\n            if (isLargest && maxValue && rawValue > maxValue) {\n                isMaxValue = true;\n            }\n\n            if (isSmallest && minValue && Math.abs(settings.duration.as(momentType)) < minValue) {\n                isMinValue = true;\n            }\n\n            // Note the length of the largest-magnitude moment token:\n            // if it is greater than one and forceLength is not set,\n            // then default forceLength to `true`.\n            //\n            // Rationale is this: If the template is \"h:mm:ss\" and the\n            // moment value is 5 minutes, the user-friendly output is\n            // \"5:00\", not \"05:00\". We shouldn't pad the `minutes` token\n            // even though it has length of two if the template is \"h:mm:ss\";\n            //\n            // If the minutes output should always include the leading zero\n            // even when the hour is trimmed then set `{ forceLength: true }`\n            // to output \"05:00\". If the template is \"hh:mm:ss\", the user\n            // clearly wanted everything padded so we should output \"05:00\";\n            //\n            // If the user wants the full padded output, they can use\n            // template \"hh:mm:ss\" and set `{ trim: false }` to output\n            // \"00:05:00\".\n            if (isLargest && forceLength === null && token.length > 1) {\n                forceLength = true;\n            }\n\n            // Update remainder.\n            remainder.subtract(wholeValue, momentType);\n            remainderMonths.subtract(wholeValue, momentType);\n\n            return {\n                rawValue: rawValue,\n                wholeValue: wholeValue,\n                // Decimal value is only retained for the least-magnitude\n                // moment type in the format template.\n                decimalValue: isSmallest ? decimalValue : 0,\n                isSmallest: isSmallest,\n                isLargest: isLargest,\n                type: momentType,\n                // Tokens can appear multiple times in a template string,\n                // but all instances must share the same length.\n                tokenLength: token.length\n            };\n        });\n\n        var truncMethod = trunc ? Math.floor : Math.round;\n        var truncate = function (value, places) {\n            var factor = Math.pow(10, places);\n            return truncMethod(value * factor) / factor;\n        };\n\n        var foundFirst = false;\n        var bubbled = false;\n\n        var formatValue = function (momentType, index) {\n            var formatOptions = {\n                useGrouping: useGrouping,\n                groupingSeparator: groupingSeparator,\n                decimalSeparator: decimalSeparator,\n                grouping: grouping,\n                useToLocaleString: useToLocaleString\n            };\n\n            if (useSignificantDigits) {\n                if (significantDigits <= 0) {\n                    momentType.rawValue = 0;\n                    momentType.wholeValue = 0;\n                    momentType.decimalValue = 0;\n                } else {\n                    formatOptions.maximumSignificantDigits = significantDigits;\n                    momentType.significantDigits = significantDigits;\n                }\n            }\n\n            if (isMaxValue && !bubbled) {\n                if (momentType.isLargest) {\n                    momentType.wholeValue = maxValue;\n                    momentType.decimalValue = 0;\n                } else {\n                    momentType.wholeValue = 0;\n                    momentType.decimalValue = 0;\n                }\n            }\n\n            if (isMinValue && !bubbled) {\n                if (momentType.isSmallest) {\n                    momentType.wholeValue = minValue;\n                    momentType.decimalValue = 0;\n                } else {\n                    momentType.wholeValue = 0;\n                    momentType.decimalValue = 0;\n                }\n            }\n\n            if (momentType.isSmallest || momentType.significantDigits && momentType.significantDigits - momentType.wholeValue.toString().length <= 0) {\n                // Apply precision to least significant token value.\n                if (precision < 0) {\n                    momentType.value = truncate(momentType.wholeValue, precision);\n                } else if (precision === 0) {\n                    momentType.value = truncMethod(momentType.wholeValue + momentType.decimalValue);\n                } else { // precision > 0\n                    if (useSignificantDigits) {\n                        if (trunc) {\n                            momentType.value = truncate(momentType.rawValue, significantDigits - momentType.wholeValue.toString().length);\n                        } else {\n                            momentType.value = momentType.rawValue;\n                        }\n\n                        if (momentType.wholeValue) {\n                            significantDigits -= momentType.wholeValue.toString().length;\n                        }\n                    } else {\n                        formatOptions.fractionDigits = precision;\n\n                        if (trunc) {\n                            momentType.value = momentType.wholeValue + truncate(momentType.decimalValue, precision);\n                        } else {\n                            momentType.value = momentType.wholeValue + momentType.decimalValue;\n                        }\n                    }\n                }\n            } else {\n                if (useSignificantDigits && momentType.wholeValue) {\n                    // Outer Math.round required here to handle floating point errors.\n                    momentType.value = Math.round(truncate(momentType.wholeValue, momentType.significantDigits - momentType.wholeValue.toString().length));\n\n                    significantDigits -= momentType.wholeValue.toString().length;\n                } else {\n                    momentType.value = momentType.wholeValue;\n                }\n            }\n\n            if (momentType.tokenLength > 1 && (forceLength || foundFirst)) {\n                formatOptions.minimumIntegerDigits = momentType.tokenLength;\n\n                if (bubbled && formatOptions.maximumSignificantDigits < momentType.tokenLength) {\n                    delete formatOptions.maximumSignificantDigits;\n                }\n            }\n\n            if (!foundFirst && (momentType.value > 0 || trim === \"\" /* trim: false */ || find(stopTrim, momentType.type) || find(outputTypes, momentType.type))) {\n                foundFirst = true;\n            }\n\n            momentType.formattedValue = formatNumber(momentType.value, formatOptions, userLocale);\n\n            formatOptions.useGrouping = false;\n            formatOptions.decimalSeparator = \".\";\n            momentType.formattedValueEn = formatNumber(momentType.value, formatOptions, \"en\");\n\n            if (momentType.tokenLength === 2 && momentType.type === \"milliseconds\") {\n                momentType.formattedValueMS = formatNumber(momentType.value, {\n                    minimumIntegerDigits: 3,\n                    useGrouping: false\n                }, \"en\").slice(0, 2);\n            }\n\n            return momentType;\n        };\n\n        // Calculate formatted values.\n        momentTypes = map(momentTypes, formatValue);\n        momentTypes = compact(momentTypes);\n\n        // Bubble rounded values.\n        if (momentTypes.length > 1) {\n            var findType = function (type) {\n                return find(momentTypes, function (momentType) {\n                    return momentType.type === type;\n                });\n            };\n\n            var bubbleTypes = function (bubble) {\n                var bubbleMomentType = findType(bubble.type);\n\n                if (!bubbleMomentType) {\n                    return;\n                }\n\n                each(bubble.targets, function (target) {\n                    var targetMomentType = findType(target.type);\n\n                    if (!targetMomentType) {\n                        return;\n                    }\n\n                    if (parseInt(bubbleMomentType.formattedValueEn, 10) === target.value) {\n                        bubbleMomentType.rawValue = 0;\n                        bubbleMomentType.wholeValue = 0;\n                        bubbleMomentType.decimalValue = 0;\n                        targetMomentType.rawValue += 1;\n                        targetMomentType.wholeValue += 1;\n                        targetMomentType.decimalValue = 0;\n                        targetMomentType.formattedValueEn = targetMomentType.wholeValue.toString();\n                        bubbled = true;\n                    }\n                });\n            };\n\n            each(bubbles, bubbleTypes);\n        }\n\n        // Recalculate formatted values.\n        if (bubbled) {\n            foundFirst = false;\n            significantDigits = significantDigitsCache;\n            momentTypes = map(momentTypes, formatValue);\n            momentTypes = compact(momentTypes);\n        }\n\n        if (outputTypes && !(isMaxValue && !settings.trim)) {\n            momentTypes = map(momentTypes, function (momentType) {\n                if (find(outputTypes, function (outputType) {\n                    return momentType.type === outputType;\n                })) {\n                    return momentType;\n                }\n\n                return null;\n            });\n\n            momentTypes = compact(momentTypes);\n        } else {\n            // Trim Large.\n            if (trimLarge) {\n                momentTypes = rest(momentTypes, function (momentType) {\n                    // Stop trimming on:\n                    // - the smallest moment type\n                    // - a type marked for stopTrim\n                    // - a type that has a whole value\n                    return !momentType.isSmallest && !momentType.wholeValue && !find(stopTrim, momentType.type);\n                });\n            }\n\n            // Largest.\n            if (largest && momentTypes.length) {\n                momentTypes = momentTypes.slice(0, largest);\n            }\n\n            // Trim Small.\n            if (trimSmall && momentTypes.length > 1) {\n                momentTypes = initial(momentTypes, function (momentType) {\n                    // Stop trimming on:\n                    // - a type marked for stopTrim\n                    // - a type that has a whole value\n                    // - the largest momentType\n                    return !momentType.wholeValue && !find(stopTrim, momentType.type) && !momentType.isLargest;\n                });\n            }\n\n            // Trim Mid.\n            if (trimMid) {\n                momentTypes = map(momentTypes, function (momentType, index) {\n                    if (index > 0 && index < momentTypes.length - 1 && !momentType.wholeValue) {\n                        return null;\n                    }\n\n                    return momentType;\n                });\n\n                momentTypes = compact(momentTypes);\n            }\n\n            // Trim Final.\n            if (trimFinal && momentTypes.length === 1 && !momentTypes[0].wholeValue && !(!trunc && momentTypes[0].isSmallest && momentTypes[0].rawValue < minValue)) {\n                momentTypes = [];\n            }\n        }\n\n        if (returnMomentTypes) {\n            return momentTypes;\n        }\n\n        // Localize and pluralize unit labels.\n        each(tokens, function (token) {\n            var key = momentTokens[token.type];\n\n            var momentType = find(momentTypes, function (momentType) {\n                return momentType.type === token.type;\n            });\n\n            if (!key || !momentType) {\n                return;\n            }\n\n            var values = momentType.formattedValueEn.split(\".\");\n\n            values[0] = parseInt(values[0], 10);\n\n            if (values[1]) {\n                values[1] = parseFloat(\"0.\" + values[1], 10);\n            } else {\n                values[1] = null;\n            }\n\n            var pluralKey = localeData.durationPluralKey(key, values[0], values[1]);\n\n            var labels = durationGetLabels(key, localeData);\n\n            var autoLocalized = false;\n\n            var pluralizedLabels = {};\n\n            // Auto-Localized unit labels.\n            each(localeData._durationLabelTypes, function (labelType) {\n                var label = find(labels, function (label) {\n                    return label.type === labelType.type && label.key === pluralKey;\n                });\n\n                if (label) {\n                    pluralizedLabels[label.type] = label.label;\n\n                    if (stringIncludes(token.text, labelType.string)) {\n                        token.text = token.text.replace(labelType.string, label.label);\n                        autoLocalized = true;\n                    }\n                }\n            });\n\n            // Auto-pluralized unit labels.\n            if (usePlural && !autoLocalized) {\n                labels.sort(durationLabelCompare);\n\n                each(labels, function (label) {\n                    if (pluralizedLabels[label.type] === label.label) {\n                        if (stringIncludes(token.text, label.label)) {\n                            // Stop checking this token if its label is already\n                            // correctly pluralized.\n                            return false;\n                        }\n\n                        // Skip this label if it is correct, but not present in\n                        // the token's text.\n                        return;\n                    }\n\n                    if (stringIncludes(token.text, label.label)) {\n                        // Replece this token's label and stop checking.\n                        token.text = token.text.replace(label.label, pluralizedLabels[label.type]);\n                        return false;\n                    }\n                });\n            }\n        });\n\n        // Build ouptut.\n        tokens = map(tokens, function (token) {\n            if (!token.type) {\n                return token.text;\n            }\n\n            var momentType = find(momentTypes, function (momentType) {\n                return momentType.type === token.type;\n            });\n\n            if (!momentType) {\n                return \"\";\n            }\n\n            var out = \"\";\n\n            if (useLeftUnits) {\n                out += token.text;\n            }\n\n            if (isNegative && isMaxValue || !isNegative && isMinValue) {\n                out += \"< \";\n                isMaxValue = false;\n                isMinValue = false;\n            }\n\n            if (isNegative && isMinValue || !isNegative && isMaxValue) {\n                out += \"> \";\n                isMaxValue = false;\n                isMinValue = false;\n            }\n\n            if (isNegative && (momentType.value > 0 || trim === \"\" || find(stopTrim, momentType.type) || find(outputTypes, momentType.type))) {\n                out += \"-\";\n                isNegative = false;\n            }\n\n            if (token.type === \"milliseconds\" && momentType.formattedValueMS) {\n                out += momentType.formattedValueMS;\n            } else {\n                out += momentType.formattedValue;\n            }\n\n            if (!useLeftUnits) {\n                out += token.text;\n            }\n\n            return out;\n        });\n\n        // Trim leading and trailing comma, space, colon, and dot.\n        return tokens.join(\"\").replace(/(,| |:|\\.)*$/, \"\").replace(/^(,| |:|\\.)*/, \"\");\n    }\n\n    // defaultFormatTemplate\n    function defaultFormatTemplate() {\n        var dur = this.duration;\n\n        var findType = function findType(type) {\n            return dur._data[type];\n        };\n\n        var firstType = find(this.types, findType);\n\n        var lastType = findLast(this.types, findType);\n\n        // Default template strings for each duration dimension type.\n        switch (firstType) {\n            case \"milliseconds\":\n                return \"S __\";\n            case \"seconds\": // Fallthrough.\n            case \"minutes\":\n                return \"*_MS_\";\n            case \"hours\":\n                return \"_HMS_\";\n            case \"days\": // Possible Fallthrough.\n                if (firstType === lastType) {\n                    return \"d __\";\n                }\n            case \"weeks\":\n                if (firstType === lastType) {\n                    return \"w __\";\n                }\n\n                if (this.trim === null) {\n                    this.trim = \"both\";\n                }\n\n                return \"w __, d __, h __\";\n            case \"months\": // Possible Fallthrough.\n                if (firstType === lastType) {\n                    return \"M __\";\n                }\n            case \"years\":\n                if (firstType === lastType) {\n                    return \"y __\";\n                }\n\n                if (this.trim === null) {\n                    this.trim = \"both\";\n                }\n\n                return \"y __, M __, d __\";\n            default:\n                if (this.trim === null) {\n                    this.trim = \"both\";\n                }\n\n                return \"y __, d __, h __, m __, s __\";\n        }\n    }\n\n    // init\n    function init(context) {\n        if (!context) {\n            throw \"Moment Duration Format init cannot find moment instance.\";\n        }\n\n        context.duration.format = durationsFormat;\n        context.duration.fn.format = durationFormat;\n\n        context.duration.fn.format.defaults = {\n            // Many options are defaulted to `null` to distinguish between\n            // 'not set' and 'set to `false`'\n\n            // trim\n            // Can be a string, a delimited list of strings, an array of strings,\n            // or a boolean.\n            // \"large\" - will trim largest-magnitude zero-value tokens until\n            // finding a token with a value, a token identified as 'stopTrim', or\n            // the final token of the format string.\n            // \"small\" - will trim smallest-magnitude zero-value tokens until\n            // finding a token with a value, a token identified as 'stopTrim', or\n            // the final token of the format string.\n            // \"both\" - will execute \"large\" trim then \"small\" trim.\n            // \"mid\" - will trim any zero-value tokens that are not the first or\n            // last tokens. Usually used in conjunction with \"large\" or \"both\".\n            // e.g. \"large mid\" or \"both mid\".\n            // \"final\" - will trim the final token if it is zero-value. Use this\n            // option with \"large\" or \"both\" to output an empty string when\n            // formatting a zero-value duration. e.g. \"large final\" or \"both final\".\n            // \"all\" - Will trim all zero-value tokens. Shorthand for \"both mid final\".\n            // \"left\" - maps to \"large\" to support plugin's version 1 API.\n            // \"right\" - maps to \"large\" to support plugin's version 1 API.\n            // `false` - template tokens are not trimmed.\n            // `true` - treated as \"large\".\n            // `null` - treated as \"large\".\n            trim: null,\n\n            // stopTrim\n            // A moment token string, a delimited set of moment token strings,\n            // or an array of moment token strings. Trimming will stop when a token\n            // listed in this option is reached. A \"*\" character in the format\n            // template string will also mark a moment token as stopTrim.\n            // e.g. \"d [days] *h:mm:ss\" will always stop trimming at the 'hours' token.\n            stopTrim: null,\n\n            // largest\n            // Set to a positive integer to output only the \"n\" largest-magnitude\n            // moment tokens that have a value. All lesser-magnitude moment tokens\n            // will be ignored. This option takes effect even if `trim` is set\n            // to `false`.\n            largest: null,\n\n            // maxValue\n            // Use `maxValue` to render generalized output for large duration values,\n            // e.g. `\"> 60 days\"`. `maxValue` must be a positive integer and is\n            /// applied to the greatest-magnitude moment token in the format template.\n            maxValue: null,\n\n            // minValue\n            // Use `minValue` to render generalized output for small duration values,\n            // e.g. `\"< 5 minutes\"`. `minValue` must be a positive integer and is\n            // applied to the least-magnitude moment token in the format template.\n            minValue: null,\n\n            // precision\n            // If a positive integer, number of decimal fraction digits to render.\n            // If a negative integer, number of integer place digits to truncate to 0.\n            // If `useSignificantDigits` is set to `true` and `precision` is a positive\n            // integer, sets the maximum number of significant digits used in the\n            // formatted output.\n            precision: 0,\n\n            // trunc\n            // Default behavior rounds final token value. Set to `true` to\n            // truncate final token value, which was the default behavior in\n            // version 1 of this plugin.\n            trunc: false,\n\n            // forceLength\n            // Force first moment token with a value to render at full length\n            // even when template is trimmed and first moment token has length of 1.\n            forceLength: null,\n\n            // userLocale\n            // Formatted numerical output is rendered using `toLocaleString`\n            // and the locale of the user's environment. Set this option to render\n            // numerical output using a different locale. Unit names are rendered\n            // and detected using the locale set in moment.js, which can be different\n            // from the locale of user's environment.\n            userLocale: null,\n\n            // usePlural\n            // Will automatically singularize or pluralize unit names when they\n            // appear in the text associated with each moment token. Standard and\n            // short unit labels are singularized and pluralized, based on locale.\n            // e.g. in english, \"1 second\" or \"1 sec\" would be rendered instead\n            // of \"1 seconds\" or \"1 secs\". The default pluralization function\n            // renders a plural label for a value with decimal precision.\n            // e.g. \"1.0 seconds\" is never rendered as \"1.0 second\".\n            // Label types and pluralization function are configurable in the\n            // localeData extensions.\n            usePlural: true,\n\n            // useLeftUnits\n            // The text to the right of each moment token in a format string\n            // is treated as that token's units for the purposes of trimming,\n            // singularizing, and auto-localizing.\n            // e.g. \"h [hours], m [minutes], s [seconds]\".\n            // To properly singularize or localize a format string such as\n            // \"[hours] h, [minutes] m, [seconds] s\", where the units appear\n            // to the left of each moment token, set useLeftUnits to `true`.\n            // This plugin is not tested in the context of rtl text.\n            useLeftUnits: false,\n\n            // useGrouping\n            // Enables locale-based digit grouping in the formatted output. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n            useGrouping: true,\n\n            // useSignificantDigits\n            // Treat the `precision` option as the maximum significant digits\n            // to be rendered. Precision must be a positive integer. Significant\n            // digits extend across unit types,\n            // e.g. \"6 hours 37.5 minutes\" represents 4 significant digits.\n            // Enabling this option causes token length to be ignored. See  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n            useSignificantDigits: false,\n\n            // template\n            // The template string used to format the duration. May be a function\n            // or a string. Template functions are executed with the `this` binding\n            // of the settings object so that template strings may be dynamically\n            // generated based on the duration object (accessible via `this.duration`)\n            // or any of the other settings. Leading and trailing space, comma,\n            // period, and colon characters are trimmed from the resulting string.\n            template: defaultFormatTemplate,\n\n            // useToLocaleString\n            // Set this option to `false` to ignore the `toLocaleString` feature\n            // test and force the use of the `formatNumber` fallback function\n            // included in this plugin.\n            useToLocaleString: true,\n\n            // formatNumber fallback options.\n            // When `toLocaleString` is detected and passes the feature test, the\n            // following options will have no effect: `toLocaleString` will be used\n            // for formatting and the grouping separator, decimal separator, and\n            // integer digit grouping will be determined by the user locale.\n\n            // groupingSeparator\n            // The integer digit grouping separator used when using the fallback\n            // formatNumber function.\n            groupingSeparator: \",\",\n\n            // decimalSeparator\n            // The decimal separator used when using the fallback formatNumber\n            // function.\n            decimalSeparator: \".\",\n\n            // grouping\n            // The integer digit grouping used when using the fallback formatNumber\n            // function. Must be an array. The default value of `[3]` gives the\n            // standard 3-digit thousand/million/billion digit groupings for the\n            // \"en\" locale. Setting this option to `[3, 2]` would generate the\n            // thousand/lakh/crore digit groupings used in the \"en-IN\" locale.\n            grouping: [3]\n        };\n\n        context.updateLocale('en', engLocale);\n    }\n\n    // Run feature tests for `Number#toLocaleString`.\n    var toLocaleStringFormatter = function(number, locale, options) {\n        return number.toLocaleString(locale, options);\n    };\n\n    toLocaleStringWorks = toLocaleStringSupportsLocales() && featureTestFormatter(toLocaleStringFormatter);\n    toLocaleStringRoundingWorks = toLocaleStringWorks && featureTestFormatterRounding(toLocaleStringFormatter);\n\n    // Run feature tests for `Intl.NumberFormat#format`.\n    var intlNumberFormatFormatter = function(number, locale, options) {\n        if (typeof window !== 'undefined' && window && window.Intl && window.Intl.NumberFormat) {\n            return window.Intl.NumberFormat(locale, options).format(number);\n        }\n    };\n\n    intlNumberFormatWorks = featureTestFormatter(intlNumberFormatFormatter);\n    intlNumberFormatRoundingWorks = intlNumberFormatWorks && featureTestFormatterRounding(intlNumberFormatFormatter);\n\n    // Initialize duration format on the global moment instance.\n    init(moment);\n\n    // Return the init function so that duration format can be\n    // initialized on other moment instances.\n    return init;\n});\n","import moment from 'moment';\nimport momentDurationFormatSetup from 'moment-duration-format';\nimport { TimeDateUtil } from './time-date.util';\nimport { isEmpty, replace } from 'lodash';\nimport {\n    DateFormat,\n    DateRange,\n    DateRangeStrings,\n    Duration,\n    ISelectedTimeRange,\n    TimeRangeDisplay,\n    TimeRangesInHours,\n} from '../types';\nimport { SelectOption } from '../types/select';\n\nmomentDurationFormatSetup(moment);\n\nexport class TimeDatePresentationUtil {\n    private static times = [\n        '12:00',\n        '01:00',\n        '02:00',\n        '03:00',\n        '04:00',\n        '05:00',\n        '06:00',\n        '07:00',\n        '08:00',\n        '09:00',\n        '10:00',\n        '11:00',\n    ];\n    private static timeMode = ['am', 'pm'];\n\n    static buildDateFromStrings(fromDate: string, fromTime: string): Date {\n        const formattedDate: string = this.dateBuilder(fromDate);\n        return moment(\n            `${formattedDate} ${fromTime}`,\n            'M/D/YYYY hh:mm a',\n        ).toDate();\n    }\n\n    private static dateBuilder(dateString: string): string {\n        const date = new Date(dateString);\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        const year = date.getFullYear();\n\n        return `${month}/${day}/${year}`;\n    }\n\n    static getDateLabelMessage(\n        selectedTime: ISelectedTimeRange,\n        format: DateFormat,\n    ): string {\n        if (!selectedTime) {\n            return;\n        } else if (TimeDatePresentationUtil.isCustomRange(selectedTime)) {\n            const { from, to } = selectedTime.custom;\n            return `${TimeDatePresentationUtil.getFormattedDate(from, format)} - ${TimeDatePresentationUtil.getFormattedDate(to, format)}`;\n        } else {\n            const time = TimeRangesInHours[selectedTime.selected];\n            const todayDate = moment().format(format);\n            const previousDate = moment()\n                .subtract(time, Duration.HOURS)\n                .format(format);\n            return `${previousDate} - ${todayDate}`;\n        }\n    }\n\n    static getCustomFromAndToDate(timeRange: ISelectedTimeRange):\n        | {\n              fromDate: Date;\n              toDate: Date;\n          }\n        | undefined {\n        if (!timeRange) {\n            return;\n        }\n\n        if (TimeDatePresentationUtil.isCustomRange(timeRange)) {\n            const { from, to } = timeRange.custom;\n            const fromDate = moment(from).toDate();\n            const toDate = moment(to).toDate();\n            return { fromDate, toDate };\n        }\n    }\n\n    static getTimeOptions(\n        startTime = '12:00 am',\n        endTime = '11:00 pm',\n    ): SelectOption[] {\n        const timeList: string[] = this.createTimeList();\n        const startTimeIndex = this.getTimeIndex(startTime);\n        const endTimeIndex = this.getTimeIndex(endTime) + 2;\n\n        return timeList.slice(startTimeIndex, endTimeIndex).map((time) => ({\n            value: time,\n        }));\n    }\n\n    private static createTimeList() {\n        const list: string[] = [];\n        for (const mode of this.timeMode) {\n            for (const time of this.times) {\n                list.push(`${time} ${mode}`);\n            }\n        }\n        return list;\n    }\n\n    private static createTimeIndex() {\n        const timeList = this.createTimeList();\n        return timeList.reduce((acc, cur, index) => {\n            acc[cur] = index;\n            return acc;\n        }, {});\n    }\n\n    private static getTimeIndex(time: string) {\n        const index = this.createTimeIndex();\n        return index[time];\n    }\n\n    static convertTimeRange(timeRange: ISelectedTimeRange): {\n        start: Date;\n        end: Date;\n    } {\n        if (TimeDatePresentationUtil.isCustomRange(timeRange)) {\n            return {\n                start: moment(timeRange.custom.from).toDate(),\n                end: moment(timeRange.custom.to).toDate(),\n            };\n        } else if (timeRange.selected) {\n            return {\n                start: moment()\n                    .subtract(TimeRangesInHours[timeRange.selected], 'hour')\n                    .toDate(),\n                end: moment().toDate(),\n            };\n        }\n    }\n\n    static convertTimeRangeInNumber(timeRange: ISelectedTimeRange): {\n        start: number;\n        end: number;\n    } {\n        const { start, end } = this.convertTimeRange(timeRange);\n        return { start: start.getTime(), end: end.getTime() };\n    }\n\n    static getIntervalFor30sPollerFromTimeRange(\n        timeRange: ISelectedTimeRange,\n    ): number {\n        const { start, end } =\n            TimeDatePresentationUtil.convertTimeRange(timeRange);\n        return TimeDateUtil.getDataPointIntervalFor30SecPoller(start, end);\n    }\n\n    static getFormattedDate(\n        date: Date | string,\n        dateFormat: DateFormat = DateFormat.STANDARD,\n    ): string {\n        return date ? moment(date).format(dateFormat) : '';\n    }\n\n    private static getDurationTranslations(\n        translations: any,\n    ): { unit: string; translation: string }[] {\n        const dayString = translations.ATUI.TIME.DURATION_SHORT.DAY;\n        const daysString = translations.ATUI.TIME.DURATION_SHORT.DAYS;\n\n        const hourString = translations.ATUI.TIME.DURATION_SHORT.HOUR;\n        const hoursString = translations.ATUI.TIME.DURATION_SHORT.HOURS;\n\n        const minuteString = translations.ATUI.TIME.DURATION_SHORT.MIN;\n        const minutesString = translations.ATUI.TIME.DURATION_SHORT.MINS;\n\n        return [\n            { unit: 'day', translation: dayString },\n            { unit: 'days', translation: daysString },\n            {\n                unit: 'hr',\n                translation: hourString,\n            },\n            { unit: 'hrs', translation: hoursString },\n            { unit: 'min', translation: minuteString },\n            {\n                unit: 'mins',\n                translation: minutesString,\n            },\n        ];\n    }\n\n    static translateDurationString(\n        duration: string,\n        translations: any,\n    ): string {\n        const translation =\n            TimeDatePresentationUtil.getDurationTranslations(translations);\n        const splitDuration = duration.split(',');\n\n        const translatedDurations = splitDuration.map((duration) => {\n            let translatedDuration = duration;\n            translation.forEach((trans) => {\n                if (duration.includes(' ' + trans.unit)) {\n                    const unit = new RegExp(' ' + trans.unit);\n                    translatedDuration = replace(\n                        duration,\n                        unit,\n                        ' ' + trans.translation,\n                    );\n                }\n            });\n            return translatedDuration;\n        });\n\n        return translatedDurations.join(',');\n    }\n\n    static getIntervalString(\n        start: Date,\n        end: Date,\n        translations: any,\n    ): string {\n        const msDifference = moment(end).diff(moment(start));\n\n        const durationString = (<any>(\n            moment.duration(msDifference, 'milliseconds')\n        )).format('d [days], h [hrs], m [min]');\n\n        return TimeDatePresentationUtil.translateDurationString(\n            durationString,\n            translations,\n        );\n    }\n\n    static getDayCountFromDateFilter(dateFilter: DateRange): number {\n        const timeRangeFromDateFilter =\n            dateFilter.endDate.getTime() - dateFilter.startDate.getTime();\n        const timeDiff = moment.duration(timeRangeFromDateFilter);\n        return timeDiff.asDays();\n    }\n\n    static getHourCountFromTimeRange(\n        timeRange: ISelectedTimeRange,\n    ): number | undefined {\n        if (timeRange.selected == TimeRangeDisplay.CUSTOM) {\n            if (timeRange.custom) {\n                const to = new Date(timeRange.custom.to);\n                const from = new Date(timeRange.custom.from);\n                return (to.getTime() - from.getTime()) / (1000 * 3600);\n            }\n        } else {\n            return TimeRangesInHours[timeRange.selected];\n        }\n    }\n\n    // Return true if time range is custom (i.e. custom start and end\n    // time selected, rather than predefined ranges e.g. 1hr, 24h)\n    static isCustomRange(timeRange: ISelectedTimeRange): boolean {\n        if (timeRange.selected === TimeRangeDisplay.CUSTOM) {\n            const customRange: DateRangeStrings = timeRange.custom;\n            return (\n                !isEmpty(customRange) && !!customRange.from && !!customRange.to\n            );\n        }\n    }\n}\nexport class FlooredDateRange implements DateRange {\n    constructor(\n        readonly startDate: Date,\n        readonly endDate: Date,\n        private unit: Duration,\n    ) {\n        this.startDate = this.floorByMinutes(this.startDate);\n        this.endDate = this.floorByMinutes(this.endDate);\n    }\n\n    static create(\n        timeRange: { start: Date; end: Date },\n        unit: Duration,\n    ): FlooredDateRange {\n        return new FlooredDateRange(timeRange.start, timeRange.end, unit);\n    }\n\n    private floorByMinutes(time: Date): Date {\n        return TimeDateUtil.floorDateByTimeUnit(time, this.unit);\n    }\n}\n"],"version":3}