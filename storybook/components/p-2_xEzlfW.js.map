{"file":"p-2_xEzlfW.js","mappings":";;;MAsBa,wBAAwB,iBAAAA,kBAAA,CAAA,MAAA,wBAAA,SAAAC,CAAA,CAAA;AAJrC,IAAA,WAAA,GAAA;;;;AAgBI;;AAEG;AACK,QAAA,IAAM,CAAA,MAAA,GAAY,IAAI;AAO9B;;AAEG;AACsB,QAAA,IAAI,CAAA,IAAA,GAAY,KAAK;AA0GjD;IAjGG,gBAAgB,GAAA;QACZ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC;;IAGpD,MAAM,wBAAwB,CAAC,KAAY,EAAA;AAC/C,QAAA,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;YACrD,KAAK,CAAC,cAAc,EAAE;AACtB,YAAA,IAAI,IAAI,CAAC,IAAI,EAAE;AACX,gBAAA,MAAM,IAAI,CAAC,cAAc,EAAE;;iBACxB;AACH,gBAAA,MAAM,IAAI,CAAC,aAAa,EAAE;;;;AAKtC;;AAEG;AAEH,IAAA,MAAM,aAAa,GAAA;QACf,IAAI,IAAI,CAAC,IAAI;YAAE;AACf,QAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI;AACjC,QAAA,IAAI,CAAC,IAAI,GAAG,IAAI;QAChB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;AAG5C;;AAEG;AAEH,IAAA,MAAM,cAAc,GAAA;QAChB,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE;AAChB,QAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,KAAK;AAClC,QAAA,IAAI,CAAC,IAAI,GAAG,KAAK;QACjB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;AAG5C;;AAEG;AAEH,IAAA,MAAM,SAAS,GAAA;QACX,OAAO,IAAI,CAAC,IAAI;;IAGpB,MAAM,GAAA;AACF,QAAA,QACI,CAAC,CAAA,IAAI,kEACU,IAAI,CAAC,OAAO,EACX,YAAA,EAAA,IAAI,CAAC,IAAI,GAAG,UAAU,GAAG,WAAW,EAAA,EAEhD,CACI,CAAA,SAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAE,CAAA,sBAAA,CAAwB,EAC/B,GAAG,EAAE,CAAC,EAAE,MACH,IAAI,CAAC,gBAAgB,GAAG,EAAwB,CAAC,EAEtD,IAAI,EAAC,OAAO,EACZ,IAAI,EAAE,IAAI,CAAC,IAAI,EAAA,EAEf,CAAA,CAAA,SAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACI,EAAE,EAAE,CAAA,QAAA,EAAW,IAAI,CAAC,OAAO,CAAA,CAAE,EAC7B,IAAI,EAAC,QAAQ,EAAA,eAAA,EACE,IAAI,CAAC,IAAI,EACZ,YAAA,EAAA,IAAI,CAAC,IAAI,GAAG,UAAU,GAAG,WAAW,EAChD,KAAK,EAAC,2GAA2G,EACjH,OAAO,EAAE,CAAC,KAAK,KACX,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAExC,UAAU,EAAE,CAAC,KAAK,KACd,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,EAEzB,eAAA,EAAA,CAAW,QAAA,EAAA,IAAI,CAAC,OAAO,CAAA,CAAE,EAAA,EAEvC,IAAI,CAAC,KAAK,KACP,CAAA,CAAA,sBAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EACI,KAAK,EAAE,IAAI,CAAC,KAAK,EAAA,CACG,CAC3B,EACD,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,IAAI,EAAC,mBAAmB,EAAA,CAAG,CAC3B,EACV,CACI,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EAAE,EAAE,CAAA,QAAA,EAAW,IAAI,CAAC,OAAO,CAAA,CAAE,qBACZ,CAAA,QAAA,EAAW,IAAI,CAAC,OAAO,CAAA,CAAE,EAC1C,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,EAAA,WAAA,EACR,wBAAwB,EAAA,EAEjC,IAAI,CAAC,OAAO,KACT,CAAK,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,mCAAmC,EACzC,EAAA,IAAI,CAAC,OAAO,CACX,CACT,EACD,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAQ,CACN,CACA,CACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/at-accordion/at-accordion-item/at-accordion-item.tsx"],"sourcesContent":["import {\n    Component,\n    Prop,\n    Element,\n    Method,\n    h,\n    Host,\n    EventEmitter,\n    Event,\n} from '@stencil/core';\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot accordion-trigger - Used for placing the atui-accordion-trigger for this accordion item. Only use if not using the 'label' prop on this element.\n * @slot default - Used for placing the content for this accordion item.\n */\n@Component({\n    tag: 'at-accordion-item',\n    shadow: false,\n})\nexport class AtAccordionItemComponent {\n    @Element() el: HTMLElement;\n    /**\n     * Used to identify the accordion item among the other accordion items\n     */\n    @Prop() item_id!: string;\n\n    /**\n     * Provides an atui-accordion-trigger with this label if set\n     */\n    @Prop() label: string;\n\n    /**\n     * Puts a light gray separator below the accordion item\n     */\n    @Prop() border: boolean = true;\n\n    /**\n     * String content to display when the accordion is open\n     */\n    @Prop() content: string;\n\n    /**\n     * Used for setting if the accordion is open.\n     */\n    @Prop({ mutable: true }) open: boolean = false;\n\n    /**\n     * Emitted when the accordion item's open state changes\n     */\n    @Event() atuiAccordionChange: EventEmitter<boolean>;\n\n    private accordionElement: HTMLDetailsElement;\n\n    componentDidLoad() {\n        this.accordionElement = this.el.querySelector('details');\n    }\n\n    private async handleSummaryInteraction(event: Event) {\n        if (event.type === 'click' || event.type === 'touchend') {\n            event.preventDefault();\n            if (this.open) {\n                await this.closeAccordion();\n            } else {\n                await this.openAccordion();\n            }\n        }\n    }\n\n    /**\n     * Opens this accordion item\n     */\n    @Method()\n    async openAccordion(): Promise<void> {\n        if (this.open) return;\n        this.accordionElement.open = true;\n        this.open = true;\n        this.atuiAccordionChange.emit(this.open);\n    }\n\n    /**\n     * Closes this accordion item\n     */\n    @Method()\n    async closeAccordion(): Promise<void> {\n        if (!this.open) return;\n        this.accordionElement.open = false;\n        this.open = false;\n        this.atuiAccordionChange.emit(this.open);\n    }\n\n    /**\n     * Return the accordion items open state\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.open;\n    }\n\n    render() {\n        return (\n            <Host\n                data-name={this.item_id}\n                data-state={this.open ? 'expanded' : 'collapsed'}\n            >\n                <details\n                    class={`group/accordion-item'}`}\n                    ref={(el) =>\n                        (this.accordionElement = el as HTMLDetailsElement)\n                    }\n                    role=\"group\"\n                    open={this.open}\n                >\n                    <summary\n                        id={`trigger-${this.item_id}`}\n                        role=\"button\"\n                        aria-expanded={this.open}\n                        data-state={this.open ? 'expanded' : 'collapsed'}\n                        class=\"group/accordion-item focus-within:ring-active-foreground/30 flex rounded-sm outline-0 focus-within:ring-2\"\n                        onClick={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        onTouchEnd={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        aria-controls={`content-${this.item_id}`}\n                    >\n                        {this.label && (\n                            <at-accordion-trigger\n                                label={this.label}\n                            ></at-accordion-trigger>\n                        )}\n                        <slot name=\"accordion-trigger\" />\n                    </summary>\n                    <div\n                        id={`content-${this.item_id}`}\n                        aria-labelledby={`trigger-${this.item_id}`}\n                        hidden={!this.open}\n                        data-name=\"accordion-item-content\"\n                    >\n                        {this.content && (\n                            <div class=\"flex flex-col p-16 leading-normal\">\n                                {this.content}\n                            </div>\n                        )}\n                        <slot />\n                    </div>\n                </details>\n            </Host>\n        );\n    }\n}\n"],"version":3}