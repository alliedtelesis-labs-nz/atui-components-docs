{"file":"p-CJ9qvvtn.js","mappings":";;AAAA,MAAM,cAAc,GAAG,mNAAmN;;ACM1O,MAAM,eAAe,GAAG;AACpB,IAAA,IAAI,EAAE;AACF,QAAA,OAAO,EAAE,cAAc;AACvB,QAAA,KAAK,EAAE,6BAA6B;AACpC,QAAA,SAAS,EAAE,yBAAyB;AACvC,KAAA;AACD,IAAA,IAAI,EAAE;AACF,QAAA,EAAE,EAAE,SAAS;AACb,QAAA,EAAE,EAAE,WAAW;AACf,QAAA,EAAE,EAAE,SAAS;AAChB,KAAA;AACD,IAAA,WAAW,EAAE;AACT,QAAA,EAAE,EAAE,kBAAkB;AACtB,QAAA,EAAE,EAAE,oBAAoB;AACxB,QAAA,EAAE,EAAE,oBAAoB;AAC3B,KAAA;CACJ;MAWY,oBAAoB,iBAAAA,kBAAA,CAAA,MAAA,oBAAA,SAAAC,CAAA,CAAA;AALjC,IAAA,WAAA,GAAA;;;AAMI;;AAEG;AAEH,QAAA,IAAO,CAAA,OAAA,GAAmB,SAAS;AAEnC;;AAEG;AAEH,QAAA,IAAI,CAAA,IAAA,GAAgB,SAAS;AAE7B;;AAEG;AAEH,QAAA,IAAI,CAAA,IAAA,GAAgB,IAAI;AAExB;;AAEG;AAEH,QAAA,IAAI,CAAA,IAAA,GAAW,SAAS;AA+D3B;AA7DG,IAAA,IAAI,WAAW,GAAA;QACX,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;AAG1C,IAAA,IAAI,WAAW,GAAA;QACX,OAAO,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;;AAG1C,IAAA,IAAI,kBAAkB,GAAA;QAClB,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;;IAGzC,aAAa,GAAA;AACjB,QAAA,MAAM,WAAW,GACb,IAAI,CAAC,IAAI,KAAK;AACV,cAAE;AACF,cAAE,IAAI,CAAC,IAAI,KAAK;AACd,kBAAE;kBACA,2BAA2B;QAEvC,QACI,EAAC,IAAI,EAAA,EACD,KAAK,EAAE,CAAA,EAAG,WAAW,CAAA,CAAA,EAAI,IAAI,CAAC,kBAAkB,CAA8I,4IAAA,CAAA,EAC9L,IAAI,EAAC,QAAQ,EACF,YAAA,EAAA,SAAS,EACtB,CAAA;;IAIF,YAAY,GAAA;AAChB,QAAA,QACI,CAAA,CAAC,IAAI,EAAA,EACD,KAAK,EAAE,CAAyB,uBAAA,CAAA,EAChC,IAAI,EAAC,QAAQ,EAAA,YAAA,EACF,QAAQ,EAAA,EAEnB,CACI,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,4EAA4E,EAClF,KAAK,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,EAC5B,CAAA,EACR,CACI,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,4EAA4E,EAClF,KAAK,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,EAC9B,CAAA,EACR,CAAA,CAAA,MAAA,EAAA,EACI,KAAK,EAAC,4EAA4E,EAClF,KAAK,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,EAC9B,CAAA,CACL;;IAIf,MAAM,GAAA;AACF,QAAA,QAAQ,IAAI,CAAC,OAAO;AAChB,YAAA,KAAK,QAAQ;AACT,gBAAA,OAAO,IAAI,CAAC,YAAY,EAAE;AAC9B,YAAA,KAAK,SAAS;AACd,YAAA;AACI,gBAAA,OAAO,IAAI,CAAC,aAAa,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/atui-loading/atui-loading.scss?tag=atui-loading","src/components/atui-loading/atui-loading.tsx"],"sourcesContent":["@keyframes bounce-dots {\n    0%,\n    80%,\n    100% {\n        transform: scale(0);\n        opacity: 0.5;\n    }\n    40% {\n        transform: scale(1);\n        opacity: 1;\n    }\n}\n\n@keyframes typing {\n    0%,\n    60%,\n    100% {\n        transform: translateY(0);\n        opacity: 0.4;\n    }\n    30% {\n        transform: translateY(-10px);\n        opacity: 1;\n    }\n}\n","import { Component, h, Prop, Host } from '@stencil/core';\n\nexport type LoadingVariant = 'spinner' | 'dots' | 'typing' | 'wave';\nexport type LoadingType = 'default' | 'error' | 'secondary';\nexport type LoadingSize = 'sm' | 'md' | 'lg';\n\nconst loadingVariants = {\n    type: {\n        default: 'text-primary',\n        error: 'text-destructive-foreground',\n        secondary: 'text-primary-foreground',\n    },\n    size: {\n        sm: 'text-sm',\n        md: 'text-base',\n        lg: 'text-lg',\n    },\n    spinnerSize: {\n        sm: 'h-16 w-16 border',\n        md: 'h-32 w-32 border-2',\n        lg: 'h-64 w-64 border-4',\n    },\n};\n\n/**\n * @category Feedback\n * @description A versatile loading component with multiple animation types including spinner, dots, typing, wave, and thinking indicators. Perfect for indicating ongoing processes or data fetching states across different contexts.\n */\n@Component({\n    tag: 'atui-loading',\n    styleUrl: 'atui-loading.scss',\n    shadow: false,\n})\nexport class AtuiLoadingComponent {\n    /**\n     * Type of loading animation to display\n     */\n    @Prop()\n    variant: LoadingVariant = 'spinner';\n\n    /**\n     * Visual type/color of the loading indicator\n     */\n    @Prop()\n    type: LoadingType = 'default';\n\n    /**\n     * Size of the loading indicator\n     */\n    @Prop()\n    size: LoadingSize = 'md';\n\n    /**\n     * Custom text to display with text-based animations\n     */\n    @Prop()\n    text: string = 'Loading';\n\n    get typeClasses() {\n        return loadingVariants.type[this.type];\n    }\n\n    get sizeClasses() {\n        return loadingVariants.size[this.size];\n    }\n\n    get spinnerSizeClasses() {\n        return loadingVariants.spinnerSize[this.size];\n    }\n\n    private renderSpinner() {\n        const borderColor =\n            this.type === 'default'\n                ? 'border-primary'\n                : this.type === 'error'\n                  ? 'border-destructive-foreground'\n                  : 'border-primary-foreground';\n\n        return (\n            <Host\n                class={`${borderColor} ${this.spinnerSizeClasses} inline-block animate-spin rounded-full border-solid border-e-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]`}\n                role=\"status\"\n                aria-label=\"Loading\"\n            />\n        );\n    }\n\n    private renderTyping() {\n        return (\n            <Host\n                class={`flex items-center gap-4`}\n                role=\"status\"\n                aria-label=\"Typing\"\n            >\n                <span\n                    class=\"inline-block h-4 w-4 animate-[typing_1s_infinite] rounded-full bg-gray-500\"\n                    style={{ animationDelay: '0ms' }}\n                ></span>\n                <span\n                    class=\"inline-block h-4 w-4 animate-[typing_1s_infinite] rounded-full bg-gray-500\"\n                    style={{ animationDelay: '250ms' }}\n                ></span>\n                <span\n                    class=\"inline-block h-4 w-4 animate-[typing_1s_infinite] rounded-full bg-gray-500\"\n                    style={{ animationDelay: '500ms' }}\n                ></span>\n            </Host>\n        );\n    }\n\n    render() {\n        switch (this.variant) {\n            case 'typing':\n                return this.renderTyping();\n            case 'spinner':\n            default:\n                return this.renderSpinner();\n        }\n    }\n}\n"],"version":3}