'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import { type AtButtonCustomEvent, type AtButtonGroupOptionCustomEvent, type AtColumnManagerCustomEvent, type AtCustomTimeRangeCustomEvent, type AtEvent, type AtListSelectorCustomEvent, type AtMenuItemCustomEvent, type AtTableFiltersCustomEvent, type AtTimeRangeCustomEvent, type AtTimeWithUnitCustomEvent, type AtTreeCustomEvent, type AtTreeItemCustomEvent, type ColumnManagerChangeEvent, type DateRangeStrings, type FilterEvent, type ListSelectorItem, type SelectedTimeRangeExtended, type TimeRangeDisplay, type TimeWithUnit, type TreeNode } from "@alliedtelesis-labs-nz/atui-components-stencil";
import { AtAccordionItem as AtAccordionItemElement, defineCustomElement as defineAtAccordionItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-accordion-item.js";
import { AtAccordionTrigger as AtAccordionTriggerElement, defineCustomElement as defineAtAccordionTrigger } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-accordion-trigger.js";
import { AtAccordion as AtAccordionElement, defineCustomElement as defineAtAccordion } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-accordion.js";
import { AtAvatar as AtAvatarElement, defineCustomElement as defineAtAvatar } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-avatar.js";
import { AtBadge as AtBadgeElement, defineCustomElement as defineAtBadge } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-badge.js";
import { AtBreadcrumbItem as AtBreadcrumbItemElement, defineCustomElement as defineAtBreadcrumbItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-breadcrumb-item.js";
import { AtBreadcrumb as AtBreadcrumbElement, defineCustomElement as defineAtBreadcrumb } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-breadcrumb.js";
import { AtButtonGroupOption as AtButtonGroupOptionElement, defineCustomElement as defineAtButtonGroupOption } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-button-group-option.js";
import { AtButtonGroup as AtButtonGroupElement, defineCustomElement as defineAtButtonGroup } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-button-group.js";
import { AtButton as AtButtonElement, defineCustomElement as defineAtButton } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-button.js";
import { AtCard as AtCardElement, defineCustomElement as defineAtCard } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-card.js";
import { AtChartBarLine as AtChartBarLineElement, defineCustomElement as defineAtChartBarLine } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-chart-bar-line.js";
import { AtChartDonut as AtChartDonutElement, defineCustomElement as defineAtChartDonut } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-chart-donut.js";
import { AtCheckboxCell as AtCheckboxCellElement, defineCustomElement as defineAtCheckboxCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-checkbox-cell.js";
import { AtCheckboxGroup as AtCheckboxGroupElement, defineCustomElement as defineAtCheckboxGroup } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-checkbox-group.js";
import { AtCheckboxHeader as AtCheckboxHeaderElement, defineCustomElement as defineAtCheckboxHeader } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-checkbox-header.js";
import { AtCheckbox as AtCheckboxElement, defineCustomElement as defineAtCheckbox } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-checkbox.js";
import { AtChipListCell as AtChipListCellElement, defineCustomElement as defineAtChipListCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-chip-list-cell.js";
import { AtChipList as AtChipListElement, defineCustomElement as defineAtChipList } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-chip-list.js";
import { AtColorStatusCell as AtColorStatusCellElement, defineCustomElement as defineAtColorStatusCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-color-status-cell.js";
import { AtColumnManager as AtColumnManagerElement, defineCustomElement as defineAtColumnManager } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-column-manager.js";
import { AtCustomTimeRange as AtCustomTimeRangeElement, defineCustomElement as defineAtCustomTimeRange } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-custom-time-range.js";
import { AtDialog as AtDialogElement, defineCustomElement as defineAtDialog } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-dialog.js";
import { AtEditTextCell as AtEditTextCellElement, defineCustomElement as defineAtEditTextCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-edit-text-cell.js";
import { AtFormLabel as AtFormLabelElement, defineCustomElement as defineAtFormLabel } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-form-label.js";
import { AtHeader as AtHeaderElement, defineCustomElement as defineAtHeader } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-header.js";
import { AtInputNumeric as AtInputNumericElement, defineCustomElement as defineAtInputNumeric } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-input-numeric.js";
import { AtInputRange as AtInputRangeElement, defineCustomElement as defineAtInputRange } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-input-range.js";
import { AtInput as AtInputElement, defineCustomElement as defineAtInput } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-input.js";
import { AtLayout as AtLayoutElement, defineCustomElement as defineAtLayout } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-layout.js";
import { AtListItem as AtListItemElement, defineCustomElement as defineAtListItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-list-item.js";
import { AtListSelector as AtListSelectorElement, defineCustomElement as defineAtListSelector } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-list-selector.js";
import { AtLoading as AtLoadingElement, defineCustomElement as defineAtLoading } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-loading.js";
import { AtMenuCell as AtMenuCellElement, defineCustomElement as defineAtMenuCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-menu-cell.js";
import { AtMenuItem as AtMenuItemElement, defineCustomElement as defineAtMenuItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-menu-item.js";
import { AtMenu as AtMenuElement, defineCustomElement as defineAtMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-menu.js";
import { AtMessage as AtMessageElement, defineCustomElement as defineAtMessage } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-message.js";
import { AtMultiBtnCell as AtMultiBtnCellElement, defineCustomElement as defineAtMultiBtnCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-multi-btn-cell.js";
import { AtMultiSelect as AtMultiSelectElement, defineCustomElement as defineAtMultiSelect } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-multi-select.js";
import { AtPlaceholder as AtPlaceholderElement, defineCustomElement as defineAtPlaceholder } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-placeholder.js";
import { AtPromptContainer as AtPromptContainerElement, defineCustomElement as defineAtPromptContainer } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-prompt-container.js";
import { AtPromptInput as AtPromptInputElement, defineCustomElement as defineAtPromptInput } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-prompt-input.js";
import { AtPromptMessage as AtPromptMessageElement, defineCustomElement as defineAtPromptMessage } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-prompt-message.js";
import { AtPromptThread as AtPromptThreadElement, defineCustomElement as defineAtPromptThread } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-prompt-thread.js";
import { AtRadioGroup as AtRadioGroupElement, defineCustomElement as defineAtRadioGroup } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-radio-group.js";
import { AtRadio as AtRadioElement, defineCustomElement as defineAtRadio } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-radio.js";
import { AtSearchTable as AtSearchTableElement, defineCustomElement as defineAtSearchTable } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-search-table.js";
import { AtSearch as AtSearchElement, defineCustomElement as defineAtSearch } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-search.js";
import { AtSelect as AtSelectElement, defineCustomElement as defineAtSelect } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-select.js";
import { AtSidePanel as AtSidePanelElement, defineCustomElement as defineAtSidePanel } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-side-panel.js";
import { AtSidebarMenu as AtSidebarMenuElement, defineCustomElement as defineAtSidebarMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-sidebar-menu.js";
import { AtSidebarMenuitem as AtSidebarMenuitemElement, defineCustomElement as defineAtSidebarMenuitem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-sidebar-menuitem.js";
import { AtSidebarSubmenu as AtSidebarSubmenuElement, defineCustomElement as defineAtSidebarSubmenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-sidebar-submenu.js";
import { AtSidebarTrigger as AtSidebarTriggerElement, defineCustomElement as defineAtSidebarTrigger } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-sidebar-trigger.js";
import { AtSidebar as AtSidebarElement, defineCustomElement as defineAtSidebar } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-sidebar.js";
import { AtSrcDest as AtSrcDestElement, defineCustomElement as defineAtSrcDest } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-src-dest.js";
import { AtStaticTable as AtStaticTableElement, defineCustomElement as defineAtStaticTable } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-static-table.js";
import { AtStatusBar as AtStatusBarElement, defineCustomElement as defineAtStatusBar } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-status-bar.js";
import { AtTabContent as AtTabContentElement, defineCustomElement as defineAtTabContent } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-tab-content.js";
import { AtTabSelector as AtTabSelectorElement, defineCustomElement as defineAtTabSelector } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-tab-selector.js";
import { AtTab as AtTabElement, defineCustomElement as defineAtTab } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-tab.js";
import { AtTableActions as AtTableActionsElement, defineCustomElement as defineAtTableActions } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-table-actions.js";
import { AtTableExportMenu as AtTableExportMenuElement, defineCustomElement as defineAtTableExportMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-table-export-menu.js";
import { AtTableFilterMenu as AtTableFilterMenuElement, defineCustomElement as defineAtTableFilterMenu } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-table-filter-menu.js";
import { AtTableFilters as AtTableFiltersElement, defineCustomElement as defineAtTableFilters } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-table-filters.js";
import { AtTablePagination as AtTablePaginationElement, defineCustomElement as defineAtTablePagination } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-table-pagination.js";
import { AtTable as AtTableElement, defineCustomElement as defineAtTable } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-table.js";
import { AtTextBadgeCell as AtTextBadgeCellElement, defineCustomElement as defineAtTextBadgeCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-text-badge-cell.js";
import { AtTextCell as AtTextCellElement, defineCustomElement as defineAtTextCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-text-cell.js";
import { AtTextIconCell as AtTextIconCellElement, defineCustomElement as defineAtTextIconCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-text-icon-cell.js";
import { AtTextImageCell as AtTextImageCellElement, defineCustomElement as defineAtTextImageCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-text-image-cell.js";
import { AtTextStatusCell as AtTextStatusCellElement, defineCustomElement as defineAtTextStatusCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-text-status-cell.js";
import { AtTextarea as AtTextareaElement, defineCustomElement as defineAtTextarea } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-textarea.js";
import { AtTimeRange as AtTimeRangeElement, defineCustomElement as defineAtTimeRange } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-time-range.js";
import { AtTimeWithUnit as AtTimeWithUnitElement, defineCustomElement as defineAtTimeWithUnit } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-time-with-unit.js";
import { AtTitleSubtitleCell as AtTitleSubtitleCellElement, defineCustomElement as defineAtTitleSubtitleCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-title-subtitle-cell.js";
import { AtTitleSubtitleDateCell as AtTitleSubtitleDateCellElement, defineCustomElement as defineAtTitleSubtitleDateCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-title-subtitle-date-cell.js";
import { AtToggleCell as AtToggleCellElement, defineCustomElement as defineAtToggleCell } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-toggle-cell.js";
import { AtToggleSwitch as AtToggleSwitchElement, defineCustomElement as defineAtToggleSwitch } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-toggle-switch.js";
import { AtTooltip as AtTooltipElement, defineCustomElement as defineAtTooltip } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-tooltip.js";
import { AtTreeItem as AtTreeItemElement, defineCustomElement as defineAtTreeItem } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-tree-item.js";
import { AtTree as AtTreeElement, defineCustomElement as defineAtTree } from "@alliedtelesis-labs-nz/atui-components-stencil/dist/components/at-tree.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type AtAccordionEvents = NonNullable<unknown>;

export const AtAccordion: StencilReactComponent<AtAccordionElement, AtAccordionEvents> = /*@__PURE__*/ createComponent<AtAccordionElement, AtAccordionEvents>({
    tagName: 'at-accordion',
    elementClass: AtAccordionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtAccordionEvents,
    defineCustomElement: defineAtAccordion
});

type AtAccordionItemEvents = { onAtuiAccordionChange: EventName<CustomEvent<boolean>> };

export const AtAccordionItem: StencilReactComponent<AtAccordionItemElement, AtAccordionItemEvents> = /*@__PURE__*/ createComponent<AtAccordionItemElement, AtAccordionItemEvents>({
    tagName: 'at-accordion-item',
    elementClass: AtAccordionItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiAccordionChange: 'atuiAccordionChange' } as AtAccordionItemEvents,
    defineCustomElement: defineAtAccordionItem
});

type AtAccordionTriggerEvents = NonNullable<unknown>;

export const AtAccordionTrigger: StencilReactComponent<AtAccordionTriggerElement, AtAccordionTriggerEvents> = /*@__PURE__*/ createComponent<AtAccordionTriggerElement, AtAccordionTriggerEvents>({
    tagName: 'at-accordion-trigger',
    elementClass: AtAccordionTriggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtAccordionTriggerEvents,
    defineCustomElement: defineAtAccordionTrigger
});

type AtAvatarEvents = NonNullable<unknown>;

export const AtAvatar: StencilReactComponent<AtAvatarElement, AtAvatarEvents> = /*@__PURE__*/ createComponent<AtAvatarElement, AtAvatarEvents>({
    tagName: 'at-avatar',
    elementClass: AtAvatarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtAvatarEvents,
    defineCustomElement: defineAtAvatar
});

type AtBadgeEvents = NonNullable<unknown>;

export const AtBadge: StencilReactComponent<AtBadgeElement, AtBadgeEvents> = /*@__PURE__*/ createComponent<AtBadgeElement, AtBadgeEvents>({
    tagName: 'at-badge',
    elementClass: AtBadgeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtBadgeEvents,
    defineCustomElement: defineAtBadge
});

type AtBreadcrumbEvents = { onAtuiClick: EventName<CustomEvent<number>> };

export const AtBreadcrumb: StencilReactComponent<AtBreadcrumbElement, AtBreadcrumbEvents> = /*@__PURE__*/ createComponent<AtBreadcrumbElement, AtBreadcrumbEvents>({
    tagName: 'at-breadcrumb',
    elementClass: AtBreadcrumbElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtBreadcrumbEvents,
    defineCustomElement: defineAtBreadcrumb
});

type AtBreadcrumbItemEvents = NonNullable<unknown>;

export const AtBreadcrumbItem: StencilReactComponent<AtBreadcrumbItemElement, AtBreadcrumbItemEvents> = /*@__PURE__*/ createComponent<AtBreadcrumbItemElement, AtBreadcrumbItemEvents>({
    tagName: 'at-breadcrumb-item',
    elementClass: AtBreadcrumbItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtBreadcrumbItemEvents,
    defineCustomElement: defineAtBreadcrumbItem
});

type AtButtonEvents = { onAtuiClick: EventName<AtButtonCustomEvent<AtEvent>> };

export const AtButton: StencilReactComponent<AtButtonElement, AtButtonEvents> = /*@__PURE__*/ createComponent<AtButtonElement, AtButtonEvents>({
    tagName: 'at-button',
    elementClass: AtButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtButtonEvents,
    defineCustomElement: defineAtButton
});

type AtButtonGroupEvents = {
    onAtuiIndexChange: EventName<CustomEvent<number>>,
    onAtuiChange: EventName<CustomEvent<string>>
};

export const AtButtonGroup: StencilReactComponent<AtButtonGroupElement, AtButtonGroupEvents> = /*@__PURE__*/ createComponent<AtButtonGroupElement, AtButtonGroupEvents>({
    tagName: 'at-button-group',
    elementClass: AtButtonGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiIndexChange: 'atuiIndexChange',
        onAtuiChange: 'atuiChange'
    } as AtButtonGroupEvents,
    defineCustomElement: defineAtButtonGroup
});

type AtButtonGroupOptionEvents = { onAtuiClick: EventName<AtButtonGroupOptionCustomEvent<AtEvent>> };

export const AtButtonGroupOption: StencilReactComponent<AtButtonGroupOptionElement, AtButtonGroupOptionEvents> = /*@__PURE__*/ createComponent<AtButtonGroupOptionElement, AtButtonGroupOptionEvents>({
    tagName: 'at-button-group-option',
    elementClass: AtButtonGroupOptionElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtButtonGroupOptionEvents,
    defineCustomElement: defineAtButtonGroupOption
});

type AtCardEvents = NonNullable<unknown>;

export const AtCard: StencilReactComponent<AtCardElement, AtCardEvents> = /*@__PURE__*/ createComponent<AtCardElement, AtCardEvents>({
    tagName: 'at-card',
    elementClass: AtCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtCardEvents,
    defineCustomElement: defineAtCard
});

type AtChartBarLineEvents = NonNullable<unknown>;

export const AtChartBarLine: StencilReactComponent<AtChartBarLineElement, AtChartBarLineEvents> = /*@__PURE__*/ createComponent<AtChartBarLineElement, AtChartBarLineEvents>({
    tagName: 'at-chart-bar-line',
    elementClass: AtChartBarLineElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtChartBarLineEvents,
    defineCustomElement: defineAtChartBarLine
});

type AtChartDonutEvents = NonNullable<unknown>;

export const AtChartDonut: StencilReactComponent<AtChartDonutElement, AtChartDonutEvents> = /*@__PURE__*/ createComponent<AtChartDonutElement, AtChartDonutEvents>({
    tagName: 'at-chart-donut',
    elementClass: AtChartDonutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtChartDonutEvents,
    defineCustomElement: defineAtChartDonut
});

type AtCheckboxEvents = { onAtuiChange: EventName<CustomEvent<boolean>> };

export const AtCheckbox: StencilReactComponent<AtCheckboxElement, AtCheckboxEvents> = /*@__PURE__*/ createComponent<AtCheckboxElement, AtCheckboxEvents>({
    tagName: 'at-checkbox',
    elementClass: AtCheckboxElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtCheckboxEvents,
    defineCustomElement: defineAtCheckbox
});

type AtCheckboxCellEvents = NonNullable<unknown>;

export const AtCheckboxCell: StencilReactComponent<AtCheckboxCellElement, AtCheckboxCellEvents> = /*@__PURE__*/ createComponent<AtCheckboxCellElement, AtCheckboxCellEvents>({
    tagName: 'at-checkbox-cell',
    elementClass: AtCheckboxCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtCheckboxCellEvents,
    defineCustomElement: defineAtCheckboxCell
});

type AtCheckboxGroupEvents = { onAtuiChange: EventName<CustomEvent<string[]>> };

export const AtCheckboxGroup: StencilReactComponent<AtCheckboxGroupElement, AtCheckboxGroupEvents> = /*@__PURE__*/ createComponent<AtCheckboxGroupElement, AtCheckboxGroupEvents>({
    tagName: 'at-checkbox-group',
    elementClass: AtCheckboxGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtCheckboxGroupEvents,
    defineCustomElement: defineAtCheckboxGroup
});

type AtCheckboxHeaderEvents = NonNullable<unknown>;

export const AtCheckboxHeader: StencilReactComponent<AtCheckboxHeaderElement, AtCheckboxHeaderEvents> = /*@__PURE__*/ createComponent<AtCheckboxHeaderElement, AtCheckboxHeaderEvents>({
    tagName: 'at-checkbox-header',
    elementClass: AtCheckboxHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtCheckboxHeaderEvents,
    defineCustomElement: defineAtCheckboxHeader
});

type AtChipListEvents = { onAtRemoveChip: EventName<CustomEvent<string[]>> };

export const AtChipList: StencilReactComponent<AtChipListElement, AtChipListEvents> = /*@__PURE__*/ createComponent<AtChipListElement, AtChipListEvents>({
    tagName: 'at-chip-list',
    elementClass: AtChipListElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtRemoveChip: 'atRemoveChip' } as AtChipListEvents,
    defineCustomElement: defineAtChipList
});

type AtChipListCellEvents = NonNullable<unknown>;

export const AtChipListCell: StencilReactComponent<AtChipListCellElement, AtChipListCellEvents> = /*@__PURE__*/ createComponent<AtChipListCellElement, AtChipListCellEvents>({
    tagName: 'at-chip-list-cell',
    elementClass: AtChipListCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtChipListCellEvents,
    defineCustomElement: defineAtChipListCell
});

type AtColorStatusCellEvents = NonNullable<unknown>;

export const AtColorStatusCell: StencilReactComponent<AtColorStatusCellElement, AtColorStatusCellEvents> = /*@__PURE__*/ createComponent<AtColorStatusCellElement, AtColorStatusCellEvents>({
    tagName: 'at-color-status-cell',
    elementClass: AtColorStatusCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtColorStatusCellEvents,
    defineCustomElement: defineAtColorStatusCell
});

type AtColumnManagerEvents = { onAtChange: EventName<AtColumnManagerCustomEvent<ColumnManagerChangeEvent>> };

export const AtColumnManager: StencilReactComponent<AtColumnManagerElement, AtColumnManagerEvents> = /*@__PURE__*/ createComponent<AtColumnManagerElement, AtColumnManagerEvents>({
    tagName: 'at-column-manager',
    elementClass: AtColumnManagerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtChange: 'atChange' } as AtColumnManagerEvents,
    defineCustomElement: defineAtColumnManager
});

type AtCustomTimeRangeEvents = {
    onAtuiCancel: EventName<CustomEvent<null>>,
    onAtuiSubmit: EventName<AtCustomTimeRangeCustomEvent<DateRangeStrings>>
};

export const AtCustomTimeRange: StencilReactComponent<AtCustomTimeRangeElement, AtCustomTimeRangeEvents> = /*@__PURE__*/ createComponent<AtCustomTimeRangeElement, AtCustomTimeRangeEvents>({
    tagName: 'at-custom-time-range',
    elementClass: AtCustomTimeRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiCancel: 'atuiCancel',
        onAtuiSubmit: 'atuiSubmit'
    } as AtCustomTimeRangeEvents,
    defineCustomElement: defineAtCustomTimeRange
});

type AtDialogEvents = { onAtuiDialogChange: EventName<CustomEvent<any>> };

export const AtDialog: StencilReactComponent<AtDialogElement, AtDialogEvents> = /*@__PURE__*/ createComponent<AtDialogElement, AtDialogEvents>({
    tagName: 'at-dialog',
    elementClass: AtDialogElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiDialogChange: 'atuiDialogChange' } as AtDialogEvents,
    defineCustomElement: defineAtDialog
});

type AtEditTextCellEvents = NonNullable<unknown>;

export const AtEditTextCell: StencilReactComponent<AtEditTextCellElement, AtEditTextCellEvents> = /*@__PURE__*/ createComponent<AtEditTextCellElement, AtEditTextCellEvents>({
    tagName: 'at-edit-text-cell',
    elementClass: AtEditTextCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtEditTextCellEvents,
    defineCustomElement: defineAtEditTextCell
});

type AtFormLabelEvents = NonNullable<unknown>;

export const AtFormLabel: StencilReactComponent<AtFormLabelElement, AtFormLabelEvents> = /*@__PURE__*/ createComponent<AtFormLabelElement, AtFormLabelEvents>({
    tagName: 'at-form-label',
    elementClass: AtFormLabelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtFormLabelEvents,
    defineCustomElement: defineAtFormLabel
});

type AtHeaderEvents = NonNullable<unknown>;

export const AtHeader: StencilReactComponent<AtHeaderElement, AtHeaderEvents> = /*@__PURE__*/ createComponent<AtHeaderElement, AtHeaderEvents>({
    tagName: 'at-header',
    elementClass: AtHeaderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtHeaderEvents,
    defineCustomElement: defineAtHeader
});

type AtInputEvents = { onAtuiChange: EventName<CustomEvent<string | number>> };

export const AtInput: StencilReactComponent<AtInputElement, AtInputEvents> = /*@__PURE__*/ createComponent<AtInputElement, AtInputEvents>({
    tagName: 'at-input',
    elementClass: AtInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtInputEvents,
    defineCustomElement: defineAtInput
});

type AtInputNumericEvents = { onAtuiChange: EventName<CustomEvent<string | number>> };

export const AtInputNumeric: StencilReactComponent<AtInputNumericElement, AtInputNumericEvents> = /*@__PURE__*/ createComponent<AtInputNumericElement, AtInputNumericEvents>({
    tagName: 'at-input-numeric',
    elementClass: AtInputNumericElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtInputNumericEvents,
    defineCustomElement: defineAtInputNumeric
});

type AtInputRangeEvents = { onAtuiChange: EventName<CustomEvent<number>> };

export const AtInputRange: StencilReactComponent<AtInputRangeElement, AtInputRangeEvents> = /*@__PURE__*/ createComponent<AtInputRangeElement, AtInputRangeEvents>({
    tagName: 'at-input-range',
    elementClass: AtInputRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtInputRangeEvents,
    defineCustomElement: defineAtInputRange
});

type AtLayoutEvents = NonNullable<unknown>;

export const AtLayout: StencilReactComponent<AtLayoutElement, AtLayoutEvents> = /*@__PURE__*/ createComponent<AtLayoutElement, AtLayoutEvents>({
    tagName: 'at-layout',
    elementClass: AtLayoutElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtLayoutEvents,
    defineCustomElement: defineAtLayout
});

type AtListItemEvents = NonNullable<unknown>;

export const AtListItem: StencilReactComponent<AtListItemElement, AtListItemEvents> = /*@__PURE__*/ createComponent<AtListItemElement, AtListItemEvents>({
    tagName: 'at-list-item',
    elementClass: AtListItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtListItemEvents,
    defineCustomElement: defineAtListItem
});

type AtListSelectorEvents = {
    onAtuiChange: EventName<AtListSelectorCustomEvent<ListSelectorItem>>,
    onAtuiInfoButtonClick: EventName<AtListSelectorCustomEvent<AtEvent>>
};

export const AtListSelector: StencilReactComponent<AtListSelectorElement, AtListSelectorEvents> = /*@__PURE__*/ createComponent<AtListSelectorElement, AtListSelectorEvents>({
    tagName: 'at-list-selector',
    elementClass: AtListSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiChange: 'atuiChange',
        onAtuiInfoButtonClick: 'atuiInfoButtonClick'
    } as AtListSelectorEvents,
    defineCustomElement: defineAtListSelector
});

type AtLoadingEvents = NonNullable<unknown>;

export const AtLoading: StencilReactComponent<AtLoadingElement, AtLoadingEvents> = /*@__PURE__*/ createComponent<AtLoadingElement, AtLoadingEvents>({
    tagName: 'at-loading',
    elementClass: AtLoadingElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtLoadingEvents,
    defineCustomElement: defineAtLoading
});

type AtMenuEvents = { onAtuiMenuStateChange: EventName<CustomEvent<boolean>> };

export const AtMenu: StencilReactComponent<AtMenuElement, AtMenuEvents> = /*@__PURE__*/ createComponent<AtMenuElement, AtMenuEvents>({
    tagName: 'at-menu',
    elementClass: AtMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiMenuStateChange: 'atuiMenuStateChange' } as AtMenuEvents,
    defineCustomElement: defineAtMenu
});

type AtMenuCellEvents = NonNullable<unknown>;

export const AtMenuCell: StencilReactComponent<AtMenuCellElement, AtMenuCellEvents> = /*@__PURE__*/ createComponent<AtMenuCellElement, AtMenuCellEvents>({
    tagName: 'at-menu-cell',
    elementClass: AtMenuCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtMenuCellEvents,
    defineCustomElement: defineAtMenuCell
});

type AtMenuItemEvents = { onAtuiClick: EventName<AtMenuItemCustomEvent<AtEvent>> };

export const AtMenuItem: StencilReactComponent<AtMenuItemElement, AtMenuItemEvents> = /*@__PURE__*/ createComponent<AtMenuItemElement, AtMenuItemEvents>({
    tagName: 'at-menu-item',
    elementClass: AtMenuItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtMenuItemEvents,
    defineCustomElement: defineAtMenuItem
});

type AtMessageEvents = NonNullable<unknown>;

export const AtMessage: StencilReactComponent<AtMessageElement, AtMessageEvents> = /*@__PURE__*/ createComponent<AtMessageElement, AtMessageEvents>({
    tagName: 'at-message',
    elementClass: AtMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtMessageEvents,
    defineCustomElement: defineAtMessage
});

type AtMultiBtnCellEvents = NonNullable<unknown>;

export const AtMultiBtnCell: StencilReactComponent<AtMultiBtnCellElement, AtMultiBtnCellEvents> = /*@__PURE__*/ createComponent<AtMultiBtnCellElement, AtMultiBtnCellEvents>({
    tagName: 'at-multi-btn-cell',
    elementClass: AtMultiBtnCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtMultiBtnCellEvents,
    defineCustomElement: defineAtMultiBtnCell
});

type AtMultiSelectEvents = { onAtuiChange: EventName<CustomEvent<string[]>> };

export const AtMultiSelect: StencilReactComponent<AtMultiSelectElement, AtMultiSelectEvents> = /*@__PURE__*/ createComponent<AtMultiSelectElement, AtMultiSelectEvents>({
    tagName: 'at-multi-select',
    elementClass: AtMultiSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtMultiSelectEvents,
    defineCustomElement: defineAtMultiSelect
});

type AtPlaceholderEvents = NonNullable<unknown>;

export const AtPlaceholder: StencilReactComponent<AtPlaceholderElement, AtPlaceholderEvents> = /*@__PURE__*/ createComponent<AtPlaceholderElement, AtPlaceholderEvents>({
    tagName: 'at-placeholder',
    elementClass: AtPlaceholderElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtPlaceholderEvents,
    defineCustomElement: defineAtPlaceholder
});

type AtPromptContainerEvents = {
    onAtSubmit: EventName<CustomEvent<string>>,
    onAtStop: EventName<CustomEvent<void>>,
    onAtNewThread: EventName<CustomEvent<void>>,
    onAtMessageCopy: EventName<CustomEvent<{
        messageId: string;
        content: string;
    }>>,
    onAtMessageRetry: EventName<CustomEvent<{ messageId: string }>>,
    onAtMessageEdit: EventName<CustomEvent<{
        messageId: string;
        content: string;
    }>>,
    onAtMessageVote: EventName<CustomEvent<{
        messageId: string;
        score: number;
    }>>
};

export const AtPromptContainer: StencilReactComponent<AtPromptContainerElement, AtPromptContainerEvents> = /*@__PURE__*/ createComponent<AtPromptContainerElement, AtPromptContainerEvents>({
    tagName: 'at-prompt-container',
    elementClass: AtPromptContainerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtSubmit: 'atSubmit',
        onAtStop: 'atStop',
        onAtNewThread: 'atNewThread',
        onAtMessageCopy: 'atMessageCopy',
        onAtMessageRetry: 'atMessageRetry',
        onAtMessageEdit: 'atMessageEdit',
        onAtMessageVote: 'atMessageVote'
    } as AtPromptContainerEvents,
    defineCustomElement: defineAtPromptContainer
});

type AtPromptInputEvents = {
    onAtChange: EventName<CustomEvent<string>>,
    onAtSubmit: EventName<CustomEvent<string>>,
    onAtStop: EventName<CustomEvent<void>>,
    onAtFocus: EventName<CustomEvent<void>>
};

export const AtPromptInput: StencilReactComponent<AtPromptInputElement, AtPromptInputEvents> = /*@__PURE__*/ createComponent<AtPromptInputElement, AtPromptInputEvents>({
    tagName: 'at-prompt-input',
    elementClass: AtPromptInputElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtChange: 'atChange',
        onAtSubmit: 'atSubmit',
        onAtStop: 'atStop',
        onAtFocus: 'atFocus'
    } as AtPromptInputEvents,
    defineCustomElement: defineAtPromptInput
});

type AtPromptMessageEvents = {
    onAtCopy: EventName<CustomEvent<string>>,
    onAtVote: EventName<CustomEvent<{
        messageId: string;
        score: number;
    }>>,
    onAtRetry: EventName<CustomEvent<void>>,
    onAtEdit: EventName<CustomEvent<string>>
};

export const AtPromptMessage: StencilReactComponent<AtPromptMessageElement, AtPromptMessageEvents> = /*@__PURE__*/ createComponent<AtPromptMessageElement, AtPromptMessageEvents>({
    tagName: 'at-prompt-message',
    elementClass: AtPromptMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtCopy: 'atCopy',
        onAtVote: 'atVote',
        onAtRetry: 'atRetry',
        onAtEdit: 'atEdit'
    } as AtPromptMessageEvents,
    defineCustomElement: defineAtPromptMessage
});

type AtPromptThreadEvents = {
    onAtMessageCopy: EventName<CustomEvent<{
        messageId: string;
        content: string;
    }>>,
    onAtMessageRetry: EventName<CustomEvent<{
        messageId: string;
    }>>,
    onAtMessageEdit: EventName<CustomEvent<{
        messageId: string;
        content: string;
    }>>,
    onAtMessageVote: EventName<CustomEvent<{
        messageId: string;
        score: number;
    }>>
};

export const AtPromptThread: StencilReactComponent<AtPromptThreadElement, AtPromptThreadEvents> = /*@__PURE__*/ createComponent<AtPromptThreadElement, AtPromptThreadEvents>({
    tagName: 'at-prompt-thread',
    elementClass: AtPromptThreadElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtMessageCopy: 'atMessageCopy',
        onAtMessageRetry: 'atMessageRetry',
        onAtMessageEdit: 'atMessageEdit',
        onAtMessageVote: 'atMessageVote'
    } as AtPromptThreadEvents,
    defineCustomElement: defineAtPromptThread
});

type AtRadioEvents = { onAtuiChange: EventName<CustomEvent<boolean>> };

export const AtRadio: StencilReactComponent<AtRadioElement, AtRadioEvents> = /*@__PURE__*/ createComponent<AtRadioElement, AtRadioEvents>({
    tagName: 'at-radio',
    elementClass: AtRadioElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtRadioEvents,
    defineCustomElement: defineAtRadio
});

type AtRadioGroupEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtRadioGroup: StencilReactComponent<AtRadioGroupElement, AtRadioGroupEvents> = /*@__PURE__*/ createComponent<AtRadioGroupElement, AtRadioGroupEvents>({
    tagName: 'at-radio-group',
    elementClass: AtRadioGroupElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtRadioGroupEvents,
    defineCustomElement: defineAtRadioGroup
});

type AtSearchEvents = { onAtChange: EventName<CustomEvent<string>> };

export const AtSearch: StencilReactComponent<AtSearchElement, AtSearchEvents> = /*@__PURE__*/ createComponent<AtSearchElement, AtSearchEvents>({
    tagName: 'at-search',
    elementClass: AtSearchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtChange: 'atChange' } as AtSearchEvents,
    defineCustomElement: defineAtSearch
});

type AtSearchTableEvents = NonNullable<unknown>;

export const AtSearchTable: StencilReactComponent<AtSearchTableElement, AtSearchTableEvents> = /*@__PURE__*/ createComponent<AtSearchTableElement, AtSearchTableEvents>({
    tagName: 'at-search-table',
    elementClass: AtSearchTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtSearchTableEvents,
    defineCustomElement: defineAtSearchTable
});

type AtSelectEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtSelect: StencilReactComponent<AtSelectElement, AtSelectEvents> = /*@__PURE__*/ createComponent<AtSelectElement, AtSelectEvents>({
    tagName: 'at-select',
    elementClass: AtSelectElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtSelectEvents,
    defineCustomElement: defineAtSelect
});

type AtSidePanelEvents = { onAtuiSidepanelChange: EventName<CustomEvent<any>> };

export const AtSidePanel: StencilReactComponent<AtSidePanelElement, AtSidePanelEvents> = /*@__PURE__*/ createComponent<AtSidePanelElement, AtSidePanelEvents>({
    tagName: 'at-side-panel',
    elementClass: AtSidePanelElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiSidepanelChange: 'atuiSidepanelChange' } as AtSidePanelEvents,
    defineCustomElement: defineAtSidePanel
});

type AtSidebarEvents = { onAtuiSidebarChange: EventName<CustomEvent<any>> };

export const AtSidebar: StencilReactComponent<AtSidebarElement, AtSidebarEvents> = /*@__PURE__*/ createComponent<AtSidebarElement, AtSidebarEvents>({
    tagName: 'at-sidebar',
    elementClass: AtSidebarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiSidebarChange: 'atuiSidebarChange' } as AtSidebarEvents,
    defineCustomElement: defineAtSidebar
});

type AtSidebarMenuEvents = NonNullable<unknown>;

export const AtSidebarMenu: StencilReactComponent<AtSidebarMenuElement, AtSidebarMenuEvents> = /*@__PURE__*/ createComponent<AtSidebarMenuElement, AtSidebarMenuEvents>({
    tagName: 'at-sidebar-menu',
    elementClass: AtSidebarMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtSidebarMenuEvents,
    defineCustomElement: defineAtSidebarMenu
});

type AtSidebarMenuitemEvents = NonNullable<unknown>;

export const AtSidebarMenuitem: StencilReactComponent<AtSidebarMenuitemElement, AtSidebarMenuitemEvents> = /*@__PURE__*/ createComponent<AtSidebarMenuitemElement, AtSidebarMenuitemEvents>({
    tagName: 'at-sidebar-menuitem',
    elementClass: AtSidebarMenuitemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtSidebarMenuitemEvents,
    defineCustomElement: defineAtSidebarMenuitem
});

type AtSidebarSubmenuEvents = NonNullable<unknown>;

export const AtSidebarSubmenu: StencilReactComponent<AtSidebarSubmenuElement, AtSidebarSubmenuEvents> = /*@__PURE__*/ createComponent<AtSidebarSubmenuElement, AtSidebarSubmenuEvents>({
    tagName: 'at-sidebar-submenu',
    elementClass: AtSidebarSubmenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtSidebarSubmenuEvents,
    defineCustomElement: defineAtSidebarSubmenu
});

type AtSidebarTriggerEvents = NonNullable<unknown>;

export const AtSidebarTrigger: StencilReactComponent<AtSidebarTriggerElement, AtSidebarTriggerEvents> = /*@__PURE__*/ createComponent<AtSidebarTriggerElement, AtSidebarTriggerEvents>({
    tagName: 'at-sidebar-trigger',
    elementClass: AtSidebarTriggerElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtSidebarTriggerEvents,
    defineCustomElement: defineAtSidebarTrigger
});

type AtSrcDestEvents = NonNullable<unknown>;

export const AtSrcDest: StencilReactComponent<AtSrcDestElement, AtSrcDestEvents> = /*@__PURE__*/ createComponent<AtSrcDestElement, AtSrcDestEvents>({
    tagName: 'at-src-dest',
    elementClass: AtSrcDestElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtSrcDestEvents,
    defineCustomElement: defineAtSrcDest
});

type AtStaticTableEvents = NonNullable<unknown>;

export const AtStaticTable: StencilReactComponent<AtStaticTableElement, AtStaticTableEvents> = /*@__PURE__*/ createComponent<AtStaticTableElement, AtStaticTableEvents>({
    tagName: 'at-static-table',
    elementClass: AtStaticTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtStaticTableEvents,
    defineCustomElement: defineAtStaticTable
});

type AtStatusBarEvents = NonNullable<unknown>;

export const AtStatusBar: StencilReactComponent<AtStatusBarElement, AtStatusBarEvents> = /*@__PURE__*/ createComponent<AtStatusBarElement, AtStatusBarEvents>({
    tagName: 'at-status-bar',
    elementClass: AtStatusBarElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtStatusBarEvents,
    defineCustomElement: defineAtStatusBar
});

type AtTabEvents = NonNullable<unknown>;

export const AtTab: StencilReactComponent<AtTabElement, AtTabEvents> = /*@__PURE__*/ createComponent<AtTabElement, AtTabEvents>({
    tagName: 'at-tab',
    elementClass: AtTabElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTabEvents,
    defineCustomElement: defineAtTab
});

type AtTabContentEvents = NonNullable<unknown>;

export const AtTabContent: StencilReactComponent<AtTabContentElement, AtTabContentEvents> = /*@__PURE__*/ createComponent<AtTabContentElement, AtTabContentEvents>({
    tagName: 'at-tab-content',
    elementClass: AtTabContentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTabContentEvents,
    defineCustomElement: defineAtTabContent
});

type AtTabSelectorEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtTabSelector: StencilReactComponent<AtTabSelectorElement, AtTabSelectorEvents> = /*@__PURE__*/ createComponent<AtTabSelectorElement, AtTabSelectorEvents>({
    tagName: 'at-tab-selector',
    elementClass: AtTabSelectorElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtTabSelectorEvents,
    defineCustomElement: defineAtTabSelector
});

type AtTableEvents = {
    onAtSortChange: EventName<CustomEvent<{
        colId: string;
        sortDirection: 'asc' | 'desc' | null;
    }>>
};

export const AtTable: StencilReactComponent<AtTableElement, AtTableEvents> = /*@__PURE__*/ createComponent<AtTableElement, AtTableEvents>({
    tagName: 'at-table',
    elementClass: AtTableElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtSortChange: 'atSortChange' } as AtTableEvents,
    defineCustomElement: defineAtTable
});

type AtTableActionsEvents = {
    onAtExportCsv: EventName<CustomEvent<any>>,
    onAtExportPdf: EventName<CustomEvent<any>>,
    onAtChange: EventName<CustomEvent<any>>
};

export const AtTableActions: StencilReactComponent<AtTableActionsElement, AtTableActionsEvents> = /*@__PURE__*/ createComponent<AtTableActionsElement, AtTableActionsEvents>({
    tagName: 'at-table-actions',
    elementClass: AtTableActionsElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtExportCsv: 'atExportCsv',
        onAtExportPdf: 'atExportPdf',
        onAtChange: 'atChange'
    } as AtTableActionsEvents,
    defineCustomElement: defineAtTableActions
});

type AtTableExportMenuEvents = { onAtChange: EventName<CustomEvent<string>> };

export const AtTableExportMenu: StencilReactComponent<AtTableExportMenuElement, AtTableExportMenuEvents> = /*@__PURE__*/ createComponent<AtTableExportMenuElement, AtTableExportMenuEvents>({
    tagName: 'at-table-export-menu',
    elementClass: AtTableExportMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtChange: 'atChange' } as AtTableExportMenuEvents,
    defineCustomElement: defineAtTableExportMenu
});

type AtTableFilterMenuEvents = { onAtChange: EventName<CustomEvent<string[]>> };

export const AtTableFilterMenu: StencilReactComponent<AtTableFilterMenuElement, AtTableFilterMenuEvents> = /*@__PURE__*/ createComponent<AtTableFilterMenuElement, AtTableFilterMenuEvents>({
    tagName: 'at-table-filter-menu',
    elementClass: AtTableFilterMenuElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtChange: 'atChange' } as AtTableFilterMenuEvents,
    defineCustomElement: defineAtTableFilterMenu
});

type AtTableFiltersEvents = { onAtChange: EventName<AtTableFiltersCustomEvent<FilterEvent[]>> };

export const AtTableFilters: StencilReactComponent<AtTableFiltersElement, AtTableFiltersEvents> = /*@__PURE__*/ createComponent<AtTableFiltersElement, AtTableFiltersEvents>({
    tagName: 'at-table-filters',
    elementClass: AtTableFiltersElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtChange: 'atChange' } as AtTableFiltersEvents,
    defineCustomElement: defineAtTableFilters
});

type AtTablePaginationEvents = {
    onAtChange: EventName<CustomEvent<number>>,
    onAtPageSizeChange: EventName<CustomEvent<number>>
};

export const AtTablePagination: StencilReactComponent<AtTablePaginationElement, AtTablePaginationEvents> = /*@__PURE__*/ createComponent<AtTablePaginationElement, AtTablePaginationEvents>({
    tagName: 'at-table-pagination',
    elementClass: AtTablePaginationElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtChange: 'atChange',
        onAtPageSizeChange: 'atPageSizeChange'
    } as AtTablePaginationEvents,
    defineCustomElement: defineAtTablePagination
});

type AtTextBadgeCellEvents = NonNullable<unknown>;

export const AtTextBadgeCell: StencilReactComponent<AtTextBadgeCellElement, AtTextBadgeCellEvents> = /*@__PURE__*/ createComponent<AtTextBadgeCellElement, AtTextBadgeCellEvents>({
    tagName: 'at-text-badge-cell',
    elementClass: AtTextBadgeCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTextBadgeCellEvents,
    defineCustomElement: defineAtTextBadgeCell
});

type AtTextCellEvents = NonNullable<unknown>;

export const AtTextCell: StencilReactComponent<AtTextCellElement, AtTextCellEvents> = /*@__PURE__*/ createComponent<AtTextCellElement, AtTextCellEvents>({
    tagName: 'at-text-cell',
    elementClass: AtTextCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTextCellEvents,
    defineCustomElement: defineAtTextCell
});

type AtTextIconCellEvents = NonNullable<unknown>;

export const AtTextIconCell: StencilReactComponent<AtTextIconCellElement, AtTextIconCellEvents> = /*@__PURE__*/ createComponent<AtTextIconCellElement, AtTextIconCellEvents>({
    tagName: 'at-text-icon-cell',
    elementClass: AtTextIconCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTextIconCellEvents,
    defineCustomElement: defineAtTextIconCell
});

type AtTextImageCellEvents = NonNullable<unknown>;

export const AtTextImageCell: StencilReactComponent<AtTextImageCellElement, AtTextImageCellEvents> = /*@__PURE__*/ createComponent<AtTextImageCellElement, AtTextImageCellEvents>({
    tagName: 'at-text-image-cell',
    elementClass: AtTextImageCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTextImageCellEvents,
    defineCustomElement: defineAtTextImageCell
});

type AtTextStatusCellEvents = NonNullable<unknown>;

export const AtTextStatusCell: StencilReactComponent<AtTextStatusCellElement, AtTextStatusCellEvents> = /*@__PURE__*/ createComponent<AtTextStatusCellElement, AtTextStatusCellEvents>({
    tagName: 'at-text-status-cell',
    elementClass: AtTextStatusCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTextStatusCellEvents,
    defineCustomElement: defineAtTextStatusCell
});

type AtTextareaEvents = { onAtuiChange: EventName<CustomEvent<string>> };

export const AtTextarea: StencilReactComponent<AtTextareaElement, AtTextareaEvents> = /*@__PURE__*/ createComponent<AtTextareaElement, AtTextareaEvents>({
    tagName: 'at-textarea',
    elementClass: AtTextareaElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtTextareaEvents,
    defineCustomElement: defineAtTextarea
});

type AtTimeRangeEvents = { onAtuiChange: EventName<AtTimeRangeCustomEvent<SelectedTimeRangeExtended>> };

export const AtTimeRange: StencilReactComponent<AtTimeRangeElement, AtTimeRangeEvents> = /*@__PURE__*/ createComponent<AtTimeRangeElement, AtTimeRangeEvents>({
    tagName: 'at-time-range',
    elementClass: AtTimeRangeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtTimeRangeEvents,
    defineCustomElement: defineAtTimeRange
});

type AtTimeWithUnitEvents = {
    onAtuiCancel: EventName<CustomEvent<null>>,
    onAtuiSubmit: EventName<AtTimeWithUnitCustomEvent<TimeWithUnit | TimeRangeDisplay.ALL>>
};

export const AtTimeWithUnit: StencilReactComponent<AtTimeWithUnitElement, AtTimeWithUnitEvents> = /*@__PURE__*/ createComponent<AtTimeWithUnitElement, AtTimeWithUnitEvents>({
    tagName: 'at-time-with-unit',
    elementClass: AtTimeWithUnitElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onAtuiCancel: 'atuiCancel',
        onAtuiSubmit: 'atuiSubmit'
    } as AtTimeWithUnitEvents,
    defineCustomElement: defineAtTimeWithUnit
});

type AtTitleSubtitleCellEvents = NonNullable<unknown>;

export const AtTitleSubtitleCell: StencilReactComponent<AtTitleSubtitleCellElement, AtTitleSubtitleCellEvents> = /*@__PURE__*/ createComponent<AtTitleSubtitleCellElement, AtTitleSubtitleCellEvents>({
    tagName: 'at-title-subtitle-cell',
    elementClass: AtTitleSubtitleCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTitleSubtitleCellEvents,
    defineCustomElement: defineAtTitleSubtitleCell
});

type AtTitleSubtitleDateCellEvents = NonNullable<unknown>;

export const AtTitleSubtitleDateCell: StencilReactComponent<AtTitleSubtitleDateCellElement, AtTitleSubtitleDateCellEvents> = /*@__PURE__*/ createComponent<AtTitleSubtitleDateCellElement, AtTitleSubtitleDateCellEvents>({
    tagName: 'at-title-subtitle-date-cell',
    elementClass: AtTitleSubtitleDateCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTitleSubtitleDateCellEvents,
    defineCustomElement: defineAtTitleSubtitleDateCell
});

type AtToggleCellEvents = NonNullable<unknown>;

export const AtToggleCell: StencilReactComponent<AtToggleCellElement, AtToggleCellEvents> = /*@__PURE__*/ createComponent<AtToggleCellElement, AtToggleCellEvents>({
    tagName: 'at-toggle-cell',
    elementClass: AtToggleCellElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtToggleCellEvents,
    defineCustomElement: defineAtToggleCell
});

type AtToggleSwitchEvents = { onAtuiChange: EventName<CustomEvent<boolean>> };

export const AtToggleSwitch: StencilReactComponent<AtToggleSwitchElement, AtToggleSwitchEvents> = /*@__PURE__*/ createComponent<AtToggleSwitchElement, AtToggleSwitchEvents>({
    tagName: 'at-toggle-switch',
    elementClass: AtToggleSwitchElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiChange: 'atuiChange' } as AtToggleSwitchEvents,
    defineCustomElement: defineAtToggleSwitch
});

type AtTooltipEvents = NonNullable<unknown>;

export const AtTooltip: StencilReactComponent<AtTooltipElement, AtTooltipEvents> = /*@__PURE__*/ createComponent<AtTooltipElement, AtTooltipEvents>({
    tagName: 'at-tooltip',
    elementClass: AtTooltipElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as AtTooltipEvents,
    defineCustomElement: defineAtTooltip
});

type AtTreeEvents = { onAtuiClick: EventName<AtTreeCustomEvent<TreeNode>> };

export const AtTree: StencilReactComponent<AtTreeElement, AtTreeEvents> = /*@__PURE__*/ createComponent<AtTreeElement, AtTreeEvents>({
    tagName: 'at-tree',
    elementClass: AtTreeElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtTreeEvents,
    defineCustomElement: defineAtTree
});

type AtTreeItemEvents = { onAtuiClick: EventName<AtTreeItemCustomEvent<AtEvent>> };

export const AtTreeItem: StencilReactComponent<AtTreeItemElement, AtTreeItemEvents> = /*@__PURE__*/ createComponent<AtTreeItemElement, AtTreeItemEvents>({
    tagName: 'at-tree-item',
    elementClass: AtTreeItemElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onAtuiClick: 'atuiClick' } as AtTreeItemEvents,
    defineCustomElement: defineAtTreeItem
});
