{"version":3,"file":"at-dialog.js","sourceRoot":"","sources":["../../../src/components/at-dialog/at-dialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Prop,\n    h,\n    Element,\n    Method,\n    State,\n    Event,\n    Host,\n    EventEmitter,\n    Listen,\n} from '@stencil/core';\n\n/**\n * @category Overlays\n * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.\n *\n * @Event - atuiDialogChange: Emitted when dialog is opened/closed.\n *\n * @slot - Display content within the dialog\n *\n * @csspart dialog - The dialog element container which spans the entire viewport, ::backdrop is applied to this element.\n * @csspart backdrop - The container for content displayed within the dialog backdrop.\n *\n */\n@Component({\n    tag: 'at-dialog',\n    styleUrl: 'at-dialog.scss',\n    shadow: false,\n})\nexport class AtDialogComponent {\n    @Element() el!: HTMLAtDialogElement;\n\n    /**\n     * Role of the dialog element. Can be either 'dialog' or 'alertdialog'\n     */\n    @Prop()\n    role: 'dialog' | 'alertdialog' = 'dialog';\n\n    /**\n     * Whether to show a backdrop behind the panel, prevents any interaction with background UI.\n     */\n    @Prop({ reflect: true })\n    backdrop: boolean = true;\n\n    /**\n     * Will close the dialog if clicked\n     */\n    @Prop({ reflect: true })\n    close_backdrop: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.\n     */\n    @Prop() trigger_id?: string;\n\n    /**\n     * Internal state to track if dialog is open\n     */\n    @State()\n    isOpen: boolean = false;\n\n    /**\n     * Emits an event when the dialog is toggled, with `event.detail` being true if the dialog is now open\n     */\n    @Event()\n    atuiDialogChange: EventEmitter;\n\n    private dialog: HTMLDialogElement;\n    private dialogWrapper: HTMLElement;\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the dialog modal between open and closed states\n     * @returns Promise that resolves when the dialog state is toggled\n     */\n    @Method()\n    async toggleDialog(): Promise<void> {\n        if (this.isOpen) {\n            await this.closeDialog();\n        } else {\n            await this.openDialog();\n        }\n    }\n\n    /**\n     * Opens the dialog modal\n     * @returns Promise that resolves when the dialog is opened\n     */\n    @Method()\n    async openDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && !this.isOpen) {\n            if (this.backdrop === true) {\n                dialog.showModal();\n            } else {\n                dialog.show();\n            }\n\n            this.isOpen = true;\n            this.atuiDialogChange.emit(this.isOpen);\n        }\n    }\n\n    /**\n     * Closes the dialog modal\n     * @returns Promise that resolves when the dialog is closed\n     */\n    @Method()\n    async closeDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && this.isOpen) {\n            dialog.close();\n            this.isOpen = false;\n            this.atuiDialogChange.emit(this.isOpen);\n            dialog.removeAttribute('open');\n        }\n    }\n\n    /**\n     * Getter method for the open state of the dialog\n     * @returns The current open state of the dialog\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.isOpen;\n    }\n\n    private handleDialogClose = () => {\n        if (this.isOpen) {\n            this.closeDialog();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isOpen) {\n            event.preventDefault();\n            this.closeDialog();\n        }\n    };\n\n    @Listen('mousedown', { target: 'document' })\n    offClickHandler(event: any) {\n        if (!this.close_backdrop || !this.dialog?.open) return;\n        if (!this.dialogWrapper?.contains(event.target)) {\n            this.handleDialogClose();\n        }\n    }\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-dialog=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-dialog: No elements found with data-dialog=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleDialog();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleDialog();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <Host>\n                <dialog\n                    ref={(el) => (this.dialog = el)}\n                    part=\"dialog\"\n                    id=\"dialog\"\n                    class={`${this.backdrop ? 'backdrop' : ''}`}\n                    data-name=\"dialog\"\n                    role={this.role}\n                    aria-modal=\"true\"\n                    onClose={this.handleDialogClose}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    <div\n                        part=\"content\"\n                        id=\"content\"\n                        class=\"backdrop-content\"\n                        ref={(el) => (this.dialogWrapper = el)}\n                    >\n                        <slot />\n                    </div>\n                </dialog>\n            </Host>\n        );\n    }\n}\n"]}