{"version":3,"file":"at-static-table.js","sourceRoot":"","sources":["../../../../src/components/table-components/at-static-table/at-static-table.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAGhE;;;GAGG;AAMH,MAAM,OAAO,aAAa;IACtB;;OAEG;IAEH,UAAU,CAGR;IAEF;;OAEG;IAEH,QAAQ,CAAW;IAEnB;;OAEG;IAEH,SAAS,GAAW,EAAE,CAAC;IAEvB;;OAEG;IAEH,mBAAmB,CAAU;IAE7B;;;OAGG;IAEH,qBAAqB,GAAa,KAAK,CAAC;IAGxC,MAAM,CAAU;IAEhB,OAAO,CAAqB;IAG5B,YAAY,GAAY,KAAK,CAAC;IAE9B,KAAK,CAAC,gBAAgB;QAClB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC7B,CAAC;IACL,CAAC;IACD,KAAK,CAAC,kBAAkB;QACpB,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC9C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QAC7B,CAAC;IACL,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI;YACA,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAC1B,yEAAkB,OAAO,EAAE,IAAI,CAAC,MAAM;gBAClC,0EACI,IAAI,EAAC,gBAAgB,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,GACzB,CACa,CACtB;YACD,iEACI,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAChC,OAAO,EAAE,IAAI,CAAC,MAAM,EACpB,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,EACjD,iBAAiB,EAAE,IAAI,GACzB,CACC,CACV,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Prop, State, Host } from '@stencil/core';\nimport { ColDef, GridApi } from 'ag-grid-community';\n\n/**\n * @category Data Tables\n * @description A static data table component for displaying read-only tabular data without interactive features. Ideal for simple data presentation and reports.\n */\n\n@Component({\n    tag: 'at-static-table',\n    shadow: false,\n})\nexport class AtStaticTable {\n    /**\n     * Data to go into the table\n     */\n    @Prop()\n    table_data: {\n        items: any[];\n        total: number;\n    };\n\n    /**\n     * Column definitions for the table\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    /**\n     * Max number of items per page\n     */\n    @Prop()\n    page_size: number = 10;\n\n    /**\n     * If true the column manager will not be added\n     */\n    @Prop()\n    hide_column_manager: boolean;\n\n    /**\n     * If true, disables pagination on the table and shows all data at once.\n     * Useful for server-side pagination where you want to control pagination externally.\n     */\n    @Prop()\n    use_custom_pagination?: boolean = false;\n\n    @State()\n    agGrid: GridApi;\n\n    tableEl: HTMLAtTableElement;\n\n    @State()\n    tableCreated: boolean = false;\n\n    async componentDidLoad() {\n        if (this.col_defs && !this.tableCreated) {\n            this.agGrid = await this.tableEl.createGrid();\n            this.tableCreated = true;\n        }\n    }\n    async componentDidUpdate() {\n        if (this.col_defs && !this.tableCreated) {\n            this.agGrid = await this.tableEl.createGrid();\n            this.tableCreated = true;\n        }\n    }\n\n    render() {\n        return (\n            <Host>\n                {!this.hide_column_manager && (\n                    <at-table-actions ag_grid={this.agGrid}>\n                        <at-column-manager\n                            slot=\"column-manager\"\n                            col_defs={this.col_defs}\n                        />\n                    </at-table-actions>\n                )}\n                <at-table\n                    ref={(el) => (this.tableEl = el)}\n                    ag_grid={this.agGrid}\n                    table_data={this.table_data}\n                    col_defs={this.col_defs}\n                    page_size={this.page_size}\n                    use_custom_pagination={this.use_custom_pagination}\n                    disable_auto_init={true}\n                />\n            </Host>\n        );\n    }\n}\n"]}