{"version":3,"file":"at-table.js","sourceRoot":"","sources":["../../../../src/components/table-components/at-table/at-table.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    Element,\n    Method,\n    EventEmitter,\n    Event,\n    State,\n    Watch,\n} from '@stencil/core';\nimport { ColDef, createGrid, GridApi, GridOptions } from 'ag-grid-community';\nimport { AtTableComponentsConfigs } from '../at-table-components-configs';\n\n/**\n * @category Data Tables\n * @description A comprehensive data table component with sorting, filtering, pagination, and selection capabilities. Features responsive design, customizable columns, and accessibility support.\n */\n\n@Component({\n    tag: 'at-table',\n    styleUrls: ['./at-table.scss'],\n    shadow: false,\n})\nexport class AtTableComponent {\n    /**\n     * Data provided to the table\n     */\n    @Prop()\n    table_data: {\n        items: any[];\n        total: number;\n    };\n\n    /**\n     * Column definitions for the table\n     */\n    @Prop()\n    col_defs: ColDef[];\n\n    /**\n     * Default page size of the table if pagination is activated\n     */\n    @Prop()\n    page_size: number = 10;\n\n    /**\n     * Disables the default sorting provided by agGrid.\n     */\n    @Prop()\n    use_custom_sorting: boolean = false;\n\n    /**\n     * Disables the default pagination provided by agGrid.\n     * When using custom pagination, the default sorting\n     * provided by ag grid will not work correctly.\n     */\n    @Prop()\n    use_custom_pagination: boolean = false;\n\n    /**\n     * If true, disables automatic grid initialization.\n     * When disabled, you must manually call createGrid().\n     * Used when the table is controlled by a parent component.\n     */\n    @Prop()\n    disable_auto_init: boolean = false;\n\n    /**\n     * If true, enables automatic column resizing to fit available space.\n     * Columns will be sized proportionally based on their content and constraints. Fixed widths in column defs will be respected.\n     */\n    @Prop()\n    auto_size_columns: boolean = true;\n\n    /**\n     * The AG Grid API\n     */\n    @Prop()\n    ag_grid: GridApi;\n\n    @Element()\n    el: HTMLAtTableElement;\n\n    private resizeListener: () => void;\n\n    /**\n     * Emits an event when a column's sorting state changes.\n     * Used to perform sorting outside of agGrid, when use_custom_sorting is set.\n     * Data in the table should be updated using the agGrid api:\n     * ```agGrid.setGridOption(\"rowData\", yourNewData)```\n     */\n    @Event()\n    atSortChange: EventEmitter<{\n        colId: string;\n        sortDirection: 'asc' | 'desc' | null;\n    }>;\n\n    @State() activeFilters: { [key: string]: string } = {};\n\n    @State()\n    private agGrid: GridApi;\n\n    @State()\n    tableCreated: boolean = false;\n\n    @Watch('table_data')\n    async handleTableDataChange(newData: { items: any[]; total: number }) {\n        if (this.agGrid && this.tableCreated) {\n            this.agGrid.setGridOption('rowData', newData?.items || []);\n            if (this.auto_size_columns) {\n                setTimeout(() => this.agGrid.sizeColumnsToFit(), 0);\n            }\n        }\n    }\n\n    async componentDidLoad() {\n        if (this.disable_auto_init) {\n            this.tableCreated = true;\n        }\n\n        await this.initGrid();\n\n        if (this.auto_size_columns) {\n            this.resizeListener = () => {\n                if (this.agGrid) {\n                    this.agGrid.sizeColumnsToFit();\n                }\n            };\n            window.addEventListener('resize', this.resizeListener);\n        }\n    }\n\n    async componentDidUpdate() {\n        await this.initGrid();\n    }\n\n    private async initGrid() {\n        const gridInitializedByHost = this.ag_grid && !this.agGrid;\n        const gridReadyForCreation = this.col_defs && !this.tableCreated;\n\n        if (gridInitializedByHost) {\n            this.agGrid = this.ag_grid;\n            this.tableCreated = true;\n            return;\n        }\n\n        if (gridReadyForCreation) {\n            this.agGrid = await this.createGrid();\n            this.tableCreated = true;\n        }\n    }\n\n    /**\n     * Method used to initialize the table.\n     *\n     * @returns The [AG Grid API](https://www.ag-grid.com/javascript-data-grid/grid-api/)\n     */\n    @Method()\n    async createGrid(): Promise<GridApi> {\n        const gridOptions: GridOptions = {\n            domLayout: 'autoHeight',\n            rowData: this.table_data ? this.table_data.items : [],\n            columnDefs: this.col_defs,\n            components: AtTableComponentsConfigs.getFrameworkComponents(),\n            onGridSizeChanged: (params) => {\n                if (this.auto_size_columns) {\n                    params.api.sizeColumnsToFit();\n                }\n            },\n            onGridReady: (params) => {\n                if (this.auto_size_columns) {\n                    params.api.sizeColumnsToFit();\n                }\n            },\n            onSortChanged: (event) => {\n                const sortColumn = event.columns.filter(\n                    (col) => col.getSort() !== undefined,\n                )[0];\n                this.atSortChange.emit({\n                    colId: sortColumn.getColId(),\n                    sortDirection: sortColumn.getSort(),\n                });\n            },\n        };\n\n        if (this.use_custom_sorting) {\n            gridOptions.columnDefs = this.col_defs.map((colDef) => ({\n                ...colDef,\n                comparator: () => 0,\n            }));\n        }\n\n        if (!this.use_custom_pagination) {\n            gridOptions.pagination = true;\n            gridOptions.paginationPageSize = this.page_size;\n            gridOptions.paginationPageSizeSelector = [5, 10, 20, 50, 100];\n        } else {\n            gridOptions.pagination = false;\n        }\n\n        const gridApi = createGrid(\n            this.el as unknown as HTMLElement,\n            gridOptions,\n        );\n        this.agGrid = gridApi;\n        this.tableCreated = true;\n\n        // Initial column sizing\n        if (this.auto_size_columns) {\n            setTimeout(() => gridApi.sizeColumnsToFit(), 0);\n        }\n\n        return gridApi;\n    }\n\n    /**\n     * Gets the AG Grid API instance\n     *\n     * @returns The AG Grid API\n     */\n    @Method()\n    async getGridApi(): Promise<GridApi> {\n        return this.agGrid;\n    }\n\n    disconnectedCallback() {\n        // Clean up resize listener\n        if (this.resizeListener) {\n            window.removeEventListener('resize', this.resizeListener);\n        }\n    }\n\n    render() {\n        return <Host class=\"ag-theme-material\"></Host>;\n    }\n}\n"]}