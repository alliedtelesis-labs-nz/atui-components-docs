{"version":3,"file":"at-multi-btn-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/at-multi-btn-cell/at-multi-btn-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AA0BnE;;;GAGG;AAMH,MAAM,OAAO,cAAc;IAMvB,IAAI,CAAC,MAA2B;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAoB,CAAC;QAEnC,MAAM,EAAE,eAAe,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;QAEjD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO;YACR,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;IAClE,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAA2B;QAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,UAAU,CAAC,QAAa;QAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;IACjC,CAAC;IAED,WAAW,CAAC,GAAe;QACvB,OAAO,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IAED,IAAI,eAAe;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAC/B,OAAO,CACH,kBACI,QAAQ,EAAC,OAAO,EAChB,QAAQ,EAAE,CAAC,MAAM,CAAC,OAAO;gBAExB,MAAM,IAAI,CACP,iBACI,IAAI,EAAC,eAAe,EACpB,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,QAAQ,EAAE,MAAM,CAAC,QAAQ,eACd,MAAM,CAAC,aAAa,EAC/B,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAClC,CAChB;gBAEA,MAAM,IAAI,MAAM,CAAC,OAAO,IAAI,CACzB,YAAM,KAAK,EAAE,gBAAgB,IAAG,MAAM,CAAC,OAAO,CAAQ,CACzD,CACQ,CAChB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,0BAA0B,IAAE,IAAI,CAAC,eAAe,CAAQ,CACvE,CAAC;IACN,CAAC;;;;;;;;CACJ","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport type { IClickCell } from '../../../../types';\nimport { CSSProperties } from '../../../../types/styles';\n\nexport interface MultiBtnCellData {\n    buttons: IBtnParams[];\n}\n\nexport interface IMultiBtnCellParams extends ICellRendererParams, IClickCell {\n    containerStyles?: CSSProperties;\n    buttons?: IBtnParams[] | ((params: ICellRendererParams) => IBtnParams[]);\n}\n\nexport interface IBtnParams {\n    value: string;\n    containerStyles?: CSSProperties;\n    click?: (params: ICellRendererParams) => any;\n    disabled: boolean;\n    tooltip?: string;\n    hidden?: boolean;\n    dataNameValue?: string;\n}\n\ntype InitParams = IMultiBtnCellParams;\n\n/**\n * @category Table Cell\n * @description A cell component for displaying multiple buttons.\n */\n\n@Component({\n    tag: 'at-multi-btn-cell',\n    shadow: false,\n})\nexport class AtMultiBtnCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n    @State() buttons: IBtnParams[];\n    @State() containerStyles: CSSProperties;\n\n    init(params: ICellRendererParams): void {\n        this.params = params as InitParams;\n\n        const { containerStyles, buttons } = this.params;\n\n        this.containerStyles = containerStyles;\n        this.buttons =\n            typeof buttons === 'function' ? buttons(params) : buttons;\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    private updateCell(newValue: any) {\n        this.params.value = newValue;\n    }\n\n    handleClick(btn: IBtnParams): any {\n        return btn.click && btn.click(this.params);\n    }\n\n    get buttonsToRender(): any {\n        return this.buttons.map((button) => {\n            return (\n                <at-tooltip\n                    position=\"right\"\n                    disabled={!button.tooltip}\n                >\n                    {button && (\n                        <at-button\n                            type=\"secondaryText\"\n                            label={button.value}\n                            disabled={button.disabled}\n                            data-name={button.dataNameValue}\n                            onAtuiClick={() => this.handleClick(button)}\n                        ></at-button>\n                    )}\n\n                    {button && button.tooltip && (\n                        <span class={`leading-normal`}>{button.tooltip}</span>\n                    )}\n                </at-tooltip>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">{this.buttonsToRender}</Host>\n        );\n    }\n}\n"]}