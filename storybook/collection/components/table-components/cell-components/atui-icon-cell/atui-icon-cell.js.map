{"version":3,"file":"atui-icon-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-icon-cell/atui-icon-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAQnE;;;GAGG;AAMH,MAAM,OAAO,YAAY;IAKrB,IAAI,CAAC,MAAkB;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC9B,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAAkB;QACtB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,UAAU,CAAC,QAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;IACnC,CAAC;IAED,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAe,EAAE,EAAE,CAAC,CAC9C,oBACI,QAAQ,EAAC,OAAO,EAChB,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe;YAEzC,WACI,KAAK,EAAC,mBAAmB,EACzB,IAAI,EAAC,iBAAiB;gBAEtB,YACI,KAAK,EAAE,+BAA+B,IAAI,CAAC,SAAS,EAAE,IAErD,IAAI,CAAC,QAAQ,CACX,CACL;YAEL,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,CAC5B,YACI,IAAI,EAAC,iBAAiB,EACtB,KAAK,EAAE,gBAAgB,IAEtB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAC3C,CACV,CACU,CAClB,CAAC,CAAC;IACP,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,yDAAyD,IAChE,IAAI,CAAC,QAAQ,CACX,CACV,CAAC;IACN,CAAC;;;;;;;CACJ","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp } from 'ag-grid-community';\nimport { IIconCell, IIconCellParams } from '../../../../types/table-cells';\n\ninterface InitParams extends IIconCellParams {\n    generateTooltip?: (params: string) => HTMLElement | string;\n}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying an icon.\n */\n\n@Component({\n    tag: 'atui-icon-cell',\n    shadow: false,\n})\nexport class AtuiIconCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n    @State() icons: IIconCell[];\n\n    init(params: InitParams): void {\n        this.params = params;\n        this.icons = params.value;\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    protected updateCell(newValue: any) {\n        this.params.value = newValue;\n        this.icons = this.params.value;\n    }\n\n    get getIcons(): any {\n        return this.params.value.map((icon: IIconCell) => (\n            <atui-tooltip\n                position=\"right\"\n                is_visible={!!this.params.generateTooltip}\n            >\n                <div\n                    class=\"flex items-center\"\n                    slot=\"tooltip-trigger\"\n                >\n                    <span\n                        class={`material-icons text-icon-md ${icon.iconClass}`}\n                    >\n                        {icon.iconName}\n                    </span>\n                </div>\n\n                {this.params.generateTooltip && (\n                    <span\n                        slot=\"tooltip-content\"\n                        class={`leading-normal`}\n                    >\n                        {this.params.generateTooltip(icon.tooltipText)}\n                    </span>\n                )}\n            </atui-tooltip>\n        ));\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center overflow-hidden leading-[100%]\">\n                {this.getIcons}\n            </Host>\n        );\n    }\n}\n"]}