{"version":3,"file":"atui-text-image-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-text-image-cell/atui-text-image-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAmBnE;;;GAGG;AAMH,MAAM,OAAO,iBAAiB;IAJ9B;QAQa,gBAAW,GAAG,EAAE,CAAC;KAsE7B;IAnEG,IAAI,CAAC,MAAkB;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC;QAC1D,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC;QAExC,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YACvC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1D,CAAC;IACL,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAA2B;QAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,UAAU,CAAC,QAAgB;QAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;IACzB,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,mCAAmC;YAC3C,qEACI,QAAQ,EAAC,OAAO,EAChB,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe;gBAEzC,4DACI,KAAK,EAAC,mBAAmB,EACzB,IAAI,EAAC,iBAAiB;oBAErB,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,IAAI,CAC/C,4DACI,GAAG,EAAE,IAAI,CAAC,WAAW,EACrB,KAAK,EAAC,MAAM,EACZ,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,IAAI,EAAE,GAC5C,CACL;oBAED,6DAAM,KAAK,EAAC,UAAU,IAAE,IAAI,CAAC,IAAI,CAAQ;oBAExC,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI,CAAC,WAAW,IAAI,CAChD,4DACI,GAAG,EAAE,IAAI,CAAC,WAAW,EACrB,KAAK,EAAC,MAAM,EACZ,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,IAAI,EAAE,GAC5C,CACL,CACC;gBAEL,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,CAC5B,6DACI,IAAI,EAAC,iBAAiB,EACtB,KAAK,EAAE,gBAAgB,IAEtB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CACtC,CACV,CACU,CACZ,CACV,CAAC;IACN,CAAC;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport {\n    GetImageSourceFunction,\n    ITooltipCell,\n} from '../../../../types/table-cells';\n\nexport interface ITextWithImageCell extends ITooltipCell {\n    imageSource?: string;\n    text?: string;\n    imageHeight?: number;\n    isImageAtFront?: boolean;\n    getImageSource?: GetImageSourceFunction;\n    getRouterLink?: (cellInput: any, cellValue: string) => any[];\n    isLinkDisabled?: (cellInput: any) => boolean;\n}\n\ninterface InitParams extends ITextWithImageCell, ICellRendererParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with an image.\n */\n\n@Component({\n    tag: 'atui-text-image-cell',\n    shadow: false,\n})\nexport class AtuiTextImageCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n    @State() imageSource: string;\n    @State() imageHeight = 20;\n    @State() text: string;\n\n    init(params: InitParams): void {\n        this.params = params;\n        this.imageSource = params.imageSource;\n        this.imageHeight = params.imageHeight || this.imageHeight;\n        this.text = params.value || params.text;\n\n        if (params.getImageSource && params.data) {\n            this.imageSource = params.getImageSource(params.data);\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    private updateCell(newValue: string) {\n        this.params.value = newValue;\n        this.text = newValue;\n    }\n\n    render() {\n        return (\n            <Host class=\"flex items-center overflow-hidden\">\n                <atui-tooltip\n                    position=\"right\"\n                    is_visible={!!this.params.generateTooltip}\n                >\n                    <div\n                        class=\"flex items-center\"\n                        slot=\"tooltip-trigger\"\n                    >\n                        {this.params.isImageAtFront && this.imageSource && (\n                            <img\n                                src={this.imageSource}\n                                class=\"mr-2\"\n                                style={{ height: `${this.imageHeight}px` }}\n                            />\n                        )}\n\n                        <span class=\"truncate\">{this.text}</span>\n\n                        {!this.params.isImageAtFront && this.imageSource && (\n                            <img\n                                src={this.imageSource}\n                                class=\"ml-2\"\n                                style={{ height: `${this.imageHeight}px` }}\n                            />\n                        )}\n                    </div>\n\n                    {this.params.generateTooltip && (\n                        <span\n                            slot=\"tooltip-content\"\n                            class={`leading-normal`}\n                        >\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n            </Host>\n        );\n    }\n}\n"]}