{"version":3,"file":"atui-text-image-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-text-image-cell/atui-text-image-cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ITooltipCell } from '../../../../types';\n\nexport interface TextImageCellData {\n    text: string;\n    image: string;\n    tooltip?: string;\n}\n\nexport interface ITextImageCellParams\n    extends ICellRendererParams,\n        ITooltipCell {\n    text?: (data: any) => string;\n    imageSource: (data: any) => string;\n    imageHeight?: number;\n    imageWidth?: number;\n    imageClass?: string;\n    imagePosition?: 'before' | 'after';\n}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with an image.\n */\n@Component({\n    tag: 'atui-text-image-cell',\n    shadow: false,\n})\nexport class AtuiTextImageCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n\n    private params: ITextImageCellParams;\n\n    @State() text: string = '';\n\n    private imageHeight: number = 24;\n    private imageWidth?: number;\n    private imageClass?: string;\n    private imagePosition: 'before' | 'after' = 'before';\n\n    init(params: ICellRendererParams): void {\n        this.params = params as ITextImageCellParams;\n\n        this.imageHeight = this.params.imageHeight ?? this.imageHeight;\n        this.imageWidth = this.params.imageWidth;\n        this.imageClass = this.params.imageClass;\n        this.imagePosition = this.params.imagePosition ?? 'before';\n\n        this.updateTextAndImage();\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.params = params as ITextImageCellParams;\n        this.updateTextAndImage();\n        return true;\n    }\n\n    private updateTextAndImage() {\n        this.text = this.params.text\n            ? this.params.text(this.params.data)\n            : (this.params.value ?? '');\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    private get imageSource() {\n        return this.params.imageSource(this.params.data);\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                <atui-tooltip\n                    position=\"right\"\n                    disabled={!this.params?.generateTooltip}\n                >\n                    <div\n                        class=\"flex items-center gap-8\"\n                        slot=\"tooltip-trigger\"\n                    >\n                        {this.imagePosition === 'before' &&\n                            this.imageSource && (\n                                <img\n                                    src={this.imageSource}\n                                    style={{\n                                        height: `${this.imageHeight}px`,\n                                        width: this.imageWidth\n                                            ? `${this.imageWidth}px`\n                                            : undefined,\n                                    }}\n                                    class={this.imageClass && this.imageClass}\n                                    alt=\"\"\n                                />\n                            )}\n\n                        {this.text && <span class=\"truncate\">{this.text}</span>}\n\n                        {this.imagePosition === 'after' && this.imageSource && (\n                            <img\n                                src={this.imageSource}\n                                style={{\n                                    height: `${this.imageHeight}px`,\n                                    width: this.imageWidth\n                                        ? `${this.imageWidth}px`\n                                        : undefined,\n                                }}\n                                class={this.imageClass && this.imageClass}\n                                alt=\"\"\n                            />\n                        )}\n                    </div>\n\n                    {this.params?.generateTooltip && (\n                        <span>{this.params.generateTooltip(this.params)}</span>\n                    )}\n                </atui-tooltip>\n            </Host>\n        );\n    }\n}\n"]}