{"version":3,"file":"at-edit-text-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/at-edit-text-cell/at-edit-text-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAYnE;;;GAGG;AAMH,MAAM,OAAO,cAAc;IACZ,EAAE,CAAc;IAClB,MAAM,CAAa;IAE5B,IAAI,CAAC,MAAkB;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAAkB;QACtB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,UAAU,CAAC,QAAa;QAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;QAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,yCAAyC;YACjD,iEACI,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,EACtC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EACxB,YAAY,EAAE,CAAC,KAAkB,EAAE,EAAE;oBACjC,0BAA0B;oBAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAClC,CAAC,EACD,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,GACjD,CACC,CACV,CAAC;IACN,CAAC;;;;;;CACJ","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\n\nexport interface IEditTextCellParams {\n    writePermission?: boolean;\n    validator?: (value: string) => boolean;\n    maxLength?: string;\n    onValueChange: (params: ICellRendererParams) => void;\n}\n\ninterface InitParams extends IEditTextCellParams, ICellRendererParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying and editing text.\n */\n\n@Component({\n    tag: 'at-edit-text-cell',\n    shadow: false,\n})\nexport class AtEditTextCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() params: InitParams;\n\n    init(params: InitParams): void {\n        this.params = params;\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    protected updateCell(newValue: any) {\n        this.params.value = newValue;\n        if (this.params.onValueChange) {\n            this.params.onValueChange(this.params);\n        }\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center leading-[100%]\">\n                <at-input\n                    readonly={!this.params.writePermission}\n                    value={this.params.value}\n                    onAtuiChange={(event: CustomEvent) => {\n                        // Changed to onAtuiChange\n                        this.updateCell(event.detail);\n                    }}\n                    onMouseDown={(event) => event.stopPropagation()}\n                />\n            </Host>\n        );\n    }\n}\n"]}