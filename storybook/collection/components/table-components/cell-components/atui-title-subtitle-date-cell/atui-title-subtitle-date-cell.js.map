{"version":3,"file":"atui-title-subtitle-date-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-title-subtitle-date-cell/atui-title-subtitle-date-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAEnE,OAAO,EAAE,wBAAwB,EAAE,MAAM,+CAA+C,CAAC;AACzF,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAE/C;;;GAGG;AAMH,MAAM,OAAO,yBAAyB;IAKlC,IAAI,CAAC,MAA2B;QAC5B,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QAEzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,CAAC;IACL,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAA2B;QAC/B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,UAAU,CAAC,QAAc;QAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAED,IAAI,gBAAgB;QAChB,OAAO,wBAAwB,CAAC,gBAAgB,CAC5C,IAAI,CAAC,KAAK,EACV,UAAU,CAAC,qBAAqB,CACnC,CAAC;IACN,CAAC;IAED,IAAI,YAAY;QACZ,OAAO,wBAAwB,CAAC,gBAAgB,CAC5C,IAAI,CAAC,KAAK,EACV,UAAU,CAAC,cAAc,CAC5B,CAAC;IACN,CAAC;IAED,MAAM;QACF,OAAO,CACH,EAAC,IAAI;YACD,4DAAK,KAAK,EAAC,qCAAqC;gBAC5C,4DAAK,KAAK,EAAC,iCAAiC,IACvC,IAAI,CAAC,gBAAgB,CACpB;gBACN,4DAAK,KAAK,EAAC,sDAAsD,IAC5D,IAAI,CAAC,YAAY,CAChB,CACJ,CACH,CACV,CAAC;IACN,CAAC;;;;;;;CACJ","sourcesContent":["import { Component, Element, h, Host, State } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { TimeDatePresentationUtil } from '../../../../utils/time-date-presentation.util';\nimport { DateFormat } from '../../../../types';\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a title and subtitle with a date.\n */\n\n@Component({\n    tag: 'atui-title-subtitle-date-cell',\n    shadow: false,\n})\nexport class AtuiTitleSubtitleDateCell implements ICellRendererComp {\n    @Element() el;\n    @State() value: Date;\n    @State() params: ICellRendererParams;\n\n    init(params: ICellRendererParams): void {\n        const { value } = params;\n\n        this.params = params;\n        if (typeof value === 'string') {\n            this.value = new Date(value);\n        } else {\n            this.value = value;\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.updateCell(params.value);\n        return true;\n    }\n\n    private updateCell(newValue: Date) {\n        this.params.value = newValue;\n        this.value = newValue;\n    }\n\n    get hourMinuteSecond(): string {\n        return TimeDatePresentationUtil.getFormattedDate(\n            this.value,\n            DateFormat.HOURS_MINUTES_SECONDS,\n        );\n    }\n\n    get yearMonthDay(): string {\n        return TimeDatePresentationUtil.getFormattedDate(\n            this.value,\n            DateFormat.YEAR_MONTH_DAY,\n        );\n    }\n\n    render() {\n        return (\n            <Host>\n                <div class=\"flex h-full flex-col justify-center\">\n                    <div class=\"truncate text-sm leading-[100%]\">\n                        {this.hourMinuteSecond}\n                    </div>\n                    <div class=\"truncate text-xs font-normal leading-[100%] text-med\">\n                        {this.yearMonthDay}\n                    </div>\n                </div>\n            </Host>\n        );\n    }\n}\n"]}