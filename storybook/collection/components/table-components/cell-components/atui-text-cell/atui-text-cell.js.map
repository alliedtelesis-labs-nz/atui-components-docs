{"version":3,"file":"atui-text-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-text-cell/atui-text-cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { InitTextCellParams, ITooltipCell } from '../../../../types';\nimport { CSSProperties } from '../../../../types/styles';\n\nexport interface TextCellData {\n    text: string;\n    tooltip?: string;\n}\n\nexport interface ITextCellParams extends ICellRendererParams, ITooltipCell {\n    text?: (data: TextCellData) => string;\n    color?: string;\n    textStyles?: any | ((params: ICellRendererParams) => any);\n    textClass?: string;\n    textTransform?: (data: any, value: any) => string;\n}\n\n/**\n * @category Table Cell\n * @description A basic text cell component for displaying simple text content in data tables. Provides consistent typography and overflow handling.\n */\n@Component({\n    tag: 'atui-text-cell',\n    shadow: false,\n})\nexport class AtuiTextCellComponent implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() containerStyles: CSSProperties;\n    @State() textStyles: CSSProperties;\n    @State() textClass: string;\n    @State() textValue: string;\n    @State() params: InitTextCellParams;\n\n    init(params: InitTextCellParams): void {\n        const {\n            size,\n            color,\n            textStyles,\n            containerStyles,\n            textClass,\n            textTransform,\n        } = params;\n\n        this.textClass = textClass;\n        this.containerStyles = containerStyles;\n        this.params = params;\n\n        if (typeof textStyles == 'function') {\n            this.textStyles = textStyles(params);\n        } else {\n            this.textStyles = {\n                fontSize: size || null,\n                color: color || null,\n                ...textStyles,\n            };\n        }\n\n        this.textValue = this.getTextValue(params);\n\n        if (textTransform) {\n            this.textValue = textTransform(params.data, params.value);\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitTextCellParams): boolean {\n        this.textValue = this.getTextValue(params);\n        return true;\n    }\n\n    // If you are using objects for the value, they will appear as [object Object].\n    // This indicates that you may need to use a valueGetter (see ag-grid API),\n    // with a different cell type - this one is designed for displaying a single string value.\n    private getTextValue(params: ICellRendererParams): string {\n        const { value } = params;\n\n        if (value === '') {\n            return '-';\n        }\n        if (value.constructor === Array) {\n            return this.transferArrayValueToString(value);\n        }\n\n        return String(value);\n    }\n\n    private transferArrayValueToString(value: Array<string | number>): string {\n        const compactValue = value.filter((val) => !!val);\n        if (!compactValue.length) {\n            return '-';\n        }\n        const textVal: string | number = compactValue.reduce((acc, current) => {\n            acc = acc ? `${acc},${current}` : `${current}`;\n            return acc;\n        });\n        return String(textVal);\n    }\n\n    render() {\n        return (\n            <Host class=\"align-center flex h-full\">\n                <atui-tooltip\n                    position=\"right\"\n                    disabled={!this.params.generateTooltip}\n                >\n                    <span\n                        slot=\"tooltip-trigger\"\n                        data-index={`column-${this.params.rowIndex}-data`}\n                        style={this.textStyles}\n                        class={`${this.textClass ?? ''} truncate`}\n                        onClick={() => {\n                            if (this.params.click)\n                                this.params.click(this.params);\n                        }}\n                    >\n                        {this.textValue}\n                    </span>\n                    {this.params.generateTooltip && (\n                        <span\n                            slot=\"tooltip-content\"\n                            class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                        >\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n            </Host>\n        );\n    }\n}\n"]}