{"version":3,"file":"atui-text-status-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-text-status-cell/atui-text-status-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AA6BnE;;;GAGG;AAMH,MAAM,OAAO,2BAA2B;IAJxC;QAQa,SAAI,GAAc,SAAS,CAAC;QAC5B,mBAAc,GAAG,KAAK,CAAC;KAuEnC;IArEG,IAAI,CAAC,MAAkB;QACnB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QAEzB,IAAI,CAAC,KAAK;YAAE,OAAO;QAEnB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,CAAa;QACjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,WAAW,CAAC,MAAkB,EAAE,KAAa;QACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,KAAkB,CAAC,CAAC;QAEvE,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,cAAc;YAC7B,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC;YAC9B,CAAC,CAAC,KAAK,CAAC;QACZ,IAAI,MAAM,CAAC,yBAAyB;YAChC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;QAElE,IAAI,CAAC,IAAI,GAAG,SAAsB,CAAC;IACvC,CAAC;IAEO,mBAAmB,CAAC,MAAkB,EAAE,KAAgB;QAC5D,MAAM,SAAS,GACX,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC9D,OAAO,SAAS,IAAI,SAAS,CAAC;IAClC,CAAC;IAED,MAAM;;QACF,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,0BAA0B;YACjC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,MAAM,IAAI,CACnC,6DAAM,KAAK,EAAC,kBAAkB,IAAE,IAAI,CAAC,IAAI,CAAQ,CACpD;YACA,CAAC,IAAI,CAAC,cAAc;gBACjB,IAAI,CAAC,MAAM;gBACX,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAC3B,oBACI,QAAQ,EAAC,OAAO,EAChB,UAAU,EAAE,IAAI;oBAEhB,kBACI,IAAI,EAAC,iBAAiB,EACtB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,IAAI,GAClB;oBACF,YACI,IAAI,EAAC,iBAAiB,EACtB,KAAK,EAAE,GAAG,MAAA,IAAI,CAAC,MAAM,CAAC,YAAY,mCAAI,EAAE,iBAAiB,IAExD,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CACtC,CACI,CAClB,CAAC,CAAC,CAAC,CACA,kBACI,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,IAAI,GAClB,CACL,CAAC,CACH,CACV,CAAC;IACN,CAAC;;;;;;;;;CACJ","sourcesContent":["import { Component, h, State, Element, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport { ITooltipCell } from '../../../../types';\nimport { BadgeType } from '../../../atui-badge/atui-badge';\n\nexport interface TextStatusCellData {\n    value: 'active' | 'warning' | 'error' | 'default' | string;\n    tooltip?: string;\n}\n\nexport interface ITextStatusCellParams extends ITooltipCell {\n    mapValueToText?: (value: any) => string;\n    mapValueToStatus?: (value: any) => string | 'default';\n    showSimpleText?: boolean;\n    checkShouldShowSimpleText?: (value: any) => boolean; // can either show status span or plain text\n\n    // This is a function where you want to transform a text into something\n    // I have a situation where the value is a number, and i need to compare\n    // that number first to something, apply some things and now transform it\n    // into a certain string. e.g value: 50, textTransformed to '50ms'\n    textTransform?: (params: ICellRendererParams, value: string) => string;\n    useIconHeaderTooltip?: boolean;\n}\n\nexport interface TextStatusValueParam {\n    status: string;\n}\n\ninterface InitParams extends ITextStatusCellParams, ICellRendererParams {}\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with a status.\n */\n\n@Component({\n    tag: 'atui-text-status-cell',\n    shadow: false,\n})\nexport class AtuiTextStatusCellComponent implements ICellRendererComp {\n    @Element() el;\n    @State() params: InitParams;\n    @State() text: string;\n    @State() type: BadgeType = 'default';\n    @State() showSimpleText = false;\n\n    init(params: InitParams) {\n        const { value } = params;\n\n        if (!value) return;\n\n        this.setCellData(params, value);\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(_: InitParams): boolean {\n        return true;\n    }\n\n    private setCellData(params: InitParams, value: string) {\n        this.params = params;\n        const badgeType = this.mapValueToBadgeType(params, value as BadgeType);\n\n        this.text = params.mapValueToText\n            ? params.mapValueToText(value)\n            : value;\n        if (params.checkShouldShowSimpleText)\n            this.showSimpleText = params.checkShouldShowSimpleText(value);\n\n        this.type = badgeType as BadgeType;\n    }\n\n    private mapValueToBadgeType(params: InitParams, value: BadgeType) {\n        const badgeType =\n            params.mapValueToStatus && params.mapValueToStatus(value);\n        return badgeType || 'default';\n    }\n\n    render() {\n        return (\n            <Host class=\"flex h-full items-center\">\n                {this.showSimpleText && this.params && (\n                    <span class=\"truncate text-sm\">{this.text}</span>\n                )}\n                {!this.showSimpleText &&\n                    this.params &&\n                    (this.params.generateTooltip ? (\n                        <atui-tooltip\n                            position=\"right\"\n                            is_visible={true}\n                        >\n                            <atui-badge\n                                slot=\"tooltip-trigger\"\n                                type={this.type}\n                                label={this.text}\n                            />\n                            <span\n                                slot=\"tooltip-content\"\n                                class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                            >\n                                {this.params.generateTooltip(this.params)}\n                            </span>\n                        </atui-tooltip>\n                    ) : (\n                        <atui-badge\n                            type={this.type}\n                            label={this.text}\n                        />\n                    ))}\n            </Host>\n        );\n    }\n}\n"]}