{"version":3,"file":"atui-text-badge-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/atui-text-badge-cell/atui-text-badge-cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, State, Host } from '@stencil/core';\nimport { ICellRendererComp, ICellRendererParams } from 'ag-grid-community';\nimport {\n    InitTextCellParams,\n    ITooltipCell,\n} from '../../../../types/table-cells';\nimport { BadgeType } from '../../../atui-badge/atui-badge';\n\nexport interface ITextWithBadgeCellParams extends ITooltipCell {\n    badgeText: (params: ICellRendererParams) => string;\n    badgeType?: BadgeType;\n    badgeTooltipClass?: string;\n    generateBadgeTooltip?: (\n        params: ICellRendererParams,\n    ) => HTMLElement | string;\n}\n\ninterface InitParams extends ITextWithBadgeCellParams, InitTextCellParams {}\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with a badge.\n */\n\n@Component({\n    tag: 'atui-text-badge-cell',\n    shadow: false,\n})\nexport class AtuiTextBadgeCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() textValue: string;\n    @State() badgeTextValue: string;\n    @State() params: InitParams;\n\n    init(params: InitParams): void {\n        const { textTransform, badgeText } = params;\n\n        this.params = params;\n\n        this.textValue = params.value;\n        this.badgeTextValue = badgeText(params);\n\n        if (params.data) {\n            if (textTransform) {\n                this.textValue = textTransform(params.data, params.value);\n            }\n        }\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: ICellRendererParams): boolean {\n        this.updateCell(String(params.value));\n        return true;\n    }\n\n    private updateCell(newValue: string) {\n        this.params.value = newValue;\n        this.textValue = this.params.value;\n    }\n\n    render() {\n        return (\n            <Host class=\"align-center flex h-full\">\n                <atui-tooltip\n                    position=\"right\"\n                    is_visible={!!this.params.generateTooltip}\n                >\n                    <span\n                        slot=\"tooltip-trigger\"\n                        data-index={`column-${this.params.rowIndex}-data`}\n                        class=\"truncate\"\n                        onClick={() => {\n                            if (this.params.click)\n                                this.params.click(this.params);\n                        }}\n                    >\n                        {this.textValue}\n                    </span>\n\n                    {this.params.generateTooltip && (\n                        <span\n                            slot=\"tooltip-content\"\n                            class={`${this.params.tooltipClass ?? ''} leading-normal`}\n                        >\n                            {this.params.generateTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n\n                <atui-tooltip\n                    position=\"right\"\n                    is_visible={!!this.params.generateBadgeTooltip}\n                >\n                    <span\n                        slot=\"tooltip-trigger\"\n                        data-index={`column-${this.params.rowIndex}-data`}\n                        class=\"truncate\"\n                        onClick={() => {\n                            if (this.params.click)\n                                this.params.click(this.params);\n                        }}\n                    >\n                        <atui-badge\n                            type={this.params?.badgeType}\n                            class=\"ml-4\"\n                            label={this.badgeTextValue}\n                        ></atui-badge>\n                    </span>\n\n                    {this.params.generateBadgeTooltip && (\n                        <span\n                            slot=\"tooltip-content\"\n                            class={`${this.params.badgeTooltipClass ?? ''} leading-normal`}\n                        >\n                            {this.params.generateBadgeTooltip(this.params)}\n                        </span>\n                    )}\n                </atui-tooltip>\n            </Host>\n        );\n    }\n}\n"]}