{"version":3,"file":"at-text-icon-cell.stories.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/at-text-icon-cell/at-text-icon-cell.stories.ts"],"names":[],"mappings":"AAAA,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;sBACL,IAAI,CAAC,SAAS;;;;;;sDAMkB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;oDAC1C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC;;;CAG3H,CAAC;AAEF,eAAe;IACX,KAAK,EAAE,4DAA4D;CACtE,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzC,OAAO,CAAC,IAAI,GAAG;IACX,QAAQ,EAAE;QACN;YACI,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,SAAS;YAChB,KAAK,EAAE,SAAS;YAChB,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,iBAAiB;YAC7B,YAAY,EAAE,sBAAsB;YACpC,kBAAkB,EAAE;gBAChB,OAAO,EAAE,mCAAmC;gBAC5C,QAAQ,EACJ,gDAAgD;oBAChD,iBAAiB;oBACjB,mDAAmD;oBACnD,2BAA2B;oBAC3B,QAAQ;gBACZ,aAAa,EAAE,OAAO;aACzB;SACJ;QACD;YACI,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,SAAS;YAChB,KAAK,EAAE,SAAS;YAChB,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,YAAY;YACxB,YAAY,EAAE,sBAAsB;YACpC,kBAAkB,EAAE;gBAChB,QAAQ,EACJ,0CAA0C;oBAC1C,iBAAiB;oBACjB,mDAAmD;oBACnD,4BAA4B;oBAC5B,+DAA+D;oBAC/D,QAAQ;aACf;SACJ;KACJ;IACD,UAAU,EAAE;QACR,KAAK,EAAE;YACH;gBACI,GAAG,EAAE,GAAG;gBACR,OAAO,EAAE;oBACL,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;iBAC5B;gBACD,OAAO,EAAE,CAAC,MAAM,EAAE,UAAU,CAAC;aAChC;SACJ;QACD,KAAK,EAAE,CAAC;KACX;IACD,SAAS,EAAE,EAAE;CAChB,CAAC","sourcesContent":["const Template = (args) => `\n<at-table page_size=${args.page_size}></at-table>\n<script type=\"module\">\n    import { defineCustomElement as defineTable } from './components/at-table.js';\n    import { AtTextIconCell, defineCustomElement as defineTextIconCell } from './components/at-text-icon-cell.js';\n    defineTable();\n    defineTextIconCell();\n    document.querySelector('at-table').table_data = ${JSON.stringify(args.table_data, null, 4)}\n    document.querySelector('at-table').col_defs = ${JSON.stringify(args.col_defs, null, 4).replace(/(\"?\\*\\*\\*\"?)|(\\\\)/g, '')}\n    document.querySelector('at-table').createGrid()\n</script>\n`;\n\nexport default {\n    title: 'Components/Table Components/Cell Components/Text Icon Cell',\n};\n\nexport const Default = Template.bind({});\nDefault.args = {\n    col_defs: [\n        {\n            flex: 1,\n            field: 'col_one',\n            colId: 'col_one',\n            sortable: false,\n            headerName: 'Text with Icons',\n            cellRenderer: '***AtTextIconCell***',\n            cellRendererParams: {\n                getText: '***(data) => data.col_one.text***',\n                getIcons:\n                    '***(data) => data.col_one.icons.map(icon => ({' +\n                    'iconName: icon,' +\n                    'iconClass: \"cursor-pointer text-info-foreground\",' +\n                    'tooltip: `${icon} action`' +\n                    '}))***',\n                icon_position: 'after',\n            },\n        },\n        {\n            flex: 1,\n            field: 'col_two',\n            colId: 'col_two',\n            sortable: false,\n            headerName: 'Icons Only',\n            cellRenderer: '***AtTextIconCell***',\n            cellRendererParams: {\n                getIcons:\n                    '***(data) => data.col_two.map(icon => ({' +\n                    'iconName: icon,' +\n                    'iconClass: \"cursor-pointer text-info-foreground\",' +\n                    'tooltip: `${icon} action`,' +\n                    'iconClick: (params) => console.log(`${icon} clicked`, params)' +\n                    '}))***',\n            },\n        },\n    ],\n    table_data: {\n        items: [\n            {\n                _id: '1',\n                col_one: {\n                    text: 'Sample Item',\n                    icons: ['edit', 'delete'],\n                },\n                col_two: ['info', 'settings'],\n            },\n        ],\n        total: 1,\n    },\n    page_size: 10,\n};\n"]}