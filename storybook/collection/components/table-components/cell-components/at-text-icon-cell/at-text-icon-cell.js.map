{"version":3,"file":"at-text-icon-cell.js","sourceRoot":"","sources":["../../../../../src/components/table-components/cell-components/at-text-icon-cell/at-text-icon-cell.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAuB7E;;;GAGG;AAMH,MAAM,OAAO,cAAc;IAJ3B;QAMa,SAAI,GAAW,EAAE,CAAC;KA6D9B;IAzDW,MAAM,CAAC,MAAkB;;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YACd,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,IAAI,GAAG,CAAA,MAAA,MAAM,CAAC,KAAK,0CAAE,QAAQ,EAAE,KAAI,EAAE,CAAC;QAC/C,CAAC;IACL,CAAC;IAED,IAAI,CAAC,MAAkB;QACnB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,MAAkB;QACtB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,WAAW;QACf,OAAO,CACH,EAAC,QAAQ,QACJ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAC/B,kBACI,QAAQ,EAAC,OAAO,EAChB,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO;YAEvB,WAAK,IAAI,EAAC,iBAAiB;gBACvB,SACI,KAAK,EAAE,mDAAmD,IAAI,CAAC,SAAS,IAAI,EAAE,EAAE,IAE/E,IAAI,CAAC,QAAQ,CACd,CACF;YACL,IAAI,CAAC,OAAO,IAAI,CACb,YAAM,KAAK,EAAC,gBAAgB,IAAE,IAAI,CAAC,OAAO,CAAQ,CACrD,CACQ,CAChB,CAAC,CACK,CACd,CAAC;IACN,CAAC;IAED,MAAM;;QACF,MAAM,YAAY,GAAG,CAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,YAAY,KAAI,QAAQ,CAAC;QAE3D,OAAO,CACH,EAAC,IAAI,qDAAC,KAAK,EAAC,+DAA+D;YACtE,YAAY,KAAK,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE;YAChD,6DAAM,KAAK,EAAC,UAAU,IAAE,IAAI,CAAC,IAAI,CAAQ;YACxC,YAAY,KAAK,OAAO,IAAI,IAAI,CAAC,WAAW,EAAE,CAC5C,CACV,CAAC;IACN,CAAC;;;;;;CACJ","sourcesContent":["import { Component, h, Element, State, Host, Fragment } from '@stencil/core';\nimport { ICellRendererComp } from 'ag-grid-community';\nimport type { IconTextCellParams, ITooltipCell } from '../../../../types';\n\nexport interface IconConfig {\n    iconName: string;\n    iconClass?: string;\n    tooltip?: string;\n}\n\nexport interface TextIconCellData {\n    text?: string;\n    icons: IconConfig[];\n}\n\nexport interface ITextIconCellParams extends IconTextCellParams, ITooltipCell {\n    text?: (data: any) => string;\n    iconPosition?: 'before' | 'after';\n    icons: () => IconConfig[];\n}\n\ntype InitParams = ITextIconCellParams;\n\n/**\n * @category Table Cell\n * @description A cell component for displaying a text with icons, Text is optional and multiple icons are supported.\n */\n\n@Component({\n    tag: 'at-text-icon-cell',\n    shadow: false,\n})\nexport class AtTextIconCell implements ICellRendererComp {\n    @Element() el: HTMLElement;\n    @State() text: string = '';\n\n    private params: InitParams;\n\n    private update(params: InitParams) {\n        this.params = params;\n        if (params.text) {\n            this.text = params.text(params.data);\n        } else {\n            this.text = params.value?.toString() || '';\n        }\n    }\n\n    init(params: InitParams): void {\n        this.update(params);\n    }\n\n    getGui(): HTMLElement {\n        return this.el;\n    }\n\n    refresh(params: InitParams): boolean {\n        this.update(params);\n        return true;\n    }\n\n    private renderIcons() {\n        return (\n            <Fragment>\n                {this.params.icons().map((icon) => (\n                    <at-tooltip\n                        position=\"right\"\n                        disabled={!icon.tooltip}\n                    >\n                        <div slot=\"tooltip-trigger\">\n                            <i\n                                class={`material-icons text-icon-md mt-4 cursor-pointer ${icon.iconClass || ''}`}\n                            >\n                                {icon.iconName}\n                            </i>\n                        </div>\n                        {icon.tooltip && (\n                            <span class=\"leading-normal\">{icon.tooltip}</span>\n                        )}\n                    </at-tooltip>\n                ))}\n            </Fragment>\n        );\n    }\n\n    render() {\n        const iconPosition = this.params?.iconPosition || 'before';\n\n        return (\n            <Host class=\"flex h-full items-center gap-4 overflow-hidden leading-normal\">\n                {iconPosition === 'before' && this.renderIcons()}\n                <span class=\"truncate\">{this.text}</span>\n                {iconPosition === 'after' && this.renderIcons()}\n            </Host>\n        );\n    }\n}\n"]}