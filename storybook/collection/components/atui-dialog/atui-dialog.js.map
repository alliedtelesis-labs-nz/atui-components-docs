{"version":3,"file":"atui-dialog.js","sourceRoot":"","sources":["../../../src/components/atui-dialog/atui-dialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Element, Method, State } from '@stencil/core';\n\n/**\n * @category Overlays\n * @description A modal dialog component for displaying content that requires user interaction or attention. Features backdrop click handling, escape key support, and programmatic open/close control.\n *\n * @slot - Content placed inside of the dialog box\n */\n@Component({\n    tag: 'atui-dialog',\n    styleUrl: 'atui-dialog.scss',\n    shadow: false,\n})\nexport class AtuiDialogComponent {\n    @Element() el!: HTMLAtuiDialogElement;\n\n    /**\n     * ID of the dialog element (used to open and close the modal)\n     */\n    @Prop()\n    dialog_id: string;\n\n    /**\n     * Role of the dialog element. Can be either 'dialog' or 'alertdialog'\n     */\n    @Prop()\n    role: 'dialog' | 'alertdialog' = 'dialog';\n\n    /**\n     * Whether to show a backdrop behind the dialog\n     */\n    @Prop()\n    backdrop: boolean = false;\n\n    /**\n     * Data-id of an external element to use as the trigger. When provided, clicking the trigger will toggle the dialog.\n     */\n    @Prop() trigger_id?: string;\n\n    /**\n     * Internal state to track if dialog is open\n     */\n    @State()\n    isOpen: boolean = false;\n\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the dialog modal between open and closed states\n     * @returns Promise that resolves when the dialog state is toggled\n     */\n    @Method()\n    async toggleDialog(): Promise<void> {\n        if (this.isOpen) {\n            await this.closeDialog();\n        } else {\n            await this.openDialog();\n        }\n    }\n\n    /**\n     * Opens the dialog modal\n     * @returns Promise that resolves when the dialog is opened\n     */\n    @Method()\n    async openDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && !this.isOpen) {\n            dialog.showModal();\n            this.isOpen = true;\n            if (this.backdrop) {\n                dialog.classList.add('backdrop');\n            }\n        }\n    }\n\n    /**\n     * Closes the dialog modal\n     * @returns Promise that resolves when the dialog is closed\n     */\n    @Method()\n    async closeDialog(): Promise<void> {\n        const dialog = this.el.querySelector('dialog') as HTMLDialogElement;\n        if (dialog && this.isOpen) {\n            dialog.close();\n            this.isOpen = false;\n            dialog.removeAttribute('open');\n            dialog.classList.remove('backdrop');\n        }\n    }\n\n    private handleDialogClose = (event: Event) => {\n        event.preventDefault();\n        if (this.isOpen) {\n            this.closeDialog();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isOpen) {\n            event.preventDefault();\n            this.closeDialog();\n        }\n    };\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(`[data-id=\"${this.trigger_id}\"]`),\n            ) as HTMLElement[];\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `atui-dialog: No elements found with data-id=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleDialog();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleDialog();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <dialog\n                class={`c-atui-dialog ${this.backdrop ? 'backdrop' : ''}`}\n                id={this.dialog_id}\n                data-name=\"dialog\"\n                role={this.role}\n                aria-modal=\"true\"\n                onClose={this.handleDialogClose}\n                onKeyDown={this.handleKeyDown}\n            >\n                <div class=\"backdrop-content\">\n                    <slot />\n                </div>\n            </dialog>\n        );\n    }\n}\n"]}