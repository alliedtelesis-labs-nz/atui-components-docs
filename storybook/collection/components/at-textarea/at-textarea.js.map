{"version":3,"file":"at-textarea.js","sourceRoot":"","sources":["../../../src/components/at-textarea/at-textarea.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    State,\n    Element,\n    Event,\n    EventEmitter,\n} from '@stencil/core';\nimport { classlist } from '../../utils/classlist';\n\nconst inputVariantsConfig = {\n    variants: {\n        disabled: {\n            false: 'bg-white',\n            true: 'bg-surface-1 text-disabled border-none focus:ring-0',\n        },\n        readonly: {\n            false: 'bg-white',\n            true: 'text-dark border-none focus:ring-0',\n        },\n        invalid: {\n            false: 'border-med focus:border-active-dark focus:ring-active-foreground/30 focus:ring-2',\n            true: 'border-error-base focus:ring-destructive-foreground/30 focus:ring-2',\n        },\n    },\n    compoundVariants: [\n        {\n            readonly: false,\n            disabled: false,\n            invalid: false,\n            class: 'border-med text-dark focus:border-active-foreground focus:ring-active-foreground/30 bg-white focus:ring-2',\n        },\n    ],\n    defaultVariants: {\n        disabled: false,\n        readonly: false,\n        invalid: false,\n    },\n};\n\nconst getInputClasses = classlist(\n    'align-center transition[background-color,color,box-shadow] text-body relative flex h-full w-full resize-none rounded-md border border-solid px-8 py-[6px] duration-300 ease-in-out outline-none',\n    inputVariantsConfig,\n);\n\n/**\n * @category Form Controls\n * @description A multi-line text input component for longer text content with auto-resize and validation features. Includes label, hint text, character counting, and accessibility support.\n */\n@Component({\n    tag: 'at-textarea',\n    shadow: false,\n})\nexport class AtTextareaComponent {\n    /**\n     * Label to be displayed for the textarea\n     */\n    @Prop()\n    label: string;\n\n    /**\n     * Short description or validation hint if required\n     */\n    @Prop()\n    hint_text: string;\n\n    /**\n     * Optional info icon with detailed tooltip description\n     */\n    @Prop()\n    info_text: string;\n\n    /**\n     * Displayed when invalid is set\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Placeholder in the textarea when no text is placed\n     */\n    @Prop()\n    placeholder: string;\n\n    /**\n     * Adds a required * to the label\n     */\n    @Prop()\n    required: boolean;\n\n    /**\n     * Displays then error text when set\n     */\n    @Prop()\n    invalid: boolean;\n\n    /**\n     * Makes the textarea read only\n     */\n    @Prop()\n    readonly: boolean;\n\n    /**\n     * Disables interaction with the textarea\n     */\n    @Prop()\n    disabled: boolean;\n\n    /**\n     * Minimum number of rows to display\n     */\n    @Prop()\n    min_rows: number = 1;\n\n    /**\n     * Maximum number of rows to expand to\n     */\n    @Prop()\n    max_rows: number = 10;\n\n    /**\n     * Sets the 'autocomplete' attribute on the textarea\n     */\n    @Prop()\n    autocomplete: string = 'on';\n\n    /**\n     * Sets the value of the textarea\n     */\n    @Prop({ mutable: true })\n    value: string;\n\n    @State() textareaEl: HTMLTextAreaElement;\n    @Element() el: HTMLAtTextareaElement;\n\n    /**\n     * Emits an event containing the text string when the textarea's content is changed\n     */\n    @Event()\n    atuiChange: EventEmitter<string>;\n\n    private textareaId = `textarea-${Math.random().toString(36).substring(2, 11)}`;\n\n    handleChange(event: Event): void {\n        event.stopPropagation();\n        this.value = (event.target as HTMLInputElement).value;\n\n        this.atuiChange.emit(this.value);\n    }\n\n    render() {\n        const classname = getInputClasses({\n            invalid: this.invalid,\n            disabled: this.disabled,\n            readonly: this.readonly,\n        });\n\n        return (\n            <Host>\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.required || this.info_text) && (\n                        <at-form-label\n                            label={this.label}\n                            for={this.textareaId}\n                            required={this.required && !this.readonly}\n                            info_text={this.info_text}\n                        />\n                    )}\n\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"textarea-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <div class=\"grid\">\n                    <textarea\n                        id={this.textareaId}\n                        readonly={this.readonly ? true : undefined}\n                        disabled={this.disabled ? true : undefined}\n                        required={this.required}\n                        placeholder={this.placeholder}\n                        autocomplete={this.autocomplete}\n                        autocapitalize=\"none\"\n                        onInput={(event) => {\n                            this.value = (\n                                event.target as HTMLInputElement\n                            ).value;\n                        }}\n                        onChange={(event) => this.handleChange(event)}\n                        value={this.value}\n                        ref={(el) => (this.textareaEl = el)}\n                        style={{ gridArea: '1 / 1 / 2 / 2' }}\n                        class={classname}\n                        data-name=\"textarea-input\"\n                    />\n                    <div\n                        data-name=\"textarea-resize-container\"\n                        style={{\n                            gridArea: '1 / 1 / 2 / 2',\n                            minHeight: `${this.min_rows * 1.5 + 1}rem`,\n                            maxHeight: `${this.max_rows * 1.5 + 1}rem`,\n                        }}\n                        class=\"text-body invisible rounded-sm border px-8 py-[6px] whitespace-pre-wrap\"\n                    >\n                        {this.value}\n                    </div>\n                </div>\n\n                {this.error_text && this.invalid && (\n                    <span\n                        class=\"text-error text-sm\"\n                        data-name=\"textarea-error\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n"]}