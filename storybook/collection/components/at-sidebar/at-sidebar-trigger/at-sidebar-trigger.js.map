{"version":3,"file":"at-sidebar-trigger.js","sourceRoot":"","sources":["../../../../src/components/at-sidebar/at-sidebar-trigger/at-sidebar-trigger.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAGnE;;;GAGG;AAMH,MAAM,OAAO,yBAAyB;IAJtC;QAMa,WAAM,GAAY,KAAK,CAAC;QAEjC;;WAEG;QAEH,SAAI,GAAe,IAAI,CAAC;KAoC3B;IAhCW,KAAK,CAAC,YAAY;QACtB,IAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,KAAK,UAAU,EAAE,CAAC;YACjE,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAClD,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,aAAa;QACvB,IACI,IAAI,CAAC,QAAQ;YACb,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,UAAU,EACnD,CAAC;YACC,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;YACpC,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC9B,CAAC;IACL,CAAC;IAED,KAAK,CAAC,gBAAgB;QAClB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,YAAY,CAAyB,CAAC;QACtE,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM;QACF,OAAO,CACH,kEACI,IAAI,EAAC,WAAW,EAChB,IAAI,EAAE,IAAI,CAAC,IAAI,eACL,iBAAiB,EAC3B,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EACxC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,GAC1B,CAChB,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Element, State, Prop } from '@stencil/core';\nimport { ButtonSize } from '../../at-button/at-button';\n\n/**\n * @category Navigation\n * @description A sidebar trigger component for the sidebar.\n */\n\n@Component({\n    tag: 'at-sidebar-trigger',\n    shadow: false,\n})\nexport class AtSidebarTriggerComponent {\n    @Element() el: HTMLElement;\n    @State() isOpen: boolean = false;\n\n    /**\n     * Size of the button\n     */\n    @Prop()\n    size: ButtonSize = 'lg';\n\n    private provider: HTMLAtSidebarElement;\n\n    private async updateIsOpen() {\n        if (this.provider && typeof this.provider.getIsOpen === 'function') {\n            this.isOpen = await this.provider.getIsOpen();\n        }\n    }\n\n    private async toggleSidebar(): Promise<void> {\n        if (\n            this.provider &&\n            typeof this.provider.toggleSidebar === 'function'\n        ) {\n            await this.provider.toggleSidebar();\n            await this.updateIsOpen();\n        }\n    }\n\n    async componentDidLoad() {\n        this.provider = this.el.closest('at-sidebar') as HTMLAtSidebarElement;\n        await this.updateIsOpen();\n    }\n\n    render() {\n        return (\n            <at-button\n                type=\"secondary\"\n                size={this.size}\n                data-name=\"sidebar-trigger\"\n                icon={this.isOpen ? 'menu_open' : 'menu'}\n                onClick={() => this.toggleSidebar()}\n            ></at-button>\n        );\n    }\n}\n"]}