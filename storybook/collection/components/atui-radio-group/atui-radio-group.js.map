{"version":3,"file":"atui-radio-group.js","sourceRoot":"","sources":["../../../src/components/atui-radio-group/atui-radio-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Host,\n    Event,\n    Component,\n    h,\n    Prop,\n    EventEmitter,\n    Element,\n} from '@stencil/core';\nimport { classlist } from '../../utils/classlist';\n\nconst layoutVariantsConfig = {\n    variants: {\n        layout: {\n            column: 'flex flex-col',\n            row: 'flex',\n            grid: 'grid grid-cols-3',\n        },\n    },\n};\n\nconst getLayoutClass = classlist('gap-4', layoutVariantsConfig);\n\nexport interface RadioOption {\n    option_id: string;\n    label?: string;\n    hint_text?: string;\n    disabled?: boolean;\n    readonly?: boolean;\n    group?: string;\n}\n\nexport type RadioLayout = 'column' | 'row' | 'grid';\n\n/**\n * @category Form Controls\n * @description A radio button group component for selecting a single option from a predefined list. Provides grouped validation, labeling, and accessibility features for radio button collections.\n *\n * @slot - Used to place atui-radio elements when 'options' is not set\n */\n@Component({\n    tag: 'atui-radio-group',\n    shadow: false,\n})\nexport class AtuiRadioGroup {\n    /**\n     * Label of the radio group.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Optional info icon with detailed tooltip description.\n     * Displayed at right of label.\n     */\n    @Prop()\n    info_text?: string;\n\n    /**\n     * Direction that the radio elements are placed\n     */\n    @Prop()\n    layout?: RadioLayout = 'column';\n\n    /**\n     * Disables the radio options but keeps the text readable. Use for global readonly form state.\n     */\n    @Prop()\n    disabled?: boolean;\n\n    /**\n     * Disables interaction with atui-radio elements when set\n     */\n    @Prop()\n    readonly?: boolean;\n\n    /**\n     * Adds a required * to the label\n     */\n    @Prop()\n    required?: boolean;\n\n    /**\n     * Short description or validation hint if required\n     */\n    @Prop()\n    hint_text?: string;\n\n    /**\n     * Shown when 'invalid' prop is set\n     */\n    @Prop()\n    error_text?: string;\n\n    /**\n     * Shows the error text\n     */\n    @Prop()\n    invalid: boolean;\n\n    /**\n     * Options displayed in the radio group.\n     */\n    @Prop()\n    options: RadioOption[];\n\n    /**\n     * A string containing the Id of the currently selected radio\n     */\n    @Prop() value: string;\n\n    @Element() el: HTMLAtuiRadioGroupElement;\n\n    private radioEls: HTMLAtuiRadioElement[] = [];\n\n    private radioGroupId = `radiogroup-${Math.random().toString(36).substring(2, 11)}`;\n\n    /**\n     * Emits an event when active radio element changes. `event.detail` is the ID of the active radio\n     */\n    @Event()\n    atuiChange: EventEmitter<string>;\n\n    handleChange(optionId: string): void {\n        if (this.value !== optionId) {\n            this.value = optionId;\n            this.atuiChange.emit(optionId);\n        }\n    }\n\n    focusAndClickRelativeRadio(relativePosition: number) {\n        const indexOfActiveRadio = this.radioEls.indexOf(\n            this.el.ownerDocument.activeElement as HTMLAtuiRadioElement,\n        );\n        const nextRadioEl =\n            this.radioEls[\n                (indexOfActiveRadio + relativePosition + this.radioEls.length) %\n                    this.radioEls.length\n            ];\n        nextRadioEl.click();\n        nextRadioEl.focus();\n    }\n\n    handleKeyDown(event: KeyboardEvent) {\n        switch (event.key) {\n            case 'ArrowRight':\n            case 'ArrowDown':\n                event.preventDefault();\n                this.focusAndClickRelativeRadio(1);\n                break;\n            case 'ArrowUp':\n            case 'ArrowLeft':\n                event.preventDefault();\n                this.focusAndClickRelativeRadio(-1);\n                break;\n        }\n    }\n\n    get getRadios(): any {\n        if (this.options && this.options.length > 0) {\n            return this.options.map((option) => (\n                <atui-radio\n                    label={option.label}\n                    hint_text={option.hint_text}\n                    option_id={option.option_id}\n                    readonly={this.readonly || option.readonly}\n                    disabled={this.disabled || option.disabled}\n                    value={this.value === option.option_id}\n                    onAtuiChange={(event) => {\n                        event.stopPropagation();\n                        if (!this.disabled && !this.readonly) {\n                            this.handleChange(option.option_id);\n                        }\n                    }}\n                    group={this.label || this.radioGroupId}\n                    ref={(el) => this.radioEls.push(el)}\n                />\n            ));\n        }\n    }\n\n    render() {\n        const classname = getLayoutClass({\n            layout: this.layout,\n        });\n        return (\n            <Host\n                role=\"radiogroup\"\n                onKeyDown={(event) => this.handleKeyDown(event)}\n                class=\"block w-full\"\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.required || this.info_text) && (\n                        <atui-form-label\n                            label={this.label}\n                            required={this.required}\n                            info_text={this.info_text}\n                        />\n                    )}\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"radio-group-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <ul\n                    class={classname}\n                    data-name=\"radio-group-options\"\n                >\n                    <slot />\n                    {this.getRadios &&\n                        this.getRadios.map((radio) => (\n                            <li class=\"flex\">{radio}</li>\n                        ))}\n                </ul>\n\n                {this.error_text && this.invalid && (\n                    <span\n                        class=\"text-error text-sm\"\n                        data-name=\"radio-group-error-text\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n"]}