{"version":3,"file":"at-checkbox-group.js","sourceRoot":"","sources":["../../../src/components/at-checkbox-group/at-checkbox-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    h,\n    Host,\n    Prop,\n    Element,\n    Event,\n    EventEmitter,\n    Watch,\n} from '@stencil/core';\nimport { classlist } from '../../utils/classlist';\n\nconst layoutVariantsConfig = {\n    variants: {\n        layout: {\n            column: 'flex flex-col gap-4',\n            row: 'flex',\n            grid: 'grid grid-cols-3',\n        },\n    },\n};\n\nexport interface CheckboxOptions {\n    option_id: string;\n    label?: string;\n    hint_text?: string;\n    value?: boolean;\n}\n\nexport type CheckboxLayout = 'column' | 'row' | 'grid';\n\n/**\n * ### ```interface CheckboxOptions```\n * ```\n *  id: string;\n *  label?: string;\n *  hint_text?: string;\n *  value?: boolean;\n * ```\n *\n * @category Form Controls\n * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.\n * @slot - Used to place checkboxes manually when 'options' property is not set.\n */\n@Component({\n    tag: 'at-checkbox-group',\n    shadow: false,\n})\nexport class AtCheckboxGroup {\n    /**\n     * Label of the checkbox group.\n     */\n    @Prop()\n    label?: string;\n\n    /**\n     * Info icon with detailed tooltip description. Displayed at right of label.\n     */\n    @Prop()\n    info_text?: string;\n\n    /**\n     * Hint to be placed below the label\n     */\n    @Prop()\n    hint_text?: string;\n\n    /**\n     * Displayed when the input is invalid\n     */\n    @Prop()\n    error_text?: string;\n\n    /**\n     * Disables interaction with the checkbox\n     */\n    @Prop()\n    disabled?: boolean;\n\n    /**\n     * Shows the error text\n     */\n    @Prop()\n    invalid?: boolean;\n\n    /**\n     * Adds a required * to the label\n     */\n    @Prop()\n    required?: boolean;\n\n    /**\n     * Options displayed in the checkbox group.\n     */\n    @Prop()\n    options: CheckboxOptions[];\n\n    @Watch('options')\n    updateSelected() {\n        this.options.forEach((option) => {\n            if (\n                option.value === true &&\n                !this.value.includes(option.option_id)\n            ) {\n                this.value.push(option.option_id);\n            } else if (\n                option.value === false &&\n                this.value.includes(option.option_id)\n            ) {\n                this.value = this.value.filter(\n                    (selection) => selection !== option.option_id,\n                );\n            }\n        });\n    }\n\n    /**\n     * Sets the layout of the checkbox-group\n     */\n    @Prop()\n    layout?: CheckboxLayout = 'column';\n\n    /**\n     * A list of strings, containing the Id's of the currently selected checkboxes\n     */\n    @Prop({ mutable: true })\n    value: string[] = [];\n\n    @Element() el: HTMLAtCheckboxGroupElement;\n\n    checkboxEls: HTMLAtCheckboxElement[] = [];\n\n    /**\n     * Emits an event containing the 'selected' prop when changed\n     */\n    @Event()\n    atuiChange: EventEmitter<string[]>;\n\n    private formControlSelected: string[] = null;\n\n    componentDidLoad() {\n        if (!this.getCheckBoxes) {\n            this.el\n                .querySelectorAll('at-checkbox')\n                .forEach((checkboxEl, index) => {\n                    checkboxEl.option_id = `${index}`;\n                    checkboxEl.disabled = this.disabled;\n                    checkboxEl.value = this.value.includes(`${index}`);\n                    checkboxEl.addEventListener('atuiChange', (event) =>\n                        this.handleChange(event, `${index}`),\n                    );\n                    this.checkboxEls.push(checkboxEl);\n                });\n        }\n    }\n\n    get getCheckBoxes(): any {\n        if (this.options) {\n            if (this.formControlSelected !== null) {\n                this.value = this.formControlSelected;\n                this.formControlSelected = null;\n            }\n            return this.options.map((option) => (\n                <at-checkbox\n                    option_id={option.option_id}\n                    label={option.label}\n                    hint_text={option.hint_text}\n                    value={this.value.includes(option.option_id)}\n                    disabled={this.disabled}\n                    onAtuiChange={(event) =>\n                        this.handleChange(event, option.option_id)\n                    }\n                />\n            ));\n        }\n        return '';\n    }\n\n    handleChange(event: CustomEvent, checkboxId: string) {\n        event.stopPropagation();\n        this.value = this.value.includes(checkboxId)\n            ? this.value.filter((option) => option !== checkboxId)\n            : [...this.value, checkboxId];\n        this.atuiChange.emit(this.value);\n    }\n\n    render() {\n        const getLayoutClassname = classlist('gap-4', layoutVariantsConfig);\n        const classname = getLayoutClassname({\n            layout: this.layout,\n        });\n        return (\n            <Host\n                role=\"group\"\n                aria-label={this.label}\n                aria-description={this.info_text}\n                class=\"flex w-full flex-col\"\n            >\n                <div class=\"flex flex-col\">\n                    <slot name=\"label\" />\n                    {(this.label || this.required || this.info_text) && (\n                        <at-form-label\n                            label={this.label}\n                            required={this.required}\n                            info_text={this.info_text}\n                        />\n                    )}\n                    {this.hint_text && (\n                        <span\n                            class=\"text-light mb-8 inline-block text-xs leading-tight\"\n                            data-name=\"checkbox-group-hint\"\n                        >\n                            {this.hint_text}\n                        </span>\n                    )}\n                </div>\n\n                <ul\n                    class={classname}\n                    data-name=\"checkbox-group-options\"\n                >\n                    <slot />\n                    {this.getCheckBoxes &&\n                        this.getCheckBoxes.map((checkbox) => (\n                            <li class=\"flex\">{checkbox}</li>\n                        ))}\n                </ul>\n\n                {this.error_text && this.invalid && (\n                    <span\n                        class=\"text-error text-sm\"\n                        data-name=\"checkbox-group-error-text\"\n                    >\n                        {this.error_text}\n                    </span>\n                )}\n            </Host>\n        );\n    }\n}\n\n/**\n * @category Form Controls\n * @description A checkbox group component for selecting multiple options from a predefined list. Provides grouped validation, labeling, and accessibility features for checkbox collections.\n *\n * @slot - Used to place checkboxes manually when 'options' property is not set.\n */\n"]}