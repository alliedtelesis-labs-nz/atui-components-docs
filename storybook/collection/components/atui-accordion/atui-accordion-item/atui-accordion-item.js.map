{"version":3,"file":"atui-accordion-item.js","sourceRoot":"","sources":["../../../../src/components/atui-accordion/atui-accordion-item/atui-accordion-item.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, Element, Method, h, Host } from '@stencil/core';\n\n/**\n * @category Layout\n * @description A collapsible content container component that allows users to show/hide sections of content. Supports multiple panels, animations, and programmatic control of expanded states.\n *\n * @slot trigger - Used for placing the atui-accordion-trigger for this accordion item. Only use if not using the 'label' prop on this element.\n * @slot content - Used for placing the content for this accordion item.\n */\n@Component({\n    tag: 'atui-accordion-item',\n    shadow: false,\n})\nexport class AtuiAccordionItemComponent {\n    @Element() el: HTMLElement;\n    /**\n     * Used to identify the accordion item among the other accordion items\n     */\n    @Prop() item_id!: string;\n\n    /**\n     * Provides an atui-accordion-trigger with this label if set\n     */\n    @Prop() label: string;\n\n    /**\n     * Puts a light gray separator below the accordion item\n     */\n    @Prop() border: boolean = true;\n\n    /**\n     * String content to display when the accordion is open\n     */\n    @Prop() content: string;\n\n    /**\n     * Used for setting if the accordion is open.\n     */\n    @Prop({ mutable: true }) open: boolean = false;\n\n    private accordionElement: HTMLDetailsElement;\n\n    componentDidLoad() {\n        this.accordionElement = this.el.querySelector('details');\n    }\n\n    private async handleSummaryInteraction(event: Event) {\n        if (event.type === 'click' || event.type === 'touchend') {\n            event.preventDefault();\n            if (this.open) {\n                await this.closeAccordion();\n            } else {\n                await this.openAccordion();\n            }\n        }\n    }\n\n    /**\n     * Opens this accordion item\n     */\n    @Method()\n    async openAccordion(): Promise<void> {\n        if (this.open) return;\n        this.accordionElement.open = true;\n        this.open = true;\n    }\n\n    /**\n     * Closes this accordion item\n     */\n    @Method()\n    async closeAccordion(): Promise<void> {\n        if (!this.open) return;\n        this.accordionElement.open = false;\n        this.open = false;\n    }\n\n    render() {\n        return (\n            <Host data-name={this.item_id}>\n                <details\n                    class={`group/accordion-item'}`}\n                    ref={(el) =>\n                        (this.accordionElement = el as HTMLDetailsElement)\n                    }\n                    role=\"group\"\n                >\n                    <summary\n                        id={`trigger-${this.item_id}`}\n                        role=\"button\"\n                        aria-expanded={this.open}\n                        data-state={this.open ? 'expanded' : 'collapsed'}\n                        class=\"group/accordion-item flex rounded-sm outline-0 focus-within:ring-2 focus-within:ring-active-foreground/30\"\n                        onClick={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        onTouchEnd={(event) =>\n                            this.handleSummaryInteraction(event)\n                        }\n                        aria-controls={`content-${this.item_id}`}\n                    >\n                        {this.label && (\n                            <atui-accordion-trigger\n                                label={this.label}\n                            ></atui-accordion-trigger>\n                        )}\n                        <slot name={'trigger'} />\n                    </summary>\n                    <div\n                        id={`content-${this.item_id}`}\n                        aria-labelledby={`trigger-${this.item_id}`}\n                        hidden={!this.open}\n                        data-name=\"accordion-item-content\"\n                    >\n                        {this.content && (\n                            <div class=\"flex flex-col p-16 leading-normal\">\n                                {this.content}\n                            </div>\n                        )}\n                        <slot name={'content'} />\n                    </div>\n                </details>\n            </Host>\n        );\n    }\n}\n"]}