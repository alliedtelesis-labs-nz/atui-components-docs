{"version":3,"file":"at-side-panel.js","sourceRoot":"","sources":["../../../src/components/at-side-panel/at-side-panel.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Prop,\n    h,\n    State,\n    Listen,\n    Method,\n    Element,\n    Event,\n    Host,\n    EventEmitter,\n} from '@stencil/core';\n\nexport type SidePanelDirection = 'left' | 'right';\nexport type SidePanelSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\nexport type SidePanelPosition = 'absolute' | 'fixed';\n\n/**\n * @category Overlays\n * @description A sliding side panel component for displaying secondary content or forms. Features customizable positioning, backdrop, and animation options.\n *\n * @slot - Display content within the dialog\n *\n * @dependency at-header\n * @dependency at-button\n */\n@Component({\n    tag: 'at-side-panel',\n    styleUrl: 'at-side-panel.scss',\n    scoped: true,\n})\nexport class AtSidePanelComponent {\n    @Element() el!: HTMLAtSidePanelElement;\n\n    /**\n     * Size of the size panel\n     */\n    @Prop({ reflect: true })\n    size: SidePanelSize = 'xs';\n\n    /**\n     * Title displayed in the side panel\n     */\n    @Prop()\n    panel_title: string;\n\n    /**\n     * Subtitle displayed in the side panel\n     */\n    @Prop()\n    panel_subtitle: string;\n\n    /**\n     *  Position of the side panel\n     */\n    @Prop({ reflect: true })\n    origin: SidePanelDirection = 'right';\n\n    /**\n     * Enables scroll overflow on the sidepanel container\n     */\n    @Prop({ reflect: true })\n    has_scrollbar: boolean = true;\n\n    /**\n     * Displays a close button if set\n     */\n    @Prop()\n    has_close_button: boolean = true;\n\n    /**\n     * If sidepanel should use fixed positioning (will fallback to absolute)\n     */\n    @Prop({ reflect: true })\n    position: SidePanelPosition = 'fixed';\n\n    /**\n     * Whether to show a backdrop behind the panel, prevents any interaction with background UI.\n     */\n    @Prop({ reflect: true })\n    backdrop: boolean = false;\n\n    /**\n     * Will close the sidepanel if clicked\n     */\n    @Prop({ reflect: true })\n    close_backdrop: boolean = false;\n\n    /**\n     * Target an external element to use as the trigger. When provided, clicking an element wia matching data-sidepanel value will toggle the side panel.\n     */\n    @Prop() trigger_id?: string;\n\n    @State()\n    isExpanded = false;\n\n    @State() isOpen: boolean = false;\n\n    /**\n     * Emits an event when the side panel is toggled, with `event.detail` being true if the panel is now open\n     */\n    @Event()\n    atuiSidepanelChange: EventEmitter;\n\n    private sidePanelWrapper: HTMLElement;\n    private panelDialog: HTMLDialogElement;\n    private triggerEls: HTMLElement[] = [];\n    private externalTriggerListeners: Array<{\n        element: HTMLElement;\n        event: string;\n        handler: EventListener;\n    }> = [];\n\n    /**\n     * Toggles the side panel between open and closed states\n     * @returns Promise that resolves when the panel state is toggled\n     */\n    @Method()\n    async toggleSidePanel(): Promise<void> {\n        if (this.isExpanded) {\n            await this.closeSidePanel();\n        } else {\n            await this.openSidePanel();\n        }\n    }\n\n    /**\n     * Opens the side panel\n     * @returns Promise that resolves when the panel is opened\n     */\n    @Method()\n    async openSidePanel(): Promise<void> {\n        if (this.panelDialog && !this.panelDialog.open) {\n            if (this.backdrop === true) {\n                this.panelDialog.showModal();\n            } else {\n                this.panelDialog.show();\n            }\n\n            if (this.backdrop) {\n                this.panelDialog.classList.add('backdrop');\n            }\n\n            // Use requestAnimationFrame to delay the state change and apply css\n            requestAnimationFrame(() => {\n                this.isExpanded = true;\n                this.isOpen = true;\n                this.atuiSidepanelChange.emit(this.isOpen);\n            });\n        }\n    }\n\n    /**\n     * Closes the side panel\n     * @returns Promise that resolves when the panel is closed\n     */\n    @Method()\n    async closeSidePanel(): Promise<void> {\n        if (this.panelDialog && this.panelDialog.open) {\n            this.panelDialog.close();\n            this.isExpanded = false;\n            this.isOpen = false;\n            this.atuiSidepanelChange.emit(this.isOpen);\n            this.panelDialog.classList.remove('backdrop');\n        }\n    }\n\n    /**\n     * Getter method for the open state of the side panel\n     * @returns The current open state of the side panel\n     */\n    @Method()\n    async getIsOpen(): Promise<boolean> {\n        return this.isOpen;\n    }\n\n    private handleClose = () => {\n        this.closeSidePanel();\n    };\n\n    private handleDialogClose = (event: Event) => {\n        event.preventDefault();\n        if (this.isExpanded) {\n            this.closeSidePanel();\n        }\n    };\n\n    private handleKeyDown = (event: KeyboardEvent) => {\n        if (event.key === 'Escape' && this.isExpanded) {\n            event.preventDefault();\n            this.closeSidePanel();\n        }\n    };\n\n    @Listen('mousedown', { target: 'document' })\n    offClickHandler(event: any) {\n        if (!this.close_backdrop || !this.panelDialog?.open) return;\n        if (!this.sidePanelWrapper?.contains(event.target)) {\n            this.handleClose();\n        }\n    }\n\n    async componentDidLoad() {\n        if (this.trigger_id) {\n            this.triggerEls = Array.from(\n                document.querySelectorAll(\n                    `[data-sidepanel=\"${this.trigger_id}\"]`,\n                ),\n            ) as HTMLElement[];\n\n            if (this.triggerEls.length === 0) {\n                console.warn(\n                    `at-side-panel: No elements found with data-sidepanel=\"${this.trigger_id}\"`,\n                );\n                return;\n            }\n\n            this.setupExternalTriggerListeners();\n        }\n    }\n\n    disconnectedCallback() {\n        this.cleanupExternalTriggerListeners();\n    }\n\n    private cleanupExternalTriggerListeners() {\n        this.externalTriggerListeners.forEach(({ element, event, handler }) => {\n            element.removeEventListener(event, handler);\n        });\n        this.externalTriggerListeners = [];\n    }\n\n    private setupExternalTriggerListeners() {\n        if (!this.triggerEls || this.triggerEls.length === 0) return;\n\n        const clickHandler = async (event: Event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            await this.toggleSidePanel();\n        };\n\n        const keydownHandler = async (event: KeyboardEvent) => {\n            switch (event.key) {\n                case 'Enter':\n                case ' ':\n                    event.preventDefault();\n                    await this.toggleSidePanel();\n                    break;\n            }\n        };\n\n        this.triggerEls.forEach((el) => {\n            el.addEventListener('click', clickHandler);\n            el.addEventListener('keydown', keydownHandler);\n            this.externalTriggerListeners.push(\n                { element: el, event: 'click', handler: clickHandler },\n                { element: el, event: 'keydown', handler: keydownHandler },\n            );\n        });\n    }\n\n    render() {\n        return (\n            <Host data-open={this.isOpen}>\n                <dialog\n                    ref={(el) => (this.panelDialog = el)}\n                    class={`${this.backdrop ? 'backdrop' : ''}`}\n                    onClose={this.handleDialogClose}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    <div\n                        data-scrollable={this.has_scrollbar}\n                        data-open={this.isOpen}\n                        class={`container origin-${this.origin} size-${this.size} size-${this.size} position-${this.position}`}\n                        ref={(el) => (this.sidePanelWrapper = el)}\n                        data-name=\"container\"\n                    >\n                        <div\n                            class=\"header\"\n                            data-name=\"header\"\n                        >\n                            <at-header\n                                header_title={this.panel_title}\n                                subtitle={this.panel_subtitle}\n                            >\n                                {this.has_close_button && (\n                                    <at-button\n                                        slot={'actions'}\n                                        size=\"md\"\n                                        icon=\"close\"\n                                        data-name=\"panel-close\"\n                                        onClick={this.handleClose}\n                                    />\n                                )}\n                            </at-header>\n                        </div>\n\n                        <div\n                            data-name=\"content\"\n                            class=\"content\"\n                        >\n                            <slot />\n                        </div>\n                    </div>\n                </dialog>\n            </Host>\n        );\n    }\n}\n"]}