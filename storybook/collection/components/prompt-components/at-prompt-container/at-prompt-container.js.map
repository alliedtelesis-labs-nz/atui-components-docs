{"version":3,"file":"at-prompt-container.js","sourceRoot":"","sources":["../../../../src/components/prompt-components/at-prompt-container/at-prompt-container.tsx"],"names":[],"mappings":"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":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    State,\n    Listen,\n    Method,\n    Element,\n} from '@stencil/core';\nimport type { PromptMessage, MessageRole } from '../../../types/prompt';\nimport { fetchTranslations } from '../../../utils/translation';\n\n/**\n * @category Prompt\n * @description A complete conversational interface container that combines a message thread, input field, and header. Provides a full-featured chat experience with message management, threading, and customizable UI elements.\n * @slot prompt-container-header - Custom content displayed above the message thread\n * @slot prompt-container-footer - Custom content displayed below the message input\n */\n@Component({\n    tag: 'at-prompt-container',\n    shadow: false,\n})\nexport class AtPromptContainer {\n    @Element() el: HTMLElement;\n\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop({ mutable: true }) messages: PromptMessage[] = [];\n\n    /**\n     * Title displayed in the header section\n     */\n    @Prop() header_title: string = 'AI Assistant';\n\n    /**\n     * Subtitle displayed below the title in the header\n     */\n    @Prop() subtitle: string;\n\n    /**\n     * Placeholder text for the input field\n     */\n    @Prop() placeholder: string = 'Type your message here...';\n\n    /**\n     * Error text displayed when invalid is set via max length\n     */\n    @Prop()\n    error_text: string;\n\n    /**\n     * Shows loading state and disables input\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Disables all interactions with the container\n     */\n    @Prop() disabled: boolean = false;\n\n    /**\n     * Controls visibility of the header section\n     */\n    @Prop() show_header: boolean = true;\n\n    /**\n     * Controls visibility of the \"New Thread\" button in the header\n     */\n    @Prop() show_new_thread_button: boolean = true;\n\n    /**\n     * Maximum character length for input messages\n     */\n    @Prop() max_message_length: number = 2000;\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    @State() currentInput: string = '';\n    @State() inputInvalid: boolean = false;\n    @State() inputError: string = '';\n    @State() isSendEnabled: boolean = true;\n    @State() translations: any = {};\n\n    /**\n     * Emits when a message should be sent\n     */\n    @Event()\n    atSubmit: EventEmitter<string>;\n\n    /**\n     * Emits when the stop button is clicked\n     */\n    @Event()\n    atStop: EventEmitter<void>;\n\n    /**\n     * Emitted when the \"New Thread\" button is clicked\n     */\n    @Event() atNewThread: EventEmitter<void>;\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    private inputComponent: HTMLAtPromptInputElement;\n\n    async componentWillLoad() {\n        this.translations = await fetchTranslations(this.el);\n    }\n\n    @Listen('atuiSubmit')\n    handleInputSubmit(event: CustomEvent<string>) {\n        const content = event.detail.trim();\n        if (content && this.isSendEnabled && !this.disabled && !this.loading) {\n            this.handleSubmit(content);\n        }\n    }\n\n    @Listen('atuiMessageCopy')\n    handleMessageCopy(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageCopy.emit(event.detail);\n    }\n\n    @Listen('atuiMessageRetry')\n    handleMessageRetry(event: CustomEvent<{ messageId: string }>) {\n        this.atMessageRetry.emit(event.detail);\n    }\n\n    @Listen('atuiMessageEdit')\n    async handleMessageEdit(\n        event: CustomEvent<{ messageId: string; content: string }>,\n    ) {\n        this.atMessageEdit.emit(event.detail);\n        if (this.inputComponent) {\n            this.inputComponent.value = event.detail.content;\n            await this.focusInput();\n        }\n    }\n\n    @Listen('atuiMessageVote')\n    handleMessageVote(\n        event: CustomEvent<{ messageId: string; score: number }>,\n    ) {\n        event.stopPropagation();\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                vote_status: event.detail.score,\n            };\n            this.messages = updatedMessages;\n        }\n    }\n\n    /**\n     * Programmatically add a message to the conversation thread\n     * @param role - The message role\n     * @param content - The message content\n     */\n    @Method()\n    async addMessage(role: MessageRole, content: string): Promise<void> {\n        const message: PromptMessage = {\n            id: Date.now().toString(),\n            role,\n            content,\n        };\n        this.messages = [...this.messages, message];\n    }\n\n    /**\n     * Append content to the last message in the thread (useful for streaming responses)\n     * @param content - The content to append\n     * @returns Promise<boolean> - Returns true if successful, false if no messages exist or last message is not from assistant\n     */\n    @Method()\n    async appendToLastMessage(content: string): Promise<boolean> {\n        if (this.messages.length === 0) return false;\n\n        const lastMessage = this.messages[this.messages.length - 1];\n        if (lastMessage.role !== 'assistant') return false;\n\n        lastMessage.content += content;\n        this.messages = [...this.messages];\n        return true;\n    }\n\n    /**\n     * Start a new conversation thread by clearing all messages and resetting state\n     */\n    @Method()\n    async newThread(): Promise<void> {\n        this.messages = [];\n        this.currentInput = '';\n        this.isSendEnabled = true;\n        this.atNewThread.emit();\n        setTimeout(() => this.focusInput(), 100);\n    }\n\n    /**\n     * Control the send button state programmatically\n     * @param enabled - Whether the send functionality should be enabled\n     */\n    @Method()\n    async setSendEnabled(enabled: boolean): Promise<void> {\n        this.isSendEnabled = enabled;\n    }\n\n    /**\n     * Programmatically focus the input field\n     */\n    @Method()\n    async focusInput(): Promise<void> {\n        if (this.inputComponent) {\n            setTimeout(() => {\n                this.inputComponent.focus();\n            }, 0);\n        }\n    }\n\n    private handleSubmit = async (content: string) => {\n        if (!content || this.disabled || this.loading || !this.isSendEnabled) {\n            return;\n        }\n\n        this.isSendEnabled = false;\n\n        await this.addMessage('user', content);\n        this.atSubmit.emit(content);\n    };\n\n    private handleStop = () => {\n        this.atStop.emit();\n    };\n\n    private handleNewThread = async () => {\n        await this.newThread();\n    };\n\n    private renderHeader() {\n        if (!this.show_header) return null;\n\n        const newThreadText =\n            this.translations?.ATUI?.PROMPT?.NEW_THREAD || 'New Thread';\n\n        return (\n            <at-header\n                size=\"h3\"\n                header_title={this.header_title}\n                subtitle={this.subtitle}\n                border={true}\n                data-name=\"prompt-container-header\"\n            >\n                {this.show_new_thread_button && (\n                    <at-button\n                        slot=\"actions\"\n                        size=\"sm\"\n                        type=\"secondaryText\"\n                        onClick={this.handleNewThread}\n                        disabled={this.loading}\n                        data-name=\"new-thread-button\"\n                    >\n                        {newThreadText}\n                    </at-button>\n                )}\n            </at-header>\n        );\n    }\n\n    private renderFooter() {\n        return (\n            <div class=\"p-4\">\n                <at-prompt-input\n                    ref={(el) => (this.inputComponent = el)}\n                    placeholder={this.placeholder}\n                    in_progress={this.loading}\n                    max_length={this.max_message_length}\n                    error_text={this.error_text}\n                    data-name=\"prompt-container-input\"\n                    onAtSubmit={(event) => this.handleSubmit(event.detail)}\n                    onAtStop={() => this.handleStop()}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Host\n                class=\"flex h-full w-full flex-col overflow-hidden\"\n                data-name=\"prompt-container\"\n            >\n                {this.renderHeader()}\n                <slot name=\"prompt-container-header\" />\n                <div\n                    class=\"min-h-0 flex-1\"\n                    data-name=\"thread-wrapper\"\n                >\n                    <at-prompt-thread\n                        messages={this.messages}\n                        loading={this.loading}\n                        auto_scroll={true}\n                        enable_vote={this.enable_vote}\n                        enable_copy={this.enable_copy}\n                        enable_edit={this.enable_edit}\n                        data-name=\"container-thread\"\n                    />\n                </div>\n                <div class=\"flex flex-col gap-4\">\n                    {this.renderFooter()}\n                    <slot name=\"prompt-container-footer\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"]}