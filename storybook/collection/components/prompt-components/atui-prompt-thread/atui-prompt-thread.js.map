{"version":3,"file":"atui-prompt-thread.js","sourceRoot":"","sources":["../../../../src/components/prompt-components/atui-prompt-thread/atui-prompt-thread.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    Host,\n    h,\n    Prop,\n    Event,\n    EventEmitter,\n    Listen,\n    Method,\n} from '@stencil/core';\nimport { PromptMessage } from '../../../types';\nimport { VoteStatus } from '../atui-prompt-message/atui-prompt-message';\n\n/**\n * @category Prompt\n * @description A message thread component for displaying user and chatbot messages in a conversation format. Supports auto-scrolling, empty states, loading indicators, and message interaction events.\n * @slot thread-empty-state - Content is placed within the empty state wrapper. Used for placing custom empty state content.\n * @slot thread-messages - Content is placed within the messages wrapper. Used for placing custom messages content.\n */\n@Component({\n    tag: 'atui-prompt-thread',\n    shadow: false,\n})\nexport class AtuiPromptThread {\n    /**\n     * Array of messages to display in the conversation thread\n     */\n    @Prop() messages: PromptMessage[] = [];\n\n    /**\n     * Shows a loading indicator for incoming messages\n     */\n    @Prop() loading: boolean = false;\n\n    /**\n     * Automatically scroll to the bottom when new messages are added\n     */\n    @Prop() auto_scroll: boolean = true;\n\n    /**\n     * Display name for chatbot/assistant messages\n     */\n    @Prop() chatbot_title: string = 'Assistant';\n\n    /**\n     * Display voting actions for assistant messages\n     */\n    @Prop() enable_vote: boolean = true;\n\n    /**\n     * Display copy action for assistant messages\n     */\n    @Prop() enable_copy: boolean = true;\n\n    /**\n     * Display edit action for user messages\n     */\n    @Prop() enable_edit: boolean = false;\n\n    /**\n     * Emitted when a message copy action is requested\n     */\n    @Event() atuiMessageCopy: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message retry action is requested\n     */\n    @Event() atuiMessageRetry: EventEmitter<{ messageId: string }>;\n\n    /**\n     * Emitted when a message edit action is requested\n     */\n    @Event() atuiMessageEdit: EventEmitter<{\n        messageId: string;\n        content: string;\n    }>;\n\n    /**\n     * Emitted when a message vote action is requested\n     */\n    @Event() atuiMessageVote: EventEmitter<{\n        messageId: string;\n        score: number;\n    }>;\n\n    /**\n     * @slot messages - Custom message content (alternative to using the messages prop)\n     */\n\n    private scrollContainer: HTMLElement;\n\n    componentDidUpdate() {\n        if (this.auto_scroll && this.scrollContainer) {\n            this.scrollToBottom();\n        }\n    }\n\n    /**\n     * Scrolls the thread to the bottom with smooth animation\n     */\n    @Method()\n    async scrollToBottom(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            requestAnimationFrame(() => {\n                if (this.scrollContainer) {\n                    this.scrollContainer.scrollTo({\n                        top: this.scrollContainer.scrollHeight,\n                        behavior: 'smooth',\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Scrolls the last user message to the top of the viewport\n     */\n    @Method()\n    async scrollLastMessageToTop(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            requestAnimationFrame(() => {\n                if (!this.scrollContainer) {\n                    resolve();\n                    return;\n                }\n\n                const userMessages =\n                    this.scrollContainer.querySelectorAll('[data-role=\"user\"]');\n                if (!userMessages.length) {\n                    resolve();\n                    return;\n                }\n\n                const lastUserMessage = userMessages[\n                    userMessages.length - 1\n                ] as HTMLElement;\n                lastUserMessage.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start',\n                });\n                resolve();\n            });\n        });\n    }\n\n    @Listen('atuiVote')\n    handleVote(event: CustomEvent<{ messageId: string; score: number }>) {\n        event.stopPropagation();\n\n        const messageIndex = this.messages.findIndex(\n            (msg) => msg.id === event.detail.messageId,\n        );\n        if (messageIndex !== -1) {\n            const updatedMessages = [...this.messages];\n            updatedMessages[messageIndex] = {\n                ...updatedMessages[messageIndex],\n                vote_status: event.detail.score,\n            };\n            this.messages = updatedMessages;\n\n            this.atuiMessageVote.emit(event.detail);\n        }\n    }\n\n    @Listen('atuiCopy')\n    handleMessageCopy(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageCopy.emit({\n                messageId: this.messages[messageIndex].id,\n                content: event.detail,\n            });\n        }\n    }\n\n    @Listen('atuiRetry')\n    handleMessageRetry(event: CustomEvent<void>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageRetry.emit({\n                messageId: this.messages[messageIndex].id,\n            });\n        }\n    }\n\n    @Listen('atuiEdit')\n    handleMessageEdit(event: CustomEvent<string>) {\n        const messageIndex = this.getMessageIndexFromEvent(event);\n        if (messageIndex !== -1) {\n            this.atuiMessageEdit.emit({\n                messageId: this.messages[messageIndex].id,\n                content: event.detail,\n            });\n        }\n    }\n\n    private getMessageIndexFromEvent(event: CustomEvent): number {\n        const target = event.target as HTMLElement;\n        const messageContainer = target.closest(\n            '[data-message-index]',\n        ) as HTMLElement;\n        return messageContainer\n            ? parseInt(messageContainer.dataset.messageIndex || '-1', 10)\n            : -1;\n    }\n\n    private renderLoadingIndicator() {\n        if (!this.loading) return null;\n\n        return (\n            <div\n                class=\"flex flex-col gap-16\"\n                data-name=\"loading-container\"\n            >\n                <atui-prompt-message\n                    role=\"assistant\"\n                    content=\"Typing...\"\n                    name={this.chatbot_title}\n                    loading={true}\n                    data-name=\"loading-message\"\n                />\n            </div>\n        );\n    }\n\n    private renderMessage(message: PromptMessage, index: number) {\n        const role = message.role === 'system' ? 'assistant' : message.role;\n        const name =\n            message.role === 'user'\n                ? message.name\n                : message.name || this.chatbot_title;\n\n        return (\n            <atui-prompt-message\n                role={role}\n                content={message.content}\n                name={name}\n                loading={message.loading}\n                error={message.error}\n                error_message={message.error_message}\n                vote_status={message.vote_status || VoteStatus.None}\n                message_id={message.id}\n                enable_vote={this.enable_vote}\n                enable_copy={this.enable_copy}\n                enable_edit={this.enable_edit}\n                data-name={`message-${index}`}\n                data-message-index={index}\n            />\n        );\n    }\n\n    private renderMessages() {\n        return this.messages.map((message, index) =>\n            this.renderMessage(message, index),\n        );\n    }\n\n    render() {\n        const hasMessages = this.messages && this.messages.length > 0;\n\n        return (\n            <Host\n                class=\"block h-full\"\n                data-name=\"thread-container\"\n            >\n                <div\n                    class=\"flex h-full flex-col gap-16 overflow-y-auto scroll-smooth\"\n                    ref={(el) => (this.scrollContainer = el)}\n                    data-name=\"scroll-container\"\n                >\n                    {!hasMessages ? (\n                        <slot name=\"thread-empty-state\" />\n                    ) : (\n                        <div\n                            data-name=\"thread-messages-container\"\n                            class=\"flex flex-col gap-16\"\n                        >\n                            {this.renderMessages()}\n                            {this.renderLoadingIndicator()}\n                        </div>\n                    )}\n                    <slot name=\"thread-messages\" />\n                </div>\n            </Host>\n        );\n    }\n}\n"]}