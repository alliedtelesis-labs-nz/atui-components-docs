{"version":3,"file":"at-tab-content.js","sourceRoot":"","sources":["../../../../src/components/at-tab-selector/at-tab-content/at-tab-content.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAEnE;;;GAGG;AAMH,MAAM,OAAO,YAAY;IAJzB;QAYI;;WAEG;QACsB,cAAS,GAAY,KAAK,CAAC;QAE3C,aAAQ,GAAY,KAAK,CAAC;QAkCnC,sBAAiB,GAAG,CAAC,KAAY,EAAE,EAAE;YACjC,MAAM,aAAa,GAAI,KAAqB,CAAC,MAAM,CAAC;YACpD,IAAI,CAAC,QAAQ,GAAG,aAAa,KAAK,IAAI,CAAC,MAAM,CAAC;QAClD,CAAC,CAAC;KAgBL;IAjDG,iBAAiB;QACb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,gBAAgB;QAClB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAEtD,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;YACxD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC5B,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAC7B,YAAY,EACZ,IAAI,CAAC,iBAAiB,CACzB,CAAC;QACN,CAAC;IACL,CAAC;IAED,oBAAoB;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAChC,cAAc,EACd,IAAI,CAAC,iBAAiB,CACzB,CAAC;QACN,CAAC;IACL,CAAC;IAED,WAAW,CAAC,EAAU;QAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,KAAK,IAAI,CAAC,MAAM,CAAC;IACvC,CAAC;IAOD,MAAM;QACF,OAAO,CACH,4DACI,KAAK,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,QAAQ,EAAE,EACtD,IAAI,EAAC,UAAU,EACf,EAAE,EAAE,SAAS,IAAI,CAAC,MAAM,EAAE,qBACT,OAAO,IAAI,CAAC,MAAM,EAAE,EACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBACnB,CAAC,IAAI,CAAC,QAAQ;YAE3B,8DAAQ,CACN,CACT,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACJ","sourcesContent":["import { Component, h, Prop, State, Element } from '@stencil/core';\n\n/**\n * @category Navigation\n * @description A tab content component for the tab selector.\n */\n\n@Component({\n    tag: 'at-tab-content',\n    shadow: false,\n})\nexport class AtTabContent {\n    @Element() el: HTMLElement;\n\n    /**\n     * ID of the tab\n     */\n    @Prop() tab_id: string;\n\n    /**\n     * Determines if the tab content is active\n     */\n    @Prop({ reflect: true }) is_active: boolean = false;\n\n    @State() isActive: boolean = false;\n\n    private tabSelector: HTMLAtTabSelectorElement;\n\n    componentWillLoad() {\n        this.isActive = this.is_active;\n    }\n\n    async componentDidLoad() {\n        this.tabSelector = this.el.closest('at-tab-selector');\n\n        if (this.tabSelector) {\n            const activeTab = await this.tabSelector.getActiveTab();\n            this.setIsActive(activeTab);\n            this.tabSelector.addEventListener(\n                'atuiChange',\n                this.updateActiveState,\n            );\n        }\n    }\n\n    disconnectedCallback() {\n        if (this.tabSelector) {\n            this.tabSelector.removeEventListener(\n                'atuiChangeId',\n                this.updateActiveState,\n            );\n        }\n    }\n\n    setIsActive(id: string) {\n        this.isActive = id === this.tab_id;\n    }\n\n    updateActiveState = (event: Event) => {\n        const selectedTabId = (event as CustomEvent).detail;\n        this.isActive = selectedTabId === this.tab_id;\n    };\n\n    render() {\n        return (\n            <div\n                class={`${this.isActive ? 'flex flex-col' : 'hidden'}`}\n                role=\"tabpanel\"\n                id={`panel-${this.tab_id}`}\n                aria-labelledby={`tab-${this.tab_id}`}\n                tabIndex={this.isActive ? 0 : -1}\n                aria-hidden={!this.isActive}\n            >\n                <slot />\n            </div>\n        );\n    }\n}\n"]}